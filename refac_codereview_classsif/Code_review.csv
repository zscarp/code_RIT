id,url,subject,description,Category,,,,,,
openstack%2Frally~master~I9da0124d5a644fccb6e6253951321a61ec973b03,https://review.opendev.org/240219,Refactoring log utils,Refactoring log utils  * Moved log functions from rally/common/utils.py #L137-L234 to rally/common/log.y * Moved test tunctions form test/unit/common/test_utils.py to test/unit/common/test_log.py  Change-Id: I9da0124d5a644fccb6e6253951321a61ec973b03,testing,,,,,,
openstack%2Frally~master~I9da0124d5a644fccb6e6253951321a61ec973b03,https://review.opendev.org/240219,Refactoring log utils,Refactoring log utils  * Moved log functions from rally/common/utils.py #L137-L234 to rally/common/log.y * Moved test tunctions form test/unit/common/test_utils.py to test/unit/common/test_log.py  Change-Id: I9da0124d5a644fccb6e6253951321a61ec973b03,objective,,,,,,
zuul%2Fzuul~master~Icbe206db6bcbaaf78a3d89997f382c02079116c0,https://review.opendev.org/223063,(WIP) Refactor for better connection testing,(WIP) Refactor for better connection testing  * Assign configured fake connections to test class dynamically  * Generalize event queue handling in tests  * Pass upstream_root to fake gerrit explicitly  * Don't pass fake_gerrit to FakeURLOpener  Change-Id: Icbe206db6bcbaaf78a3d89997f382c02079116c0,testing,,,,,,
zuul%2Fzuul~master~Icbe206db6bcbaaf78a3d89997f382c02079116c0,https://review.opendev.org/223063,(WIP) Refactor for better connection testing,(WIP) Refactor for better connection testing  * Assign configured fake connections to test class dynamically  * Generalize event queue handling in tests  * Pass upstream_root to fake gerrit explicitly  * Don't pass fake_gerrit to FakeURLOpener  Change-Id: Icbe206db6bcbaaf78a3d89997f382c02079116c0,objective,,,,,,
openstack%2Fhorizon~master~I5d2272a0abb521ddb9b1df215d45655a9049d0e0,https://review.opendev.org/142839,Refactor project instance test,Refactor project instance test  Refactoring the test_launch_instance_post test as suggested in review for bug 1260436. There are four distinct other users of test_launch_instance_post apart from the test itself.  Creating a new method _test_launch_instance_post and ensuring test_launch_instance_post now invokes this method with the default and only required parameters. Other tests also incoke the new method with parameters specific to them.  Closes bug: #1403948  Change-Id: I5d2272a0abb521ddb9b1df215d45655a9049d0e0,testing,,,,,,
openstack%2Fhorizon~master~I5d2272a0abb521ddb9b1df215d45655a9049d0e0,https://review.opendev.org/142839,Refactor project instance test,Refactor project instance test  Refactoring the test_launch_instance_post test as suggested in review for bug 1260436. There are four distinct other users of test_launch_instance_post apart from the test itself.  Creating a new method _test_launch_instance_post and ensuring test_launch_instance_post now invokes this method with the default and only required parameters. Other tests also incoke the new method with parameters specific to them.  Closes bug: #1403948  Change-Id: I5d2272a0abb521ddb9b1df215d45655a9049d0e0,objective,,,,,,
openstack%2Ffuel-qa~master~Iedca3581bb1f9e0607a26afefd44a89a668fde99,https://review.opendev.org/209007,refactoring nova ha system tests to use neutron network manager,refactoring nova ha system tests to use neutron network manager  *Changed nova-network-manager to neutron-tun on next test cases:  - Add and re-add cinder / compute + cinder to HA cluster  - Add compute node to cluster in HA mode with flat nova-network  - Check HA mode on scalability  - Backup/restore master node with cluster in ha mode  - Optimize code by change repetable code to functions  * Move neutron_tun cases to new file * Move neutron_public_network cases to new file  Change-Id: Iedca3581bb1f9e0607a26afefd44a89a668fde99 Related-Bug:#1478787,testing,,,,,,
openstack%2Ffuel-qa~master~Iedca3581bb1f9e0607a26afefd44a89a668fde99,https://review.opendev.org/209007,refactoring nova ha system tests to use neutron network manager,refactoring nova ha system tests to use neutron network manager  *Changed nova-network-manager to neutron-tun on next test cases:  - Add and re-add cinder / compute + cinder to HA cluster  - Add compute node to cluster in HA mode with flat nova-network  - Check HA mode on scalability  - Backup/restore master node with cluster in ha mode  - Optimize code by change repetable code to functions  * Move neutron_tun cases to new file * Move neutron_public_network cases to new file  Change-Id: Iedca3581bb1f9e0607a26afefd44a89a668fde99 Related-Bug:#1478787,objective,,,,,,
openstack%2Ffuel-qa~master~Iedca3581bb1f9e0607a26afefd44a89a668fde99,https://review.opendev.org/209007,refactoring nova ha system tests to use neutron network manager,refactoring nova ha system tests to use neutron network manager  *Changed nova-network-manager to neutron-tun on next test cases:  - Add and re-add cinder / compute + cinder to HA cluster  - Add compute node to cluster in HA mode with flat nova-network  - Check HA mode on scalability  - Backup/restore master node with cluster in ha mode  - Optimize code by change repetable code to functions  * Move neutron_tun cases to new file * Move neutron_public_network cases to new file  Change-Id: Iedca3581bb1f9e0607a26afefd44a89a668fde99 Related-Bug:#1478787,quality,,,,,,
openstack%2Fglance~master~I202010c7695fcf4b8e81d6dd4eb3ae42af08d958,https://review.opendev.org/87020,Refactoring test on test_api,Refactoring test on test_api  Addition of function get_request_object_data() to remove the repeating lines in many methods. The refactoring is partially done because it affects more than 500 lines of code (mostly deletion of code lines). There are still other aspects remaining to refactor it more.  This bug is an action item to track the review comment for  https://review.openstack.org/#/c/64079/4 raised by Steve Kowalik.  Change-Id: I202010c7695fcf4b8e81d6dd4eb3ae42af08d958 Partial-bug: #1264639,testing,,,,,,
openstack%2Fglance~master~I202010c7695fcf4b8e81d6dd4eb3ae42af08d958,https://review.opendev.org/87020,Refactoring test on test_api,Refactoring test on test_api  Addition of function get_request_object_data() to remove the repeating lines in many methods. The refactoring is partially done because it affects more than 500 lines of code (mostly deletion of code lines). There are still other aspects remaining to refactor it more.  This bug is an action item to track the review comment for  https://review.openstack.org/#/c/64079/4 raised by Steve Kowalik.  Change-Id: I202010c7695fcf4b8e81d6dd4eb3ae42af08d958 Partial-bug: #1264639,objective,,,,,,
openstack%2Fglance~master~I202010c7695fcf4b8e81d6dd4eb3ae42af08d958,https://review.opendev.org/87020,Refactoring test on test_api,Refactoring test on test_api  Addition of function get_request_object_data() to remove the repeating lines in many methods. The refactoring is partially done because it affects more than 500 lines of code (mostly deletion of code lines). There are still other aspects remaining to refactor it more.  This bug is an action item to track the review comment for  https://review.openstack.org/#/c/64079/4 raised by Steve Kowalik.  Change-Id: I202010c7695fcf4b8e81d6dd4eb3ae42af08d958 Partial-bug: #1264639,objective,,,,,,
openstack%2Fglance~master~I202010c7695fcf4b8e81d6dd4eb3ae42af08d958,https://review.opendev.org/87020,Refactoring test on test_api,Refactoring test on test_api  Addition of function get_request_object_data() to remove the repeating lines in many methods. The refactoring is partially done because it affects more than 500 lines of code (mostly deletion of code lines). There are still other aspects remaining to refactor it more.  This bug is an action item to track the review comment for  https://review.openstack.org/#/c/64079/4 raised by Steve Kowalik.  Change-Id: I202010c7695fcf4b8e81d6dd4eb3ae42af08d958 Partial-bug: #1264639,quality,,,,,,
openstack%2Fcinder~stable%2Fkilo~I8aa9f756efb0b4fc4a3a0ea960c6f2d8e20ec18a,https://review.opendev.org/187663,Targets test refactoring,"Targets test refactoring  The unit tests for iser inherit from the tgtAdm, it means that any time run tests for iser, tgtAdm tests run too. This chache add TargetFixture to tests, it allows to decouple tests and delete duplicated code.  Other changes:  -  deleted  __init__ in test's classes; __init__ may work as a replacement for setUp, but  setUp should be used instead because it is part of the protocol for writing tests. It also has a counterpart, tearDown, which __init__ does no;  - replaced stubs to mock.  Change-Id: I8aa9f756efb0b4fc4a3a0ea960c6f2d8e20ec18a Closes-Bug: #1420009 (cherry picked from commit bdd0ff6c685855a47034cdfa0cdfa50a4d153a1d)",testing,,,,,,
openstack%2Fcinder~stable%2Fkilo~I8aa9f756efb0b4fc4a3a0ea960c6f2d8e20ec18a,https://review.opendev.org/187663,Targets test refactoring,"Targets test refactoring  The unit tests for iser inherit from the tgtAdm, it means that any time run tests for iser, tgtAdm tests run too. This chache add TargetFixture to tests, it allows to decouple tests and delete duplicated code.  Other changes:  -  deleted  __init__ in test's classes; __init__ may work as a replacement for setUp, but  setUp should be used instead because it is part of the protocol for writing tests. It also has a counterpart, tearDown, which __init__ does no;  - replaced stubs to mock.  Change-Id: I8aa9f756efb0b4fc4a3a0ea960c6f2d8e20ec18a Closes-Bug: #1420009 (cherry picked from commit bdd0ff6c685855a47034cdfa0cdfa50a4d153a1d)",quality,,,,,,
openstack%2Fcinder~stable%2Fkilo~I8aa9f756efb0b4fc4a3a0ea960c6f2d8e20ec18a,https://review.opendev.org/187663,Targets test refactoring,"Targets test refactoring  The unit tests for iser inherit from the tgtAdm, it means that any time run tests for iser, tgtAdm tests run too. This chache add TargetFixture to tests, it allows to decouple tests and delete duplicated code.  Other changes:  -  deleted  __init__ in test's classes; __init__ may work as a replacement for setUp, but  setUp should be used instead because it is part of the protocol for writing tests. It also has a counterpart, tearDown, which __init__ does no;  - replaced stubs to mock.  Change-Id: I8aa9f756efb0b4fc4a3a0ea960c6f2d8e20ec18a Closes-Bug: #1420009 (cherry picked from commit bdd0ff6c685855a47034cdfa0cdfa50a4d153a1d)",objective,,,,,,
openstack%2Fnova~master~I94ecc5e2fe6808c6bfbe5eb144ac66359b997e3d,https://review.opendev.org/163363,refactored test in xenapi/test_vm_utils to pass wiith random PYTHOHASHSEED,refactored test in xenapi/test_vm_utils to pass wiith random PYTHOHASHSEED  added ordering before assertion Partial-Bug: #1348818  Change-Id: I94ecc5e2fe6808c6bfbe5eb144ac66359b997e3d,testing,,,,,,
openstack%2Fnova~master~I94ecc5e2fe6808c6bfbe5eb144ac66359b997e3d,https://review.opendev.org/163363,refactored test in xenapi/test_vm_utils to pass wiith random PYTHOHASHSEED,refactored test in xenapi/test_vm_utils to pass wiith random PYTHOHASHSEED  added ordering before assertion Partial-Bug: #1348818  Change-Id: I94ecc5e2fe6808c6bfbe5eb144ac66359b997e3d,objective,,,,,,
openstack%2Fnova~master~I7666e5189f7876feed7f7524ae10949e1d14fbde,https://review.opendev.org/163355,refactored test in test_cloud to pass with random PYTHONHASHSEED,refactored test in test_cloud to pass with random PYTHONHASHSEED  sort lists in dictionaries before assertions Partial-Bug: #1348818  Change-Id: I7666e5189f7876feed7f7524ae10949e1d14fbde,testing,,,,,,
openstack%2Fnova~master~I7666e5189f7876feed7f7524ae10949e1d14fbde,https://review.opendev.org/163355,refactored test in test_cloud to pass with random PYTHONHASHSEED,refactored test in test_cloud to pass with random PYTHONHASHSEED  sort lists in dictionaries before assertions Partial-Bug: #1348818  Change-Id: I7666e5189f7876feed7f7524ae10949e1d14fbde,objective,,,,,,
openstack%2Fnova~master~I63a4f9c54d442167f929261cebce9baf23ad708a,https://review.opendev.org/161314,refactored test in test_trusted_filters to pass with random PYTHONHASHSEED,refactored test in test_trusted_filters to pass with random PYTHONHASHSEED  changed assertion of trusted_filter  mock _request method arguments  Partial-Bug: #1348818  Change-Id: I63a4f9c54d442167f929261cebce9baf23ad708a,testing,,,,,,
openstack%2Fnova~master~I63a4f9c54d442167f929261cebce9baf23ad708a,https://review.opendev.org/161314,refactored test in test_trusted_filters to pass with random PYTHONHASHSEED,refactored test in test_trusted_filters to pass with random PYTHONHASHSEED  changed assertion of trusted_filter  mock _request method arguments  Partial-Bug: #1348818  Change-Id: I63a4f9c54d442167f929261cebce9baf23ad708a,objective,,,,,,
openstack%2Fkeystone~master~Ibbfeb1c035eccf25e4e62577ae7887822cd58254,https://review.opendev.org/162196,Refactor Fernet: drop timestamps and move payload version into payload,"Refactor Fernet: drop timestamps and move payload version into payload  This is a squashed commit consisting of the following changes:  - https://review.openstack.org/#/c/161838/ - https://review.openstack.org/#/c/161855/ - https://review.openstack.org/#/c/161876/ - https://review.openstack.org/#/c/161774/ - https://review.openstack.org/#/c/161897/ - https://review.openstack.org/#/c/162031/  Net summary of changes:  - Remove token formatters dependency on 'token_data', the v3 token data   helper, and the trust_api. The calling module already has to interface   with all these modules and understand how token_data is composed, so   there's no reason for the token formatters create() method to work   with such complex data. This patch ensures that token formatters only   see primitive strings (of datetimes, audit IDs, and trust IDs) when   creating tokens, which they're free to encode however they wish.  - The handling of audit_ids is simplified (they're not mutated any more   than strictly necessary).  - This removes the expiration timestamp embedded in Fernet tokens in   favor of using key rotation to tune the lifespan of Fernet tokens.  - This removes the creation timestamp from the token's payload in favor   of extracting the token's creation timestamp from the Fernet token   format itself.  - This moves the payload version (part of the plaintext token prefix)   into the integrity verified portion of the token (the payload). This   also drops the 'F', which doesn't serve a purpose with Fernet tokens   as it does with token formats that can be validated offline (PKI,   PKIZ). This requires a bunch of refactoring to move the responsibility   of decrypting, unpacking, and disassembling the payload contents to   the caller (the Provider).  - Add a domain-scoped payload format, identical to that for   project-scoped tokens, just with a different version number. Better   functional tests revealed that tests intended to exercise   domain-scoped Fernet tokens, which didn't exist, should not have been   passing.  - Remove remaining functional tests from the unit test suite   (test_fernet_provider), and ensure that same coverage exists in the   actual functional test suite (test_v3_auth). Several of the unit tests   required heavy refactoring due to the refactoring required to support   the first item above, so it was easier just to dump those tests in   favor of better functional test coverage, which are agnostic to the   implementation details.  Change-Id: Ibbfeb1c035eccf25e4e62577ae7887822cd58254 Closes-Bug: 1427485 Closes-Bug: 1428949 Closes-Bug: 1428829 Closes-Bug: 1428708",testing,,,,,,
openstack%2Fkeystone~master~Ibbfeb1c035eccf25e4e62577ae7887822cd58254,https://review.opendev.org/162196,Refactor Fernet: drop timestamps and move payload version into payload,"Refactor Fernet: drop timestamps and move payload version into payload  This is a squashed commit consisting of the following changes:  - https://review.openstack.org/#/c/161838/ - https://review.openstack.org/#/c/161855/ - https://review.openstack.org/#/c/161876/ - https://review.openstack.org/#/c/161774/ - https://review.openstack.org/#/c/161897/ - https://review.openstack.org/#/c/162031/  Net summary of changes:  - Remove token formatters dependency on 'token_data', the v3 token data   helper, and the trust_api. The calling module already has to interface   with all these modules and understand how token_data is composed, so   there's no reason for the token formatters create() method to work   with such complex data. This patch ensures that token formatters only   see primitive strings (of datetimes, audit IDs, and trust IDs) when   creating tokens, which they're free to encode however they wish.  - The handling of audit_ids is simplified (they're not mutated any more   than strictly necessary).  - This removes the expiration timestamp embedded in Fernet tokens in   favor of using key rotation to tune the lifespan of Fernet tokens.  - This removes the creation timestamp from the token's payload in favor   of extracting the token's creation timestamp from the Fernet token   format itself.  - This moves the payload version (part of the plaintext token prefix)   into the integrity verified portion of the token (the payload). This   also drops the 'F', which doesn't serve a purpose with Fernet tokens   as it does with token formats that can be validated offline (PKI,   PKIZ). This requires a bunch of refactoring to move the responsibility   of decrypting, unpacking, and disassembling the payload contents to   the caller (the Provider).  - Add a domain-scoped payload format, identical to that for   project-scoped tokens, just with a different version number. Better   functional tests revealed that tests intended to exercise   domain-scoped Fernet tokens, which didn't exist, should not have been   passing.  - Remove remaining functional tests from the unit test suite   (test_fernet_provider), and ensure that same coverage exists in the   actual functional test suite (test_v3_auth). Several of the unit tests   required heavy refactoring due to the refactoring required to support   the first item above, so it was easier just to dump those tests in   favor of better functional test coverage, which are agnostic to the   implementation details.  Change-Id: Ibbfeb1c035eccf25e4e62577ae7887822cd58254 Closes-Bug: 1427485 Closes-Bug: 1428949 Closes-Bug: 1428829 Closes-Bug: 1428708",quality,,,,,,
openstack%2Fkeystone~master~Ibbfeb1c035eccf25e4e62577ae7887822cd58254,https://review.opendev.org/162196,Refactor Fernet: drop timestamps and move payload version into payload,"Refactor Fernet: drop timestamps and move payload version into payload  This is a squashed commit consisting of the following changes:  - https://review.openstack.org/#/c/161838/ - https://review.openstack.org/#/c/161855/ - https://review.openstack.org/#/c/161876/ - https://review.openstack.org/#/c/161774/ - https://review.openstack.org/#/c/161897/ - https://review.openstack.org/#/c/162031/  Net summary of changes:  - Remove token formatters dependency on 'token_data', the v3 token data   helper, and the trust_api. The calling module already has to interface   with all these modules and understand how token_data is composed, so   there's no reason for the token formatters create() method to work   with such complex data. This patch ensures that token formatters only   see primitive strings (of datetimes, audit IDs, and trust IDs) when   creating tokens, which they're free to encode however they wish.  - The handling of audit_ids is simplified (they're not mutated any more   than strictly necessary).  - This removes the expiration timestamp embedded in Fernet tokens in   favor of using key rotation to tune the lifespan of Fernet tokens.  - This removes the creation timestamp from the token's payload in favor   of extracting the token's creation timestamp from the Fernet token   format itself.  - This moves the payload version (part of the plaintext token prefix)   into the integrity verified portion of the token (the payload). This   also drops the 'F', which doesn't serve a purpose with Fernet tokens   as it does with token formats that can be validated offline (PKI,   PKIZ). This requires a bunch of refactoring to move the responsibility   of decrypting, unpacking, and disassembling the payload contents to   the caller (the Provider).  - Add a domain-scoped payload format, identical to that for   project-scoped tokens, just with a different version number. Better   functional tests revealed that tests intended to exercise   domain-scoped Fernet tokens, which didn't exist, should not have been   passing.  - Remove remaining functional tests from the unit test suite   (test_fernet_provider), and ensure that same coverage exists in the   actual functional test suite (test_v3_auth). Several of the unit tests   required heavy refactoring due to the refactoring required to support   the first item above, so it was easier just to dump those tests in   favor of better functional test coverage, which are agnostic to the   implementation details.  Change-Id: Ibbfeb1c035eccf25e4e62577ae7887822cd58254 Closes-Bug: 1427485 Closes-Bug: 1428949 Closes-Bug: 1428829 Closes-Bug: 1428708",objective,,,,,,
openstack%2Fhorizon~master~I1f1054d963101298d9e4f3e0b9c6f8df0d29227d,https://review.opendev.org/159224,Refactoring the rest tests and their tooling,"Refactoring the rest tests and their tooling  There will be a need for session and role information in these test as the code and tests get more complicated. I don't feel, at this point, there is a need for a new test case class for these tests.  Also, the utils in the api_tests directory is really confusing. So, rolled that into the base test class in helpers.py  Change-Id: I1f1054d963101298d9e4f3e0b9c6f8df0d29227d",testing,,,,,,
openstack%2Fhorizon~master~I1f1054d963101298d9e4f3e0b9c6f8df0d29227d,https://review.opendev.org/159224,Refactoring the rest tests and their tooling,"Refactoring the rest tests and their tooling  There will be a need for session and role information in these test as the code and tests get more complicated. I don't feel, at this point, there is a need for a new test case class for these tests.  Also, the utils in the api_tests directory is really confusing. So, rolled that into the base test class in helpers.py  Change-Id: I1f1054d963101298d9e4f3e0b9c6f8df0d29227d",objective,,,,,,
openstack%2Fhorizon~master~I1f1054d963101298d9e4f3e0b9c6f8df0d29227d,https://review.opendev.org/159224,Refactoring the rest tests and their tooling,"Refactoring the rest tests and their tooling  There will be a need for session and role information in these test as the code and tests get more complicated. I don't feel, at this point, there is a need for a new test case class for these tests.  Also, the utils in the api_tests directory is really confusing. So, rolled that into the base test class in helpers.py  Change-Id: I1f1054d963101298d9e4f3e0b9c6f8df0d29227d",quality,,,,,,
openstack%2Fneutron~master~I0a9063d8a233d48a3ed59e4f70b47cb5fb4d41f9,https://review.opendev.org/153785,Refactor RootHelperProcess with AsyncProcess,"Refactor RootHelperProcess with AsyncProcess  * move RootHelperProcess from functional test to common lib so we can re-use in another cases outside of functional test, i.e. sanity test * RootHelperProcess and AsyncProcess have similar functions so I merge all functions of RootHelperProcess to AsyncProcess. * add optional param wait_cmd_start (default to False) for AsyncProcess to wait for the command of the child process to start executing before it can return to main process (and wait for the result asynchronous)  Change-Id: I0a9063d8a233d48a3ed59e4f70b47cb5fb4d41f9",testing,,,,,,
openstack%2Fneutron~master~I0a9063d8a233d48a3ed59e4f70b47cb5fb4d41f9,https://review.opendev.org/153785,Refactor RootHelperProcess with AsyncProcess,"Refactor RootHelperProcess with AsyncProcess  * move RootHelperProcess from functional test to common lib so we can re-use in another cases outside of functional test, i.e. sanity test * RootHelperProcess and AsyncProcess have similar functions so I merge all functions of RootHelperProcess to AsyncProcess. * add optional param wait_cmd_start (default to False) for AsyncProcess to wait for the command of the child process to start executing before it can return to main process (and wait for the result asynchronous)  Change-Id: I0a9063d8a233d48a3ed59e4f70b47cb5fb4d41f9",objective,,,,,,
openstack%2Fneutron~master~I0a9063d8a233d48a3ed59e4f70b47cb5fb4d41f9,https://review.opendev.org/153785,Refactor RootHelperProcess with AsyncProcess,"Refactor RootHelperProcess with AsyncProcess  * move RootHelperProcess from functional test to common lib so we can re-use in another cases outside of functional test, i.e. sanity test * RootHelperProcess and AsyncProcess have similar functions so I merge all functions of RootHelperProcess to AsyncProcess. * add optional param wait_cmd_start (default to False) for AsyncProcess to wait for the command of the child process to start executing before it can return to main process (and wait for the result asynchronous)  Change-Id: I0a9063d8a233d48a3ed59e4f70b47cb5fb4d41f9",quality,,,,,,
openstack%2Fneutron~master~I0a9063d8a233d48a3ed59e4f70b47cb5fb4d41f9,https://review.opendev.org/153785,Refactor RootHelperProcess with AsyncProcess,"Refactor RootHelperProcess with AsyncProcess  * move RootHelperProcess from functional test to common lib so we can re-use in another cases outside of functional test, i.e. sanity test * RootHelperProcess and AsyncProcess have similar functions so I merge all functions of RootHelperProcess to AsyncProcess. * add optional param wait_cmd_start (default to False) for AsyncProcess to wait for the command of the child process to start executing before it can return to main process (and wait for the result asynchronous)  Change-Id: I0a9063d8a233d48a3ed59e4f70b47cb5fb4d41f9",objective,,,,,,
openstack%2Fneutron~master~I64ba630997841b2dddc4535fdd464bc15dd38b77,https://review.opendev.org/122560,Refactor unit test helpers to return objects,"WIP: Refactor unit test helpers to return objects  Make the return value from the port, network, and subnet creation methods in the unit tests return something with helper methods to manage the lifecycle of each item more concisely.  Refactors the tests in test_db_plugin to leverage these new objects.  Change-Id: I64ba630997841b2dddc4535fdd464bc15dd38b77",testing,,,,,,
openstack%2Fneutron~master~I64ba630997841b2dddc4535fdd464bc15dd38b77,https://review.opendev.org/122560,Refactor unit test helpers to return objects,"WIP: Refactor unit test helpers to return objects  Make the return value from the port, network, and subnet creation methods in the unit tests return something with helper methods to manage the lifecycle of each item more concisely.  Refactors the tests in test_db_plugin to leverage these new objects.  Change-Id: I64ba630997841b2dddc4535fdd464bc15dd38b77",objective,,,,,,
openstack%2Fnova~master~I5a12324e3e20def222842545f8b0fb488a363b4c,https://review.opendev.org/89634,Xenapi: refactor _find_vdi_refs and lookup_vm_vdis,"Xenapi: refactor _find_vdi_refs and lookup_vm_vdis  The two functions look to be doing the same thing and we really don't need two implementations.  This change works to remove the lookup_vm_vdis implementation, but keep it's name.  Test cases are adjusted to handle passing dictionary instead or list.  Change-Id: I5a12324e3e20def222842545f8b0fb488a363b4c Closes-bug: 1311197",testing,,,,,,
openstack%2Fnova~master~I5a12324e3e20def222842545f8b0fb488a363b4c,https://review.opendev.org/89634,Xenapi: refactor _find_vdi_refs and lookup_vm_vdis,"Xenapi: refactor _find_vdi_refs and lookup_vm_vdis  The two functions look to be doing the same thing and we really don't need two implementations.  This change works to remove the lookup_vm_vdis implementation, but keep it's name.  Test cases are adjusted to handle passing dictionary instead or list.  Change-Id: I5a12324e3e20def222842545f8b0fb488a363b4c Closes-bug: 1311197",objective,,,,,,
openstack%2Fnova~master~I4072295497627549e3e78a03a420d47b18156d6c,https://review.opendev.org/123552,Refactoring some libvirt tests to use mock,Refactoring some libvirt tests to use mock  Test Case: nova.tests.virt.libvirt.test_driver.LibvirtConnTestCase  Tests: test_hard_reboot test_resume test_finish_migration_power_on test_finish_migration_power_off test_finish_revert_migration_after_crash test_finish_revert_migration_after_crash_before_backup test_finish_revert_migration_after_crash_delete_failed  Partial-Bug 1370590  Change-Id: I4072295497627549e3e78a03a420d47b18156d6c,testing,,,,,,
openstack%2Ftempest~master~I8be2f4bec5eb4cdf0efcbbd26ce090501b8e8c30,https://review.opendev.org/106916,Sample of refactoring test code for a retargetable client,"Sample of refactoring test code for a retargetable client  The goal is to move the following out of tests into the client: 1. validation 2. serialize/deserialize 3. resource management using addCleanUp  The client will return an object as an attribute dict so members can be access with instance variable syntax.  This change allows an abstract definition of the client interface which will allow decoupling of ""where the tests live"" and ""what client is used"". Clients might be a tempest client, official client, or direct API calls to a project.  Change-Id: I8be2f4bec5eb4cdf0efcbbd26ce090501b8e8c30",testing,,,,,,
openstack%2Ftempest~master~I8be2f4bec5eb4cdf0efcbbd26ce090501b8e8c30,https://review.opendev.org/106916,Sample of refactoring test code for a retargetable client,"Sample of refactoring test code for a retargetable client  The goal is to move the following out of tests into the client: 1. validation 2. serialize/deserialize 3. resource management using addCleanUp  The client will return an object as an attribute dict so members can be access with instance variable syntax.  This change allows an abstract definition of the client interface which will allow decoupling of ""where the tests live"" and ""what client is used"". Clients might be a tempest client, official client, or direct API calls to a project.  Change-Id: I8be2f4bec5eb4cdf0efcbbd26ce090501b8e8c30",objective,,,,,,
openstack%2Ftempest~master~I8be2f4bec5eb4cdf0efcbbd26ce090501b8e8c30,https://review.opendev.org/106916,Sample of refactoring test code for a retargetable client,"Sample of refactoring test code for a retargetable client  The goal is to move the following out of tests into the client: 1. validation 2. serialize/deserialize 3. resource management using addCleanUp  The client will return an object as an attribute dict so members can be access with instance variable syntax.  This change allows an abstract definition of the client interface which will allow decoupling of ""where the tests live"" and ""what client is used"". Clients might be a tempest client, official client, or direct API calls to a project.  Change-Id: I8be2f4bec5eb4cdf0efcbbd26ce090501b8e8c30",quality,,,,,,
openstack%2Fcongress~master~I3dea8f576fcdba1a881b071264d5f300f86dcd15,https://review.opendev.org/530154,WIP: refactor glance tempest test,WIP: refactor glance tempest test  To make checking of data table against service data more reusable.  Change-Id: I3dea8f576fcdba1a881b071264d5f300f86dcd15,testing,,,,,,
openstack%2Fcongress~master~I3dea8f576fcdba1a881b071264d5f300f86dcd15,https://review.opendev.org/530154,WIP: refactor glance tempest test,WIP: refactor glance tempest test  To make checking of data table against service data more reusable.  Change-Id: I3dea8f576fcdba1a881b071264d5f300f86dcd15,quality,,,,,,
openstack%2Fnova~master~I4717709bd21f386d43664fc08facb8b92b37070b,https://review.opendev.org/119012,Refactor test cases of test_floating_ip_dnsto simple code,Refactor test cases of test_floating_ip_dnsto simple code  This is some preparation works to make sharing unittests between V2.1 and V2 easier.  Change-Id: I4717709bd21f386d43664fc08facb8b92b37070b,testing,,,,,,
openstack%2Fnova~master~I4717709bd21f386d43664fc08facb8b92b37070b,https://review.opendev.org/119012,Refactor test cases of test_floating_ip_dnsto simple code,Refactor test cases of test_floating_ip_dnsto simple code  This is some preparation works to make sharing unittests between V2.1 and V2 easier.  Change-Id: I4717709bd21f386d43664fc08facb8b92b37070b,objective,,,,,,
opendev%2Fyaml2ical~master~I99a70736574f20634e25ed0600be7d0ef990e7fb,https://review.opendev.org/97038,Refactor Schedule class,"Refactor Schedule class  Instead of having a list of Schedule objects in every Meeting object, lets just keep the dictionary that we get from parsing the YAML file and store that in an attribute of the Meeting object. Added test for validating datetime, and mocked out the datetime module.  Change-Id: I99a70736574f20634e25ed0600be7d0ef990e7fb",testing,,,,,,
opendev%2Fyaml2ical~master~I99a70736574f20634e25ed0600be7d0ef990e7fb,https://review.opendev.org/97038,Refactor Schedule class,"Refactor Schedule class  Instead of having a list of Schedule objects in every Meeting object, lets just keep the dictionary that we get from parsing the YAML file and store that in an attribute of the Meeting object. Added test for validating datetime, and mocked out the datetime module.  Change-Id: I99a70736574f20634e25ed0600be7d0ef990e7fb",objective,,,,,,
opendev%2Fsystem-config~master~Iade29ef5c1b3979e6497c7ddd6ef407adbcdb4cd,https://review.opendev.org/108411,Refactoring Trove gates jobs,Refactoring Trove gates jobs  Reasons:  - All Trove gate jobs should be moved under job-groups    to allocation all possible future modifications aroung on trove.yaml  Changes:  - implementing two groups job groups:    - gate-trove-functional-dsvm-test-group -- covers non-heat and heat      test jobs templates for different datastores;    - gate-trove-buildimage-group -- covers image publishing jobs for datastores  Change-Id: Iade29ef5c1b3979e6497c7ddd6ef407adbcdb4cd,testing,,,,,,
opendev%2Fsystem-config~master~Iade29ef5c1b3979e6497c7ddd6ef407adbcdb4cd,https://review.opendev.org/108411,Refactoring Trove gates jobs,Refactoring Trove gates jobs  Reasons:  - All Trove gate jobs should be moved under job-groups    to allocation all possible future modifications aroung on trove.yaml  Changes:  - implementing two groups job groups:    - gate-trove-functional-dsvm-test-group -- covers non-heat and heat      test jobs templates for different datastores;    - gate-trove-buildimage-group -- covers image publishing jobs for datastores  Change-Id: Iade29ef5c1b3979e6497c7ddd6ef407adbcdb4cd,objective,,,,,,
openstack%2Fglance~master~I1852bf63f78b2d078126a939e30aabc996eede89,https://review.opendev.org/92193,Refactoring test on test_api,Refactoring test on test_api  Addition of function get_request_object_data() to remove the repeating lines in many methods.  recheck bug 1307344  This bug is an action item to track the review comment for https://review.openstack.org/#/c/64079/4 raised by Steve Kowalik.  Change-Id: I1852bf63f78b2d078126a939e30aabc996eede89 Partial-bug: #1264639,testing,,,,,,
openstack%2Fglance~master~I1852bf63f78b2d078126a939e30aabc996eede89,https://review.opendev.org/92193,Refactoring test on test_api,Refactoring test on test_api  Addition of function get_request_object_data() to remove the repeating lines in many methods.  recheck bug 1307344  This bug is an action item to track the review comment for https://review.openstack.org/#/c/64079/4 raised by Steve Kowalik.  Change-Id: I1852bf63f78b2d078126a939e30aabc996eede89 Partial-bug: #1264639,quality,,,,,,
openstack%2Fglance~master~Ia09f8132b12338badf07daf025830f2b1b1f96ee,https://review.opendev.org/92218,Refactoring test on test_api,Refactoring test on test_api  Addition of function get_response_object_data() to remove the repeating lines in many methods.The code had some spaces which got automatically added.The spaces have been removed  recheck bug 1307344  This bug is an action item to track the review comment for https://review.openstack.org/#/c/64079/4 raised by Steve Kowalik.  Change-Id: Ia09f8132b12338badf07daf025830f2b1b1f96ee Partial-bug: #1264639,testing,,,,,,
openstack%2Fglance~master~Ia09f8132b12338badf07daf025830f2b1b1f96ee,https://review.opendev.org/92218,Refactoring test on test_api,Refactoring test on test_api  Addition of function get_response_object_data() to remove the repeating lines in many methods.The code had some spaces which got automatically added.The spaces have been removed  recheck bug 1307344  This bug is an action item to track the review comment for https://review.openstack.org/#/c/64079/4 raised by Steve Kowalik.  Change-Id: Ia09f8132b12338badf07daf025830f2b1b1f96ee Partial-bug: #1264639,quality,,,,,,
openstack%2Ftempest~master~I36cb64f326025fd29bdbb72b2e4130fb89326ad7,https://review.opendev.org/92651,refactor out code duplication,refactor out code duplication  pull out the duplication of setup that was in all the test functions and put it in setup instead.  Change-Id: I36cb64f326025fd29bdbb72b2e4130fb89326ad7,testing,,,,,,
openstack%2Ftempest~master~I36cb64f326025fd29bdbb72b2e4130fb89326ad7,https://review.opendev.org/92651,refactor out code duplication,refactor out code duplication  pull out the duplication of setup that was in all the test functions and put it in setup instead.  Change-Id: I36cb64f326025fd29bdbb72b2e4130fb89326ad7,quality,,,,,,
osf%2Frefstack~master~I711fe828e129eeff4ce823242d175719890df8f5,https://review.opendev.org/81667,Refactor to use docker build-then-run logic.,"Refactor to use docker build-then-run logic.  Dockerfile should be built once, and run many times. This means that docker config should be passed in with ENV variables, following principles in 12 factors. Have refactored web interface to ALSO run tests using ENV, and added a kick.py script to run the docker w/o the web app.  Cherry pick of basic docker build-then-run logic.  Change-Id: Ib0a925f1f666e01e4805c47788a628e42ccb433d  Confirm that they've sourced credentials  Change-Id: Ib007ecb179c48f0dfc64d11fe720b801762c5690  Cherry-picked change to use env in all docker test runs  Change-Id: Ia88122d43ec7e073eb73406cd2ef346571ced60a  Make test execution use env variables and not argparse.  Change-Id: I0d25345cfb59997a2efba8f58a616d56d81fcab3  Kick.py needs the app context  Change-Id: I711fe828e129eeff4ce823242d175719890df8f5",testing,,,,,,
osf%2Frefstack~master~I711fe828e129eeff4ce823242d175719890df8f5,https://review.opendev.org/81667,Refactor to use docker build-then-run logic.,"Refactor to use docker build-then-run logic.  Dockerfile should be built once, and run many times. This means that docker config should be passed in with ENV variables, following principles in 12 factors. Have refactored web interface to ALSO run tests using ENV, and added a kick.py script to run the docker w/o the web app.  Cherry pick of basic docker build-then-run logic.  Change-Id: Ib0a925f1f666e01e4805c47788a628e42ccb433d  Confirm that they've sourced credentials  Change-Id: Ib007ecb179c48f0dfc64d11fe720b801762c5690  Cherry-picked change to use env in all docker test runs  Change-Id: Ia88122d43ec7e073eb73406cd2ef346571ced60a  Make test execution use env variables and not argparse.  Change-Id: I0d25345cfb59997a2efba8f58a616d56d81fcab3  Kick.py needs the app context  Change-Id: I711fe828e129eeff4ce823242d175719890df8f5",objective,,,,,,
jjb%2Fjenkins-job-builder~master~I6810973b4bed915886541307572c307fccc6997e,https://review.opendev.org/70563,Implements: Refactor of YamlParser.parse method,Implements: Refactor of YamlParser.parse method  I am proposing this change to allow the use case where the parse method can handle dynamically generated strings in addition to files.  The yaml.load() method can handle both strings and file handles. The current implementation of the YamlParser.parse method excludes strings. By removing the open() call in the the yaml.load method and moving it to the Buider.load_files method the YamlParser can support a broader set of use cases.  The test driver needed to be updated as well since it was loading files directly.  Change-Id: I6810973b4bed915886541307572c307fccc6997e,testing,,,,,,
jjb%2Fjenkins-job-builder~master~I6810973b4bed915886541307572c307fccc6997e,https://review.opendev.org/70563,Implements: Refactor of YamlParser.parse method,Implements: Refactor of YamlParser.parse method  I am proposing this change to allow the use case where the parse method can handle dynamically generated strings in addition to files.  The yaml.load() method can handle both strings and file handles. The current implementation of the YamlParser.parse method excludes strings. By removing the open() call in the the yaml.load method and moving it to the Buider.load_files method the YamlParser can support a broader set of use cases.  The test driver needed to be updated as well since it was loading files directly.  Change-Id: I6810973b4bed915886541307572c307fccc6997e,objective,,,,,,
airship%2Fairshipctl~master~I44acd3b581199acb4d1e816ff5026892215942b1,https://review.opendev.org/722684,Refactor proxy configuration,Refactor proxy configuration  Moved out proxy variables from roles into zuul.d/projects.yaml instead. This way it can be controlled from a centralized place.  Also added the proxy variable for local test scripts in to config_template.yaml.  Change-Id: I44acd3b581199acb4d1e816ff5026892215942b1,testing,,,,,,
airship%2Fairshipctl~master~I44acd3b581199acb4d1e816ff5026892215942b1,https://review.opendev.org/722684,Refactor proxy configuration,Refactor proxy configuration  Moved out proxy variables from roles into zuul.d/projects.yaml instead. This way it can be controlled from a centralized place.  Also added the proxy variable for local test scripts in to config_template.yaml.  Change-Id: I44acd3b581199acb4d1e816ff5026892215942b1,objective,,,,,,
airship%2Fairshipctl~master~I44acd3b581199acb4d1e816ff5026892215942b1,https://review.opendev.org/722684,Refactor proxy configuration,Refactor proxy configuration  Moved out proxy variables from roles into zuul.d/projects.yaml instead. This way it can be controlled from a centralized place.  Also added the proxy variable for local test scripts in to config_template.yaml.  Change-Id: I44acd3b581199acb4d1e816ff5026892215942b1,quality,,,,,,
x%2Fbilean~master~I0abfe4ae484fca9809be6a3210ff29af639bdace,https://review.opendev.org/636946,Refactor code to apply openstacksdk changes,Refactor code to apply openstacksdk changes  Since some changes appears on openstacksdk this project facing some unit test errors:  - openstack sdk profile remove - openstack sdk execptions changes  This commit try to follow these changes  Change-Id: I0abfe4ae484fca9809be6a3210ff29af639bdace,testing,,,,,,
x%2Fbilean~master~I0abfe4ae484fca9809be6a3210ff29af639bdace,https://review.opendev.org/636946,Refactor code to apply openstacksdk changes,Refactor code to apply openstacksdk changes  Since some changes appears on openstacksdk this project facing some unit test errors:  - openstack sdk profile remove - openstack sdk execptions changes  This commit try to follow these changes  Change-Id: I0abfe4ae484fca9809be6a3210ff29af639bdace,objective,,,,,,
openstack%2Ftaskflow~master~I493d7d1b09fd3cae1da3dcde76b707915d498a45,https://review.opendev.org/69169,Refactor tox-tmpl.ini,"Refactor tox-tmpl.ini  - drop unneeded '*-nosa' test envs; - move common sql deps to [testenv] section - instead of python-specific axes for SQLAlchemy, introduce new   axis -- mysql -- which defines which MySQL driver should be used   for testing.  Change-Id: I493d7d1b09fd3cae1da3dcde76b707915d498a45",integration,,,,,,
openstack%2Ftaskflow~master~I493d7d1b09fd3cae1da3dcde76b707915d498a45,https://review.opendev.org/69169,Refactor tox-tmpl.ini,"Refactor tox-tmpl.ini  - drop unneeded '*-nosa' test envs; - move common sql deps to [testenv] section - instead of python-specific axes for SQLAlchemy, introduce new   axis -- mysql -- which defines which MySQL driver should be used   for testing.  Change-Id: I493d7d1b09fd3cae1da3dcde76b707915d498a45",objective,,,,,,
openstack%2Ftempest~master~I51e7884fd24ae3d09889203691d43ab23f4d9ecf,https://review.opendev.org/59898,Refactors network scenario test to support more network tests,Refactors network scenario test to support more network tests  1. Adds a base network scenario test class. 2. Makes the network scenario basic test inherit from base class. 3. Moves the network scenario tests to network package.  Change-Id: I51e7884fd24ae3d09889203691d43ab23f4d9ecf,testing,,,,,,
openstack%2Ftempest~master~I51e7884fd24ae3d09889203691d43ab23f4d9ecf,https://review.opendev.org/59898,Refactors network scenario test to support more network tests,Refactors network scenario test to support more network tests  1. Adds a base network scenario test class. 2. Makes the network scenario basic test inherit from base class. 3. Moves the network scenario tests to network package.  Change-Id: I51e7884fd24ae3d09889203691d43ab23f4d9ecf,objective,,,,,,
openstack%2Ftempest~master~I33850b67d22e1acac208d2007854bddb05cbc94d,https://review.opendev.org/62838,Refactor FloatingIPCheckTracker in basic network scenario test,Refactor FloatingIPCheckTracker in basic network scenario test  Move floating IP check to base class manager.NetworkScenarioTest. Do the floating IP check as soon as the floating IP created to server.  Change-Id: I33850b67d22e1acac208d2007854bddb05cbc94d,testing,,,,,,
openstack%2Ftempest~master~I33850b67d22e1acac208d2007854bddb05cbc94d,https://review.opendev.org/62838,Refactor FloatingIPCheckTracker in basic network scenario test,Refactor FloatingIPCheckTracker in basic network scenario test  Move floating IP check to base class manager.NetworkScenarioTest. Do the floating IP check as soon as the floating IP created to server.  Change-Id: I33850b67d22e1acac208d2007854bddb05cbc94d,objective,,,,,,
openstack%2Fironic~master~Ibe4ac3dcef430cdafca3d4785ae5fc45fd4b7751,https://review.opendev.org/62639,Refactored access to RequestContext,Refactored access to RequestContext.  RequestContext is passed all over the internal api and it's only used in few places in oslo code and some ironic drivers. I've refactored access to context to make it directly available using: ironic.common.context.get_current_context() function This allows us to remove context parameter from everywhere.  Review process suggestions: 1) ironic/common/context.py - This file provides basic functionality and you need to check it to get the main idea 2) ironic/api/hooks.py - This is a entry point that publishes context for all public API requests 3) ironic/conductor/manager.py - Entry point that publishes context for internal tasks run by scheduler 4) Review all other files. In most files we just remove context from parameters. In test files we fix mock assertions and setUp to publish context manually  Change-Id: Ibe4ac3dcef430cdafca3d4785ae5fc45fd4b7751,testing,,,,,,
openstack%2Fironic~master~Ibe4ac3dcef430cdafca3d4785ae5fc45fd4b7751,https://review.opendev.org/62639,Refactored access to RequestContext,Refactored access to RequestContext.  RequestContext is passed all over the internal api and it's only used in few places in oslo code and some ironic drivers. I've refactored access to context to make it directly available using: ironic.common.context.get_current_context() function This allows us to remove context parameter from everywhere.  Review process suggestions: 1) ironic/common/context.py - This file provides basic functionality and you need to check it to get the main idea 2) ironic/api/hooks.py - This is a entry point that publishes context for all public API requests 3) ironic/conductor/manager.py - Entry point that publishes context for internal tasks run by scheduler 4) Review all other files. In most files we just remove context from parameters. In test files we fix mock assertions and setUp to publish context manually  Change-Id: Ibe4ac3dcef430cdafca3d4785ae5fc45fd4b7751,objective,,,,,,
openstack%2Ftempest~master~I03988777be3f3a7ac363eb6d28c5d8dde866a259,https://review.opendev.org/58718,Refactors network test in scenario to support advanced network test,Refactors network test in scenario to support advanced network test  1. Adds VM connectivity check test between VMs in the same subnet. 2. Adds VM connectivity check test after VM resized.  Change-Id: I03988777be3f3a7ac363eb6d28c5d8dde866a259,testing,,,,,,
openstack%2Ftempest~master~I03988777be3f3a7ac363eb6d28c5d8dde866a259,https://review.opendev.org/58718,Refactors network test in scenario to support advanced network test,Refactors network test in scenario to support advanced network test  1. Adds VM connectivity check test between VMs in the same subnet. 2. Adds VM connectivity check test after VM resized.  Change-Id: I03988777be3f3a7ac363eb6d28c5d8dde866a259,objective,,,,,,
stackforge-attic%2Fmurano-repository~master~I5290b017257fcaa9528de7f5475293784e89b0db,https://review.opendev.org/52611,Refactoring api and Archiver,Refactoring api and Archiver  test commit  Change-Id: I5290b017257fcaa9528de7f5475293784e89b0db,testing,,,,,,
stackforge-attic%2Fmurano-repository~master~I5290b017257fcaa9528de7f5475293784e89b0db,https://review.opendev.org/52611,Refactoring api and Archiver,Refactoring api and Archiver  test commit  Change-Id: I5290b017257fcaa9528de7f5475293784e89b0db,integration,,,,,,
openstack%2Fneutron~master~Ic65790cbb2ce9b9518770de39453195c143ef171,https://review.opendev.org/44780,Refactor test_agent_scheduler,"Refactor test_agent_scheduler  Unit test for l3 agent scheduler and dhcp agent scheduler should be seperated because:  - they are two different extensions, logically, they should be separated - currently nvp doesn't support both of them, future plugin may not   support both of them too (at least in the development process, it can   happen)  Closes-Bug: #1220005 Change-Id: Ic65790cbb2ce9b9518770de39453195c143ef171",testing,,,,,,
openstack%2Fneutron~master~Ic65790cbb2ce9b9518770de39453195c143ef171,https://review.opendev.org/44780,Refactor test_agent_scheduler,"Refactor test_agent_scheduler  Unit test for l3 agent scheduler and dhcp agent scheduler should be seperated because:  - they are two different extensions, logically, they should be separated - currently nvp doesn't support both of them, future plugin may not   support both of them too (at least in the development process, it can   happen)  Closes-Bug: #1220005 Change-Id: Ic65790cbb2ce9b9518770de39453195c143ef171",objective,,,,,,
openstack%2Fnova~master~Id898a317b2651e700344ddf37c4d74c5a72f32bd,https://review.opendev.org/34930,Refactor test_network_info for gateway tests,Refactor test_network_info  * Refactor test helper so it's easier to add a new variant to be tested * Change tests order so it's easier to see all possible combos  Change-Id: Id898a317b2651e700344ddf37c4d74c5a72f32bd,testing,,,,,,
openstack%2Fnova~master~Id898a317b2651e700344ddf37c4d74c5a72f32bd,https://review.opendev.org/34930,Refactor test_network_info for gateway tests,Refactor test_network_info  * Refactor test helper so it's easier to add a new variant to be tested * Change tests order so it's easier to see all possible combos  Change-Id: Id898a317b2651e700344ddf37c4d74c5a72f32bd,quality,,,,,,
openstack%2Fnova~master~I276ef7d4933a5b73c9df2a0b9787a46f6f2ac096,https://review.opendev.org/39496,xenapi: Refactor common image download library,"Refactor image download  Refactor and test nova/virt/images.py, so that we can reuse the code with the xenapi driver.  Related to blueprint xenapi-supported-image-import-export  Change-Id: I276ef7d4933a5b73c9df2a0b9787a46f6f2ac096",testing,,,,,,
openstack%2Fnova~master~I276ef7d4933a5b73c9df2a0b9787a46f6f2ac096,https://review.opendev.org/39496,xenapi: Refactor common image download library,"Refactor image download  Refactor and test nova/virt/images.py, so that we can reuse the code with the xenapi driver.  Related to blueprint xenapi-supported-image-import-export  Change-Id: I276ef7d4933a5b73c9df2a0b9787a46f6f2ac096",quality,,,,,,
openstack%2Fnova~master~I276ef7d4933a5b73c9df2a0b9787a46f6f2ac096,https://review.opendev.org/39496,xenapi: Refactor common image download library,"Refactor image download  Refactor and test nova/virt/images.py, so that we can reuse the code with the xenapi driver.  Related to blueprint xenapi-supported-image-import-export  Change-Id: I276ef7d4933a5b73c9df2a0b9787a46f6f2ac096",objective,,,,,,
openstack%2Fzaqar~master~I3720ceeeb2738dea017e7a09a8912a3116ad22e0,https://review.opendev.org/39369,"Refactor system tests, update for metadata endpnt","Refactor system tests, update for metadata endpnt  Rationale:  This patchset aims to make it far easier to add new system tests in the future, and also includes support for running tests in parallel, if a test runner supports that feature.  Some major additions include:  - Auth once per test suite:     * Facilitated by new TestHTTPClient - Automatic tearDown - Automatic setUp - Perfect clean-up by using context managers for messages, claims, and   queues - Some restructuring of QueueTests: QueueCreate, QueueMeta, QueueList - Updates to queue tests to handle metadata endpoint  One new dependency is added: yurl (see: pypy - yurl). Used to simplify URL location parsing for messages.  Also removed were various print statements and exception-handling.  One minor fix:  import configparser handled in a py3k friendly way  Change-Id: I3720ceeeb2738dea017e7a09a8912a3116ad22e0",testing,,,,,,
openstack%2Fzaqar~master~I3720ceeeb2738dea017e7a09a8912a3116ad22e0,https://review.opendev.org/39369,"Refactor system tests, update for metadata endpnt","Refactor system tests, update for metadata endpnt  Rationale:  This patchset aims to make it far easier to add new system tests in the future, and also includes support for running tests in parallel, if a test runner supports that feature.  Some major additions include:  - Auth once per test suite:     * Facilitated by new TestHTTPClient - Automatic tearDown - Automatic setUp - Perfect clean-up by using context managers for messages, claims, and   queues - Some restructuring of QueueTests: QueueCreate, QueueMeta, QueueList - Updates to queue tests to handle metadata endpoint  One new dependency is added: yurl (see: pypy - yurl). Used to simplify URL location parsing for messages.  Also removed were various print statements and exception-handling.  One minor fix:  import configparser handled in a py3k friendly way  Change-Id: I3720ceeeb2738dea017e7a09a8912a3116ad22e0",quality,,,,,,
openstack%2Fzaqar~master~I3720ceeeb2738dea017e7a09a8912a3116ad22e0,https://review.opendev.org/39369,"Refactor system tests, update for metadata endpnt","Refactor system tests, update for metadata endpnt  Rationale:  This patchset aims to make it far easier to add new system tests in the future, and also includes support for running tests in parallel, if a test runner supports that feature.  Some major additions include:  - Auth once per test suite:     * Facilitated by new TestHTTPClient - Automatic tearDown - Automatic setUp - Perfect clean-up by using context managers for messages, claims, and   queues - Some restructuring of QueueTests: QueueCreate, QueueMeta, QueueList - Updates to queue tests to handle metadata endpoint  One new dependency is added: yurl (see: pypy - yurl). Used to simplify URL location parsing for messages.  Also removed were various print statements and exception-handling.  One minor fix:  import configparser handled in a py3k friendly way  Change-Id: I3720ceeeb2738dea017e7a09a8912a3116ad22e0",objective,,,,,,
openstack%2Fzaqar~master~I3720ceeeb2738dea017e7a09a8912a3116ad22e0,https://review.opendev.org/39369,"Refactor system tests, update for metadata endpnt","Refactor system tests, update for metadata endpnt  Rationale:  This patchset aims to make it far easier to add new system tests in the future, and also includes support for running tests in parallel, if a test runner supports that feature.  Some major additions include:  - Auth once per test suite:     * Facilitated by new TestHTTPClient - Automatic tearDown - Automatic setUp - Perfect clean-up by using context managers for messages, claims, and   queues - Some restructuring of QueueTests: QueueCreate, QueueMeta, QueueList - Updates to queue tests to handle metadata endpoint  One new dependency is added: yurl (see: pypy - yurl). Used to simplify URL location parsing for messages.  Also removed were various print statements and exception-handling.  One minor fix:  import configparser handled in a py3k friendly way  Change-Id: I3720ceeeb2738dea017e7a09a8912a3116ad22e0",objective,,,,,,
openstack%2Fnova~master~Ib783ae1c10e3ceb6d112ad528c4f35ce0b73d5ab,https://review.opendev.org/35247,Refactor db api tests.,"Refactor db api tests.  This test file was nearly 6,000 lines long. This change just splits it out into a series of smaller files by test type. No functional changes.  Change-Id: Ib783ae1c10e3ceb6d112ad528c4f35ce0b73d5ab",testing,,,,,,
openstack%2Fnova~master~Ib783ae1c10e3ceb6d112ad528c4f35ce0b73d5ab,https://review.opendev.org/35247,Refactor db api tests.,"Refactor db api tests.  This test file was nearly 6,000 lines long. This change just splits it out into a series of smaller files by test type. No functional changes.  Change-Id: Ib783ae1c10e3ceb6d112ad528c4f35ce0b73d5ab",integration,,,,,,
openstack%2Fnova~master~Ib783ae1c10e3ceb6d112ad528c4f35ce0b73d5ab,https://review.opendev.org/35247,Refactor db api tests.,"Refactor db api tests.  This test file was nearly 6,000 lines long. This change just splits it out into a series of smaller files by test type. No functional changes.  Change-Id: Ib783ae1c10e3ceb6d112ad528c4f35ce0b73d5ab",quality,,,,,,
openstack%2Fnova~master~Ib783ae1c10e3ceb6d112ad528c4f35ce0b73d5ab,https://review.opendev.org/35247,Refactor db api tests.,"Refactor db api tests.  This test file was nearly 6,000 lines long. This change just splits it out into a series of smaller files by test type. No functional changes.  Change-Id: Ib783ae1c10e3ceb6d112ad528c4f35ce0b73d5ab",objective,,,,,,
openstack%2Fswift~master~I60fd1d22956eab1a961deaf7444971d59325d4db,https://review.opendev.org/31456,Alternate refactor of info caching,"Alternate refactor of info caching  This is just a reimplementation of the work David Hadas is doing at:  https://review.openstack.org/#/c/30481/  This rework was mainly just so I could get my head around what the state of things were, what state we were trying to get them in, and what was required to get it there. I felt some things were not quite right with David's work, but I was at a loss to explain why. Hopefully this will help when I re-review his work.  I'm mainly posting this up so other reviewers of David's work might get a better view into things from a different perspective and consider some of the ideas here as alternatives.  This is an area to tread lightly. The starting state of things is a mess and the ending state should be cleaner, even if not ""perfect"".  Now, I do like this approach better (of course, I wrote it :P) but let me state why:  * No all-in-one functions. I know this is what David wanted, but I   disagree. I find the all-in-ones harder to read and easier to make   mistakes with when in use elsewhere. Having them separate doesn't   prevent making an all-in-one that calls the separate functions for   convenience, but honestly, is a quick ""if container:   container_func() else: account_func()"" that much harder to type or   read?  * No ""magic"" HEADs that happen to set the cache values and, if they   don't, blow things up. If I implement a stand-in proxy app, I   wouldn't expect to have to feed a cache when implementing my HEAD   functionality. With this approach, the caching stays in the caching   functions and they fail gracefully.  * Account autocreation happens only within controllers/account.py   Everyone else just indicates they're asking for account information   in order to perform a pending write and the account is autocreated   if configured to so.  I used comments liberally in this patch set to help a reviewer understand what changed and why. A final patch set would be needed to clear out these comments as they're mostly just noise after the fact, though it should probably be a separate review/merge so that the history isn't completely lost.  I was especially careful to alter the existing tests as little as possible and to comment liberally again when I had to change things. If this were to truly be a candidate for merging, new tests for the new functions and functionality would need to be added.  One last note: We need to fix our test paths! Wow, talk about a lot of screwy paths. All over the place we use paths like '/a/c' when we should have used '/v1/a/c'. The tests happened to pass all this time because so much relied on controller.account_name and .container_name and not PATH_INFO. But we really need to fix these paths at some point.  Change-Id: I60fd1d22956eab1a961deaf7444971d59325d4db",testing,,,,,,
openstack%2Fswift~master~I60fd1d22956eab1a961deaf7444971d59325d4db,https://review.opendev.org/31456,Alternate refactor of info caching,"Alternate refactor of info caching  This is just a reimplementation of the work David Hadas is doing at:  https://review.openstack.org/#/c/30481/  This rework was mainly just so I could get my head around what the state of things were, what state we were trying to get them in, and what was required to get it there. I felt some things were not quite right with David's work, but I was at a loss to explain why. Hopefully this will help when I re-review his work.  I'm mainly posting this up so other reviewers of David's work might get a better view into things from a different perspective and consider some of the ideas here as alternatives.  This is an area to tread lightly. The starting state of things is a mess and the ending state should be cleaner, even if not ""perfect"".  Now, I do like this approach better (of course, I wrote it :P) but let me state why:  * No all-in-one functions. I know this is what David wanted, but I   disagree. I find the all-in-ones harder to read and easier to make   mistakes with when in use elsewhere. Having them separate doesn't   prevent making an all-in-one that calls the separate functions for   convenience, but honestly, is a quick ""if container:   container_func() else: account_func()"" that much harder to type or   read?  * No ""magic"" HEADs that happen to set the cache values and, if they   don't, blow things up. If I implement a stand-in proxy app, I   wouldn't expect to have to feed a cache when implementing my HEAD   functionality. With this approach, the caching stays in the caching   functions and they fail gracefully.  * Account autocreation happens only within controllers/account.py   Everyone else just indicates they're asking for account information   in order to perform a pending write and the account is autocreated   if configured to so.  I used comments liberally in this patch set to help a reviewer understand what changed and why. A final patch set would be needed to clear out these comments as they're mostly just noise after the fact, though it should probably be a separate review/merge so that the history isn't completely lost.  I was especially careful to alter the existing tests as little as possible and to comment liberally again when I had to change things. If this were to truly be a candidate for merging, new tests for the new functions and functionality would need to be added.  One last note: We need to fix our test paths! Wow, talk about a lot of screwy paths. All over the place we use paths like '/a/c' when we should have used '/v1/a/c'. The tests happened to pass all this time because so much relied on controller.account_name and .container_name and not PATH_INFO. But we really need to fix these paths at some point.  Change-Id: I60fd1d22956eab1a961deaf7444971d59325d4db",objective,,,,,,
openstack%2Fswift~master~I60fd1d22956eab1a961deaf7444971d59325d4db,https://review.opendev.org/31456,Alternate refactor of info caching,"Alternate refactor of info caching  This is just a reimplementation of the work David Hadas is doing at:  https://review.openstack.org/#/c/30481/  This rework was mainly just so I could get my head around what the state of things were, what state we were trying to get them in, and what was required to get it there. I felt some things were not quite right with David's work, but I was at a loss to explain why. Hopefully this will help when I re-review his work.  I'm mainly posting this up so other reviewers of David's work might get a better view into things from a different perspective and consider some of the ideas here as alternatives.  This is an area to tread lightly. The starting state of things is a mess and the ending state should be cleaner, even if not ""perfect"".  Now, I do like this approach better (of course, I wrote it :P) but let me state why:  * No all-in-one functions. I know this is what David wanted, but I   disagree. I find the all-in-ones harder to read and easier to make   mistakes with when in use elsewhere. Having them separate doesn't   prevent making an all-in-one that calls the separate functions for   convenience, but honestly, is a quick ""if container:   container_func() else: account_func()"" that much harder to type or   read?  * No ""magic"" HEADs that happen to set the cache values and, if they   don't, blow things up. If I implement a stand-in proxy app, I   wouldn't expect to have to feed a cache when implementing my HEAD   functionality. With this approach, the caching stays in the caching   functions and they fail gracefully.  * Account autocreation happens only within controllers/account.py   Everyone else just indicates they're asking for account information   in order to perform a pending write and the account is autocreated   if configured to so.  I used comments liberally in this patch set to help a reviewer understand what changed and why. A final patch set would be needed to clear out these comments as they're mostly just noise after the fact, though it should probably be a separate review/merge so that the history isn't completely lost.  I was especially careful to alter the existing tests as little as possible and to comment liberally again when I had to change things. If this were to truly be a candidate for merging, new tests for the new functions and functionality would need to be added.  One last note: We need to fix our test paths! Wow, talk about a lot of screwy paths. All over the place we use paths like '/a/c' when we should have used '/v1/a/c'. The tests happened to pass all this time because so much relied on controller.account_name and .container_name and not PATH_INFO. But we really need to fix these paths at some point.  Change-Id: I60fd1d22956eab1a961deaf7444971d59325d4db",quality,,,,,,
openstack%2Ftempest~master~I024509fd67239fec791d6cec69cd8c919b88a61c,https://review.opendev.org/19152,Refactoring the quantum basic test case.,"Refactoring the quantum basic test case by using python ""with"" statement.  The implementation creates the basic network scenario, so the following test cases can execute relative testing against it.  There are more quantum test cases will be pushed to community based on the same solution.  Change-Id: I024509fd67239fec791d6cec69cd8c919b88a61c",testing,,,,,,
openstack%2Ftempest~master~I024509fd67239fec791d6cec69cd8c919b88a61c,https://review.opendev.org/19152,Refactoring the quantum basic test case.,"Refactoring the quantum basic test case by using python ""with"" statement.  The implementation creates the basic network scenario, so the following test cases can execute relative testing against it.  There are more quantum test cases will be pushed to community based on the same solution.  Change-Id: I024509fd67239fec791d6cec69cd8c919b88a61c",objective,,,,,,
openstack%2Ftempest~master~Ib87da825f05550d625a08aa1fe82bfaa921e80f9,https://review.opendev.org/7069,Refactoring of base test case classes,"Refactoring of base test case classes  * Splits out the ""manager"" class into its own file (at least   for now to keep the code change size down initially) * Adds base manager classes for Fuzz and Default clients * Adds base test case class and a derived base SmokeTest class * Adds smoke test for basic server operations in compute * Adds non-smoke test for advanced server operations in compute  Change-Id: Ib87da825f05550d625a08aa1fe82bfaa921e80f9",testing,,,,,,
openstack%2Ftempest~master~Ib87da825f05550d625a08aa1fe82bfaa921e80f9,https://review.opendev.org/7069,Refactoring of base test case classes,"Refactoring of base test case classes  * Splits out the ""manager"" class into its own file (at least   for now to keep the code change size down initially) * Adds base manager classes for Fuzz and Default clients * Adds base test case class and a derived base SmokeTest class * Adds smoke test for basic server operations in compute * Adds non-smoke test for advanced server operations in compute  Change-Id: Ib87da825f05550d625a08aa1fe82bfaa921e80f9",objective,,,,,,
openstack%2Ftempest~master~I6ab67d7b1947eadd62320034b80f43f6d8f5bba5,https://review.opendev.org/17332,Started refactor of server actions tests,Started refactor of server actions tests  * Broke down basic smoke action tests into classes * Prepped fixtures drive data for the generic tests * TODO: next patch will break the singe test method   into each test class into distinct test methods  Change-Id: I6ab67d7b1947eadd62320034b80f43f6d8f5bba5,testing,,,,,,
openstack%2Ftempest~master~I6ab67d7b1947eadd62320034b80f43f6d8f5bba5,https://review.opendev.org/17332,Started refactor of server actions tests,Started refactor of server actions tests  * Broke down basic smoke action tests into classes * Prepped fixtures drive data for the generic tests * TODO: next patch will break the singe test method   into each test class into distinct test methods  Change-Id: I6ab67d7b1947eadd62320034b80f43f6d8f5bba5,objective,,,,,,
openstack%2Ftempest~master~Ied673e3dd12d31d12979b04e61fd31eaccf97639,https://review.opendev.org/14049,Refactor list servers negative test and fix remaining gate bugs,"Refactor list servers negative test and fix remaining gate bugs  test_list_servers_negative had so many issues with it, it's hard to list them here... but at least the following has been fixed:  * No longer will the test flatly delete all instances the tenant   and alt tenant have during every test method run (!!) * Fixtures -- 2 active and 1 deleted server -- are created in the   class' setUpClass() method instead of having test methods   constantly re-launch instances -- this reduces the test time   down about 3 minutes * Removed all non-negative tests * Removed all tests that were skipped due to bugs that have been   marked Invalid by upstream since they were checking for errors   that should not be errors * Skip the XML create_service() test for Identity Admin tests   because of the upstream Keystone bug 1061738  Change-Id: Ied673e3dd12d31d12979b04e61fd31eaccf97639 fixes: bug #1061740 fixes: bug #1061167",testing,,,,,,
openstack%2Ftempest~master~Ied673e3dd12d31d12979b04e61fd31eaccf97639,https://review.opendev.org/14049,Refactor list servers negative test and fix remaining gate bugs,"Refactor list servers negative test and fix remaining gate bugs  test_list_servers_negative had so many issues with it, it's hard to list them here... but at least the following has been fixed:  * No longer will the test flatly delete all instances the tenant   and alt tenant have during every test method run (!!) * Fixtures -- 2 active and 1 deleted server -- are created in the   class' setUpClass() method instead of having test methods   constantly re-launch instances -- this reduces the test time   down about 3 minutes * Removed all non-negative tests * Removed all tests that were skipped due to bugs that have been   marked Invalid by upstream since they were checking for errors   that should not be errors * Skip the XML create_service() test for Identity Admin tests   because of the upstream Keystone bug 1061738  Change-Id: Ied673e3dd12d31d12979b04e61fd31eaccf97639 fixes: bug #1061740 fixes: bug #1061167",objective,,,,,,
openstack%2Ftempest~master~Ib87c3dadcb233f9d1e8e38365960ad71d166913a,https://review.opendev.org/9059,Refactoring of base test case classes,"Refactoring of base test case classes  * Splits out the ""manager"" class into its own file (at least   for now to keep the code change size down initially) * Adds base manager classes for Fuzz and Default clients * Adds base test case class and a derived base SmokeTest class * Adds smoke test for basic server operations in compute * Adds non-smoke test for advanced server operations in compute  Change-Id: Ib87da825f05550d625a08aa1fe82bfaa921e80f9  Adds Whitebox manager and Servers Whitebox tests  This change (Draft) builds upon the proposed refactoring to the Tempest Manager and base test classes as per https://review.openstack.org/#/c/7069  * Adds a whitebox manager subclass to base Manager providing database, ssh and nova-manage access and related configs * Adds inital set of whitebox tests for Compute API  Change-Id: Ib87c3dadcb233f9d1e8e38365960ad71d166913a",testing,,,,,,
openstack%2Ftempest~master~Ib87c3dadcb233f9d1e8e38365960ad71d166913a,https://review.opendev.org/9059,Refactoring of base test case classes,"Refactoring of base test case classes  * Splits out the ""manager"" class into its own file (at least   for now to keep the code change size down initially) * Adds base manager classes for Fuzz and Default clients * Adds base test case class and a derived base SmokeTest class * Adds smoke test for basic server operations in compute * Adds non-smoke test for advanced server operations in compute  Change-Id: Ib87da825f05550d625a08aa1fe82bfaa921e80f9  Adds Whitebox manager and Servers Whitebox tests  This change (Draft) builds upon the proposed refactoring to the Tempest Manager and base test classes as per https://review.openstack.org/#/c/7069  * Adds a whitebox manager subclass to base Manager providing database, ssh and nova-manage access and related configs * Adds inital set of whitebox tests for Compute API  Change-Id: Ib87c3dadcb233f9d1e8e38365960ad71d166913a",objective,,,,,,
openstack%2Fnova~master~Id006ef28a0cf03899950d008e8124a8e34130910,https://review.opendev.org/1410,Refactoring/cleanup of some view builders.,"Refactoring/cleanup of some view builders.  I have re-worked the ""addresses"", ""flavors"", ""images"", and ""servers"" view builders to share logic which was previously duplicated across many ViewBuilder classes. Also, I have re-worked the ViewBuilder class in general to persist longer (meaning that a new ViewBuilder is not created for every request but rather a single ViewBuilder is created and deals with each request as needed.)  During the re-factor I found an issue with test_servers.py where links were not containing the project_id like they should. This was fixed and tests were updated.  Overall we had good test coverage so not many tests had to be updated during the refactor.  (Patch Set 2) Updated _set_request and _get_request to be a request property               and a set_request method which can be overridden. (Patch Set 3) Fixed tests that I broke with the last update. (Patch Set 4) Changed ""id in network.keys()"" to ""id in network"" (Patch Set 5) Feedback changes from bcwaldon: Moved Controller to wsgi.py               instead of common.py. Left ViewBuilder in common.py because               wsgi.py can't import common (circular dep) and ViewBuilder               needs common logic.                Updated _resource_name to _collection_name.                Updated the name of Controller._view_builder to               Controller._view_builder_class and made it default to None.                Removed prepare wrapper: request is passed around a lot more now               which removes the need for the decorator but clutters the code               a bit.                Created test which utilizes 'floating' ips and made sure the               logic which was in the old addresses builder was transfered.  Change-Id: I034404892018e99987f80789d7f7e406ff31658c  Created tests which has floating ips.  Change-Id: Id006ef28a0cf03899950d008e8124a8e34130910",testing,,,,,,
openstack%2Fnova~master~Id006ef28a0cf03899950d008e8124a8e34130910,https://review.opendev.org/1410,Refactoring/cleanup of some view builders.,"Refactoring/cleanup of some view builders.  I have re-worked the ""addresses"", ""flavors"", ""images"", and ""servers"" view builders to share logic which was previously duplicated across many ViewBuilder classes. Also, I have re-worked the ViewBuilder class in general to persist longer (meaning that a new ViewBuilder is not created for every request but rather a single ViewBuilder is created and deals with each request as needed.)  During the re-factor I found an issue with test_servers.py where links were not containing the project_id like they should. This was fixed and tests were updated.  Overall we had good test coverage so not many tests had to be updated during the refactor.  (Patch Set 2) Updated _set_request and _get_request to be a request property               and a set_request method which can be overridden. (Patch Set 3) Fixed tests that I broke with the last update. (Patch Set 4) Changed ""id in network.keys()"" to ""id in network"" (Patch Set 5) Feedback changes from bcwaldon: Moved Controller to wsgi.py               instead of common.py. Left ViewBuilder in common.py because               wsgi.py can't import common (circular dep) and ViewBuilder               needs common logic.                Updated _resource_name to _collection_name.                Updated the name of Controller._view_builder to               Controller._view_builder_class and made it default to None.                Removed prepare wrapper: request is passed around a lot more now               which removes the need for the decorator but clutters the code               a bit.                Created test which utilizes 'floating' ips and made sure the               logic which was in the old addresses builder was transfered.  Change-Id: I034404892018e99987f80789d7f7e406ff31658c  Created tests which has floating ips.  Change-Id: Id006ef28a0cf03899950d008e8124a8e34130910",objective,,,,,,
openstack%2Fnova~master~Id006ef28a0cf03899950d008e8124a8e34130910,https://review.opendev.org/1410,Refactoring/cleanup of some view builders.,"Refactoring/cleanup of some view builders.  I have re-worked the ""addresses"", ""flavors"", ""images"", and ""servers"" view builders to share logic which was previously duplicated across many ViewBuilder classes. Also, I have re-worked the ViewBuilder class in general to persist longer (meaning that a new ViewBuilder is not created for every request but rather a single ViewBuilder is created and deals with each request as needed.)  During the re-factor I found an issue with test_servers.py where links were not containing the project_id like they should. This was fixed and tests were updated.  Overall we had good test coverage so not many tests had to be updated during the refactor.  (Patch Set 2) Updated _set_request and _get_request to be a request property               and a set_request method which can be overridden. (Patch Set 3) Fixed tests that I broke with the last update. (Patch Set 4) Changed ""id in network.keys()"" to ""id in network"" (Patch Set 5) Feedback changes from bcwaldon: Moved Controller to wsgi.py               instead of common.py. Left ViewBuilder in common.py because               wsgi.py can't import common (circular dep) and ViewBuilder               needs common logic.                Updated _resource_name to _collection_name.                Updated the name of Controller._view_builder to               Controller._view_builder_class and made it default to None.                Removed prepare wrapper: request is passed around a lot more now               which removes the need for the decorator but clutters the code               a bit.                Created test which utilizes 'floating' ips and made sure the               logic which was in the old addresses builder was transfered.  Change-Id: I034404892018e99987f80789d7f7e406ff31658c  Created tests which has floating ips.  Change-Id: Id006ef28a0cf03899950d008e8124a8e34130910",quality,,,,,,
starlingx%2Fconfig~master~Icd61bff682cb60fe2527399bdaec6208b6246c15,https://review.opendev.org/686012,Refactor API unit tests to be more extensible,[WIP] Refactor API unit tests to be more extensible  The pv and partition unit tests have been refactored to have a common base.  Mixins have been added to allow more test permutations.  New unit tests based on the common base class and mixins have been added to provide testing of:  - ntp  Change-Id: Icd61bff682cb60fe2527399bdaec6208b6246c15 Story: 2004515 Task: 36868 Signed-off-by: Al Bailey <Al.Bailey@windriver.com>,testing,,,,,,
starlingx%2Fconfig~master~Icd61bff682cb60fe2527399bdaec6208b6246c15,https://review.opendev.org/686012,Refactor API unit tests to be more extensible,[WIP] Refactor API unit tests to be more extensible  The pv and partition unit tests have been refactored to have a common base.  Mixins have been added to allow more test permutations.  New unit tests based on the common base class and mixins have been added to provide testing of:  - ntp  Change-Id: Icd61bff682cb60fe2527399bdaec6208b6246c15 Story: 2004515 Task: 36868 Signed-off-by: Al Bailey <Al.Bailey@windriver.com>,objective,,,,,,
openstack%2Fopenstack-helm-infra~master~I61071d19ec89f22d50417c80ceccb1be58f89e70,https://review.opendev.org/688819,[WIP] Remove code from Selenium Test Refactor,[WIP] Remove code from Selenium Test Refactor  This change would further refactor the Selenium Tests in order to move boilerplate code to separate file.  Change-Id: I61071d19ec89f22d50417c80ceccb1be58f89e70,testing,,,,,,
openstack%2Fopenstack-helm-infra~master~I61071d19ec89f22d50417c80ceccb1be58f89e70,https://review.opendev.org/688819,[WIP] Remove code from Selenium Test Refactor,[WIP] Remove code from Selenium Test Refactor  This change would further refactor the Selenium Tests in order to move boilerplate code to separate file.  Change-Id: I61071d19ec89f22d50417c80ceccb1be58f89e70,objective,,,,,,
airship%2Fshipyard~master~I13b5775f6f770c4de6a65cfad36409f8554afb7b,https://review.opendev.org/656578,Refactor Shipyard to use new Action class,"Refactor Shipyard to use new Action class  This patch set implements the new action class for Shipyard, to improve how Shipyard handles actions internally. This is a refactor, and surface level Shipyard functionality should remain unchanged. The goal of this refactor is to eliminate repeated code, increase testing code coverage, and help simplify future Shipyard features.  ""action"" code should now have 100% unit test code coverage shipyard_airflow unit test coverage pre-refactor: 74% (1263 missing statements) post-refactor: 76% (1207 missing statements)  Change-Id: I13b5775f6f770c4de6a65cfad36409f8554afb7b",testing,,,,,,
airship%2Fshipyard~master~I13b5775f6f770c4de6a65cfad36409f8554afb7b,https://review.opendev.org/656578,Refactor Shipyard to use new Action class,"Refactor Shipyard to use new Action class  This patch set implements the new action class for Shipyard, to improve how Shipyard handles actions internally. This is a refactor, and surface level Shipyard functionality should remain unchanged. The goal of this refactor is to eliminate repeated code, increase testing code coverage, and help simplify future Shipyard features.  ""action"" code should now have 100% unit test code coverage shipyard_airflow unit test coverage pre-refactor: 74% (1263 missing statements) post-refactor: 76% (1207 missing statements)  Change-Id: I13b5775f6f770c4de6a65cfad36409f8554afb7b",quality,,,,,,
airship%2Fshipyard~master~I13b5775f6f770c4de6a65cfad36409f8554afb7b,https://review.opendev.org/656578,Refactor Shipyard to use new Action class,"Refactor Shipyard to use new Action class  This patch set implements the new action class for Shipyard, to improve how Shipyard handles actions internally. This is a refactor, and surface level Shipyard functionality should remain unchanged. The goal of this refactor is to eliminate repeated code, increase testing code coverage, and help simplify future Shipyard features.  ""action"" code should now have 100% unit test code coverage shipyard_airflow unit test coverage pre-refactor: 74% (1263 missing statements) post-refactor: 76% (1207 missing statements)  Change-Id: I13b5775f6f770c4de6a65cfad36409f8554afb7b",objective,,,,,,
openstack%2Fpython-openstackclient~master~I95ad6ec505c99d417c3851570abfb4f14f055363,https://review.opendev.org/655554,Refactor test_snapshot.py and test_transfer_request.py,"Refactor test_snapshot.py and test_transfer_request.py  This is a work-in-progress commit  This change aims to remove the blanket skip test on all volume v1 tests. First, I test changes to the problem classes behind this skip. After these succeed, I will then implement code necessary to determine volume endpoint version and ensure that if volume v1 is not present, only then skip the v1 tests, rather than always skipping as with current practice.  Change-Id: I95ad6ec505c99d417c3851570abfb4f14f055363",testing,,,,,,
openstack%2Fpython-openstackclient~master~I95ad6ec505c99d417c3851570abfb4f14f055363,https://review.opendev.org/655554,Refactor test_snapshot.py and test_transfer_request.py,"Refactor test_snapshot.py and test_transfer_request.py  This is a work-in-progress commit  This change aims to remove the blanket skip test on all volume v1 tests. First, I test changes to the problem classes behind this skip. After these succeed, I will then implement code necessary to determine volume endpoint version and ensure that if volume v1 is not present, only then skip the v1 tests, rather than always skipping as with current practice.  Change-Id: I95ad6ec505c99d417c3851570abfb4f14f055363",objective,,,,,,
airship%2Fshipyard~master~Icfe22368dc64c6ec486afc17cc867e1db096de5b,https://review.opendev.org/656372,Refactor Shipyard's internal action functionality,"Refactor Shipyard's internal action functionality  This patchset refactors how ""actions"" are handled internally to Shipyard by creating an Action class, and refactoring the action_helper module. This accomplishes many things: - Increase testability and unit test code coverage - Eliminate repeated code across different action APIs - Better encapsulate actions (were dicts before) - Make future updates to action logic and functionality easier (main motivation for this work)  Actual Shipyard functionality should not be affected with this PS.  Change-Id: Icfe22368dc64c6ec486afc17cc867e1db096de5b",testing,,,,,,
airship%2Fshipyard~master~Icfe22368dc64c6ec486afc17cc867e1db096de5b,https://review.opendev.org/656372,Refactor Shipyard's internal action functionality,"Refactor Shipyard's internal action functionality  This patchset refactors how ""actions"" are handled internally to Shipyard by creating an Action class, and refactoring the action_helper module. This accomplishes many things: - Increase testability and unit test code coverage - Eliminate repeated code across different action APIs - Better encapsulate actions (were dicts before) - Make future updates to action logic and functionality easier (main motivation for this work)  Actual Shipyard functionality should not be affected with this PS.  Change-Id: Icfe22368dc64c6ec486afc17cc867e1db096de5b",quality,,,,,,
airship%2Fshipyard~master~Icfe22368dc64c6ec486afc17cc867e1db096de5b,https://review.opendev.org/656372,Refactor Shipyard's internal action functionality,"Refactor Shipyard's internal action functionality  This patchset refactors how ""actions"" are handled internally to Shipyard by creating an Action class, and refactoring the action_helper module. This accomplishes many things: - Increase testability and unit test code coverage - Eliminate repeated code across different action APIs - Better encapsulate actions (were dicts before) - Make future updates to action logic and functionality easier (main motivation for this work)  Actual Shipyard functionality should not be affected with this PS.  Change-Id: Icfe22368dc64c6ec486afc17cc867e1db096de5b",objective,,,,,,
openstack%2Fneutron-tempest-plugin~master~I60724abdbe4ffe9fbfa307f147f23ed648ac41b3,https://review.opendev.org/615813,[WIP] Refactor security groups scenario test,[WIP] Refactor security groups scenario test  TODO: describe it  Change-Id: I60724abdbe4ffe9fbfa307f147f23ed648ac41b3,testing,,,,,,
openstack%2Ftripleo-heat-templates~stable%2Fqueens~I2d2a485127b16fa1513d9c21f680b91459c07ad8,https://review.opendev.org/651221,[DNM] Test tq refactorings,[DNM] Test tq refactorings  Tests two set of release config removals inside tripleo-quickstart.  Depends-On: https://review.openstack.org/#/c/650921/ Change-Id: I2d2a485127b16fa1513d9c21f680b91459c07ad8,testing,,,,,,
openstack%2Ftripleo-heat-templates~stable%2Fqueens~I2d2a485127b16fa1513d9c21f680b91459c07ad8,https://review.opendev.org/651221,[DNM] Test tq refactorings,[DNM] Test tq refactorings  Tests two set of release config removals inside tripleo-quickstart.  Depends-On: https://review.openstack.org/#/c/650921/ Change-Id: I2d2a485127b16fa1513d9c21f680b91459c07ad8,objective,,,,,,
openstack%2Ftripleo-heat-templates~stable%2Focata~I2d2a485127b16fa1513d9c21f680b91459c07ad8,https://review.opendev.org/651198,[DNM] Test tq refactorings,[DNM] Test tq refactorings  Tests two set of release config removals inside tripleo-quickstart.  Depends-On: https://review.openstack.org/#/c/650921/ Change-Id: I2d2a485127b16fa1513d9c21f680b91459c07ad8,testing,,,,,,
openstack%2Ftripleo-heat-templates~stable%2Focata~I2d2a485127b16fa1513d9c21f680b91459c07ad8,https://review.opendev.org/651198,[DNM] Test tq refactorings,[DNM] Test tq refactorings  Tests two set of release config removals inside tripleo-quickstart.  Depends-On: https://review.openstack.org/#/c/650921/ Change-Id: I2d2a485127b16fa1513d9c21f680b91459c07ad8,objective,,,,,,
openstack%2Ftripleo-heat-templates~stable%2Frocky~I2d2a485127b16fa1513d9c21f680b91459c07ad8,https://review.opendev.org/651224,[DNM] Test tq refactorings,[DNM] Test tq refactorings  Tests two set of release config removals inside tripleo-quickstart.  Depends-On: https://review.openstack.org/#/c/650921/ Change-Id: I2d2a485127b16fa1513d9c21f680b91459c07ad8,testing,,,,,,
openstack%2Ftripleo-heat-templates~stable%2Frocky~I2d2a485127b16fa1513d9c21f680b91459c07ad8,https://review.opendev.org/651224,[DNM] Test tq refactorings,[DNM] Test tq refactorings  Tests two set of release config removals inside tripleo-quickstart.  Depends-On: https://review.openstack.org/#/c/650921/ Change-Id: I2d2a485127b16fa1513d9c21f680b91459c07ad8,objective,,,,,,
openstack%2Fkeystone~master~Ida0d62bde70d8e42182e542039a93c595770e4dc,https://review.opendev.org/466406,WIP - LDAP test refactor,WIP - LDAP test refactor  Change-Id: Ida0d62bde70d8e42182e542039a93c595770e4dc,testing,,,,,,
openstack%2Fkeystone~master~Ida0d62bde70d8e42182e542039a93c595770e4dc,https://review.opendev.org/466406,WIP - LDAP test refactor,WIP - LDAP test refactor  Change-Id: Ida0d62bde70d8e42182e542039a93c595770e4dc,objective,,,,,,
openstack%2Fkuryr-tempest-plugin~master~Ic08d76f6c3cebdebd7fe13a254c8e22eb186648f,https://review.opendev.org/696576,Refactor test_namespace,Refactor test_namespace  This commit refactors and fixes some issues with test_namespace. In particular:  * Take care of namespace deletions after test is done. * Rewrite waiting code to use test_utils.call_until_true().  Change-Id: Ic08d76f6c3cebdebd7fe13a254c8e22eb186648f,testing,,,,,,
openstack%2Fkuryr-tempest-plugin~master~Ic08d76f6c3cebdebd7fe13a254c8e22eb186648f,https://review.opendev.org/696576,Refactor test_namespace,Refactor test_namespace  This commit refactors and fixes some issues with test_namespace. In particular:  * Take care of namespace deletions after test is done. * Rewrite waiting code to use test_utils.call_until_true().  Change-Id: Ic08d76f6c3cebdebd7fe13a254c8e22eb186648f,objective,,,,,,
x%2Ftobiko~master~Ife0739127d407b39fa8124af4f851d5e9f2bc356,https://review.opendev.org/600047,[WIP] Refactor tobiko package,"Refactor tobiko package  - Remove dependencies:   - testscenarios   - testtools   - tempest  - Move pythonclient code to tobiko.openstack module - Parse tobiko.conf file instead of tempest.conf - Rename pre_ test method to create_ and add delete_ method   to test_floating_ip test case. - Move networking case to tobiko.tests.neutron package. - Wraps ping command - Refactor StackManager and separate user frontend to pythonclient backend. - Allow to add other backends (ansible, etc) for populating resources. - Prefix stack names after the python package of the test case.  Change-Id: Ife0739127d407b39fa8124af4f851d5e9f2bc356",testing,,,,,,
x%2Ftobiko~master~Ife0739127d407b39fa8124af4f851d5e9f2bc356,https://review.opendev.org/600047,[WIP] Refactor tobiko package,"Refactor tobiko package  - Remove dependencies:   - testscenarios   - testtools   - tempest  - Move pythonclient code to tobiko.openstack module - Parse tobiko.conf file instead of tempest.conf - Rename pre_ test method to create_ and add delete_ method   to test_floating_ip test case. - Move networking case to tobiko.tests.neutron package. - Wraps ping command - Refactor StackManager and separate user frontend to pythonclient backend. - Allow to add other backends (ansible, etc) for populating resources. - Prefix stack names after the python package of the test case.  Change-Id: Ife0739127d407b39fa8124af4f851d5e9f2bc356",quality,,,,,,
x%2Ftobiko~master~Ife0739127d407b39fa8124af4f851d5e9f2bc356,https://review.opendev.org/600047,[WIP] Refactor tobiko package,"Refactor tobiko package  - Remove dependencies:   - testscenarios   - testtools   - tempest  - Move pythonclient code to tobiko.openstack module - Parse tobiko.conf file instead of tempest.conf - Rename pre_ test method to create_ and add delete_ method   to test_floating_ip test case. - Move networking case to tobiko.tests.neutron package. - Wraps ping command - Refactor StackManager and separate user frontend to pythonclient backend. - Allow to add other backends (ansible, etc) for populating resources. - Prefix stack names after the python package of the test case.  Change-Id: Ife0739127d407b39fa8124af4f851d5e9f2bc356",objective,,,,,,
openstack%2Fneutron-tempest-plugin~master~I6f21677298e4743da383ea7d64fad1e092cef8e4,https://review.opendev.org/614495,Refactor create_server to smartly handle advanced images,Refactor create_server to smartly handle advanced images  Create new base class called BaseScenarioTest for provisioning resources in a way more similar to API base classs and allowing to allocate server at class scope (IE inside resource_setup method).  This new class could be the barebone for new methods rewritten from scrach without keeping backward compatibility with the old BaseTempestTestCase test case (for example for helping creating resources to login to created server).  Now create_server method returns only server details instead of Nova API client answer body.  Add create_ssh_client method to handle SSH connection distruction at the end of the test.  Make sure either server and SSH connection are created using advance image settings if required by just passing a simple method parameter (advanced_image=True) or setting the at test class level.  Change-Id: I6f21677298e4743da383ea7d64fad1e092cef8e4,testing,,,,,,
openstack%2Fneutron-tempest-plugin~master~I6f21677298e4743da383ea7d64fad1e092cef8e4,https://review.opendev.org/614495,Refactor create_server to smartly handle advanced images,Refactor create_server to smartly handle advanced images  Create new base class called BaseScenarioTest for provisioning resources in a way more similar to API base classs and allowing to allocate server at class scope (IE inside resource_setup method).  This new class could be the barebone for new methods rewritten from scrach without keeping backward compatibility with the old BaseTempestTestCase test case (for example for helping creating resources to login to created server).  Now create_server method returns only server details instead of Nova API client answer body.  Add create_ssh_client method to handle SSH connection distruction at the end of the test.  Make sure either server and SSH connection are created using advance image settings if required by just passing a simple method parameter (advanced_image=True) or setting the at test class level.  Change-Id: I6f21677298e4743da383ea7d64fad1e092cef8e4,objective,,,,,,
openstack%2Fpython-tripleoclient~master~I5b772138d07006651c5b221591e1fcf6f775a731,https://review.opendev.org/571953,DNM: test buildimage job refactor,DNM: test buildimage job refactor  Depends-On: https://review.openstack.org/571951 Change-Id: I5b772138d07006651c5b221591e1fcf6f775a731,testing,,,,,,
openstack%2Ftempest~master~I7d8d30e64614624ee0fe5aeb624c5a3431ff8aea,https://review.opendev.org/592202,refactor: prepare test_list_users for pre-prov,refactor: prepare test_list_users for pre-prov  This is part 1 of 2 commits that aim to move tests from only being executed with the dynamic creds credential provider.  Part 1 does some initial refactoring and Part 2 will move the tests and finish any other refactoring that's needed.  Notes on refactor:   * removing usage of non_domain_enabled_user so that I can run the     tests with os_primary's user except for tests that are not targeted     for pre-prov.   * removing alt_email as os_primary's user does not have the email     attribute.  Warning on test completeness:   * I realize some of these tests are intended to check for exclusion of     certain users in the user list which is now lost due to the removal     of the non_domain_enabled_user.  Change-Id: I7d8d30e64614624ee0fe5aeb624c5a3431ff8aea,testing,,,,,,
openstack%2Ftempest~master~I7d8d30e64614624ee0fe5aeb624c5a3431ff8aea,https://review.opendev.org/592202,refactor: prepare test_list_users for pre-prov,refactor: prepare test_list_users for pre-prov  This is part 1 of 2 commits that aim to move tests from only being executed with the dynamic creds credential provider.  Part 1 does some initial refactoring and Part 2 will move the tests and finish any other refactoring that's needed.  Notes on refactor:   * removing usage of non_domain_enabled_user so that I can run the     tests with os_primary's user except for tests that are not targeted     for pre-prov.   * removing alt_email as os_primary's user does not have the email     attribute.  Warning on test completeness:   * I realize some of these tests are intended to check for exclusion of     certain users in the user list which is now lost due to the removal     of the non_domain_enabled_user.  Change-Id: I7d8d30e64614624ee0fe5aeb624c5a3431ff8aea,objective,,,,,,
openstack%2Ftripleo-heat-templates~master~Ib7c40a9d3d0c71a0953c7105bd33bb4c53521837,https://review.opendev.org/583874,[DNM] To test sprint16 toci refactoring,[DNM] To test sprint16 toci refactoring  Depends-On: I79d2b8b3a4bd1fbb46d80d82b9a946974c1cde8f Change-Id: Ib7c40a9d3d0c71a0953c7105bd33bb4c53521837,testing,,,,,,
openstack%2Ftripleo-quickstart-extras~master~I1399f163eaf711e1603838086a3cd1c231553598,https://review.opendev.org/587745,[DNM] To test various toci vars refactorings,[DNM] To test various toci refactor  Depends-On: Iaf0ba7e06c809859f8ad60070285941ec436b5e9 Change-Id: I1399f163eaf711e1603838086a3cd1c231553598,testing,,,,,,
openstack%2Ftripleo-quickstart-extras~master~I3b30355c889aab1e29ba8f8cb29deb0037aa0766,https://review.opendev.org/587743,[DNM] To test env_vars refactor,[DNM] To test env_vars refactor  Depends-On: I96f0925a39ad37e0eb51de6900cf78dae2b5505b Change-Id: I3b30355c889aab1e29ba8f8cb29deb0037aa0766,testing,,,,,,
openstack%2Ftripleo-quickstart-extras~master~Ic9c3014bfe40891712a828b2eb306da34bf86e48,https://review.opendev.org/587742,[DNM] To test featurset_conf refactor,[DNM] To test featurset_conf refactor  Depends-On: Ib1caf1261c6fd423a0bb4aa2be0f525bffd471bc Change-Id: Ic9c3014bfe40891712a828b2eb306da34bf86e48,testing,,,,,,
openstack%2Fplacement~master~If66f2f35089abe2878a868370b51ffeed4575ab7,https://review.opendev.org/772061,Refactor usage tests to properly test project personas,Refactor usage tests to properly test project personas  Change-Id: If66f2f35089abe2878a868370b51ffeed4575ab7,testing,,,,,,
openstack%2Ftempest~master~Ie7c7d74e1989b568284a38f1dac83579386c3a79,https://review.opendev.org/498813,Refactor test 'test_boot_server_from_encrypted_volume_luks' to use cirros image,"Refactor test 'test_boot_server_from_encrypted_volume_luks' to use cirros image  This test is uploaded, since there was a bug [1] while booting an instance from an encrypted volume created from a whole image.  [1] https://bugs.launchpad.net/nova/+bug/1465656  Change-Id: Ie7c7d74e1989b568284a38f1dac83579386c3a79",testing,,,,,,
openstack%2Ftempest~master~Ie7c7d74e1989b568284a38f1dac83579386c3a79,https://review.opendev.org/498813,Refactor test 'test_boot_server_from_encrypted_volume_luks' to use cirros image,"Refactor test 'test_boot_server_from_encrypted_volume_luks' to use cirros image  This test is uploaded, since there was a bug [1] while booting an instance from an encrypted volume created from a whole image.  [1] https://bugs.launchpad.net/nova/+bug/1465656  Change-Id: Ie7c7d74e1989b568284a38f1dac83579386c3a79",objective,,,,,,
openstack%2Ftempest~master~Ie7c7d74e1989b568284a38f1dac83579386c3a79,https://review.opendev.org/498813,Refactor test 'test_boot_server_from_encrypted_volume_luks' to use cirros image,"Refactor test 'test_boot_server_from_encrypted_volume_luks' to use cirros image  This test is uploaded, since there was a bug [1] while booting an instance from an encrypted volume created from a whole image.  [1] https://bugs.launchpad.net/nova/+bug/1465656  Change-Id: Ie7c7d74e1989b568284a38f1dac83579386c3a79",objective,,,,,,
zuul%2Fzuul~master~If503de475111c874987c69279d28e652be2d7f10,https://review.opendev.org/553935,WIP: test seret refactor,WIP: test seret refactor  Change-Id: If503de475111c874987c69279d28e652be2d7f10,testing,,,,,,
openstack%2Fglance~feature%2Fpolicy-refactor~I44eda16e7d222e4d83f26e78c4e933edd0a7271b,https://review.opendev.org/557524,Update UPPER_CONSTRAINTS_FILE for feature/policy-refactor,"Update UPPER_CONSTRAINTS_FILE for feature/policy-refactor  The new stable upper-constraints file is only available after the openstack/requirements repository is branched. This will happen around the RC1 timeframe.  Recheck and merge this change once the requirements repository has been branched.  The CI system will work with this patch before the requirements repository is branched because zuul configues the job to run with a local copy of the file and defaults to the master branch. However, accepting the patch will break the test configuration on developers' local systems, so please wait until after the requirements repository is branched to merge the patch.  Change-Id: I44eda16e7d222e4d83f26e78c4e933edd0a7271b",integration,,,,,,
openstack%2Fglance~feature%2Fpolicy-refactor~I44eda16e7d222e4d83f26e78c4e933edd0a7271b,https://review.opendev.org/557524,Update UPPER_CONSTRAINTS_FILE for feature/policy-refactor,"Update UPPER_CONSTRAINTS_FILE for feature/policy-refactor  The new stable upper-constraints file is only available after the openstack/requirements repository is branched. This will happen around the RC1 timeframe.  Recheck and merge this change once the requirements repository has been branched.  The CI system will work with this patch before the requirements repository is branched because zuul configues the job to run with a local copy of the file and defaults to the master branch. However, accepting the patch will break the test configuration on developers' local systems, so please wait until after the requirements repository is branched to merge the patch.  Change-Id: I44eda16e7d222e4d83f26e78c4e933edd0a7271b",objective,,,,,,
openstack%2Fkuryr-libnetwork~master~I1f4c524c414e4ee6bfe48b5c03b44b5e65476cae,https://review.opendev.org/450677,[WIP] Refactor docs,[WIP] Refactor docs  Split docs into following parts: 1. Supported features 2. Installation(TODO) 3. Run as service container(TODO) 4. Run Fullstack test 5. Release Notes 6. Run nested-container(TODO) 7. Configuration(TODO) 8. Generating Documentation(TODO) 9. Others  Change-Id: I1f4c524c414e4ee6bfe48b5c03b44b5e65476cae,quality,,,,,,
openstack%2Fkuryr-libnetwork~master~I1f4c524c414e4ee6bfe48b5c03b44b5e65476cae,https://review.opendev.org/450677,[WIP] Refactor docs,[WIP] Refactor docs  Split docs into following parts: 1. Supported features 2. Installation(TODO) 3. Run as service container(TODO) 4. Run Fullstack test 5. Release Notes 6. Run nested-container(TODO) 7. Configuration(TODO) 8. Generating Documentation(TODO) 9. Others  Change-Id: I1f4c524c414e4ee6bfe48b5c03b44b5e65476cae,objective,,,,,,
openstack%2Fpython-ironicclient~master~Iaf0be4a6221c535ffa5df30b42142696f2e3e753,https://review.opendev.org/515459,Refactor check for 'latest' version,"Refactor check for 'latest' version  Refactor checking for the 'latest' version to remove code duplication.  Add a unit test which proves comments that if the ""--os-baremetal-api-version"" command line argument is not given then ReplaceLatestVersion is not called.  Change-Id: Iaf0be4a6221c535ffa5df30b42142696f2e3e753",objective,,,,,,
openstack%2Fpython-ironicclient~master~Iaf0be4a6221c535ffa5df30b42142696f2e3e753,https://review.opendev.org/515459,Refactor check for 'latest' version,"Refactor check for 'latest' version  Refactor checking for the 'latest' version to remove code duplication.  Add a unit test which proves comments that if the ""--os-baremetal-api-version"" command line argument is not given then ReplaceLatestVersion is not called.  Change-Id: Iaf0be4a6221c535ffa5df30b42142696f2e3e753",quality,,,,,,
openstack%2Fswift~master~I09779a3b6187e1c00d30651c14c2dde69edf0ec7,https://review.opendev.org/451896,sharding: Test and refactor for _misplaced_objects,sharding: Test and refactor for _misplaced_objects  Change-Id: I09779a3b6187e1c00d30651c14c2dde69edf0ec7,testing,,,,,,
openstack%2Fopenstack-ansible~master~Idb518f7e6aff1b60f1b9cdf567f42e422c7ead4b,https://review.opendev.org/403915,Refactor IP configuration loading,"Refactor IP configuration loading  Previously the set_used_ips function did all of the work to read the configuration and inventory data to determine how to mark IPs as used.  This changeset splits that work into separate functions, one for configuration and inventory, and uses their output to the set the used IPs.  The information was separated this way in preparation for using with an IPManager instance instead of the Queue.Queue and set objects in the future.  Also added were tests for the configuration and inventory parsing. The TestSetUsedIPS test was moved into the test_ips module for consistency.  Change-Id: Idb518f7e6aff1b60f1b9cdf567f42e422c7ead4b",testing,,,,,,
openstack%2Fopenstack-ansible~master~Idb518f7e6aff1b60f1b9cdf567f42e422c7ead4b,https://review.opendev.org/403915,Refactor IP configuration loading,"Refactor IP configuration loading  Previously the set_used_ips function did all of the work to read the configuration and inventory data to determine how to mark IPs as used.  This changeset splits that work into separate functions, one for configuration and inventory, and uses their output to the set the used IPs.  The information was separated this way in preparation for using with an IPManager instance instead of the Queue.Queue and set objects in the future.  Also added were tests for the configuration and inventory parsing. The TestSetUsedIPS test was moved into the test_ips module for consistency.  Change-Id: Idb518f7e6aff1b60f1b9cdf567f42e422c7ead4b",quality,,,,,,
openstack%2Fopenstack-ansible~master~Idb518f7e6aff1b60f1b9cdf567f42e422c7ead4b,https://review.opendev.org/403915,Refactor IP configuration loading,"Refactor IP configuration loading  Previously the set_used_ips function did all of the work to read the configuration and inventory data to determine how to mark IPs as used.  This changeset splits that work into separate functions, one for configuration and inventory, and uses their output to the set the used IPs.  The information was separated this way in preparation for using with an IPManager instance instead of the Queue.Queue and set objects in the future.  Also added were tests for the configuration and inventory parsing. The TestSetUsedIPS test was moved into the test_ips module for consistency.  Change-Id: Idb518f7e6aff1b60f1b9cdf567f42e422c7ead4b",objective,,,,,,
openstack%2Fos-service-types~master~I7c96e89d9c5a5d8336abcb63de8aac0d17b4b3f6,https://review.opendev.org/484445,Refactor bulk of data checking into mixin class,Refactor bulk of data checking into mixin class  We have a set of testscenarios that match with test methods that validate input and output data. We also have a test class which describes each type of setup. Copy the scenarios and methods into a mixin class so that we can have one rather than two sets of those.  Change-Id: I7c96e89d9c5a5d8336abcb63de8aac0d17b4b3f6,testing,,,,,,
openstack%2Fos-service-types~master~I7c96e89d9c5a5d8336abcb63de8aac0d17b4b3f6,https://review.opendev.org/484445,Refactor bulk of data checking into mixin class,Refactor bulk of data checking into mixin class  We have a set of testscenarios that match with test methods that validate input and output data. We also have a test class which describes each type of setup. Copy the scenarios and methods into a mixin class so that we can have one rather than two sets of those.  Change-Id: I7c96e89d9c5a5d8336abcb63de8aac0d17b4b3f6,quality,,,,,,
openstack%2Fos-service-types~master~I7c96e89d9c5a5d8336abcb63de8aac0d17b4b3f6,https://review.opendev.org/484445,Refactor bulk of data checking into mixin class,Refactor bulk of data checking into mixin class  We have a set of testscenarios that match with test methods that validate input and output data. We also have a test class which describes each type of setup. Copy the scenarios and methods into a mixin class so that we can have one rather than two sets of those.  Change-Id: I7c96e89d9c5a5d8336abcb63de8aac0d17b4b3f6,objective,,,,,,
openstack%2Ffuel-qa~master~I2413370370193b8288beb9851a9306f5c8537d15,https://review.opendev.org/362676,Refactor shutdown_ceph test. Add power_outage_ceph,Refactor shutdown_ceph_for_all test. Add new power_outage_ceph_for_all test  + refactor existing shutdown_ceph_for_all test + add new power_outage_ceph_for_all test  Related blueprint run-fuel-qa-on-baremetal  Change-Id: I2413370370193b8288beb9851a9306f5c8537d15,testing,,,,,,
openstack%2Ffuel-qa~master~I2413370370193b8288beb9851a9306f5c8537d15,https://review.opendev.org/362676,Refactor shutdown_ceph test. Add power_outage_ceph,Refactor shutdown_ceph_for_all test. Add new power_outage_ceph_for_all test  + refactor existing shutdown_ceph_for_all test + add new power_outage_ceph_for_all test  Related blueprint run-fuel-qa-on-baremetal  Change-Id: I2413370370193b8288beb9851a9306f5c8537d15,objective,,,,,,
openstack%2Fceilometer~master~I5bd4cac7294d62621e32c20f1581b2a4a6442af4,https://review.opendev.org/311611,refactor tempest test code,"refactor tempest test code  1. extract base class from api to a higher directory, and move    most code to scenario directory because they indeed are scenario    based, see [1] 2. we have event RBAC now, so normal test should have await_event    as well, then admin test just need to promote credential and    connect to admin client 3. split nova and glance test code to individual file, so in future    we can add new code separately 4. object storage middleware should use base class as well  [1]: http://docs.openstack.org/developer/tempest/field_guide/index.html#scenario-field-guide  Change-Id: I5bd4cac7294d62621e32c20f1581b2a4a6442af4",testing,,,,,,
openstack%2Fceilometer~master~I5bd4cac7294d62621e32c20f1581b2a4a6442af4,https://review.opendev.org/311611,refactor tempest test code,"refactor tempest test code  1. extract base class from api to a higher directory, and move    most code to scenario directory because they indeed are scenario    based, see [1] 2. we have event RBAC now, so normal test should have await_event    as well, then admin test just need to promote credential and    connect to admin client 3. split nova and glance test code to individual file, so in future    we can add new code separately 4. object storage middleware should use base class as well  [1]: http://docs.openstack.org/developer/tempest/field_guide/index.html#scenario-field-guide  Change-Id: I5bd4cac7294d62621e32c20f1581b2a4a6442af4",objective,,,,,,
openstack%2Fnova~master~I83062ae76ecf1f7eb08cdd6c2536bd5335a3cc63,https://review.opendev.org/462738,Refactor instance-exists docstring and unit test,"Refactor instance-exists comment and test  Refactored the instance-exists related notify_usage_exists method documentation, and the test_instance_usage_audit unit test in unit/compute/test_compute_mgr.py  Change-Id: I83062ae76ecf1f7eb08cdd6c2536bd5335a3cc63",testing,,,,,,
openstack%2Fnova~master~I83062ae76ecf1f7eb08cdd6c2536bd5335a3cc63,https://review.opendev.org/462738,Refactor instance-exists docstring and unit test,"Refactor instance-exists comment and test  Refactored the instance-exists related notify_usage_exists method documentation, and the test_instance_usage_audit unit test in unit/compute/test_compute_mgr.py  Change-Id: I83062ae76ecf1f7eb08cdd6c2536bd5335a3cc63",quality,,,,,,
openstack%2Fnova~master~I83062ae76ecf1f7eb08cdd6c2536bd5335a3cc63,https://review.opendev.org/462738,Refactor instance-exists docstring and unit test,"Refactor instance-exists comment and test  Refactored the instance-exists related notify_usage_exists method documentation, and the test_instance_usage_audit unit test in unit/compute/test_compute_mgr.py  Change-Id: I83062ae76ecf1f7eb08cdd6c2536bd5335a3cc63",objective,,,,,,
openstack%2Fnova~master~I125e8fa06e7e095aca092d986947e8bd68c16914,https://review.opendev.org/356651,libvirt: Refactor _create_image into storagepolicy,"libvirt: Refactor _create_image into storagepolicy  _create_image contains logic to:  * Iterate over all of an instance's disks * Create those disks  This is problematic for a few reasons. Firstly, finish_migration wants to iterate over all of an instance's disks but *not* create them, only check and resize them. It currently re-uses _create_image in a manner which relies on the 'all the things' behaviour of cache(), which is confusing and error-prone.  Secondly, rescue doesn't need to iterate over all disks. It gets round this by not passing in block_device_info, but this is confusing.  Lastly, there is a parallel implementation of this functionality in _create_images_and_backing using different data, which creates disks differently. We would like the functionality of _create_image to be re-usable in that context to avoid edge cases where the behaviours are different.  This change introduces the StoragePolicy object, which is a new canonical source for an instance's disks. It exposes the disk iteration of _create_iteration in its methods. Additionally, instead of returning an Image object it returns a DiskCreationProxy object. This object wraps the Image and adds an addition method, create(), taking no arguments. This means that the caller can iterate over disks in a manner consistent with _create_image without creating them if that isn't required. This change is required for finish_migration().  Note that the changes in test_driver are intentionally minimal. In fact, they are almost entirely mechanical due to the changed interface of _create_image() requiring a StoragePolicy object. The substantive changes are:  * tests which only tested _create_ephemeral, _create_swap, and   _is_supported_fs move to test_storagepolicy, which is where the   functions under test have moved. The tests are updated to use mock   in place of mox, but are otherwise identical.  * We now create config disk, kernel, and ramdisk as 'flat' instead of   'raw'. These are completely equivalent.  The lack of changes in test_driver means that we are continuing to test calls all the way down to imagebackend.Image.cache, which give us a degree of confidence that we haven't introduced regressions. With this more practical separation of logic, we can now incrementally make tests in test_driver more 'unity' by stopping at the storagepolicy boundary. Over time this should eliminate a significant number of tests in test_driver.  TODO: Add comprehensive tests for storagepolicy.  Change-Id: I125e8fa06e7e095aca092d986947e8bd68c16914",testing,,,,,,
openstack%2Fnova~master~I125e8fa06e7e095aca092d986947e8bd68c16914,https://review.opendev.org/356651,libvirt: Refactor _create_image into storagepolicy,"libvirt: Refactor _create_image into storagepolicy  _create_image contains logic to:  * Iterate over all of an instance's disks * Create those disks  This is problematic for a few reasons. Firstly, finish_migration wants to iterate over all of an instance's disks but *not* create them, only check and resize them. It currently re-uses _create_image in a manner which relies on the 'all the things' behaviour of cache(), which is confusing and error-prone.  Secondly, rescue doesn't need to iterate over all disks. It gets round this by not passing in block_device_info, but this is confusing.  Lastly, there is a parallel implementation of this functionality in _create_images_and_backing using different data, which creates disks differently. We would like the functionality of _create_image to be re-usable in that context to avoid edge cases where the behaviours are different.  This change introduces the StoragePolicy object, which is a new canonical source for an instance's disks. It exposes the disk iteration of _create_iteration in its methods. Additionally, instead of returning an Image object it returns a DiskCreationProxy object. This object wraps the Image and adds an addition method, create(), taking no arguments. This means that the caller can iterate over disks in a manner consistent with _create_image without creating them if that isn't required. This change is required for finish_migration().  Note that the changes in test_driver are intentionally minimal. In fact, they are almost entirely mechanical due to the changed interface of _create_image() requiring a StoragePolicy object. The substantive changes are:  * tests which only tested _create_ephemeral, _create_swap, and   _is_supported_fs move to test_storagepolicy, which is where the   functions under test have moved. The tests are updated to use mock   in place of mox, but are otherwise identical.  * We now create config disk, kernel, and ramdisk as 'flat' instead of   'raw'. These are completely equivalent.  The lack of changes in test_driver means that we are continuing to test calls all the way down to imagebackend.Image.cache, which give us a degree of confidence that we haven't introduced regressions. With this more practical separation of logic, we can now incrementally make tests in test_driver more 'unity' by stopping at the storagepolicy boundary. Over time this should eliminate a significant number of tests in test_driver.  TODO: Add comprehensive tests for storagepolicy.  Change-Id: I125e8fa06e7e095aca092d986947e8bd68c16914",quality,,,,,,
openstack%2Fnova~master~I125e8fa06e7e095aca092d986947e8bd68c16914,https://review.opendev.org/356651,libvirt: Refactor _create_image into storagepolicy,"libvirt: Refactor _create_image into storagepolicy  _create_image contains logic to:  * Iterate over all of an instance's disks * Create those disks  This is problematic for a few reasons. Firstly, finish_migration wants to iterate over all of an instance's disks but *not* create them, only check and resize them. It currently re-uses _create_image in a manner which relies on the 'all the things' behaviour of cache(), which is confusing and error-prone.  Secondly, rescue doesn't need to iterate over all disks. It gets round this by not passing in block_device_info, but this is confusing.  Lastly, there is a parallel implementation of this functionality in _create_images_and_backing using different data, which creates disks differently. We would like the functionality of _create_image to be re-usable in that context to avoid edge cases where the behaviours are different.  This change introduces the StoragePolicy object, which is a new canonical source for an instance's disks. It exposes the disk iteration of _create_iteration in its methods. Additionally, instead of returning an Image object it returns a DiskCreationProxy object. This object wraps the Image and adds an addition method, create(), taking no arguments. This means that the caller can iterate over disks in a manner consistent with _create_image without creating them if that isn't required. This change is required for finish_migration().  Note that the changes in test_driver are intentionally minimal. In fact, they are almost entirely mechanical due to the changed interface of _create_image() requiring a StoragePolicy object. The substantive changes are:  * tests which only tested _create_ephemeral, _create_swap, and   _is_supported_fs move to test_storagepolicy, which is where the   functions under test have moved. The tests are updated to use mock   in place of mox, but are otherwise identical.  * We now create config disk, kernel, and ramdisk as 'flat' instead of   'raw'. These are completely equivalent.  The lack of changes in test_driver means that we are continuing to test calls all the way down to imagebackend.Image.cache, which give us a degree of confidence that we haven't introduced regressions. With this more practical separation of logic, we can now incrementally make tests in test_driver more 'unity' by stopping at the storagepolicy boundary. Over time this should eliminate a significant number of tests in test_driver.  TODO: Add comprehensive tests for storagepolicy.  Change-Id: I125e8fa06e7e095aca092d986947e8bd68c16914",objective,,,,,,
openstack%2Fpatrole~master~I28b0a6b04bc30961a0f17aa9b0974a513808664c,https://review.opendev.org/443987,Roles RBAC test Refactor Keystone API v2 roles,Roles RBAC test Refactor Keystone API v2 roles  - refactor the changes to rbac_utils so that the tests pass  Partially-Implements bp: initial-tests-identity  Change-Id: I28b0a6b04bc30961a0f17aa9b0974a513808664c,testing,,,,,,
openstack%2Fpatrole~master~I28b0a6b04bc30961a0f17aa9b0974a513808664c,https://review.opendev.org/443987,Roles RBAC test Refactor Keystone API v2 roles,Roles RBAC test Refactor Keystone API v2 roles  - refactor the changes to rbac_utils so that the tests pass  Partially-Implements bp: initial-tests-identity  Change-Id: I28b0a6b04bc30961a0f17aa9b0974a513808664c,integration,,,,,,
openstack%2Fpatrole~master~I28b0a6b04bc30961a0f17aa9b0974a513808664c,https://review.opendev.org/443987,Roles RBAC test Refactor Keystone API v2 roles,Roles RBAC test Refactor Keystone API v2 roles  - refactor the changes to rbac_utils so that the tests pass  Partially-Implements bp: initial-tests-identity  Change-Id: I28b0a6b04bc30961a0f17aa9b0974a513808664c,objective,,,,,,
openstack%2Fcinder~master~I10d56eb260d39761411eb3c4a7c30329fd3e22bb,https://review.opendev.org/356194,[Trivial] Refactor the case test_storwize_vdisk_copy_ops,Refactor the case test_storwize_vdisk_copy_ops  Let the assertion explicitly test the 'vdiskcopyops' is not in the admin_metadata dictionary.  Change-Id: I10d56eb260d39761411eb3c4a7c30329fd3e22bb Partial-Bug: #1613154,testing,,,,,,
openstack%2Fcinder~master~I10d56eb260d39761411eb3c4a7c30329fd3e22bb,https://review.opendev.org/356194,[Trivial] Refactor the case test_storwize_vdisk_copy_ops,Refactor the case test_storwize_vdisk_copy_ops  Let the assertion explicitly test the 'vdiskcopyops' is not in the admin_metadata dictionary.  Change-Id: I10d56eb260d39761411eb3c4a7c30329fd3e22bb Partial-Bug: #1613154,objective,,,,,,
openstack%2Ftacker~master~I7f538a900550d44efda3b7ea7c1be6132957e866,https://review.opendev.org/317749,tacker resource and test_api_v2 refactoring,WIP: Initial unit test API refactor  The amount of lines changed made me want to commit this. Feedback is appreciated.  Change-Id: I7f538a900550d44efda3b7ea7c1be6132957e866 Related-Bug: #1579167,testing,,,,,,
openstack%2Ftacker~master~I7f538a900550d44efda3b7ea7c1be6132957e866,https://review.opendev.org/317749,tacker resource and test_api_v2 refactoring,WIP: Initial unit test API refactor  The amount of lines changed made me want to commit this. Feedback is appreciated.  Change-Id: I7f538a900550d44efda3b7ea7c1be6132957e866 Related-Bug: #1579167,integration,,,,,,
openstack%2Fbarbican~master~I0761655ce3f552b3e9c6a4049778e0252098a110,https://review.opendev.org/233633,Refactor Base64 use and other changes for Python3,"Refactor Base64 use and other changes for Python3  This is WIP until Oslo.Serialization 1.10 is added to global requirements.  It is an OpenStack goal to make the code base Python 2 and 3 compatible. This commit makes several changes to enable that and extends the py34 unit test environment to enforce it.  The following conventions were used: 1) oslo.serialization.base64 has base64 encode and decode routines that accept both bytes and strings as input, and can return bytes or strings as output.  They are very Python 2/3 friendly. 2) b'foo'.  The b'' string prefix has no affect in Python 2.  It is a signal to Python 3 that a string literal is a bytestring. b'' is the right choice for much of Barbican, since that the type expected and returned by many of our dependent libraries. 3) e.message for exceptions has been removed.  It is deprecated in py27 and removed from py3. 4) ''.encode('utf-8') generates bytes from a string for py3.  It returns the string for py2. 5) b''.decode('utf-8') generates a string from from bytes for py3.  It generates u'' for py2, which is not typically used in Barbican. 6) isinstance(obj, type) can be used to check for necessary conversions if needed. 7) // does integer division  Change-Id: I0761655ce3f552b3e9c6a4049778e0252098a110 Partially-Implements: blueprint barbican-py3",integration,,,,,,
openstack%2Fbarbican~master~I0761655ce3f552b3e9c6a4049778e0252098a110,https://review.opendev.org/233633,Refactor Base64 use and other changes for Python3,"Refactor Base64 use and other changes for Python3  This is WIP until Oslo.Serialization 1.10 is added to global requirements.  It is an OpenStack goal to make the code base Python 2 and 3 compatible. This commit makes several changes to enable that and extends the py34 unit test environment to enforce it.  The following conventions were used: 1) oslo.serialization.base64 has base64 encode and decode routines that accept both bytes and strings as input, and can return bytes or strings as output.  They are very Python 2/3 friendly. 2) b'foo'.  The b'' string prefix has no affect in Python 2.  It is a signal to Python 3 that a string literal is a bytestring. b'' is the right choice for much of Barbican, since that the type expected and returned by many of our dependent libraries. 3) e.message for exceptions has been removed.  It is deprecated in py27 and removed from py3. 4) ''.encode('utf-8') generates bytes from a string for py3.  It returns the string for py2. 5) b''.decode('utf-8') generates a string from from bytes for py3.  It generates u'' for py2, which is not typically used in Barbican. 6) isinstance(obj, type) can be used to check for necessary conversions if needed. 7) // does integer division  Change-Id: I0761655ce3f552b3e9c6a4049778e0252098a110 Partially-Implements: blueprint barbican-py3",objective,,,,,,
openstack%2Fbarbican~master~I0761655ce3f552b3e9c6a4049778e0252098a110,https://review.opendev.org/233633,Refactor Base64 use and other changes for Python3,"Refactor Base64 use and other changes for Python3  This is WIP until Oslo.Serialization 1.10 is added to global requirements.  It is an OpenStack goal to make the code base Python 2 and 3 compatible. This commit makes several changes to enable that and extends the py34 unit test environment to enforce it.  The following conventions were used: 1) oslo.serialization.base64 has base64 encode and decode routines that accept both bytes and strings as input, and can return bytes or strings as output.  They are very Python 2/3 friendly. 2) b'foo'.  The b'' string prefix has no affect in Python 2.  It is a signal to Python 3 that a string literal is a bytestring. b'' is the right choice for much of Barbican, since that the type expected and returned by many of our dependent libraries. 3) e.message for exceptions has been removed.  It is deprecated in py27 and removed from py3. 4) ''.encode('utf-8') generates bytes from a string for py3.  It returns the string for py2. 5) b''.decode('utf-8') generates a string from from bytes for py3.  It generates u'' for py2, which is not typically used in Barbican. 6) isinstance(obj, type) can be used to check for necessary conversions if needed. 7) // does integer division  Change-Id: I0761655ce3f552b3e9c6a4049778e0252098a110 Partially-Implements: blueprint barbican-py3",objective,,,,,,
openstack%2Fdragonflow~master~I360546455da7089bcede2783d9cb669fb87e7a56,https://review.opendev.org/393798,Refactor test case for ml2 mech driver(network),Refactor test case for ml2 mech driver(network)  This patch makes the test case atomic and introduces ml2 test cases.  Change-Id: I360546455da7089bcede2783d9cb669fb87e7a56 Closes-Bug: #1633078,testing,,,,,,
openstack%2Fdragonflow~master~I360546455da7089bcede2783d9cb669fb87e7a56,https://review.opendev.org/393798,Refactor test case for ml2 mech driver(network),Refactor test case for ml2 mech driver(network)  This patch makes the test case atomic and introduces ml2 test cases.  Change-Id: I360546455da7089bcede2783d9cb669fb87e7a56 Closes-Bug: #1633078,objective,,,,,,
x%2Ffuel-ccp-tests~master~I81512ca5015e320114fa23956fc1231c8c81b7b6,https://review.opendev.org/404788,Refactor daemonset upgrade/rollout test according to last changes,[WIP] Refactor daemonset upgrade/rollout test according to last changes  Change-Id: I81512ca5015e320114fa23956fc1231c8c81b7b6,testing,,,,,,
openstack%2Ftrove~master~I5277c107ae95b16d3fc555dbdbb4c167c8836fc8,https://review.opendev.org/349713,Refactor test_dbaas.py: strings to variables and re-scoping variables,"Refactor test_dbaas.py  user is now a TestCase member. Refactored test_dbaas.py as per this change. Instead of using variables per the test functions, the TestCase class  is inherited and the user member is then usable in the tests.  Closes Bug:#1474100 Change-Id: I5277c107ae95b16d3fc555dbdbb4c167c8836fc8",testing,,,,,,
openstack%2Ftrove~master~I5277c107ae95b16d3fc555dbdbb4c167c8836fc8,https://review.opendev.org/349713,Refactor test_dbaas.py: strings to variables and re-scoping variables,"Refactor test_dbaas.py  user is now a TestCase member. Refactored test_dbaas.py as per this change. Instead of using variables per the test functions, the TestCase class  is inherited and the user member is then usable in the tests.  Closes Bug:#1474100 Change-Id: I5277c107ae95b16d3fc555dbdbb4c167c8836fc8",objective,,,,,,
openstack%2Ftrove~master~I5277c107ae95b16d3fc555dbdbb4c167c8836fc8,https://review.opendev.org/349713,Refactor test_dbaas.py: strings to variables and re-scoping variables,"Refactor test_dbaas.py  user is now a TestCase member. Refactored test_dbaas.py as per this change. Instead of using variables per the test functions, the TestCase class  is inherited and the user member is then usable in the tests.  Closes Bug:#1474100 Change-Id: I5277c107ae95b16d3fc555dbdbb4c167c8836fc8",quality,,,,,,
x%2Fmixmatch~master~Ida23163b82e8d4b14fa08748e973a6adb37ee330,https://review.opendev.org/411955,Refactor test samples,Refactor test samples  Change organization of samples for tests so that it is more scalable and organized. Unfinished.  Change-Id: Ida23163b82e8d4b14fa08748e973a6adb37ee330,testing,,,,,,
x%2Fmixmatch~master~Ida23163b82e8d4b14fa08748e973a6adb37ee330,https://review.opendev.org/411955,Refactor test samples,Refactor test samples  Change organization of samples for tests so that it is more scalable and organized. Unfinished.  Change-Id: Ida23163b82e8d4b14fa08748e973a6adb37ee330,quality,,,,,,
x%2Fmixmatch~master~Ida23163b82e8d4b14fa08748e973a6adb37ee330,https://review.opendev.org/411955,Refactor test samples,Refactor test samples  Change organization of samples for tests so that it is more scalable and organized. Unfinished.  Change-Id: Ida23163b82e8d4b14fa08748e973a6adb37ee330,objective,,,,,,
openstack%2Fneutron~master~I4b52ebed6ae6fe568a0d725e08fcdb2c819341f2,https://review.opendev.org/716773,[Fullstack] Refactor SG tests,"[Fullstack] Refactor SG tests  As firewall driver in fullstack tests can interfere between various tests, all tests were so far added to single test in the class.  It was hard e.g. to debug when exaclty specific issue happend. So now, as those tests are always run serially (at least in the gate) lets refactor it and make separate test cases for various scenarios.  Change-Id: I4b52ebed6ae6fe568a0d725e08fcdb2c819341f2",testing,,,,,,
openstack%2Fneutron~master~I4b52ebed6ae6fe568a0d725e08fcdb2c819341f2,https://review.opendev.org/716773,[Fullstack] Refactor SG tests,"[Fullstack] Refactor SG tests  As firewall driver in fullstack tests can interfere between various tests, all tests were so far added to single test in the class.  It was hard e.g. to debug when exaclty specific issue happend. So now, as those tests are always run serially (at least in the gate) lets refactor it and make separate test cases for various scenarios.  Change-Id: I4b52ebed6ae6fe568a0d725e08fcdb2c819341f2",quality,,,,,,
openstack%2Fneutron~master~I4b52ebed6ae6fe568a0d725e08fcdb2c819341f2,https://review.opendev.org/716773,[Fullstack] Refactor SG tests,"[Fullstack] Refactor SG tests  As firewall driver in fullstack tests can interfere between various tests, all tests were so far added to single test in the class.  It was hard e.g. to debug when exaclty specific issue happend. So now, as those tests are always run serially (at least in the gate) lets refactor it and make separate test cases for various scenarios.  Change-Id: I4b52ebed6ae6fe568a0d725e08fcdb2c819341f2",objective,,,,,,
openstack%2Fnova~master~I5ea03297987def028c93c140dbd2393c54466424,https://review.opendev.org/293553,xenapi: refactor check_can_live_migrate_destination,"xenapi: refactor check_can_live_migrate_destination  Refactoring check_can_live_migrate_destination so its very clear how the block_migrate parameter is used within the method. It turns out this is correct, but it this should make it easier to understand. The changes shouldn't affect the test coverage of this code.  Change-Id: I5ea03297987def028c93c140dbd2393c54466424",testing,,,,,,
openstack%2Fnova~master~I5ea03297987def028c93c140dbd2393c54466424,https://review.opendev.org/293553,xenapi: refactor check_can_live_migrate_destination,"xenapi: refactor check_can_live_migrate_destination  Refactoring check_can_live_migrate_destination so its very clear how the block_migrate parameter is used within the method. It turns out this is correct, but it this should make it easier to understand. The changes shouldn't affect the test coverage of this code.  Change-Id: I5ea03297987def028c93c140dbd2393c54466424",integration,,,,,,
openstack%2Fnova~master~I5ea03297987def028c93c140dbd2393c54466424,https://review.opendev.org/293553,xenapi: refactor check_can_live_migrate_destination,"xenapi: refactor check_can_live_migrate_destination  Refactoring check_can_live_migrate_destination so its very clear how the block_migrate parameter is used within the method. It turns out this is correct, but it this should make it easier to understand. The changes shouldn't affect the test coverage of this code.  Change-Id: I5ea03297987def028c93c140dbd2393c54466424",objective,,,,,,
openstack%2Fnova~master~I5ea03297987def028c93c140dbd2393c54466424,https://review.opendev.org/293553,xenapi: refactor check_can_live_migrate_destination,"xenapi: refactor check_can_live_migrate_destination  Refactoring check_can_live_migrate_destination so its very clear how the block_migrate parameter is used within the method. It turns out this is correct, but it this should make it easier to understand. The changes shouldn't affect the test coverage of this code.  Change-Id: I5ea03297987def028c93c140dbd2393c54466424",quality,,,,,,
openstack%2Ftacker~master~Iac9810f37a992f93a944d8ae76c849bcae1bd637,https://review.opendev.org/320546,unit test refactoring trivial changes,unit test refactoring trivial changes  Change-Id: Iac9810f37a992f93a944d8ae76c849bcae1bd637 Depends-On: I7f538a900550d44efda3b7ea7c1be6132957e866 Partial-Bug: #1579167,testing,,,,,,
openstack%2Ftacker~master~Iac9810f37a992f93a944d8ae76c849bcae1bd637,https://review.opendev.org/320546,unit test refactoring trivial changes,unit test refactoring trivial changes  Change-Id: Iac9810f37a992f93a944d8ae76c849bcae1bd637 Depends-On: I7f538a900550d44efda3b7ea7c1be6132957e866 Partial-Bug: #1579167,objective,,,,,,
openstack%2Fneutron~master~I0870dc906351b86376cb2bac4715cdc7460273dc,https://review.opendev.org/353220,Refactoring tempest test config options,Refactoring tempest test config options  Refactoring Neutron configuration options for tempest test config to be in neutron/conf/tests/tempest. This will allow centralization of all config options and provide an easy way to import.  Change-Id: I0870dc906351b86376cb2bac4715cdc7460273dc Partial-Bug: #1563069,testing,,,,,,
openstack%2Fneutron~master~I0870dc906351b86376cb2bac4715cdc7460273dc,https://review.opendev.org/353220,Refactoring tempest test config options,Refactoring tempest test config options  Refactoring Neutron configuration options for tempest test config to be in neutron/conf/tests/tempest. This will allow centralization of all config options and provide an easy way to import.  Change-Id: I0870dc906351b86376cb2bac4715cdc7460273dc Partial-Bug: #1563069,quality,,,,,,
openstack%2Fneutron~master~I0870dc906351b86376cb2bac4715cdc7460273dc,https://review.opendev.org/353220,Refactoring tempest test config options,Refactoring tempest test config options  Refactoring Neutron configuration options for tempest test config to be in neutron/conf/tests/tempest. This will allow centralization of all config options and provide an easy way to import.  Change-Id: I0870dc906351b86376cb2bac4715cdc7460273dc Partial-Bug: #1563069,objective,,,,,,
openstack%2Fneutron~master~I1ee7ed32bc53e67ecd9861f54e40c55db3547540,https://review.opendev.org/352707,Refactoring common test config opts,Refactoring common test config opts  Refactoring Neutron configuration options for common test config to be in neutron/conf/tests/common. This will allow centralization of all config options and provide an easy way to import.  Change-Id: I1ee7ed32bc53e67ecd9861f54e40c55db3547540 Partial-Bug: #1563069,testing,,,,,,
openstack%2Fneutron~master~I1ee7ed32bc53e67ecd9861f54e40c55db3547540,https://review.opendev.org/352707,Refactoring common test config opts,Refactoring common test config opts  Refactoring Neutron configuration options for common test config to be in neutron/conf/tests/common. This will allow centralization of all config options and provide an easy way to import.  Change-Id: I1ee7ed32bc53e67ecd9861f54e40c55db3547540 Partial-Bug: #1563069,quality,,,,,,
openstack%2Fneutron~master~I1ee7ed32bc53e67ecd9861f54e40c55db3547540,https://review.opendev.org/352707,Refactoring common test config opts,Refactoring common test config opts  Refactoring Neutron configuration options for common test config to be in neutron/conf/tests/common. This will allow centralization of all config options and provide an easy way to import.  Change-Id: I1ee7ed32bc53e67ecd9861f54e40c55db3547540 Partial-Bug: #1563069,objective,,,,,,
openstack%2Fneutron~master~Iae3b2c63673a9635b35b571222837e34f63c6e36,https://review.opendev.org/352582,Refactoring functional test config opts,Refactoring functional test config opts  Refactoring Neutron configuration options for functional test config to be in neutron/conf/tests/functional/agent. This will allow centralization of all config options and provide an easy way to import.  Change-Id: Iae3b2c63673a9635b35b571222837e34f63c6e36 Partial-Bug: #1563069,testing,,,,,,
openstack%2Fneutron~master~Iae3b2c63673a9635b35b571222837e34f63c6e36,https://review.opendev.org/352582,Refactoring functional test config opts,Refactoring functional test config opts  Refactoring Neutron configuration options for functional test config to be in neutron/conf/tests/functional/agent. This will allow centralization of all config options and provide an easy way to import.  Change-Id: Iae3b2c63673a9635b35b571222837e34f63c6e36 Partial-Bug: #1563069,quality,,,,,,
openstack%2Fneutron~master~Iae3b2c63673a9635b35b571222837e34f63c6e36,https://review.opendev.org/352582,Refactoring functional test config opts,Refactoring functional test config opts  Refactoring Neutron configuration options for functional test config to be in neutron/conf/tests/functional/agent. This will allow centralization of all config options and provide an easy way to import.  Change-Id: Iae3b2c63673a9635b35b571222837e34f63c6e36 Partial-Bug: #1563069,objective,,,,,,
openstack%2Ftacker~master~I71d54313610f0690e5c9fcda16e85ab44abbaa67,https://review.opendev.org/327452,[DO NOT MERGE] Refactoring unit test,[DO NOT MERGE] Refactoring unit test  Removing the core_plugin logic to test the dsvm gate failed on commit: 25e47504f4066bb3270483736bbf5774730073b9.  Change-Id: I71d54313610f0690e5c9fcda16e85ab44abbaa67,testing,,,,,,
openstack%2Ftacker~master~I71d54313610f0690e5c9fcda16e85ab44abbaa67,https://review.opendev.org/327452,[DO NOT MERGE] Refactoring unit test,[DO NOT MERGE] Refactoring unit test  Removing the core_plugin logic to test the dsvm gate failed on commit: 25e47504f4066bb3270483736bbf5774730073b9.  Change-Id: I71d54313610f0690e5c9fcda16e85ab44abbaa67,objective,,,,,,
openstack%2Fswift~master~Ia82b3643a4c4edf329c4f7a2b05638f9de962c05,https://review.opendev.org/323950,Refactor locale tests and fix unicode issue,"Refactor locale tests and unicode issue  There is an issue if someone uses a non-english locale, that includes non US-ASCII chars. In that case appending a unicode argument to a string fails with an error.  This patch refactors the existing test, covering a few more different cases with english and non-english locales. The last test currently fails on master with an UnicodeDecodeError; this is fixed by the gettext decoding.  Closes-Bug: 1580678 Change-Id: Ia82b3643a4c4edf329c4f7a2b05638f9de962c05",testing,,,,,,
openstack%2Fswift~master~Ia82b3643a4c4edf329c4f7a2b05638f9de962c05,https://review.opendev.org/323950,Refactor locale tests and fix unicode issue,"Refactor locale tests and unicode issue  There is an issue if someone uses a non-english locale, that includes non US-ASCII chars. In that case appending a unicode argument to a string fails with an error.  This patch refactors the existing test, covering a few more different cases with english and non-english locales. The last test currently fails on master with an UnicodeDecodeError; this is fixed by the gettext decoding.  Closes-Bug: 1580678 Change-Id: Ia82b3643a4c4edf329c4f7a2b05638f9de962c05",objective,,,,,,
openstack%2Fswift~master~Ia82b3643a4c4edf329c4f7a2b05638f9de962c05,https://review.opendev.org/323950,Refactor locale tests and fix unicode issue,"Refactor locale tests and unicode issue  There is an issue if someone uses a non-english locale, that includes non US-ASCII chars. In that case appending a unicode argument to a string fails with an error.  This patch refactors the existing test, covering a few more different cases with english and non-english locales. The last test currently fails on master with an UnicodeDecodeError; this is fixed by the gettext decoding.  Closes-Bug: 1580678 Change-Id: Ia82b3643a4c4edf329c4f7a2b05638f9de962c05",objective,,,,,,
openstack%2Fcinder~master~I2ae13d466934e0e6c7bc802c6772814ba67f205c,https://review.opendev.org/328198,VMware: Unit test refactoring,VMware: Unit test refactoring  There are unit tests which test multiple cases and methods. This patch refactors the unit tests for the following methods in the vmdk module to fix this: * backup_volume * restore_backup * _restore_backing * _create_backing_from_stream_optimized_file  Change-Id: I2ae13d466934e0e6c7bc802c6772814ba67f205c,testing,,,,,,
openstack%2Fcinder~master~I2ae13d466934e0e6c7bc802c6772814ba67f205c,https://review.opendev.org/328198,VMware: Unit test refactoring,VMware: Unit test refactoring  There are unit tests which test multiple cases and methods. This patch refactors the unit tests for the following methods in the vmdk module to fix this: * backup_volume * restore_backup * _restore_backing * _create_backing_from_stream_optimized_file  Change-Id: I2ae13d466934e0e6c7bc802c6772814ba67f205c,objective,,,,,,
openstack%2Ffuel-ui~master~I3f222b8a365eba6f875549faa5f7bfb8307cff0f,https://review.opendev.org/341346,Refactor test_cluster_deployment.js nightly test,Refactor test_cluster_deployment.js nightly test  * added common timeout 90sec for each test in the test suite   because each test performs long runnning cluster actions * added proper clean-up after each test to make tests independent * optimized test suit setup: all needed variables are populated here  Change-Id: I3f222b8a365eba6f875549faa5f7bfb8307cff0f,testing,,,,,,
openstack%2Ffuel-ui~master~I3f222b8a365eba6f875549faa5f7bfb8307cff0f,https://review.opendev.org/341346,Refactor test_cluster_deployment.js nightly test,Refactor test_cluster_deployment.js nightly test  * added common timeout 90sec for each test in the test suite   because each test performs long runnning cluster actions * added proper clean-up after each test to make tests independent * optimized test suit setup: all needed variables are populated here  Change-Id: I3f222b8a365eba6f875549faa5f7bfb8307cff0f,objective,,,,,,
openstack%2Fswift~master~I6bbe195ee7757a62898d2c8551af7e9091afc3a0,https://review.opendev.org/350717,Refactor forking in container sync run_forever,Refactor forking in container sync run_forever  By refactoring the creation of pipes and forking of child processes into a helper method the test for run_forever can be greatly simplified.  Also relocate when self.report() is called to get uniform log events when one or more processes are used.  This patch also cleans up test_run_forever.  Change-Id: I6bbe195ee7757a62898d2c8551af7e9091afc3a0,integration,,,,,,
openstack%2Fswift~master~I6bbe195ee7757a62898d2c8551af7e9091afc3a0,https://review.opendev.org/350717,Refactor forking in container sync run_forever,Refactor forking in container sync run_forever  By refactoring the creation of pipes and forking of child processes into a helper method the test for run_forever can be greatly simplified.  Also relocate when self.report() is called to get uniform log events when one or more processes are used.  This patch also cleans up test_run_forever.  Change-Id: I6bbe195ee7757a62898d2c8551af7e9091afc3a0,testing,,,,,,
openstack%2Fswift~master~I6bbe195ee7757a62898d2c8551af7e9091afc3a0,https://review.opendev.org/350717,Refactor forking in container sync run_forever,Refactor forking in container sync run_forever  By refactoring the creation of pipes and forking of child processes into a helper method the test for run_forever can be greatly simplified.  Also relocate when self.report() is called to get uniform log events when one or more processes are used.  This patch also cleans up test_run_forever.  Change-Id: I6bbe195ee7757a62898d2c8551af7e9091afc3a0,objective,,,,,,
openstack%2Fswift~master~I6bbe195ee7757a62898d2c8551af7e9091afc3a0,https://review.opendev.org/350717,Refactor forking in container sync run_forever,Refactor forking in container sync run_forever  By refactoring the creation of pipes and forking of child processes into a helper method the test for run_forever can be greatly simplified.  Also relocate when self.report() is called to get uniform log events when one or more processes are used.  This patch also cleans up test_run_forever.  Change-Id: I6bbe195ee7757a62898d2c8551af7e9091afc3a0,quality,,,,,,
openstack%2Fproject-config~master~Ic38e24b8a8496ba58ecf13a57df16dc9263867ee,https://review.opendev.org/339111,Refactor Ironic job macro,"Refactor Ironic job macro  Ironic is getting more and more jobs to test the different deployment scenarios we support, every time we add a new optional feature we add a new conditional to the existing macro to enable it for one job, and then we have to add a new variable to every job template that uses that macro.  This is getting unmanageable and messy, so this patch refactors out the configurations we've been controlling using conditionals into their own builders which can be pulled into a job-template only if required. It does this by writing the optional script parts into a file call ironic-extra-vars which is then sourced in the main ironic macro.  Change-Id: Ic38e24b8a8496ba58ecf13a57df16dc9263867ee",integration,,,,,,
openstack%2Fproject-config~master~Ic38e24b8a8496ba58ecf13a57df16dc9263867ee,https://review.opendev.org/339111,Refactor Ironic job macro,"Refactor Ironic job macro  Ironic is getting more and more jobs to test the different deployment scenarios we support, every time we add a new optional feature we add a new conditional to the existing macro to enable it for one job, and then we have to add a new variable to every job template that uses that macro.  This is getting unmanageable and messy, so this patch refactors out the configurations we've been controlling using conditionals into their own builders which can be pulled into a job-template only if required. It does this by writing the optional script parts into a file call ironic-extra-vars which is then sourced in the main ironic macro.  Change-Id: Ic38e24b8a8496ba58ecf13a57df16dc9263867ee",quality,,,,,,
openstack%2Fproject-config~master~Ic38e24b8a8496ba58ecf13a57df16dc9263867ee,https://review.opendev.org/339111,Refactor Ironic job macro,"Refactor Ironic job macro  Ironic is getting more and more jobs to test the different deployment scenarios we support, every time we add a new optional feature we add a new conditional to the existing macro to enable it for one job, and then we have to add a new variable to every job template that uses that macro.  This is getting unmanageable and messy, so this patch refactors out the configurations we've been controlling using conditionals into their own builders which can be pulled into a job-template only if required. It does this by writing the optional script parts into a file call ironic-extra-vars which is then sourced in the main ironic macro.  Change-Id: Ic38e24b8a8496ba58ecf13a57df16dc9263867ee",objective,,,,,,
openstack%2Ftripleo-quickstart~master~I75d09aadf50e46a628ac178f87a0a9077bfe1458,https://review.opendev.org/688754,"DNM, test refactor of release","DNM, test refactor of release  Change-Id: I75d09aadf50e46a628ac178f87a0a9077bfe1458",testing,,,,,,
openstack%2Fswift~feature%2Fhummingbird~Ia82b3643a4c4edf329c4f7a2b05638f9de962c05,https://review.opendev.org/323946,Refactor locale tests and unicode issue,"Refactor locale tests and unicode issue  There is an issue if someone uses a non-english locale, that includes non US-ASCII chars. In that case appending a unicode argument to a string fails with an error.  This patch refactors the existing test, covering a few more different cases with english and non-english locales. The last test currently fails on master with an UnicodeDecodeError; this is fixed by the gettext decoding.  Closes-Bug: 1580678 Change-Id: Ia82b3643a4c4edf329c4f7a2b05638f9de962c05",testing,,,,,,
openstack%2Fswift~feature%2Fhummingbird~Ia82b3643a4c4edf329c4f7a2b05638f9de962c05,https://review.opendev.org/323946,Refactor locale tests and unicode issue,"Refactor locale tests and unicode issue  There is an issue if someone uses a non-english locale, that includes non US-ASCII chars. In that case appending a unicode argument to a string fails with an error.  This patch refactors the existing test, covering a few more different cases with english and non-english locales. The last test currently fails on master with an UnicodeDecodeError; this is fixed by the gettext decoding.  Closes-Bug: 1580678 Change-Id: Ia82b3643a4c4edf329c4f7a2b05638f9de962c05",objective,,,,,,
openstack%2Fswift~feature%2Fhummingbird~Ia82b3643a4c4edf329c4f7a2b05638f9de962c05,https://review.opendev.org/323946,Refactor locale tests and unicode issue,"Refactor locale tests and unicode issue  There is an issue if someone uses a non-english locale, that includes non US-ASCII chars. In that case appending a unicode argument to a string fails with an error.  This patch refactors the existing test, covering a few more different cases with english and non-english locales. The last test currently fails on master with an UnicodeDecodeError; this is fixed by the gettext decoding.  Closes-Bug: 1580678 Change-Id: Ia82b3643a4c4edf329c4f7a2b05638f9de962c05",objective,,,,,,
openstack%2Fnova~master~I444c596efdf926c62b64fdfddaee4791ad267434,https://review.opendev.org/271458,libvirt: refactor config drive live migration test,"libvirt: refactor config drive live migration test  The code in pre_live_migration() to check whether live migration with config drive is supported in various cases is complex enough and heavily enough commented that moving it to a separate function helps make the code more straightforward to follow.  Also, if we do this, we can create separate tests for the new function allowing us to test this logic in isolation rather than having to probe each condition in the context of a full call to pre_live_migration().  Change-Id: I444c596efdf926c62b64fdfddaee4791ad267434 Signed-off-by: Mark McLoughlin <markmc@redhat.com>",testing,,,,,,
openstack%2Fnova~master~I444c596efdf926c62b64fdfddaee4791ad267434,https://review.opendev.org/271458,libvirt: refactor config drive live migration test,"libvirt: refactor config drive live migration test  The code in pre_live_migration() to check whether live migration with config drive is supported in various cases is complex enough and heavily enough commented that moving it to a separate function helps make the code more straightforward to follow.  Also, if we do this, we can create separate tests for the new function allowing us to test this logic in isolation rather than having to probe each condition in the context of a full call to pre_live_migration().  Change-Id: I444c596efdf926c62b64fdfddaee4791ad267434 Signed-off-by: Mark McLoughlin <markmc@redhat.com>",quality,,,,,,
openstack%2Fnova~master~I444c596efdf926c62b64fdfddaee4791ad267434,https://review.opendev.org/271458,libvirt: refactor config drive live migration test,"libvirt: refactor config drive live migration test  The code in pre_live_migration() to check whether live migration with config drive is supported in various cases is complex enough and heavily enough commented that moving it to a separate function helps make the code more straightforward to follow.  Also, if we do this, we can create separate tests for the new function allowing us to test this logic in isolation rather than having to probe each condition in the context of a full call to pre_live_migration().  Change-Id: I444c596efdf926c62b64fdfddaee4791ad267434 Signed-off-by: Mark McLoughlin <markmc@redhat.com>",objective,,,,,,
openstack%2Fnetworking-ovn~master~Id7d8e9deeec264f01610be3a7e807631ed12476b,https://review.opendev.org/314534,DNM: Commit to test neutron worker refactor,DNM: Commit to test neutron worker refactor  The previous neutron worker refactor broke networking-ovn before it was reverted. This patch set tests the updated refactor to ensure it doesn't break networking-ovn again.  Change-Id: Id7d8e9deeec264f01610be3a7e807631ed12476b Depends-On: I3a32a95489831f0d862930384309eefdc881d8f6,testing,,,,,,
openstack%2Fnetworking-ovn~master~Id7d8e9deeec264f01610be3a7e807631ed12476b,https://review.opendev.org/314534,DNM: Commit to test neutron worker refactor,DNM: Commit to test neutron worker refactor  The previous neutron worker refactor broke networking-ovn before it was reverted. This patch set tests the updated refactor to ensure it doesn't break networking-ovn again.  Change-Id: Id7d8e9deeec264f01610be3a7e807631ed12476b Depends-On: I3a32a95489831f0d862930384309eefdc881d8f6,objective,,,,,,
openstack%2Fnetworking-ovn~master~Id7d8e9deeec264f01610be3a7e807631ed12476b,https://review.opendev.org/314534,DNM: Commit to test neutron worker refactor,DNM: Commit to test neutron worker refactor  The previous neutron worker refactor broke networking-ovn before it was reverted. This patch set tests the updated refactor to ensure it doesn't break networking-ovn again.  Change-Id: Id7d8e9deeec264f01610be3a7e807631ed12476b Depends-On: I3a32a95489831f0d862930384309eefdc881d8f6,objective,,,,,,
openstack%2Fmonasca-analytics~master~I68ca39850d02970acb40e21efddf4c675053b801,https://review.opendev.org/313494,refactored the test imports to comply with openstack convention,refactored the test imports to comply with openstack convention  Change-Id: I68ca39850d02970acb40e21efddf4c675053b801,objective,,,,,,
openstack%2Fmonasca-analytics~master~I68ca39850d02970acb40e21efddf4c675053b801,https://review.opendev.org/313494,refactored the test imports to comply with openstack convention,refactored the test imports to comply with openstack convention  Change-Id: I68ca39850d02970acb40e21efddf4c675053b801,quality,,,,,,
openstack%2Fneutron~master~I6b52cbfd1683b7f8147fb62c454bc7b68861f3f8,https://review.opendev.org/263199,Refactor test_attributes.py,Refactor test_attributes.py (part 1)  This patch refactored repeated test cases with a for loop  Change-Id: I6b52cbfd1683b7f8147fb62c454bc7b68861f3f8 Partial-Bug: #1526607,testing,,,,,,
openstack%2Fneutron~master~I6b52cbfd1683b7f8147fb62c454bc7b68861f3f8,https://review.opendev.org/263199,Refactor test_attributes.py,Refactor test_attributes.py (part 1)  This patch refactored repeated test cases with a for loop  Change-Id: I6b52cbfd1683b7f8147fb62c454bc7b68861f3f8 Partial-Bug: #1526607,quality,,,,,,
openstack%2Fneutron~master~I6b52cbfd1683b7f8147fb62c454bc7b68861f3f8,https://review.opendev.org/263199,Refactor test_attributes.py,Refactor test_attributes.py (part 1)  This patch refactored repeated test cases with a for loop  Change-Id: I6b52cbfd1683b7f8147fb62c454bc7b68861f3f8 Partial-Bug: #1526607,objective,,,,,,
openstack%2Fcue~master~Ia10ee12e47e422c3a6d9c576731a6361de8af70f,https://review.opendev.org/272296,Refactor test fixtures,Refactor test fixtures  Change-Id: Ia10ee12e47e422c3a6d9c576731a6361de8af70f,testing,,,,,,
openstack%2Ffreezer~stable%2Fliberty~I46194b40b3a65c15b6095cfb7388dcfd30d95997,https://review.opendev.org/290047,Refactoring of code:,"Refactoring of code:  1) new snapshot module with code vss, lvm and part of backup.py - create_snapshot and remove_snapshot  This module should contain all code related shadow, vss and any new snapshots.  2) new openstack module with code from osclient, restore and backup (BackupOS)  This module should contain code related to cinder/nova backups  3) new utils module with code from utils, win_utils, bandwidth, config, exec_cmd, validator, streaming  This module should containd code related to anything that cannot be extracted to its own module  4) new test modules - snapshot, utils, openstack and apiclient.  Test scheduler daemon is now located in scheduler module.  5) Backup.py is deleted and code placed to openstack.backup (BackupOS) and to job.BackupJob  Change-Id: I46194b40b3a65c15b6095cfb7388dcfd30d95997",integration,,,,,,
openstack%2Ffreezer~stable%2Fliberty~I46194b40b3a65c15b6095cfb7388dcfd30d95997,https://review.opendev.org/290047,Refactoring of code:,"Refactoring of code:  1) new snapshot module with code vss, lvm and part of backup.py - create_snapshot and remove_snapshot  This module should contain all code related shadow, vss and any new snapshots.  2) new openstack module with code from osclient, restore and backup (BackupOS)  This module should contain code related to cinder/nova backups  3) new utils module with code from utils, win_utils, bandwidth, config, exec_cmd, validator, streaming  This module should containd code related to anything that cannot be extracted to its own module  4) new test modules - snapshot, utils, openstack and apiclient.  Test scheduler daemon is now located in scheduler module.  5) Backup.py is deleted and code placed to openstack.backup (BackupOS) and to job.BackupJob  Change-Id: I46194b40b3a65c15b6095cfb7388dcfd30d95997",objective,,,,,,
openstack%2Fpbr~master~Ie8cd35b292997989e33cdb8e82d8740ae2f74041,https://review.opendev.org/133607,Refactor packaging module into functional modules,"Refactor packaging module into functional modules  The packaging module has become large and complex module containing many different functional features. Long term support and maintenance is significantly impacted.  The packaging module has been refactored into the following:      common - utility functions imported by several modules     git - all the git related functions     requirements - all the requirements processing functions     package cmds (aligned to how setuptools and distribute are defined)         build_doc         egg_info         install         install_scripts         sdist         test  The dependencies and test cases have been updated to point to the new modules except for version. A separate refactoring of version will be handled in a different patch, at which point the packaging module can be deprecated and/or removed.  Change-Id: Ie8cd35b292997989e33cdb8e82d8740ae2f74041",testing,,,,,,
openstack%2Fpbr~master~Ie8cd35b292997989e33cdb8e82d8740ae2f74041,https://review.opendev.org/133607,Refactor packaging module into functional modules,"Refactor packaging module into functional modules  The packaging module has become large and complex module containing many different functional features. Long term support and maintenance is significantly impacted.  The packaging module has been refactored into the following:      common - utility functions imported by several modules     git - all the git related functions     requirements - all the requirements processing functions     package cmds (aligned to how setuptools and distribute are defined)         build_doc         egg_info         install         install_scripts         sdist         test  The dependencies and test cases have been updated to point to the new modules except for version. A separate refactoring of version will be handled in a different patch, at which point the packaging module can be deprecated and/or removed.  Change-Id: Ie8cd35b292997989e33cdb8e82d8740ae2f74041",quality,,,,,,
openstack%2Fpbr~master~Ie8cd35b292997989e33cdb8e82d8740ae2f74041,https://review.opendev.org/133607,Refactor packaging module into functional modules,"Refactor packaging module into functional modules  The packaging module has become large and complex module containing many different functional features. Long term support and maintenance is significantly impacted.  The packaging module has been refactored into the following:      common - utility functions imported by several modules     git - all the git related functions     requirements - all the requirements processing functions     package cmds (aligned to how setuptools and distribute are defined)         build_doc         egg_info         install         install_scripts         sdist         test  The dependencies and test cases have been updated to point to the new modules except for version. A separate refactoring of version will be handled in a different patch, at which point the packaging module can be deprecated and/or removed.  Change-Id: Ie8cd35b292997989e33cdb8e82d8740ae2f74041",objective,,,,,,
openstack%2Fcinder~master~I34ee7a0548153d8a9de46c21f5cdea901198a6d5,https://review.opendev.org/280501,Refactor Hitachi Block Storage Driver (patch - 4/4),"Refactor Hitachi Block Storage Driver (Fourth patch)  Our drivers have already supported FC and iSCSI protocols. Our drivers have two storage interfaces, named HORCM and SNM2. Our drivers have already supported three kinds of drivers on our code, HORCMFC, SNM2FC and SNM2ISCSI.  I found that it is hard to maintain the present code. So I refactor our code drastically.  I submit following four patches: (1) refactor base libraries. And delete the existing test driver to not     break the existing unit tests. (2) refactor SNM2FC drivers based on libraries change. (3) refactor SNM2ISCSI drivers based on libraries change. (4) refactor HORCMFC drivers based on libraries change.  This patch is last one.  The class relationship of my patches are following: 1. The most upper classes are HBSDFC. These classes inherit    VolumeDriver class. These classes have HBSDCOMMON. 2. HBSDCOMMON class has common methods with HORCM and SNM2. 3. HBSDHORCM and HBSDSNM2 classes inherit HBSDCOMMON.    HBSDHORCM class has the characteristic methods for HORCM interface.    HBSDSNM2 class has the characteristic methods for SNM2 interface. 4. HBSDHORCMFC class inherit HBSDHORCM.    HBSDHORCMFC class has the characteristic interfaces for HORCM and FC 5. HBSDSNM2FC and HBSDSNM2ISCSI classes inherit HBSDSNM2.    These classes have characteristic interfaces respectively.  Change-Id: I34ee7a0548153d8a9de46c21f5cdea901198a6d5 Implements: blueprint refactoring-hbsd-driver",testing,,,,,,
openstack%2Fcinder~master~I34ee7a0548153d8a9de46c21f5cdea901198a6d5,https://review.opendev.org/280501,Refactor Hitachi Block Storage Driver (patch - 4/4),"Refactor Hitachi Block Storage Driver (Fourth patch)  Our drivers have already supported FC and iSCSI protocols. Our drivers have two storage interfaces, named HORCM and SNM2. Our drivers have already supported three kinds of drivers on our code, HORCMFC, SNM2FC and SNM2ISCSI.  I found that it is hard to maintain the present code. So I refactor our code drastically.  I submit following four patches: (1) refactor base libraries. And delete the existing test driver to not     break the existing unit tests. (2) refactor SNM2FC drivers based on libraries change. (3) refactor SNM2ISCSI drivers based on libraries change. (4) refactor HORCMFC drivers based on libraries change.  This patch is last one.  The class relationship of my patches are following: 1. The most upper classes are HBSDFC. These classes inherit    VolumeDriver class. These classes have HBSDCOMMON. 2. HBSDCOMMON class has common methods with HORCM and SNM2. 3. HBSDHORCM and HBSDSNM2 classes inherit HBSDCOMMON.    HBSDHORCM class has the characteristic methods for HORCM interface.    HBSDSNM2 class has the characteristic methods for SNM2 interface. 4. HBSDHORCMFC class inherit HBSDHORCM.    HBSDHORCMFC class has the characteristic interfaces for HORCM and FC 5. HBSDSNM2FC and HBSDSNM2ISCSI classes inherit HBSDSNM2.    These classes have characteristic interfaces respectively.  Change-Id: I34ee7a0548153d8a9de46c21f5cdea901198a6d5 Implements: blueprint refactoring-hbsd-driver",quality,,,,,,
openstack%2Fcinder~master~I34ee7a0548153d8a9de46c21f5cdea901198a6d5,https://review.opendev.org/280501,Refactor Hitachi Block Storage Driver (patch - 4/4),"Refactor Hitachi Block Storage Driver (Fourth patch)  Our drivers have already supported FC and iSCSI protocols. Our drivers have two storage interfaces, named HORCM and SNM2. Our drivers have already supported three kinds of drivers on our code, HORCMFC, SNM2FC and SNM2ISCSI.  I found that it is hard to maintain the present code. So I refactor our code drastically.  I submit following four patches: (1) refactor base libraries. And delete the existing test driver to not     break the existing unit tests. (2) refactor SNM2FC drivers based on libraries change. (3) refactor SNM2ISCSI drivers based on libraries change. (4) refactor HORCMFC drivers based on libraries change.  This patch is last one.  The class relationship of my patches are following: 1. The most upper classes are HBSDFC. These classes inherit    VolumeDriver class. These classes have HBSDCOMMON. 2. HBSDCOMMON class has common methods with HORCM and SNM2. 3. HBSDHORCM and HBSDSNM2 classes inherit HBSDCOMMON.    HBSDHORCM class has the characteristic methods for HORCM interface.    HBSDSNM2 class has the characteristic methods for SNM2 interface. 4. HBSDHORCMFC class inherit HBSDHORCM.    HBSDHORCMFC class has the characteristic interfaces for HORCM and FC 5. HBSDSNM2FC and HBSDSNM2ISCSI classes inherit HBSDSNM2.    These classes have characteristic interfaces respectively.  Change-Id: I34ee7a0548153d8a9de46c21f5cdea901198a6d5 Implements: blueprint refactoring-hbsd-driver",objective,,,,,,
openstack%2Fcinder~master~I34ee7a0548153d8a9de46c21f5cdea901198a6d5,https://review.opendev.org/280501,Refactor Hitachi Block Storage Driver (patch - 4/4),"Refactor Hitachi Block Storage Driver (Fourth patch)  Our drivers have already supported FC and iSCSI protocols. Our drivers have two storage interfaces, named HORCM and SNM2. Our drivers have already supported three kinds of drivers on our code, HORCMFC, SNM2FC and SNM2ISCSI.  I found that it is hard to maintain the present code. So I refactor our code drastically.  I submit following four patches: (1) refactor base libraries. And delete the existing test driver to not     break the existing unit tests. (2) refactor SNM2FC drivers based on libraries change. (3) refactor SNM2ISCSI drivers based on libraries change. (4) refactor HORCMFC drivers based on libraries change.  This patch is last one.  The class relationship of my patches are following: 1. The most upper classes are HBSDFC. These classes inherit    VolumeDriver class. These classes have HBSDCOMMON. 2. HBSDCOMMON class has common methods with HORCM and SNM2. 3. HBSDHORCM and HBSDSNM2 classes inherit HBSDCOMMON.    HBSDHORCM class has the characteristic methods for HORCM interface.    HBSDSNM2 class has the characteristic methods for SNM2 interface. 4. HBSDHORCMFC class inherit HBSDHORCM.    HBSDHORCMFC class has the characteristic interfaces for HORCM and FC 5. HBSDSNM2FC and HBSDSNM2ISCSI classes inherit HBSDSNM2.    These classes have characteristic interfaces respectively.  Change-Id: I34ee7a0548153d8a9de46c21f5cdea901198a6d5 Implements: blueprint refactoring-hbsd-driver",integration,,,,,,
openstack%2Fcinder~master~If3c19d9f7196188f27a288c213888be4d4d78276,https://review.opendev.org/280500,Refactor Hitachi Block Storage Driver (patch - 3/4),"Refactor Hitachi Block Storage Driver (Third patch)  Our drivers have already supported FC and iSCSI protocols. Our drivers have two storage interfaces, named HORCM and SNM2. Our drivers have already supported three kinds of drivers on our code, HORCMFC, SNM2FC and SNM2ISCSI.  I found that it is hard to maintain the present code. So I refactor our code drastically.  I submit following four patches: (1) refactor base libraries. And delete the existing test driver to not     break the existing unit tests. (2) refactor SNM2FC drivers based on libraries change. (3) refactor SNM2ISCSI drivers based on libraries change. (4) refactor HORCMFC drivers based on libraries change.  This patch is 3rd one.  The class relationship of my patches are following: 1. The most upper classes are HBSDFC. These classes inherit    VolumeDriver class. These classes have HBSDCOMMON. 2. HBSDCOMMON class has common methods with HORCM and SNM2. 3. HBSDHORCM and HBSDSNM2 classes inherit HBSDCOMMON.    HBSDHORCM class has the characteristic methods for HORCM interface.    HBSDSNM2 class has the characteristic methods for SNM2 interface. 4. HBSDHORCMFC class inherit HBSDHORCM.    HBSDHORCMFC class has the characteristic interfaces for HORCM and FC 5. HBSDSNM2FC and HBSDSNM2ISCSI classes inherit HBSDSNM2.    These classes have characteristic interfaces respectively.  Change-Id: If3c19d9f7196188f27a288c213888be4d4d78276 Implements: blueprint refactoring-hbsd-driver",testing,,,,,,
openstack%2Fcinder~master~If3c19d9f7196188f27a288c213888be4d4d78276,https://review.opendev.org/280500,Refactor Hitachi Block Storage Driver (patch - 3/4),"Refactor Hitachi Block Storage Driver (Third patch)  Our drivers have already supported FC and iSCSI protocols. Our drivers have two storage interfaces, named HORCM and SNM2. Our drivers have already supported three kinds of drivers on our code, HORCMFC, SNM2FC and SNM2ISCSI.  I found that it is hard to maintain the present code. So I refactor our code drastically.  I submit following four patches: (1) refactor base libraries. And delete the existing test driver to not     break the existing unit tests. (2) refactor SNM2FC drivers based on libraries change. (3) refactor SNM2ISCSI drivers based on libraries change. (4) refactor HORCMFC drivers based on libraries change.  This patch is 3rd one.  The class relationship of my patches are following: 1. The most upper classes are HBSDFC. These classes inherit    VolumeDriver class. These classes have HBSDCOMMON. 2. HBSDCOMMON class has common methods with HORCM and SNM2. 3. HBSDHORCM and HBSDSNM2 classes inherit HBSDCOMMON.    HBSDHORCM class has the characteristic methods for HORCM interface.    HBSDSNM2 class has the characteristic methods for SNM2 interface. 4. HBSDHORCMFC class inherit HBSDHORCM.    HBSDHORCMFC class has the characteristic interfaces for HORCM and FC 5. HBSDSNM2FC and HBSDSNM2ISCSI classes inherit HBSDSNM2.    These classes have characteristic interfaces respectively.  Change-Id: If3c19d9f7196188f27a288c213888be4d4d78276 Implements: blueprint refactoring-hbsd-driver",quality,,,,,,
openstack%2Fcinder~master~If3c19d9f7196188f27a288c213888be4d4d78276,https://review.opendev.org/280500,Refactor Hitachi Block Storage Driver (patch - 3/4),"Refactor Hitachi Block Storage Driver (Third patch)  Our drivers have already supported FC and iSCSI protocols. Our drivers have two storage interfaces, named HORCM and SNM2. Our drivers have already supported three kinds of drivers on our code, HORCMFC, SNM2FC and SNM2ISCSI.  I found that it is hard to maintain the present code. So I refactor our code drastically.  I submit following four patches: (1) refactor base libraries. And delete the existing test driver to not     break the existing unit tests. (2) refactor SNM2FC drivers based on libraries change. (3) refactor SNM2ISCSI drivers based on libraries change. (4) refactor HORCMFC drivers based on libraries change.  This patch is 3rd one.  The class relationship of my patches are following: 1. The most upper classes are HBSDFC. These classes inherit    VolumeDriver class. These classes have HBSDCOMMON. 2. HBSDCOMMON class has common methods with HORCM and SNM2. 3. HBSDHORCM and HBSDSNM2 classes inherit HBSDCOMMON.    HBSDHORCM class has the characteristic methods for HORCM interface.    HBSDSNM2 class has the characteristic methods for SNM2 interface. 4. HBSDHORCMFC class inherit HBSDHORCM.    HBSDHORCMFC class has the characteristic interfaces for HORCM and FC 5. HBSDSNM2FC and HBSDSNM2ISCSI classes inherit HBSDSNM2.    These classes have characteristic interfaces respectively.  Change-Id: If3c19d9f7196188f27a288c213888be4d4d78276 Implements: blueprint refactoring-hbsd-driver",objective,,,,,,
openstack%2Fcinder~master~If3c19d9f7196188f27a288c213888be4d4d78276,https://review.opendev.org/280500,Refactor Hitachi Block Storage Driver (patch - 3/4),"Refactor Hitachi Block Storage Driver (Third patch)  Our drivers have already supported FC and iSCSI protocols. Our drivers have two storage interfaces, named HORCM and SNM2. Our drivers have already supported three kinds of drivers on our code, HORCMFC, SNM2FC and SNM2ISCSI.  I found that it is hard to maintain the present code. So I refactor our code drastically.  I submit following four patches: (1) refactor base libraries. And delete the existing test driver to not     break the existing unit tests. (2) refactor SNM2FC drivers based on libraries change. (3) refactor SNM2ISCSI drivers based on libraries change. (4) refactor HORCMFC drivers based on libraries change.  This patch is 3rd one.  The class relationship of my patches are following: 1. The most upper classes are HBSDFC. These classes inherit    VolumeDriver class. These classes have HBSDCOMMON. 2. HBSDCOMMON class has common methods with HORCM and SNM2. 3. HBSDHORCM and HBSDSNM2 classes inherit HBSDCOMMON.    HBSDHORCM class has the characteristic methods for HORCM interface.    HBSDSNM2 class has the characteristic methods for SNM2 interface. 4. HBSDHORCMFC class inherit HBSDHORCM.    HBSDHORCMFC class has the characteristic interfaces for HORCM and FC 5. HBSDSNM2FC and HBSDSNM2ISCSI classes inherit HBSDSNM2.    These classes have characteristic interfaces respectively.  Change-Id: If3c19d9f7196188f27a288c213888be4d4d78276 Implements: blueprint refactoring-hbsd-driver",integration,,,,,,
openstack%2Fcinder~master~Ie24ccb6f8a64b65dbdc496dbf7fef428a4a7efb2,https://review.opendev.org/280499,Refactor Hitachi Block Storage Driver (patch - 2/4),"Refactor Hitachi Block Storage Driver (Second patch)  Our drivers have already supported FC and iSCSI protocols. Our drivers have two storage interfaces, named HORCM and SNM2. Our drivers have already supported three kinds of drivers on our code, HORCMFC, SNM2FC and SNM2ISCSI.  I found that it is hard to maintain the present code. So I refactor our code drastically.  I submit following four patches: (1) refactor base libraries. And delete the existing test driver to not     break the existing unit tests. (2) refactor SNM2FC drivers based on libraries change. (3) refactor SNM2ISCSI drivers based on libraries change. (4) refactor HORCMFC drivers based on libraries change.  This patch is 2nd one.  The class relationship of my patches are following: 1. The most upper classes are HBSDFC. These classes inherit    VolumeDriver class. These classes have HBSDCOMMON. 2. HBSDCOMMON class has common methods with HORCM and SNM2. 3. HBSDHORCM and HBSDSNM2 classes inherit HBSDCOMMON.    HBSDHORCM class has the characteristic methods for HORCM interface.    HBSDSNM2 class has the characteristic methods for SNM2 interface. 4. HBSDHORCMFC class inherit HBSDHORCM.    HBSDHORCMFC class has the characteristic interfaces for HORCM and FC 5. HBSDSNM2FC and HBSDSNM2ISCSI classes inherit HBSDSNM2.    These classes have characteristic interfaces respectively.  Change-Id: Ie24ccb6f8a64b65dbdc496dbf7fef428a4a7efb2 Implements: blueprint refactoring-hbsd-driver",testing,,,,,,
openstack%2Fcinder~master~Ie24ccb6f8a64b65dbdc496dbf7fef428a4a7efb2,https://review.opendev.org/280499,Refactor Hitachi Block Storage Driver (patch - 2/4),"Refactor Hitachi Block Storage Driver (Second patch)  Our drivers have already supported FC and iSCSI protocols. Our drivers have two storage interfaces, named HORCM and SNM2. Our drivers have already supported three kinds of drivers on our code, HORCMFC, SNM2FC and SNM2ISCSI.  I found that it is hard to maintain the present code. So I refactor our code drastically.  I submit following four patches: (1) refactor base libraries. And delete the existing test driver to not     break the existing unit tests. (2) refactor SNM2FC drivers based on libraries change. (3) refactor SNM2ISCSI drivers based on libraries change. (4) refactor HORCMFC drivers based on libraries change.  This patch is 2nd one.  The class relationship of my patches are following: 1. The most upper classes are HBSDFC. These classes inherit    VolumeDriver class. These classes have HBSDCOMMON. 2. HBSDCOMMON class has common methods with HORCM and SNM2. 3. HBSDHORCM and HBSDSNM2 classes inherit HBSDCOMMON.    HBSDHORCM class has the characteristic methods for HORCM interface.    HBSDSNM2 class has the characteristic methods for SNM2 interface. 4. HBSDHORCMFC class inherit HBSDHORCM.    HBSDHORCMFC class has the characteristic interfaces for HORCM and FC 5. HBSDSNM2FC and HBSDSNM2ISCSI classes inherit HBSDSNM2.    These classes have characteristic interfaces respectively.  Change-Id: Ie24ccb6f8a64b65dbdc496dbf7fef428a4a7efb2 Implements: blueprint refactoring-hbsd-driver",quality,,,,,,
openstack%2Fcinder~master~Ie24ccb6f8a64b65dbdc496dbf7fef428a4a7efb2,https://review.opendev.org/280499,Refactor Hitachi Block Storage Driver (patch - 2/4),"Refactor Hitachi Block Storage Driver (Second patch)  Our drivers have already supported FC and iSCSI protocols. Our drivers have two storage interfaces, named HORCM and SNM2. Our drivers have already supported three kinds of drivers on our code, HORCMFC, SNM2FC and SNM2ISCSI.  I found that it is hard to maintain the present code. So I refactor our code drastically.  I submit following four patches: (1) refactor base libraries. And delete the existing test driver to not     break the existing unit tests. (2) refactor SNM2FC drivers based on libraries change. (3) refactor SNM2ISCSI drivers based on libraries change. (4) refactor HORCMFC drivers based on libraries change.  This patch is 2nd one.  The class relationship of my patches are following: 1. The most upper classes are HBSDFC. These classes inherit    VolumeDriver class. These classes have HBSDCOMMON. 2. HBSDCOMMON class has common methods with HORCM and SNM2. 3. HBSDHORCM and HBSDSNM2 classes inherit HBSDCOMMON.    HBSDHORCM class has the characteristic methods for HORCM interface.    HBSDSNM2 class has the characteristic methods for SNM2 interface. 4. HBSDHORCMFC class inherit HBSDHORCM.    HBSDHORCMFC class has the characteristic interfaces for HORCM and FC 5. HBSDSNM2FC and HBSDSNM2ISCSI classes inherit HBSDSNM2.    These classes have characteristic interfaces respectively.  Change-Id: Ie24ccb6f8a64b65dbdc496dbf7fef428a4a7efb2 Implements: blueprint refactoring-hbsd-driver",objective,,,,,,
openstack%2Fcinder~master~Ie24ccb6f8a64b65dbdc496dbf7fef428a4a7efb2,https://review.opendev.org/280499,Refactor Hitachi Block Storage Driver (patch - 2/4),"Refactor Hitachi Block Storage Driver (Second patch)  Our drivers have already supported FC and iSCSI protocols. Our drivers have two storage interfaces, named HORCM and SNM2. Our drivers have already supported three kinds of drivers on our code, HORCMFC, SNM2FC and SNM2ISCSI.  I found that it is hard to maintain the present code. So I refactor our code drastically.  I submit following four patches: (1) refactor base libraries. And delete the existing test driver to not     break the existing unit tests. (2) refactor SNM2FC drivers based on libraries change. (3) refactor SNM2ISCSI drivers based on libraries change. (4) refactor HORCMFC drivers based on libraries change.  This patch is 2nd one.  The class relationship of my patches are following: 1. The most upper classes are HBSDFC. These classes inherit    VolumeDriver class. These classes have HBSDCOMMON. 2. HBSDCOMMON class has common methods with HORCM and SNM2. 3. HBSDHORCM and HBSDSNM2 classes inherit HBSDCOMMON.    HBSDHORCM class has the characteristic methods for HORCM interface.    HBSDSNM2 class has the characteristic methods for SNM2 interface. 4. HBSDHORCMFC class inherit HBSDHORCM.    HBSDHORCMFC class has the characteristic interfaces for HORCM and FC 5. HBSDSNM2FC and HBSDSNM2ISCSI classes inherit HBSDSNM2.    These classes have characteristic interfaces respectively.  Change-Id: Ie24ccb6f8a64b65dbdc496dbf7fef428a4a7efb2 Implements: blueprint refactoring-hbsd-driver",integration,,,,,,
openstack%2Fcinder~master~I4d80ac5bcfda0423289406785ed1d4f52ef9098a,https://review.opendev.org/280497,Refactor Hitachi Block Storage Driver (patch - 1/4),"Refactor Hitachi Block Storage Driver (First patch)  Our drivers have already supported FC and iSCSI protocols. Our drivers have two storage interfaces, named HORCM and SNM2. Our drivers have already supported three kinds of drivers on our code, HORCMFC, SNM2FC and SNM2ISCSI.  I found that it is hard to maintain the present code. So I refactor our code drastically.  I submit following four patches: (1) refactor base libraries. And delete the existing test driver to not     break the existing unit tests. (2) refactor SNM2FC drivers based on libraries change. (3) refactor SNM2ISCSI drivers based on libraries change. (4) refactor HORCMFC drivers based on libraries change.  This patch is 1st one.  The class relationship of my patches is following: 1. The most upper classes are HBSDFC. These classes inherit    VolumeDriver class. These classes have HBSDCOMMON. 2. HBSDCOMMON class has common methods with HORCM and SNM2. 3. HBSDHORCM and HBSDSNM2 classes inherit HBSDCOMMON.    HBSDHORCM class has the characteristic methods for HORCM interface.    HBSDSNM2 class has the characteristic methods for SNM2 interface. 4. HBSDHORCMFC class inherit HBSDHORCM.    HBSDHORCMFC class has the characteristic interfaces for HORCM and FC 5. HBSDSNM2FC and HBSDSNM2ISCSI classes inherit HBSDSNM2.    These classes have characteristic interfaces respectively.  DocImpact Implements: blueprint refactoring-hbsd-driver  Change-Id: I4d80ac5bcfda0423289406785ed1d4f52ef9098a",testing,,,,,,
openstack%2Fcinder~master~I4d80ac5bcfda0423289406785ed1d4f52ef9098a,https://review.opendev.org/280497,Refactor Hitachi Block Storage Driver (patch - 1/4),"Refactor Hitachi Block Storage Driver (First patch)  Our drivers have already supported FC and iSCSI protocols. Our drivers have two storage interfaces, named HORCM and SNM2. Our drivers have already supported three kinds of drivers on our code, HORCMFC, SNM2FC and SNM2ISCSI.  I found that it is hard to maintain the present code. So I refactor our code drastically.  I submit following four patches: (1) refactor base libraries. And delete the existing test driver to not     break the existing unit tests. (2) refactor SNM2FC drivers based on libraries change. (3) refactor SNM2ISCSI drivers based on libraries change. (4) refactor HORCMFC drivers based on libraries change.  This patch is 1st one.  The class relationship of my patches is following: 1. The most upper classes are HBSDFC. These classes inherit    VolumeDriver class. These classes have HBSDCOMMON. 2. HBSDCOMMON class has common methods with HORCM and SNM2. 3. HBSDHORCM and HBSDSNM2 classes inherit HBSDCOMMON.    HBSDHORCM class has the characteristic methods for HORCM interface.    HBSDSNM2 class has the characteristic methods for SNM2 interface. 4. HBSDHORCMFC class inherit HBSDHORCM.    HBSDHORCMFC class has the characteristic interfaces for HORCM and FC 5. HBSDSNM2FC and HBSDSNM2ISCSI classes inherit HBSDSNM2.    These classes have characteristic interfaces respectively.  DocImpact Implements: blueprint refactoring-hbsd-driver  Change-Id: I4d80ac5bcfda0423289406785ed1d4f52ef9098a",quality,,,,,,
openstack%2Fcinder~master~I4d80ac5bcfda0423289406785ed1d4f52ef9098a,https://review.opendev.org/280497,Refactor Hitachi Block Storage Driver (patch - 1/4),"Refactor Hitachi Block Storage Driver (First patch)  Our drivers have already supported FC and iSCSI protocols. Our drivers have two storage interfaces, named HORCM and SNM2. Our drivers have already supported three kinds of drivers on our code, HORCMFC, SNM2FC and SNM2ISCSI.  I found that it is hard to maintain the present code. So I refactor our code drastically.  I submit following four patches: (1) refactor base libraries. And delete the existing test driver to not     break the existing unit tests. (2) refactor SNM2FC drivers based on libraries change. (3) refactor SNM2ISCSI drivers based on libraries change. (4) refactor HORCMFC drivers based on libraries change.  This patch is 1st one.  The class relationship of my patches is following: 1. The most upper classes are HBSDFC. These classes inherit    VolumeDriver class. These classes have HBSDCOMMON. 2. HBSDCOMMON class has common methods with HORCM and SNM2. 3. HBSDHORCM and HBSDSNM2 classes inherit HBSDCOMMON.    HBSDHORCM class has the characteristic methods for HORCM interface.    HBSDSNM2 class has the characteristic methods for SNM2 interface. 4. HBSDHORCMFC class inherit HBSDHORCM.    HBSDHORCMFC class has the characteristic interfaces for HORCM and FC 5. HBSDSNM2FC and HBSDSNM2ISCSI classes inherit HBSDSNM2.    These classes have characteristic interfaces respectively.  DocImpact Implements: blueprint refactoring-hbsd-driver  Change-Id: I4d80ac5bcfda0423289406785ed1d4f52ef9098a",objective,,,,,,
openstack%2Fcinder~master~I4d80ac5bcfda0423289406785ed1d4f52ef9098a,https://review.opendev.org/280497,Refactor Hitachi Block Storage Driver (patch - 1/4),"Refactor Hitachi Block Storage Driver (First patch)  Our drivers have already supported FC and iSCSI protocols. Our drivers have two storage interfaces, named HORCM and SNM2. Our drivers have already supported three kinds of drivers on our code, HORCMFC, SNM2FC and SNM2ISCSI.  I found that it is hard to maintain the present code. So I refactor our code drastically.  I submit following four patches: (1) refactor base libraries. And delete the existing test driver to not     break the existing unit tests. (2) refactor SNM2FC drivers based on libraries change. (3) refactor SNM2ISCSI drivers based on libraries change. (4) refactor HORCMFC drivers based on libraries change.  This patch is 1st one.  The class relationship of my patches is following: 1. The most upper classes are HBSDFC. These classes inherit    VolumeDriver class. These classes have HBSDCOMMON. 2. HBSDCOMMON class has common methods with HORCM and SNM2. 3. HBSDHORCM and HBSDSNM2 classes inherit HBSDCOMMON.    HBSDHORCM class has the characteristic methods for HORCM interface.    HBSDSNM2 class has the characteristic methods for SNM2 interface. 4. HBSDHORCMFC class inherit HBSDHORCM.    HBSDHORCMFC class has the characteristic interfaces for HORCM and FC 5. HBSDSNM2FC and HBSDSNM2ISCSI classes inherit HBSDSNM2.    These classes have characteristic interfaces respectively.  DocImpact Implements: blueprint refactoring-hbsd-driver  Change-Id: I4d80ac5bcfda0423289406785ed1d4f52ef9098a",integration,,,,,,
openstack%2Fheat~master~I8454cb6b79b62e5cc1043ead33550a01ed6fd86a,https://review.opendev.org/104061,Refactor unit test test_neutron_autoscaling,"Refactor unit test test_neutron_autoscaling  refactor test_neutron_autoscaling, make it easier to add new tests.  - remove redundant resources: monitor, pool. These are already   tested in test_neutron. - make stub funtions reusable  Change-Id: I8454cb6b79b62e5cc1043ead33550a01ed6fd86a Related-Bug: #1310602",testing,,,,,,
openstack%2Fheat~master~I8454cb6b79b62e5cc1043ead33550a01ed6fd86a,https://review.opendev.org/104061,Refactor unit test test_neutron_autoscaling,"Refactor unit test test_neutron_autoscaling  refactor test_neutron_autoscaling, make it easier to add new tests.  - remove redundant resources: monitor, pool. These are already   tested in test_neutron. - make stub funtions reusable  Change-Id: I8454cb6b79b62e5cc1043ead33550a01ed6fd86a Related-Bug: #1310602",objective,,,,,,
openstack%2Fheat~master~I8454cb6b79b62e5cc1043ead33550a01ed6fd86a,https://review.opendev.org/104061,Refactor unit test test_neutron_autoscaling,"Refactor unit test test_neutron_autoscaling  refactor test_neutron_autoscaling, make it easier to add new tests.  - remove redundant resources: monitor, pool. These are already   tested in test_neutron. - make stub funtions reusable  Change-Id: I8454cb6b79b62e5cc1043ead33550a01ed6fd86a Related-Bug: #1310602",quality,,,,,,
openstack%2Fopenstack-chef-repo~master~I6652173f019f6bbe4360dada16c0c5d52af34652,https://review.opendev.org/277480,WIP test tempest without refactoring,WIP test tempest without refactoring  jsut try the repo gates without refactoring to see if tempest still fails.  Change-Id: I6652173f019f6bbe4360dada16c0c5d52af34652,testing,,,,,,
openstack%2Fopenstack-chef-repo~master~I6652173f019f6bbe4360dada16c0c5d52af34652,https://review.opendev.org/277480,WIP test tempest without refactoring,WIP test tempest without refactoring  jsut try the repo gates without refactoring to see if tempest still fails.  Change-Id: I6652173f019f6bbe4360dada16c0c5d52af34652,objective,,,,,,
openstack%2Fopenstack-chef-repo~master~I6652173f019f6bbe4360dada16c0c5d52af34652,https://review.opendev.org/277480,WIP test tempest without refactoring,WIP test tempest without refactoring  jsut try the repo gates without refactoring to see if tempest still fails.  Change-Id: I6652173f019f6bbe4360dada16c0c5d52af34652,objective,,,,,,
openstack%2Fnova~master~I82a100cddf1a745bde457b17102682bd42e4608b,https://review.opendev.org/180869,Refactor os-services unit tests,"Refactor os-services unittest  - move feature toggle with extensions from common test to v2 only - add api versions to fake requests - rearange parameters in asserts, so unit test failure printouts   correctly show reference and test results  Change-Id: I82a100cddf1a745bde457b17102682bd42e4608b Related-Bug: #1217026",testing,,,,,,
openstack%2Fneutron~master~I129e38721ca9d9cd28f10cda1c095ad54e743e8b,https://review.opendev.org/258238,Refactor test_attributes.py (part 2),refactor test_validate_ip_address()  Changed many test cases to use a for loop Removed an useless mock assert  Change-Id: I129e38721ca9d9cd28f10cda1c095ad54e743e8b,testing,,,,,,
openstack%2Fneutron~master~I129e38721ca9d9cd28f10cda1c095ad54e743e8b,https://review.opendev.org/258238,Refactor test_attributes.py (part 2),refactor test_validate_ip_address()  Changed many test cases to use a for loop Removed an useless mock assert  Change-Id: I129e38721ca9d9cd28f10cda1c095ad54e743e8b,objective,,,,,,
openstack%2Fneutron~master~I129e38721ca9d9cd28f10cda1c095ad54e743e8b,https://review.opendev.org/258238,Refactor test_attributes.py (part 2),refactor test_validate_ip_address()  Changed many test cases to use a for loop Removed an useless mock assert  Change-Id: I129e38721ca9d9cd28f10cda1c095ad54e743e8b,quality,,,,,,
jjb%2Fpython-jenkins~master~Ia9839d11d92630b4b73f76c28bd4f6e2296755c2,https://review.opendev.org/253829,Refactor test configs to a seperate files,Refactor test configs to a seperate files  Continuing modularity movement because the main file for python-jenkins is getting quite big.  This change refactors test configs to a seperate module.  Change-Id: Ia9839d11d92630b4b73f76c28bd4f6e2296755c2,testing,,,,,,
jjb%2Fpython-jenkins~master~Ia9839d11d92630b4b73f76c28bd4f6e2296755c2,https://review.opendev.org/253829,Refactor test configs to a seperate files,Refactor test configs to a seperate files  Continuing modularity movement because the main file for python-jenkins is getting quite big.  This change refactors test configs to a seperate module.  Change-Id: Ia9839d11d92630b4b73f76c28bd4f6e2296755c2,quality,,,,,,
jjb%2Fpython-jenkins~master~Ia9839d11d92630b4b73f76c28bd4f6e2296755c2,https://review.opendev.org/253829,Refactor test configs to a seperate files,Refactor test configs to a seperate files  Continuing modularity movement because the main file for python-jenkins is getting quite big.  This change refactors test configs to a seperate module.  Change-Id: Ia9839d11d92630b4b73f76c28bd4f6e2296755c2,objective,,,,,,
openstack%2Fnetworking-odl~master~If3998280fd9a3052f1360237aab8561b00fdc4fe,https://review.opendev.org/253722,ODL driver refactor - Unit test updates,ODL driver refactor - Unit test updates  Unit test coverage for ODL driver refactor. (Review: https://review.openstack.org/#/c/222409/)  Partially fixes Bug # 1493551  Change-Id: If3998280fd9a3052f1360237aab8561b00fdc4fe Depends-On: I654321a9012aba98775690d530e3e0788957b21b,integration,,,,,,
openstack%2Fnetworking-odl~master~If3998280fd9a3052f1360237aab8561b00fdc4fe,https://review.opendev.org/253722,ODL driver refactor - Unit test updates,ODL driver refactor - Unit test updates  Unit test coverage for ODL driver refactor. (Review: https://review.openstack.org/#/c/222409/)  Partially fixes Bug # 1493551  Change-Id: If3998280fd9a3052f1360237aab8561b00fdc4fe Depends-On: I654321a9012aba98775690d530e3e0788957b21b,testing,,,,,,
openstack%2Fnetworking-odl~master~If3998280fd9a3052f1360237aab8561b00fdc4fe,https://review.opendev.org/253722,ODL driver refactor - Unit test updates,ODL driver refactor - Unit test updates  Unit test coverage for ODL driver refactor. (Review: https://review.openstack.org/#/c/222409/)  Partially fixes Bug # 1493551  Change-Id: If3998280fd9a3052f1360237aab8561b00fdc4fe Depends-On: I654321a9012aba98775690d530e3e0788957b21b,objective,,,,,,
openstack%2Fnetworking-odl~master~If27f9a98f7629ad7d9dfaa1747e68bbf5863b442,https://review.opendev.org/227941,ODL driver refactor - Unit test updates,ODL driver refactor - Unit test updates  Unit test coverage for ODL driver refactor.  Partially fixes Bug # 1493551  Change-Id: If27f9a98f7629ad7d9dfaa1747e68bbf5863b442,integration,,,,,,
openstack%2Fnetworking-odl~master~If27f9a98f7629ad7d9dfaa1747e68bbf5863b442,https://review.opendev.org/227941,ODL driver refactor - Unit test updates,ODL driver refactor - Unit test updates  Unit test coverage for ODL driver refactor.  Partially fixes Bug # 1493551  Change-Id: If27f9a98f7629ad7d9dfaa1747e68bbf5863b442,testing,,,,,,
openstack%2Fnetworking-odl~master~If27f9a98f7629ad7d9dfaa1747e68bbf5863b442,https://review.opendev.org/227941,ODL driver refactor - Unit test updates,ODL driver refactor - Unit test updates  Unit test coverage for ODL driver refactor.  Partially fixes Bug # 1493551  Change-Id: If27f9a98f7629ad7d9dfaa1747e68bbf5863b442,objective,,,,,,
openstack%2Fmanila~master~I21001fe742fd78a2f236a43511fc1351002259f6,https://review.opendev.org/252653,[Tempest] Refactor base tests for share creation,"[Tempest] Refactor base tests for share creation  Our Tempest jobs run out timeout very often. So, we need to make our tests be completed sooner than it is now. Currently, we have two tests with simple share creation for each share protocol. And the only difference - usage of different microversions that influence only view. So, combine these two tests into one verifying both microversions in one test creating only one share. In case of Generic driver, we test the same things reducing expanses for 2 share creations.  Change-Id: I21001fe742fd78a2f236a43511fc1351002259f6",testing,,,,,,
openstack%2Fmanila~master~I21001fe742fd78a2f236a43511fc1351002259f6,https://review.opendev.org/252653,[Tempest] Refactor base tests for share creation,"[Tempest] Refactor base tests for share creation  Our Tempest jobs run out timeout very often. So, we need to make our tests be completed sooner than it is now. Currently, we have two tests with simple share creation for each share protocol. And the only difference - usage of different microversions that influence only view. So, combine these two tests into one verifying both microversions in one test creating only one share. In case of Generic driver, we test the same things reducing expanses for 2 share creations.  Change-Id: I21001fe742fd78a2f236a43511fc1351002259f6",integration,,,,,,
openstack%2Fmanila~master~I21001fe742fd78a2f236a43511fc1351002259f6,https://review.opendev.org/252653,[Tempest] Refactor base tests for share creation,"[Tempest] Refactor base tests for share creation  Our Tempest jobs run out timeout very often. So, we need to make our tests be completed sooner than it is now. Currently, we have two tests with simple share creation for each share protocol. And the only difference - usage of different microversions that influence only view. So, combine these two tests into one verifying both microversions in one test creating only one share. In case of Generic driver, we test the same things reducing expanses for 2 share creations.  Change-Id: I21001fe742fd78a2f236a43511fc1351002259f6",objective,,,,,,
openstack%2Fcharm-nova-cloud-controller~master~Ieb0a373ed55971af0c357fa89c199fb781e772ab,https://review.opendev.org/667054,Refactor ssh_compute_remove() in nova,"Refactor ssh_compute_remove() in nova  This removes one loop, but also changes the unit test so that it is not dependent on the implementation of the function, specifically w.r.t. the number of writes to the output file (which can now be changed in the future).  Change-Id: Ieb0a373ed55971af0c357fa89c199fb781e772ab",testing,,,,,,
openstack%2Fcharm-nova-cloud-controller~master~Ieb0a373ed55971af0c357fa89c199fb781e772ab,https://review.opendev.org/667054,Refactor ssh_compute_remove() in nova,"Refactor ssh_compute_remove() in nova  This removes one loop, but also changes the unit test so that it is not dependent on the implementation of the function, specifically w.r.t. the number of writes to the output file (which can now be changed in the future).  Change-Id: Ieb0a373ed55971af0c357fa89c199fb781e772ab",quality,,,,,,
openstack%2Fcharm-nova-cloud-controller~master~Ieb0a373ed55971af0c357fa89c199fb781e772ab,https://review.opendev.org/667054,Refactor ssh_compute_remove() in nova,"Refactor ssh_compute_remove() in nova  This removes one loop, but also changes the unit test so that it is not dependent on the implementation of the function, specifically w.r.t. the number of writes to the output file (which can now be changed in the future).  Change-Id: Ieb0a373ed55971af0c357fa89c199fb781e772ab",objective,,,,,,
openstack%2Ftempest~master~I9f5a967514f3c79f861d286f65402e9ec2832cc4,https://review.opendev.org/657144,"Revert ""Refactor random naming""","Revert ""Refactor random naming""  This reverts commit e3e7b2722e6b78216373f392af5bfeba1e2da5ec.  After that change, if the test creates a volume type with a given name, it's not unique and therefore can hit a 409 conflict trying to create a volume type with a name that already exists, which can happen when running scenario tests concurrently since several encrypted volume tests use the same volume type name ""luks"".  See Iecf62d411d2da17c4c983915018e3ed9180ecd11 for an alternative but this is easier. It's not entirely clear why the original change was made anyway - why do we care if the tests create long names? They weren't unnecessary because they were random to avoid conflicts.  Change-Id: I9f5a967514f3c79f861d286f65402e9ec2832cc4 Closes-Bug: #1826953",testing,,,,,,
openstack%2Ftempest~master~I9f5a967514f3c79f861d286f65402e9ec2832cc4,https://review.opendev.org/657144,"Revert ""Refactor random naming""","Revert ""Refactor random naming""  This reverts commit e3e7b2722e6b78216373f392af5bfeba1e2da5ec.  After that change, if the test creates a volume type with a given name, it's not unique and therefore can hit a 409 conflict trying to create a volume type with a name that already exists, which can happen when running scenario tests concurrently since several encrypted volume tests use the same volume type name ""luks"".  See Iecf62d411d2da17c4c983915018e3ed9180ecd11 for an alternative but this is easier. It's not entirely clear why the original change was made anyway - why do we care if the tests create long names? They weren't unnecessary because they were random to avoid conflicts.  Change-Id: I9f5a967514f3c79f861d286f65402e9ec2832cc4 Closes-Bug: #1826953",objective,,,,,,
openstack%2Ftempest~master~I9f5a967514f3c79f861d286f65402e9ec2832cc4,https://review.opendev.org/657144,"Revert ""Refactor random naming""","Revert ""Refactor random naming""  This reverts commit e3e7b2722e6b78216373f392af5bfeba1e2da5ec.  After that change, if the test creates a volume type with a given name, it's not unique and therefore can hit a 409 conflict trying to create a volume type with a name that already exists, which can happen when running scenario tests concurrently since several encrypted volume tests use the same volume type name ""luks"".  See Iecf62d411d2da17c4c983915018e3ed9180ecd11 for an alternative but this is easier. It's not entirely clear why the original change was made anyway - why do we care if the tests create long names? They weren't unnecessary because they were random to avoid conflicts.  Change-Id: I9f5a967514f3c79f861d286f65402e9ec2832cc4 Closes-Bug: #1826953",objective,,,,,,
openstack%2Fos-vif~master~Ib5873687032bfb55d1847d4948f6e9679cf6d31e,https://review.opendev.org/643101,Refactor functional base test classes,Refactor functional base test classes  The functional base test class should be implemented under os-vif. Other projects will inherit from this project to implement functional test cases.  Change-Id: Ib5873687032bfb55d1847d4948f6e9679cf6d31e Closes-Bug: #1817938,testing,,,,,,
openstack%2Fos-vif~master~Ib5873687032bfb55d1847d4948f6e9679cf6d31e,https://review.opendev.org/643101,Refactor functional base test classes,Refactor functional base test classes  The functional base test class should be implemented under os-vif. Other projects will inherit from this project to implement functional test cases.  Change-Id: Ib5873687032bfb55d1847d4948f6e9679cf6d31e Closes-Bug: #1817938,objective,,,,,,
openstack%2Fos-vif~master~Ib5873687032bfb55d1847d4948f6e9679cf6d31e,https://review.opendev.org/643101,Refactor functional base test classes,Refactor functional base test classes  The functional base test class should be implemented under os-vif. Other projects will inherit from this project to implement functional test cases.  Change-Id: Ib5873687032bfb55d1847d4948f6e9679cf6d31e Closes-Bug: #1817938,quality,,,,,,
x%2Ftobiko~master~Ic7e50d5e3b0299202dd6b28de243cfe888293401,https://review.opendev.org/652689,Refactor required fixtures listing,Refactor required fixtures listing  - test methods requires fixtures of test class - test class requires fixtures of RequiredFixtureProperty - fix some minor problems (like getting object names)  Change-Id: Ic7e50d5e3b0299202dd6b28de243cfe888293401,testing,,,,,,
x%2Ftobiko~master~Ic7e50d5e3b0299202dd6b28de243cfe888293401,https://review.opendev.org/652689,Refactor required fixtures listing,Refactor required fixtures listing  - test methods requires fixtures of test class - test class requires fixtures of RequiredFixtureProperty - fix some minor problems (like getting object names)  Change-Id: Ic7e50d5e3b0299202dd6b28de243cfe888293401,objective,,,,,,
x%2Ftobiko~master~Ic7e50d5e3b0299202dd6b28de243cfe888293401,https://review.opendev.org/652689,Refactor required fixtures listing,Refactor required fixtures listing  - test methods requires fixtures of test class - test class requires fixtures of RequiredFixtureProperty - fix some minor problems (like getting object names)  Change-Id: Ic7e50d5e3b0299202dd6b28de243cfe888293401,objective,,,,,,
x%2Ftap-as-a-service-tempest-plugin~master~I847d7f3d841900d99c914a451c24ee20e8119618,https://review.opendev.org/650944,Add a scenario test and refactor API tests,Add a scenario test and refactor API tests  1. Adds a tempest scenario testcase in TaaS.  2. Refactor the existing API tests.  3. Adds a new API testcase to test the newly added Vlan Mirror input parameter in tap-flow-create API.  This patchset is an extension to following commit which adds SRIOV driver support in TaaS:  Change-Id: I847d7f3d841900d99c914a451c24ee20e8119618 Commit: https://review.openstack.org/#/c/603501/,testing,,,,,,
x%2Ftap-as-a-service-tempest-plugin~master~I847d7f3d841900d99c914a451c24ee20e8119618,https://review.opendev.org/650944,Add a scenario test and refactor API tests,Add a scenario test and refactor API tests  1. Adds a tempest scenario testcase in TaaS.  2. Refactor the existing API tests.  3. Adds a new API testcase to test the newly added Vlan Mirror input parameter in tap-flow-create API.  This patchset is an extension to following commit which adds SRIOV driver support in TaaS:  Change-Id: I847d7f3d841900d99c914a451c24ee20e8119618 Commit: https://review.openstack.org/#/c/603501/,objective,,,,,,
x%2Ftap-as-a-service-tempest-plugin~master~I847d7f3d841900d99c914a451c24ee20e8119618,https://review.opendev.org/650944,Add a scenario test and refactor API tests,Add a scenario test and refactor API tests  1. Adds a tempest scenario testcase in TaaS.  2. Refactor the existing API tests.  3. Adds a new API testcase to test the newly added Vlan Mirror input parameter in tap-flow-create API.  This patchset is an extension to following commit which adds SRIOV driver support in TaaS:  Change-Id: I847d7f3d841900d99c914a451c24ee20e8119618 Commit: https://review.openstack.org/#/c/603501/,integration,,,,,,
openstack%2Fplacement~master~Id642d89c854744cbc2d36519004c87e9f2546269,https://review.opendev.org/648339,Refactor ResourceProviderListTestCase,"Refactor ResourceProviderListTestCase  Some tests in ResourceProviderListTestCase validated the number of resource providers returned by p_obj.get_all_by_filters(), but didn't validate if they are proper resource providers.  This patch adds that check adding a small test helper function, _run_get_all_by_filters().  Change-Id: Id642d89c854744cbc2d36519004c87e9f2546269",testing,,,,,,
openstack%2Fplacement~master~Id642d89c854744cbc2d36519004c87e9f2546269,https://review.opendev.org/648339,Refactor ResourceProviderListTestCase,"Refactor ResourceProviderListTestCase  Some tests in ResourceProviderListTestCase validated the number of resource providers returned by p_obj.get_all_by_filters(), but didn't validate if they are proper resource providers.  This patch adds that check adding a small test helper function, _run_get_all_by_filters().  Change-Id: Id642d89c854744cbc2d36519004c87e9f2546269",objective,,,,,,
openstack%2Ftacker~stable%2Fstein~I058ad0b0608f3a88e4eea410b97745ea9a1f271f,https://review.opendev.org/648042,Add Stein Reno for keystone v3 usages and test refactoring,Add Stein Reno for keystone v3 usages and test refactoring  Change-Id: I058ad0b0608f3a88e4eea410b97745ea9a1f271f,testing,,,,,,
openstack%2Ftacker~stable%2Fstein~I058ad0b0608f3a88e4eea410b97745ea9a1f271f,https://review.opendev.org/648042,Add Stein Reno for keystone v3 usages and test refactoring,Add Stein Reno for keystone v3 usages and test refactoring  Change-Id: I058ad0b0608f3a88e4eea410b97745ea9a1f271f,objective,,,,,,
openstack%2Ftacker~master~I058ad0b0608f3a88e4eea410b97745ea9a1f271f,https://review.opendev.org/648041,Add Stein Reno for keystone v3 usages and test refactoring,Add Stein Reno for keystone v3 usages and test refactoring  Change-Id: I058ad0b0608f3a88e4eea410b97745ea9a1f271f,testing,,,,,,
openstack%2Ftacker~master~I058ad0b0608f3a88e4eea410b97745ea9a1f271f,https://review.opendev.org/648041,Add Stein Reno for keystone v3 usages and test refactoring,Add Stein Reno for keystone v3 usages and test refactoring  Change-Id: I058ad0b0608f3a88e4eea410b97745ea9a1f271f,objective,,,,,,
openstack%2Fcinder~master~I4f3b7f5f38e6c54a3ebef5e15d1d5d66da1c06d2,https://review.opendev.org/636118,PowerMax Driver - Unit Test Refactoring,PowerMax Driver - Unit Test Refactoring  This submission refactors the unit tests pertaining to the PowerMax for Cinder driver. The single unit test file has been split into multiple files for ease of use.  Change-Id: I4f3b7f5f38e6c54a3ebef5e15d1d5d66da1c06d2,testing,,,,,,
openstack%2Fcinder~master~I4f3b7f5f38e6c54a3ebef5e15d1d5d66da1c06d2,https://review.opendev.org/636118,PowerMax Driver - Unit Test Refactoring,PowerMax Driver - Unit Test Refactoring  This submission refactors the unit tests pertaining to the PowerMax for Cinder driver. The single unit test file has been split into multiple files for ease of use.  Change-Id: I4f3b7f5f38e6c54a3ebef5e15d1d5d66da1c06d2,quality,,,,,,
openstack%2Fcinder~master~I4f3b7f5f38e6c54a3ebef5e15d1d5d66da1c06d2,https://review.opendev.org/636118,PowerMax Driver - Unit Test Refactoring,PowerMax Driver - Unit Test Refactoring  This submission refactors the unit tests pertaining to the PowerMax for Cinder driver. The single unit test file has been split into multiple files for ease of use.  Change-Id: I4f3b7f5f38e6c54a3ebef5e15d1d5d66da1c06d2,objective,,,,,,
x%2Ftobiko~master~I4bb5af40ebad5a1eb360d01dfed5a36d8d7b66eb,https://review.opendev.org/641335,Refactor fixture manager test cases.,Refactor fixture manager test cases.  Change-Id: I4bb5af40ebad5a1eb360d01dfed5a36d8d7b66eb,testing,,,,,,
openstack%2Fcinder~master~I0fe9167ace471e1dcc9c04823132d48665b5e927,https://review.opendev.org/627597,Refactor on policy in code,"Refactor on policy in code  Recently, we add the policy in code test, and put all these cases into test_volume_protection.py, but with the test case growing up, it's difficult to maintenance.  In this patch, we refactor these test cases: 1. Add a new unit test case path - ""tests/unit/policies/"". 2. Split policy in code test in their own file, which is one-to-one mapping to policy file.  Note that, there is no functional changes in this patch.  Change-Id: I0fe9167ace471e1dcc9c04823132d48665b5e927",testing,,,,,,
openstack%2Fcinder~master~I0fe9167ace471e1dcc9c04823132d48665b5e927,https://review.opendev.org/627597,Refactor on policy in code,"Refactor on policy in code  Recently, we add the policy in code test, and put all these cases into test_volume_protection.py, but with the test case growing up, it's difficult to maintenance.  In this patch, we refactor these test cases: 1. Add a new unit test case path - ""tests/unit/policies/"". 2. Split policy in code test in their own file, which is one-to-one mapping to policy file.  Note that, there is no functional changes in this patch.  Change-Id: I0fe9167ace471e1dcc9c04823132d48665b5e927",quality,,,,,,
openstack%2Fcinder~master~I0fe9167ace471e1dcc9c04823132d48665b5e927,https://review.opendev.org/627597,Refactor on policy in code,"Refactor on policy in code  Recently, we add the policy in code test, and put all these cases into test_volume_protection.py, but with the test case growing up, it's difficult to maintenance.  In this patch, we refactor these test cases: 1. Add a new unit test case path - ""tests/unit/policies/"". 2. Split policy in code test in their own file, which is one-to-one mapping to policy file.  Note that, there is no functional changes in this patch.  Change-Id: I0fe9167ace471e1dcc9c04823132d48665b5e927",objective,,,,,,
starlingx%2Fupstream~master~I64281b5601b7e457c724747f81e58cc1e42936dd,https://review.opendev.org/619883,Refactor patches for rabbitmq-server package,Refactor patches for rabbitmq-server package  Use rabbitmq-server-config package to package config files for rabbitmq-server package. We can remove related patches of it and use RPM instead of SRPM for it.  Deployment test and ping test between VMs pass Config files check pass.  Story: 2003768 Task: 28042 Depends-on: https://review.openstack.org/#/c/619882/  Change-Id: I64281b5601b7e457c724747f81e58cc1e42936dd Signed-off-by: zhipengl <zhipengs.liu@intel.com>,integration,,,,,,
starlingx%2Fupstream~master~I64281b5601b7e457c724747f81e58cc1e42936dd,https://review.opendev.org/619883,Refactor patches for rabbitmq-server package,Refactor patches for rabbitmq-server package  Use rabbitmq-server-config package to package config files for rabbitmq-server package. We can remove related patches of it and use RPM instead of SRPM for it.  Deployment test and ping test between VMs pass Config files check pass.  Story: 2003768 Task: 28042 Depends-on: https://review.openstack.org/#/c/619882/  Change-Id: I64281b5601b7e457c724747f81e58cc1e42936dd Signed-off-by: zhipengl <zhipengs.liu@intel.com>,testing,,,,,,
starlingx%2Fupstream~master~I64281b5601b7e457c724747f81e58cc1e42936dd,https://review.opendev.org/619883,Refactor patches for rabbitmq-server package,Refactor patches for rabbitmq-server package  Use rabbitmq-server-config package to package config files for rabbitmq-server package. We can remove related patches of it and use RPM instead of SRPM for it.  Deployment test and ping test between VMs pass Config files check pass.  Story: 2003768 Task: 28042 Depends-on: https://review.openstack.org/#/c/619882/  Change-Id: I64281b5601b7e457c724747f81e58cc1e42936dd Signed-off-by: zhipengl <zhipengs.liu@intel.com>,objective,,,,,,
openstack%2Ffreezer~master~I3a57590eb3e07731cf88879e1cd7d73596a95177,https://review.opendev.org/627341,Refactor rsync unit test,Refactor rsync unit test  The patch refactor rsync unit test  Change-Id: I3a57590eb3e07731cf88879e1cd7d73596a95177,testing,,,,,,
openstack%2Ffreezer~master~I3a57590eb3e07731cf88879e1cd7d73596a95177,https://review.opendev.org/627341,Refactor rsync unit test,Refactor rsync unit test  The patch refactor rsync unit test  Change-Id: I3a57590eb3e07731cf88879e1cd7d73596a95177,objective,,,,,,
openstack%2Fzun-tempest-plugin~master~Ib5ed02b765f22f9231d1d380152ab80478412351,https://review.opendev.org/627417,Refactor port creation code,Refactor port creation code  Introduce a method 'create_port' in base test class. This allows subclass reuse the port creation logic.  Change-Id: Ib5ed02b765f22f9231d1d380152ab80478412351,testing,,,,,,
openstack%2Fzun-tempest-plugin~master~Ib5ed02b765f22f9231d1d380152ab80478412351,https://review.opendev.org/627417,Refactor port creation code,Refactor port creation code  Introduce a method 'create_port' in base test class. This allows subclass reuse the port creation logic.  Change-Id: Ib5ed02b765f22f9231d1d380152ab80478412351,quality,,,,,,
openstack%2Ffreezer-api~master~I119155b8ac5fc7be6e5ef8b1db13df38595e64c4,https://review.opendev.org/626795,Refactor unit test about sqlalchemy  for supporting v1,Refactor unit test about sqlalchemy  for supporting v1  Change-Id: I119155b8ac5fc7be6e5ef8b1db13df38595e64c4,integration,,,,,,
openstack%2Ffreezer-api~master~I119155b8ac5fc7be6e5ef8b1db13df38595e64c4,https://review.opendev.org/626795,Refactor unit test about sqlalchemy  for supporting v1,Refactor unit test about sqlalchemy  for supporting v1  Change-Id: I119155b8ac5fc7be6e5ef8b1db13df38595e64c4,testing,,,,,,
openstack%2Ffreezer-api~master~I119155b8ac5fc7be6e5ef8b1db13df38595e64c4,https://review.opendev.org/626795,Refactor unit test about sqlalchemy  for supporting v1,Refactor unit test about sqlalchemy  for supporting v1  Change-Id: I119155b8ac5fc7be6e5ef8b1db13df38595e64c4,objective,,,,,,
starlingx%2Fupstream~master~I09b0f6ae93b915e10ff3d8cdf6fc9cbd5fe9426e,https://review.opendev.org/624889,Refactor meta patch for openstack-panko,Refactor meta patch for openstack-panko  Use openstack-panko-config package to package config file for openstack-panko package. Erase logrotate.d/openstack-panko instead of removing it in spec file.  Deployment test pass and config file check pass!  Story: 2003768 Task: 28362  Change-Id: I09b0f6ae93b915e10ff3d8cdf6fc9cbd5fe9426e Signed-off-by: zhipengl <zhipengs.liu@intel.com>,integration,,,,,,
starlingx%2Fupstream~master~I09b0f6ae93b915e10ff3d8cdf6fc9cbd5fe9426e,https://review.opendev.org/624889,Refactor meta patch for openstack-panko,Refactor meta patch for openstack-panko  Use openstack-panko-config package to package config file for openstack-panko package. Erase logrotate.d/openstack-panko instead of removing it in spec file.  Deployment test pass and config file check pass!  Story: 2003768 Task: 28362  Change-Id: I09b0f6ae93b915e10ff3d8cdf6fc9cbd5fe9426e Signed-off-by: zhipengl <zhipengs.liu@intel.com>,testing,,,,,,
starlingx%2Fupstream~master~I09b0f6ae93b915e10ff3d8cdf6fc9cbd5fe9426e,https://review.opendev.org/624889,Refactor meta patch for openstack-panko,Refactor meta patch for openstack-panko  Use openstack-panko-config package to package config file for openstack-panko package. Erase logrotate.d/openstack-panko instead of removing it in spec file.  Deployment test pass and config file check pass!  Story: 2003768 Task: 28362  Change-Id: I09b0f6ae93b915e10ff3d8cdf6fc9cbd5fe9426e Signed-off-by: zhipengl <zhipengs.liu@intel.com>,objective,,,,,,
starlingx%2Finteg~master~If50ae697062a7d0c8a2831fbcc0f5641aaa41ec7,https://review.opendev.org/624260,Refactor source code patches for dhcp package,"Refactor source code patches for dhcp package  3 source patches can be removed. 2 patches adds support for wrs_install_uuid in the dhclient script. This added script part just copy the whole content of dhclient-enter-hooks. Following this script part, it will call this hook script if the hook exist under /etc/. However, our hook file existed in /etc/dhcp/ folder will be called by sbin/dhclient-script as well. I'd like to use dhcp config package to creat /etc/dhclient-enter-hooks soft linked to /etc/dhcp/dhclient-enter-hooks, so that it can call dhclient script and no need to add this 2 patches.  Support-disable-nsupdate.patch can be removed as we already fixed port conflict issue in https://review.openstack.org/#/c/622711/  Deployment test pass and related script file check pass!  Story: 2004473 Task: 28164  Change-Id: If50ae697062a7d0c8a2831fbcc0f5641aaa41ec7 Signed-off-by: zhipengl <zhipengs.liu@intel.com>",integration,,,,,,
starlingx%2Finteg~master~If50ae697062a7d0c8a2831fbcc0f5641aaa41ec7,https://review.opendev.org/624260,Refactor source code patches for dhcp package,"Refactor source code patches for dhcp package  3 source patches can be removed. 2 patches adds support for wrs_install_uuid in the dhclient script. This added script part just copy the whole content of dhclient-enter-hooks. Following this script part, it will call this hook script if the hook exist under /etc/. However, our hook file existed in /etc/dhcp/ folder will be called by sbin/dhclient-script as well. I'd like to use dhcp config package to creat /etc/dhclient-enter-hooks soft linked to /etc/dhcp/dhclient-enter-hooks, so that it can call dhclient script and no need to add this 2 patches.  Support-disable-nsupdate.patch can be removed as we already fixed port conflict issue in https://review.openstack.org/#/c/622711/  Deployment test pass and related script file check pass!  Story: 2004473 Task: 28164  Change-Id: If50ae697062a7d0c8a2831fbcc0f5641aaa41ec7 Signed-off-by: zhipengl <zhipengs.liu@intel.com>",objective,,,,,,
starlingx%2Finteg~master~I9976733bab102ee076d514333cd5a74af20794ec,https://review.opendev.org/623994,Refactor harden server and client config patch for openssh package,Refactor harden server and client config patch for openssh package  Move ssh_config and sshd_config modification from openssh package to openssh-config package. Deployment test pass and configuration file check pass!  Story: 2004477 Task: 28185  Change-Id: I9976733bab102ee076d514333cd5a74af20794ec Signed-off-by: zhipengl <zhipengs.liu@intel.com>,integration,,,,,,
starlingx%2Finteg~master~I9976733bab102ee076d514333cd5a74af20794ec,https://review.opendev.org/623994,Refactor harden server and client config patch for openssh package,Refactor harden server and client config patch for openssh package  Move ssh_config and sshd_config modification from openssh package to openssh-config package. Deployment test pass and configuration file check pass!  Story: 2004477 Task: 28185  Change-Id: I9976733bab102ee076d514333cd5a74af20794ec Signed-off-by: zhipengl <zhipengs.liu@intel.com>,objective,,,,,,
x%2Ftobiko~master~I021802888312befc89d7e46f1b191292ae8ed7b3,https://review.opendev.org/623461,Refactor test_mtu test case after base scenario test case changed.,Refactor test_mtu test case after base scenario test case changed.  Change-Id: I021802888312befc89d7e46f1b191292ae8ed7b3,testing,,,,,,
x%2Ftobiko~master~I021802888312befc89d7e46f1b191292ae8ed7b3,https://review.opendev.org/623461,Refactor test_mtu test case after base scenario test case changed.,Refactor test_mtu test case after base scenario test case changed.  Change-Id: I021802888312befc89d7e46f1b191292ae8ed7b3,objective,,,,,,
x%2Ftobiko~master~Id358c6dd7ea03dfb0072efad88585977e973aa23,https://review.opendev.org/623455,Refactor scenario test case to create template in setUpClass method.,Refactor scenario test case to create template in setUpClass method.  Change-Id: Id358c6dd7ea03dfb0072efad88585977e973aa23,testing,,,,,,
x%2Ftobiko~master~Id358c6dd7ea03dfb0072efad88585977e973aa23,https://review.opendev.org/623455,Refactor scenario test case to create template in setUpClass method.,Refactor scenario test case to create template in setUpClass method.  Change-Id: Id358c6dd7ea03dfb0072efad88585977e973aa23,objective,,,,,,
openstack%2Ftacker~master~Iec9feafa657e82b1887d37f51df12bf694c274e7,https://review.opendev.org/620831,Device Refactor,Device Refactor  Replacing device with vnf in test cases in continuation of [1].  [1]: https://review.openstack.org/#/c/352205/  Change-Id: Iec9feafa657e82b1887d37f51df12bf694c274e7,integration,,,,,,
openstack%2Ftacker~master~Iec9feafa657e82b1887d37f51df12bf694c274e7,https://review.opendev.org/620831,Device Refactor,Device Refactor  Replacing device with vnf in test cases in continuation of [1].  [1]: https://review.openstack.org/#/c/352205/  Change-Id: Iec9feafa657e82b1887d37f51df12bf694c274e7,testing,,,,,,
openstack%2Ftacker~master~Iec9feafa657e82b1887d37f51df12bf694c274e7,https://review.opendev.org/620831,Device Refactor,Device Refactor  Replacing device with vnf in test cases in continuation of [1].  [1]: https://review.openstack.org/#/c/352205/  Change-Id: Iec9feafa657e82b1887d37f51df12bf694c274e7,objective,,,,,,
airship%2Farmada~master~I1530d7637b0eb6a83f048895053a5db80d033046,https://review.opendev.org/618355,test: Refactor test handler,"test: Refactor test handler  While authoring [0], it was discovered that Armada has duplicate logic for deciding if Helm test cleanup should be enabled as well as the tests themselves. Because of this, changes to test logic (e.g. adding pre-test actions), requires changing all traces of the repeated logic, which can lead to inconsistent behavior if not properly addressed. This change moves all test decision logic to a singular Test handler, implemented by the `Test` class. This change does NOT change the expected behavior of tests in Armada.  [0] https://review.openstack.org/617834  Change-Id: I1530d7637b0eb6a83f048895053a5db80d033046",testing,,,,,,
airship%2Farmada~master~I1530d7637b0eb6a83f048895053a5db80d033046,https://review.opendev.org/618355,test: Refactor test handler,"test: Refactor test handler  While authoring [0], it was discovered that Armada has duplicate logic for deciding if Helm test cleanup should be enabled as well as the tests themselves. Because of this, changes to test logic (e.g. adding pre-test actions), requires changing all traces of the repeated logic, which can lead to inconsistent behavior if not properly addressed. This change moves all test decision logic to a singular Test handler, implemented by the `Test` class. This change does NOT change the expected behavior of tests in Armada.  [0] https://review.openstack.org/617834  Change-Id: I1530d7637b0eb6a83f048895053a5db80d033046",quality,,,,,,
airship%2Farmada~master~I1530d7637b0eb6a83f048895053a5db80d033046,https://review.opendev.org/618355,test: Refactor test handler,"test: Refactor test handler  While authoring [0], it was discovered that Armada has duplicate logic for deciding if Helm test cleanup should be enabled as well as the tests themselves. Because of this, changes to test logic (e.g. adding pre-test actions), requires changing all traces of the repeated logic, which can lead to inconsistent behavior if not properly addressed. This change moves all test decision logic to a singular Test handler, implemented by the `Test` class. This change does NOT change the expected behavior of tests in Armada.  [0] https://review.openstack.org/617834  Change-Id: I1530d7637b0eb6a83f048895053a5db80d033046",objective,,,,,,
starlingx%2Fupstream~master~I6cc7fd555fad2dc9278d15646fbd6811ba614d00,https://review.opendev.org/620466,Refactor patches for openstack-aodh package,Refactor patches for openstack-aodh package  Use openstack-aodh-config package to package service and script files for openstack-aodh package.  Deployment test pass and service/script file check pass.  Story: 2003768 Task: 28044 Depends-on: https://review.openstack.org/#/c/620258/  Change-Id: I6cc7fd555fad2dc9278d15646fbd6811ba614d00 Signed-off-by: zhipengl <zhipengs.liu@intel.com>,integration,,,,,,
starlingx%2Fupstream~master~I6cc7fd555fad2dc9278d15646fbd6811ba614d00,https://review.opendev.org/620466,Refactor patches for openstack-aodh package,Refactor patches for openstack-aodh package  Use openstack-aodh-config package to package service and script files for openstack-aodh package.  Deployment test pass and service/script file check pass.  Story: 2003768 Task: 28044 Depends-on: https://review.openstack.org/#/c/620258/  Change-Id: I6cc7fd555fad2dc9278d15646fbd6811ba614d00 Signed-off-by: zhipengl <zhipengs.liu@intel.com>,objective,,,,,,
starlingx%2Finteg~master~I98da90695c8184261279b27b4ede63fd7951babf,https://review.opendev.org/618651,Refactor patches for setup package,"Refactor patches for setup package  Use setup-config package to package config files for setup package. Merged all passwd, group, uidgid patches to one patch.  Deployment test and ping test between WMs pass Config and service files check pass.  Story: 2003768 Task: 27592  Change-Id: I98da90695c8184261279b27b4ede63fd7951babf Signed-off-by: zhipengl <zhipengs.liu@intel.com>",integration,,,,,,
starlingx%2Finteg~master~I98da90695c8184261279b27b4ede63fd7951babf,https://review.opendev.org/618651,Refactor patches for setup package,"Refactor patches for setup package  Use setup-config package to package config files for setup package. Merged all passwd, group, uidgid patches to one patch.  Deployment test and ping test between WMs pass Config and service files check pass.  Story: 2003768 Task: 27592  Change-Id: I98da90695c8184261279b27b4ede63fd7951babf Signed-off-by: zhipengl <zhipengs.liu@intel.com>",objective,,,,,,
starlingx%2Finteg~master~Ia4fa723d1a6ff9a7a8059fc2db1afec640ea41b1,https://review.opendev.org/619983,Refactor patches for nss-pam-ldapd package,"Refactor patches for nss-pam-ldapd package  The patch change mainly focus on %post section in spec file. The comment in the patch mentions that we don't want change our custom binddn and bindpw in nslcd.conf However, in spec file, ""source"" variabe could not be assigned to a valid file name as we could not find these *.conf files in /etc/ folder. if test -s /etc/nss-ldapd.conf ; then         source=/etc/nss-ldapd.conf elif test -s /etc/nss_ldap.conf ; then         source=/etc/nss_ldap.conf elif test -s /etc/pam_ldap.conf ; then         source=/etc/pam_ldap.conf else         source=/etc/ldap.conf  So it will not change nslcd.conf even if we do not remove below code.  if grep -E -q '^base[[:blank:]]' $source 2> /dev/null ; then      # Comment out the packaged default base and replace it.         sed -i -r -e 's,^(base[[:blank:]].*),# \1,g' $target         grep -E '^base[[:blank:]]' $source >> $target fi  grep -E '^(binddn|bindpw|port|scope|ssl|pagesize)[[:blank:]]'    $source 2> /dev/null >> $target  We can use RPM instead of SRPM for nss-pam-ldapd package, since related patches are not used anymore.  Deployment test pass.  Story: 2003768 Task: 28045 Depends-on: https://review.openstack.org/#/c/619976/  Change-Id: Ia4fa723d1a6ff9a7a8059fc2db1afec640ea41b1 Signed-off-by: zhipengl <zhipengs.liu@intel.com>",quality,,,,,,
starlingx%2Finteg~master~Ia4fa723d1a6ff9a7a8059fc2db1afec640ea41b1,https://review.opendev.org/619983,Refactor patches for nss-pam-ldapd package,"Refactor patches for nss-pam-ldapd package  The patch change mainly focus on %post section in spec file. The comment in the patch mentions that we don't want change our custom binddn and bindpw in nslcd.conf However, in spec file, ""source"" variabe could not be assigned to a valid file name as we could not find these *.conf files in /etc/ folder. if test -s /etc/nss-ldapd.conf ; then         source=/etc/nss-ldapd.conf elif test -s /etc/nss_ldap.conf ; then         source=/etc/nss_ldap.conf elif test -s /etc/pam_ldap.conf ; then         source=/etc/pam_ldap.conf else         source=/etc/ldap.conf  So it will not change nslcd.conf even if we do not remove below code.  if grep -E -q '^base[[:blank:]]' $source 2> /dev/null ; then      # Comment out the packaged default base and replace it.         sed -i -r -e 's,^(base[[:blank:]].*),# \1,g' $target         grep -E '^base[[:blank:]]' $source >> $target fi  grep -E '^(binddn|bindpw|port|scope|ssl|pagesize)[[:blank:]]'    $source 2> /dev/null >> $target  We can use RPM instead of SRPM for nss-pam-ldapd package, since related patches are not used anymore.  Deployment test pass.  Story: 2003768 Task: 28045 Depends-on: https://review.openstack.org/#/c/619976/  Change-Id: Ia4fa723d1a6ff9a7a8059fc2db1afec640ea41b1 Signed-off-by: zhipengl <zhipengs.liu@intel.com>",objective,,,,,,
starlingx%2Finteg~master~Ia4fa723d1a6ff9a7a8059fc2db1afec640ea41b1,https://review.opendev.org/619983,Refactor patches for nss-pam-ldapd package,"Refactor patches for nss-pam-ldapd package  The patch change mainly focus on %post section in spec file. The comment in the patch mentions that we don't want change our custom binddn and bindpw in nslcd.conf However, in spec file, ""source"" variabe could not be assigned to a valid file name as we could not find these *.conf files in /etc/ folder. if test -s /etc/nss-ldapd.conf ; then         source=/etc/nss-ldapd.conf elif test -s /etc/nss_ldap.conf ; then         source=/etc/nss_ldap.conf elif test -s /etc/pam_ldap.conf ; then         source=/etc/pam_ldap.conf else         source=/etc/ldap.conf  So it will not change nslcd.conf even if we do not remove below code.  if grep -E -q '^base[[:blank:]]' $source 2> /dev/null ; then      # Comment out the packaged default base and replace it.         sed -i -r -e 's,^(base[[:blank:]].*),# \1,g' $target         grep -E '^base[[:blank:]]' $source >> $target fi  grep -E '^(binddn|bindpw|port|scope|ssl|pagesize)[[:blank:]]'    $source 2> /dev/null >> $target  We can use RPM instead of SRPM for nss-pam-ldapd package, since related patches are not used anymore.  Deployment test pass.  Story: 2003768 Task: 28045 Depends-on: https://review.openstack.org/#/c/619976/  Change-Id: Ia4fa723d1a6ff9a7a8059fc2db1afec640ea41b1 Signed-off-by: zhipengl <zhipengs.liu@intel.com>",testing,,,,,,
starlingx%2Ftools~master~Iad3e2a524f22c0ac248c304836a006b8bdd69d2b,https://review.opendev.org/619976,Refactor patches for nss-pam-ldapd package,"Refactor patches for nss-pam-ldapd package  Use RPM instead of SRPM for nss-pam-ldapd package, since related patches are not used anymore.  Deployment test pass.  Story: 2003768 Task: 28045  Change-Id: Iad3e2a524f22c0ac248c304836a006b8bdd69d2b Signed-off-by: zhipengl <zhipengs.liu@intel.com>",testing,,,,,,
starlingx%2Ftools~master~Iad3e2a524f22c0ac248c304836a006b8bdd69d2b,https://review.opendev.org/619976,Refactor patches for nss-pam-ldapd package,"Refactor patches for nss-pam-ldapd package  Use RPM instead of SRPM for nss-pam-ldapd package, since related patches are not used anymore.  Deployment test pass.  Story: 2003768 Task: 28045  Change-Id: Iad3e2a524f22c0ac248c304836a006b8bdd69d2b Signed-off-by: zhipengl <zhipengs.liu@intel.com>",objective,,,,,,
starlingx%2Ftools~master~Iad3e2a524f22c0ac248c304836a006b8bdd69d2b,https://review.opendev.org/619976,Refactor patches for nss-pam-ldapd package,"Refactor patches for nss-pam-ldapd package  Use RPM instead of SRPM for nss-pam-ldapd package, since related patches are not used anymore.  Deployment test pass.  Story: 2003768 Task: 28045  Change-Id: Iad3e2a524f22c0ac248c304836a006b8bdd69d2b Signed-off-by: zhipengl <zhipengs.liu@intel.com>",integration,,,,,,
starlingx%2Finteg~master~Ic64543447d04543fdf9eafdc3d9ae4e2521c10df,https://review.opendev.org/616098,Refactor patches for net-snmp package,"Refactor patches for net-snmp package  Use net-snmp-config package to package script and service file for net-snmp-config package. Removed servcie/config/script related patches and let net-snmp-config package to be responsible for it. Keep another one meta patch for build configuration related change.  Deployment test and ping test between VMs pass Config,serivce and script files check pass.  Story: 2003768 Task: 27586 Depends-on: https://review.openstack.org/#/c/616097  Change-Id: Ic64543447d04543fdf9eafdc3d9ae4e2521c10df Signed-off-by: zhipengl <zhipengs.liu@intel.com>",testing,,,,,,
starlingx%2Finteg~master~Ic64543447d04543fdf9eafdc3d9ae4e2521c10df,https://review.opendev.org/616098,Refactor patches for net-snmp package,"Refactor patches for net-snmp package  Use net-snmp-config package to package script and service file for net-snmp-config package. Removed servcie/config/script related patches and let net-snmp-config package to be responsible for it. Keep another one meta patch for build configuration related change.  Deployment test and ping test between VMs pass Config,serivce and script files check pass.  Story: 2003768 Task: 27586 Depends-on: https://review.openstack.org/#/c/616097  Change-Id: Ic64543447d04543fdf9eafdc3d9ae4e2521c10df Signed-off-by: zhipengl <zhipengs.liu@intel.com>",integration,,,,,,
starlingx%2Finteg~master~Ic64543447d04543fdf9eafdc3d9ae4e2521c10df,https://review.opendev.org/616098,Refactor patches for net-snmp package,"Refactor patches for net-snmp package  Use net-snmp-config package to package script and service file for net-snmp-config package. Removed servcie/config/script related patches and let net-snmp-config package to be responsible for it. Keep another one meta patch for build configuration related change.  Deployment test and ping test between VMs pass Config,serivce and script files check pass.  Story: 2003768 Task: 27586 Depends-on: https://review.openstack.org/#/c/616097  Change-Id: Ic64543447d04543fdf9eafdc3d9ae4e2521c10df Signed-off-by: zhipengl <zhipengs.liu@intel.com>",objective,,,,,,
starlingx%2Fmetal~master~I2f9d1bfdbe0b27fbd58137df8a3fd36d3053defa,https://review.opendev.org/616097,Refactor patches for net-snmp package.,"Refactor patches for net-snmp package.  Use net-snmp-config package to package script and service file for net-snmp-config package. Like net-snmp, net-snmp-config will also not be installed on computer and storage node.  Deployment test and ping test between VMs pass Config,serivce and script files check pass.  Story: 2003768 Task: 27586  Change-Id: I2f9d1bfdbe0b27fbd58137df8a3fd36d3053defa Signed-off-by: zhipengl <zhipengs.liu@intel.com>",testing,,,,,,
starlingx%2Fmetal~master~I2f9d1bfdbe0b27fbd58137df8a3fd36d3053defa,https://review.opendev.org/616097,Refactor patches for net-snmp package.,"Refactor patches for net-snmp package.  Use net-snmp-config package to package script and service file for net-snmp-config package. Like net-snmp, net-snmp-config will also not be installed on computer and storage node.  Deployment test and ping test between VMs pass Config,serivce and script files check pass.  Story: 2003768 Task: 27586  Change-Id: I2f9d1bfdbe0b27fbd58137df8a3fd36d3053defa Signed-off-by: zhipengl <zhipengs.liu@intel.com>",integration,,,,,,
starlingx%2Fmetal~master~I2f9d1bfdbe0b27fbd58137df8a3fd36d3053defa,https://review.opendev.org/616097,Refactor patches for net-snmp package.,"Refactor patches for net-snmp package.  Use net-snmp-config package to package script and service file for net-snmp-config package. Like net-snmp, net-snmp-config will also not be installed on computer and storage node.  Deployment test and ping test between VMs pass Config,serivce and script files check pass.  Story: 2003768 Task: 27586  Change-Id: I2f9d1bfdbe0b27fbd58137df8a3fd36d3053defa Signed-off-by: zhipengl <zhipengs.liu@intel.com>",objective,,,,,,
starlingx%2Finteg~master~I77cd054707d11dace1c47e8477d0e30b69719a38,https://review.opendev.org/619003,Refactor patches for openssh package,Refactor patches for openssh package  Use openssh-config package to package config and service files for openssh package. Merge adding source patch and spec related change to one meta patch named spec-include-Tis-chnages.patch.  Deployment test and ping test between VMs pass Config files check pass.  Story: 2003768 Task: 27588  Change-Id: I77cd054707d11dace1c47e8477d0e30b69719a38 Signed-off-by: zhipengl <zhipengs.liu@intel.com>,testing,,,,,,
starlingx%2Finteg~master~I77cd054707d11dace1c47e8477d0e30b69719a38,https://review.opendev.org/619003,Refactor patches for openssh package,Refactor patches for openssh package  Use openssh-config package to package config and service files for openssh package. Merge adding source patch and spec related change to one meta patch named spec-include-Tis-chnages.patch.  Deployment test and ping test between VMs pass Config files check pass.  Story: 2003768 Task: 27588  Change-Id: I77cd054707d11dace1c47e8477d0e30b69719a38 Signed-off-by: zhipengl <zhipengs.liu@intel.com>,integration,,,,,,
starlingx%2Finteg~master~I77cd054707d11dace1c47e8477d0e30b69719a38,https://review.opendev.org/619003,Refactor patches for openssh package,Refactor patches for openssh package  Use openssh-config package to package config and service files for openssh package. Merge adding source patch and spec related change to one meta patch named spec-include-Tis-chnages.patch.  Deployment test and ping test between VMs pass Config files check pass.  Story: 2003768 Task: 27588  Change-Id: I77cd054707d11dace1c47e8477d0e30b69719a38 Signed-off-by: zhipengl <zhipengs.liu@intel.com>,objective,,,,,,
starlingx%2Finteg~master~If90ed6df4a875a576c7ac709589ac221bb0fa2e3,https://review.opendev.org/618970,Refactor patches for util-linux package,Refactor patches for util-linux package  Use util-linux-config package to package config files for util-linux Remove util-linux package folder and use RPM instead of SRPM for util-linux.  Deployment test and ping test between VMs pass Config file check pass.  Story: 2003768 Task: 27595  Change-Id: If90ed6df4a875a576c7ac709589ac221bb0fa2e3 Signed-off-by: zhipengl <zhipengs.liu@intel.com>,testing,,,,,,
starlingx%2Finteg~master~If90ed6df4a875a576c7ac709589ac221bb0fa2e3,https://review.opendev.org/618970,Refactor patches for util-linux package,Refactor patches for util-linux package  Use util-linux-config package to package config files for util-linux Remove util-linux package folder and use RPM instead of SRPM for util-linux.  Deployment test and ping test between VMs pass Config file check pass.  Story: 2003768 Task: 27595  Change-Id: If90ed6df4a875a576c7ac709589ac221bb0fa2e3 Signed-off-by: zhipengl <zhipengs.liu@intel.com>,integration,,,,,,
starlingx%2Finteg~master~If90ed6df4a875a576c7ac709589ac221bb0fa2e3,https://review.opendev.org/618970,Refactor patches for util-linux package,Refactor patches for util-linux package  Use util-linux-config package to package config files for util-linux Remove util-linux package folder and use RPM instead of SRPM for util-linux.  Deployment test and ping test between VMs pass Config file check pass.  Story: 2003768 Task: 27595  Change-Id: If90ed6df4a875a576c7ac709589ac221bb0fa2e3 Signed-off-by: zhipengl <zhipengs.liu@intel.com>,objective,,,,,,
x%2Ftobiko~master~Ib1cd33266409084d6ac04da7158a178b527a5fd7,https://review.opendev.org/619550,Fix or skip test cases after framework refactory.,Fix or skip test cases after framework refactory.  Change-Id: Ib1cd33266409084d6ac04da7158a178b527a5fd7,testing,,,,,,
x%2Ftobiko~master~Ib1cd33266409084d6ac04da7158a178b527a5fd7,https://review.opendev.org/619550,Fix or skip test cases after framework refactory.,Fix or skip test cases after framework refactory.  Change-Id: Ib1cd33266409084d6ac04da7158a178b527a5fd7,objective,,,,,,
starlingx%2Finteg~master~I2ea3bd05bdc5bca5658d157e6f40f7380e922500,https://review.opendev.org/616043,Refactor patches for initscripts package,"Refactor patches for initscripts package  Use initscripts-config package to package script and service file for initscripts package. Refactor 0001-Disable-zeroconf-route.patch��� spec-add-mountnfs-init-script.patch and spec-include-TiS-changes.patch, let initscripts-config to be responsible for the installation of config/script/service files. Merged some meta patches that just includes adding source code patch to spec-include-Tis-changes.patch. Removed base/procps since it just includes one file, sysctl.conf. And move this file to initscripts-config folder.  Deployment test and ping test between VMs pass Service, config and script files check pass.  Story: 2003768 Task: 27585  Change-Id: I2ea3bd05bdc5bca5658d157e6f40f7380e922500 Signed-off-by: zhipengl <zhipengs.liu@intel.com>",testing,,,,,,
starlingx%2Finteg~master~I2ea3bd05bdc5bca5658d157e6f40f7380e922500,https://review.opendev.org/616043,Refactor patches for initscripts package,"Refactor patches for initscripts package  Use initscripts-config package to package script and service file for initscripts package. Refactor 0001-Disable-zeroconf-route.patch��� spec-add-mountnfs-init-script.patch and spec-include-TiS-changes.patch, let initscripts-config to be responsible for the installation of config/script/service files. Merged some meta patches that just includes adding source code patch to spec-include-Tis-changes.patch. Removed base/procps since it just includes one file, sysctl.conf. And move this file to initscripts-config folder.  Deployment test and ping test between VMs pass Service, config and script files check pass.  Story: 2003768 Task: 27585  Change-Id: I2ea3bd05bdc5bca5658d157e6f40f7380e922500 Signed-off-by: zhipengl <zhipengs.liu@intel.com>",integration,,,,,,
starlingx%2Finteg~master~I2ea3bd05bdc5bca5658d157e6f40f7380e922500,https://review.opendev.org/616043,Refactor patches for initscripts package,"Refactor patches for initscripts package  Use initscripts-config package to package script and service file for initscripts package. Refactor 0001-Disable-zeroconf-route.patch��� spec-add-mountnfs-init-script.patch and spec-include-TiS-changes.patch, let initscripts-config to be responsible for the installation of config/script/service files. Merged some meta patches that just includes adding source code patch to spec-include-Tis-changes.patch. Removed base/procps since it just includes one file, sysctl.conf. And move this file to initscripts-config folder.  Deployment test and ping test between VMs pass Service, config and script files check pass.  Story: 2003768 Task: 27585  Change-Id: I2ea3bd05bdc5bca5658d157e6f40f7380e922500 Signed-off-by: zhipengl <zhipengs.liu@intel.com>",objective,,,,,,
starlingx%2Finteg~master~I6512171f1c9186018c0af15b15e7d2094e3d7a73,https://review.opendev.org/618616,Refactor patches for iscsi-initiator-utils package,Refactor patches for iscsi-initiator-utils package  Use iscsi-initiator-utils-config package to package config and service file for iscsi-initiator-utils package.  Deployment test and ping test between WMs pass Config and service files check pass.  Story: 2003768 Task: 27596  Change-Id: I6512171f1c9186018c0af15b15e7d2094e3d7a73 Signed-off-by: zhipengl <zhipengs.liu@intel.com>,testing,,,,,,
starlingx%2Finteg~master~I6512171f1c9186018c0af15b15e7d2094e3d7a73,https://review.opendev.org/618616,Refactor patches for iscsi-initiator-utils package,Refactor patches for iscsi-initiator-utils package  Use iscsi-initiator-utils-config package to package config and service file for iscsi-initiator-utils package.  Deployment test and ping test between WMs pass Config and service files check pass.  Story: 2003768 Task: 27596  Change-Id: I6512171f1c9186018c0af15b15e7d2094e3d7a73 Signed-off-by: zhipengl <zhipengs.liu@intel.com>,integration,,,,,,
starlingx%2Finteg~master~I6512171f1c9186018c0af15b15e7d2094e3d7a73,https://review.opendev.org/618616,Refactor patches for iscsi-initiator-utils package,Refactor patches for iscsi-initiator-utils package  Use iscsi-initiator-utils-config package to package config and service file for iscsi-initiator-utils package.  Deployment test and ping test between WMs pass Config and service files check pass.  Story: 2003768 Task: 27596  Change-Id: I6512171f1c9186018c0af15b15e7d2094e3d7a73 Signed-off-by: zhipengl <zhipengs.liu@intel.com>,objective,,,,,,
openstack%2Fpatrole~master~Iab029f2f875ce2268de12cc2a40e30f2f1a913fe,https://review.opendev.org/614687,refactor: Rename PluginRbacTest => ExtRbacTest,"refactor: Rename PluginRbacTest => ExtRbacTest  This patch set is a follow up on discussion in [0] which concluded that Patrole should not test Neutron plugins.  The pertinent discussion from [0] is:  Patrole can test Neutron extensions but not plugins in tree and that requires renaming the classes (.*PluginRbacTest => .*ExtensionRbacTest) to make it clearer.  Having to support all the Neutron plugins in tree is out of scope for Patrole. Clarifying documentation (which will be done in follow up) can be added to Patrole documentation to make it clear that it will only test ""main"" OpenStack projects, like Tempest.  [0] https://review.openstack.org/#/c/599869/  Change-Id: Iab029f2f875ce2268de12cc2a40e30f2f1a913fe",integration,,,,,,
openstack%2Fpatrole~master~Iab029f2f875ce2268de12cc2a40e30f2f1a913fe,https://review.opendev.org/614687,refactor: Rename PluginRbacTest => ExtRbacTest,"refactor: Rename PluginRbacTest => ExtRbacTest  This patch set is a follow up on discussion in [0] which concluded that Patrole should not test Neutron plugins.  The pertinent discussion from [0] is:  Patrole can test Neutron extensions but not plugins in tree and that requires renaming the classes (.*PluginRbacTest => .*ExtensionRbacTest) to make it clearer.  Having to support all the Neutron plugins in tree is out of scope for Patrole. Clarifying documentation (which will be done in follow up) can be added to Patrole documentation to make it clear that it will only test ""main"" OpenStack projects, like Tempest.  [0] https://review.openstack.org/#/c/599869/  Change-Id: Iab029f2f875ce2268de12cc2a40e30f2f1a913fe",testing,,,,,,
openstack%2Fpatrole~master~Iab029f2f875ce2268de12cc2a40e30f2f1a913fe,https://review.opendev.org/614687,refactor: Rename PluginRbacTest => ExtRbacTest,"refactor: Rename PluginRbacTest => ExtRbacTest  This patch set is a follow up on discussion in [0] which concluded that Patrole should not test Neutron plugins.  The pertinent discussion from [0] is:  Patrole can test Neutron extensions but not plugins in tree and that requires renaming the classes (.*PluginRbacTest => .*ExtensionRbacTest) to make it clearer.  Having to support all the Neutron plugins in tree is out of scope for Patrole. Clarifying documentation (which will be done in follow up) can be added to Patrole documentation to make it clear that it will only test ""main"" OpenStack projects, like Tempest.  [0] https://review.openstack.org/#/c/599869/  Change-Id: Iab029f2f875ce2268de12cc2a40e30f2f1a913fe",quality,,,,,,
openstack%2Fpatrole~master~Iab029f2f875ce2268de12cc2a40e30f2f1a913fe,https://review.opendev.org/614687,refactor: Rename PluginRbacTest => ExtRbacTest,"refactor: Rename PluginRbacTest => ExtRbacTest  This patch set is a follow up on discussion in [0] which concluded that Patrole should not test Neutron plugins.  The pertinent discussion from [0] is:  Patrole can test Neutron extensions but not plugins in tree and that requires renaming the classes (.*PluginRbacTest => .*ExtensionRbacTest) to make it clearer.  Having to support all the Neutron plugins in tree is out of scope for Patrole. Clarifying documentation (which will be done in follow up) can be added to Patrole documentation to make it clear that it will only test ""main"" OpenStack projects, like Tempest.  [0] https://review.openstack.org/#/c/599869/  Change-Id: Iab029f2f875ce2268de12cc2a40e30f2f1a913fe",quality,,,,,,
starlingx%2Finteg~master~I08fd8aa662533f4ce379f352ba9bab7616c905f5,https://review.opendev.org/614768,Refactor patches for haproxy package.,Refactor patches for haproxy package.  Use haproxy-config package to package script and service file for haproxy package. Create patches sub-folder and move patches file from haproxy/haproxy folder to this sub-folder. Refactor haproxy-service-file.patch & haproxy-spec-add-init-script.patch as we use haproxy-config to package related files. Merged meta_add_support_for_tpm.patch & spec-add-haproxy-env-var-patch.patch to spec-include-TiS-changes.patch(renamed from spec-include-TiS-config.patch) as they just includes adding source code patches.  Deployment test and ping test between VMs pass config and script files check pass.  Story: 2003768 Task: 27584 Depends-on: https://review.openstack.org/#/c/614709/  Change-Id: I08fd8aa662533f4ce379f352ba9bab7616c905f5 Signed-off-by: zhipengl <zhipengs.liu@intel.com>,testing,,,,,,
starlingx%2Finteg~master~I08fd8aa662533f4ce379f352ba9bab7616c905f5,https://review.opendev.org/614768,Refactor patches for haproxy package.,Refactor patches for haproxy package.  Use haproxy-config package to package script and service file for haproxy package. Create patches sub-folder and move patches file from haproxy/haproxy folder to this sub-folder. Refactor haproxy-service-file.patch & haproxy-spec-add-init-script.patch as we use haproxy-config to package related files. Merged meta_add_support_for_tpm.patch & spec-add-haproxy-env-var-patch.patch to spec-include-TiS-changes.patch(renamed from spec-include-TiS-config.patch) as they just includes adding source code patches.  Deployment test and ping test between VMs pass config and script files check pass.  Story: 2003768 Task: 27584 Depends-on: https://review.openstack.org/#/c/614709/  Change-Id: I08fd8aa662533f4ce379f352ba9bab7616c905f5 Signed-off-by: zhipengl <zhipengs.liu@intel.com>,integration,,,,,,
starlingx%2Finteg~master~I08fd8aa662533f4ce379f352ba9bab7616c905f5,https://review.opendev.org/614768,Refactor patches for haproxy package.,Refactor patches for haproxy package.  Use haproxy-config package to package script and service file for haproxy package. Create patches sub-folder and move patches file from haproxy/haproxy folder to this sub-folder. Refactor haproxy-service-file.patch & haproxy-spec-add-init-script.patch as we use haproxy-config to package related files. Merged meta_add_support_for_tpm.patch & spec-add-haproxy-env-var-patch.patch to spec-include-TiS-changes.patch(renamed from spec-include-TiS-config.patch) as they just includes adding source code patches.  Deployment test and ping test between VMs pass config and script files check pass.  Story: 2003768 Task: 27584 Depends-on: https://review.openstack.org/#/c/614709/  Change-Id: I08fd8aa662533f4ce379f352ba9bab7616c905f5 Signed-off-by: zhipengl <zhipengs.liu@intel.com>,objective,,,,,,
starlingx%2Finteg~master~I4d5b78fed03961056585b8c09dc483fac3b55728,https://review.opendev.org/613888,Refactor patches for dnsmasq package.,Refactor patches for dnsmasq package.  Use dnsmasq-config package to add init script to system folder and remove related patches. Deployment test and script check pass.  Change-Id: I4d5b78fed03961056585b8c09dc483fac3b55728 Signed-off-by: zhipengl <zhipengs.liu@intel.com>,testing,,,,,,
starlingx%2Finteg~master~I4d5b78fed03961056585b8c09dc483fac3b55728,https://review.opendev.org/613888,Refactor patches for dnsmasq package.,Refactor patches for dnsmasq package.  Use dnsmasq-config package to add init script to system folder and remove related patches. Deployment test and script check pass.  Change-Id: I4d5b78fed03961056585b8c09dc483fac3b55728 Signed-off-by: zhipengl <zhipengs.liu@intel.com>,integration,,,,,,
starlingx%2Finteg~master~I4d5b78fed03961056585b8c09dc483fac3b55728,https://review.opendev.org/613888,Refactor patches for dnsmasq package.,Refactor patches for dnsmasq package.  Use dnsmasq-config package to add init script to system folder and remove related patches. Deployment test and script check pass.  Change-Id: I4d5b78fed03961056585b8c09dc483fac3b55728 Signed-off-by: zhipengl <zhipengs.liu@intel.com>,objective,,,,,,
openstack%2Fmistral~stable%2Frocky~I18c0c2c3159b9294c8af96c93c65a6edfc1de1a1,https://review.opendev.org/617129,Refactor action execution checker without using scheduler,"Refactor action execution checker without using scheduler  * Removed using scheduler from action execution heartbeat checker   in favor of regular threads. * Added the new config options ""batch_size"" under [action_heartbeat]   group to limit a number of action executions being processed during   one iteration the checker. * Added a test checking that an action execution is automatically   failed by the heartbeat checker.  Closes-Bug: #1802065 Change-Id: I18c0c2c3159b9294c8af96c93c65a6edfc1de1a1 (cherry-picked from commit 2d74e6ebacf29379850d29bbe9317e930ff2da99)",testing,,,,,,
openstack%2Fmistral~stable%2Frocky~I18c0c2c3159b9294c8af96c93c65a6edfc1de1a1,https://review.opendev.org/617129,Refactor action execution checker without using scheduler,"Refactor action execution checker without using scheduler  * Removed using scheduler from action execution heartbeat checker   in favor of regular threads. * Added the new config options ""batch_size"" under [action_heartbeat]   group to limit a number of action executions being processed during   one iteration the checker. * Added a test checking that an action execution is automatically   failed by the heartbeat checker.  Closes-Bug: #1802065 Change-Id: I18c0c2c3159b9294c8af96c93c65a6edfc1de1a1 (cherry-picked from commit 2d74e6ebacf29379850d29bbe9317e930ff2da99)",objective,,,,,,
openstack%2Fmistral~stable%2Frocky~I18c0c2c3159b9294c8af96c93c65a6edfc1de1a1,https://review.opendev.org/617129,Refactor action execution checker without using scheduler,"Refactor action execution checker without using scheduler  * Removed using scheduler from action execution heartbeat checker   in favor of regular threads. * Added the new config options ""batch_size"" under [action_heartbeat]   group to limit a number of action executions being processed during   one iteration the checker. * Added a test checking that an action execution is automatically   failed by the heartbeat checker.  Closes-Bug: #1802065 Change-Id: I18c0c2c3159b9294c8af96c93c65a6edfc1de1a1 (cherry-picked from commit 2d74e6ebacf29379850d29bbe9317e930ff2da99)",quality,,,,,,
starlingx%2Finteg~master~I795f0fd2b53c46c7302104a07c5d4cfe869d3c7b,https://review.opendev.org/614384,refactor ntp,"refactor ntp  Add ntp-config package to config the customized ntp.conf and ntpd. With this change, ntp srpm is dropped to replaced by rpm. ntp-config is configured to depend on ntp, so ntp will be included in the ISO automatically. ntp package will be installed in all type node, so no change to filter.  Test has been done: build and deploy with multinode. confirm ntp.conf and ntpd is kept the same as before.  Story: 2003768 Task: 27587  Change-Id: I795f0fd2b53c46c7302104a07c5d4cfe869d3c7b Signed-off-by: slin14 <shuicheng.lin@intel.com>",testing,,,,,,
starlingx%2Finteg~master~I795f0fd2b53c46c7302104a07c5d4cfe869d3c7b,https://review.opendev.org/614384,refactor ntp,"refactor ntp  Add ntp-config package to config the customized ntp.conf and ntpd. With this change, ntp srpm is dropped to replaced by rpm. ntp-config is configured to depend on ntp, so ntp will be included in the ISO automatically. ntp package will be installed in all type node, so no change to filter.  Test has been done: build and deploy with multinode. confirm ntp.conf and ntpd is kept the same as before.  Story: 2003768 Task: 27587  Change-Id: I795f0fd2b53c46c7302104a07c5d4cfe869d3c7b Signed-off-by: slin14 <shuicheng.lin@intel.com>",integration,,,,,,
starlingx%2Finteg~master~I795f0fd2b53c46c7302104a07c5d4cfe869d3c7b,https://review.opendev.org/614384,refactor ntp,"refactor ntp  Add ntp-config package to config the customized ntp.conf and ntpd. With this change, ntp srpm is dropped to replaced by rpm. ntp-config is configured to depend on ntp, so ntp will be included in the ISO automatically. ntp package will be installed in all type node, so no change to filter.  Test has been done: build and deploy with multinode. confirm ntp.conf and ntpd is kept the same as before.  Story: 2003768 Task: 27587  Change-Id: I795f0fd2b53c46c7302104a07c5d4cfe869d3c7b Signed-off-by: slin14 <shuicheng.lin@intel.com>",objective,,,,,,
openstack%2Fkolla-ansible~master~Ifa442ac79a54f749c56d20f5f7383c3852d95268,https://review.opendev.org/581382,Refactor CI testing scripts,"WIP: Refactor CI testing scripts  This change is intended to ease the addition of new test scenarios, by splitting the existing setup_gate.sh script up into several smaller scripts. We may wish to further break these scripts up in future, depending on the requirements of new test jobs.  Change-Id: Ifa442ac79a54f749c56d20f5f7383c3852d95268",testing,,,,,,
openstack%2Fkolla-ansible~master~Ifa442ac79a54f749c56d20f5f7383c3852d95268,https://review.opendev.org/581382,Refactor CI testing scripts,"WIP: Refactor CI testing scripts  This change is intended to ease the addition of new test scenarios, by splitting the existing setup_gate.sh script up into several smaller scripts. We may wish to further break these scripts up in future, depending on the requirements of new test jobs.  Change-Id: Ifa442ac79a54f749c56d20f5f7383c3852d95268",quality,,,,,,
starlingx%2Fmetal~master~I026697079f968b54b8c518abeab847e95dc79e49,https://review.opendev.org/614709,Refactor patches for haproxy package.,Refactor patches for haproxy package.  Use haproxy-config package to package config files for haproxy package Haproxy & haproxy-config will not be installed on storage node.  Deployment test pass and ping pass between 2 VMs. Script file and service file have been checked in system folder.  Story: 2003768 Task: 27584  Change-Id: I026697079f968b54b8c518abeab847e95dc79e49 Signed-off-by: zhipengl <zhipengs.liu@intel.com>,testing,,,,,,
starlingx%2Fmetal~master~I026697079f968b54b8c518abeab847e95dc79e49,https://review.opendev.org/614709,Refactor patches for haproxy package.,Refactor patches for haproxy package.  Use haproxy-config package to package config files for haproxy package Haproxy & haproxy-config will not be installed on storage node.  Deployment test pass and ping pass between 2 VMs. Script file and service file have been checked in system folder.  Story: 2003768 Task: 27584  Change-Id: I026697079f968b54b8c518abeab847e95dc79e49 Signed-off-by: zhipengl <zhipengs.liu@intel.com>,integration,,,,,,
starlingx%2Fmetal~master~I026697079f968b54b8c518abeab847e95dc79e49,https://review.opendev.org/614709,Refactor patches for haproxy package.,Refactor patches for haproxy package.  Use haproxy-config package to package config files for haproxy package Haproxy & haproxy-config will not be installed on storage node.  Deployment test pass and ping pass between 2 VMs. Script file and service file have been checked in system folder.  Story: 2003768 Task: 27584  Change-Id: I026697079f968b54b8c518abeab847e95dc79e49 Signed-off-by: zhipengl <zhipengs.liu@intel.com>,objective,,,,,,
openstack%2Fmanila-tempest-plugin~master~I2a647fd5871ef6bb7d1ab45db893a44a560bed72,https://review.opendev.org/776869,Refactor public share test cases,"Refactor public share test cases  The RBAC policy defaults to create a public share or to update an existing share to public have changed since the Stein release. [1]  Let's stop assuming that regular users can perform these actions, so that manila can safely remove the policy rule deprecation support for these APIs.  [1] https://review.opendev.org/634864  Change-Id: I2a647fd5871ef6bb7d1ab45db893a44a560bed72 Signed-off-by: Goutham Pacha Ravi <gouthampravi@gmail.com>",integration,,,,,,
openstack%2Fmanila-tempest-plugin~master~I2a647fd5871ef6bb7d1ab45db893a44a560bed72,https://review.opendev.org/776869,Refactor public share test cases,"Refactor public share test cases  The RBAC policy defaults to create a public share or to update an existing share to public have changed since the Stein release. [1]  Let's stop assuming that regular users can perform these actions, so that manila can safely remove the policy rule deprecation support for these APIs.  [1] https://review.opendev.org/634864  Change-Id: I2a647fd5871ef6bb7d1ab45db893a44a560bed72 Signed-off-by: Goutham Pacha Ravi <gouthampravi@gmail.com>",testing,,,,,,
openstack%2Fmanila-tempest-plugin~master~I2a647fd5871ef6bb7d1ab45db893a44a560bed72,https://review.opendev.org/776869,Refactor public share test cases,"Refactor public share test cases  The RBAC policy defaults to create a public share or to update an existing share to public have changed since the Stein release. [1]  Let's stop assuming that regular users can perform these actions, so that manila can safely remove the policy rule deprecation support for these APIs.  [1] https://review.opendev.org/634864  Change-Id: I2a647fd5871ef6bb7d1ab45db893a44a560bed72 Signed-off-by: Goutham Pacha Ravi <gouthampravi@gmail.com>",objective,,,,,,
openstack%2Fplacement~master~I80f8b1a74b8afdabbb85afc6caef1abef8ac3751,https://review.opendev.org/602770,Refactor: separate limiting GET /a_c results,"Refactor: separate limiting GET /a_c results  This patch reduces the complexity of AllocationCandidates._get_by_requests by factoring out the piece that applies a limit to the results.  In the process of inspecting this code, I noticed what I thought was a bug, so I wrote a test to uncover it. Turns out there was no bug; but I kept the test case (and the ""fix"" for the bug - a slight refactor and optimization of the limiting algorithm) because it provides heretofore-absent coverage. (Since allocation requests are returned in nondeterministic order, it would be nearly impossible to write a functional test to ensure that the provider summaries are always trimmed correctly.)  Change-Id: I80f8b1a74b8afdabbb85afc6caef1abef8ac3751",testing,,,,,,
openstack%2Fplacement~master~I80f8b1a74b8afdabbb85afc6caef1abef8ac3751,https://review.opendev.org/602770,Refactor: separate limiting GET /a_c results,"Refactor: separate limiting GET /a_c results  This patch reduces the complexity of AllocationCandidates._get_by_requests by factoring out the piece that applies a limit to the results.  In the process of inspecting this code, I noticed what I thought was a bug, so I wrote a test to uncover it. Turns out there was no bug; but I kept the test case (and the ""fix"" for the bug - a slight refactor and optimization of the limiting algorithm) because it provides heretofore-absent coverage. (Since allocation requests are returned in nondeterministic order, it would be nearly impossible to write a functional test to ensure that the provider summaries are always trimmed correctly.)  Change-Id: I80f8b1a74b8afdabbb85afc6caef1abef8ac3751",quality,,,,,,
openstack%2Fplacement~master~I80f8b1a74b8afdabbb85afc6caef1abef8ac3751,https://review.opendev.org/602770,Refactor: separate limiting GET /a_c results,"Refactor: separate limiting GET /a_c results  This patch reduces the complexity of AllocationCandidates._get_by_requests by factoring out the piece that applies a limit to the results.  In the process of inspecting this code, I noticed what I thought was a bug, so I wrote a test to uncover it. Turns out there was no bug; but I kept the test case (and the ""fix"" for the bug - a slight refactor and optimization of the limiting algorithm) because it provides heretofore-absent coverage. (Since allocation requests are returned in nondeterministic order, it would be nearly impossible to write a functional test to ensure that the provider summaries are always trimmed correctly.)  Change-Id: I80f8b1a74b8afdabbb85afc6caef1abef8ac3751",objective,,,,,,
openstack%2Fnova~master~If6aa37d9b6b48791e070799ab026c816fda4441c,https://review.opendev.org/607287,Refactor allocation checking in functional tests,Refactor allocation checking in functional tests  Factor out common allocation checking code in the functional test cases and make them nested provider tree aware. This prepare the ServerMovingTests class to be re-used in a nested RP tree and nested allocation environment.  Change-Id: If6aa37d9b6b48791e070799ab026c816fda4441c Blueprint: use-nested-allocation-candidates,testing,,,,,,
openstack%2Fnova~master~If6aa37d9b6b48791e070799ab026c816fda4441c,https://review.opendev.org/607287,Refactor allocation checking in functional tests,Refactor allocation checking in functional tests  Factor out common allocation checking code in the functional test cases and make them nested provider tree aware. This prepare the ServerMovingTests class to be re-used in a nested RP tree and nested allocation environment.  Change-Id: If6aa37d9b6b48791e070799ab026c816fda4441c Blueprint: use-nested-allocation-candidates,quality,,,,,,
openstack%2Fnova~master~If6aa37d9b6b48791e070799ab026c816fda4441c,https://review.opendev.org/607287,Refactor allocation checking in functional tests,Refactor allocation checking in functional tests  Factor out common allocation checking code in the functional test cases and make them nested provider tree aware. This prepare the ServerMovingTests class to be re-used in a nested RP tree and nested allocation environment.  Change-Id: If6aa37d9b6b48791e070799ab026c816fda4441c Blueprint: use-nested-allocation-candidates,objective,,,,,,
airship%2Fdeckhand~master~I1c18c4f8c79c1b9d3124747f8aa04743f27434eb,https://review.opendev.org/593209,refactor: Clean up jsonpath_replace method,"refactor: Clean up jsonpath_replace method  This patch set cleans up jsonpath_replace method to increase its readability. Currently, there is some weird legacy code in there which doesn't make much sense and is most likely dead code. In fact, before this change, there was no unit test for validating that `MissingDocumentPattern` is raised correctly.  The `jsonpath_replace` is refactored to only call the inner private function _do_replace once, after performing data expansion (populating the data dictionary with nonexistent nested keys).  Unit tests have been added to validate the exception above.  Change-Id: I1c18c4f8c79c1b9d3124747f8aa04743f27434eb",testing,,,,,,
airship%2Fdeckhand~master~I1c18c4f8c79c1b9d3124747f8aa04743f27434eb,https://review.opendev.org/593209,refactor: Clean up jsonpath_replace method,"refactor: Clean up jsonpath_replace method  This patch set cleans up jsonpath_replace method to increase its readability. Currently, there is some weird legacy code in there which doesn't make much sense and is most likely dead code. In fact, before this change, there was no unit test for validating that `MissingDocumentPattern` is raised correctly.  The `jsonpath_replace` is refactored to only call the inner private function _do_replace once, after performing data expansion (populating the data dictionary with nonexistent nested keys).  Unit tests have been added to validate the exception above.  Change-Id: I1c18c4f8c79c1b9d3124747f8aa04743f27434eb",objective,,,,,,
airship%2Fdeckhand~master~I1c18c4f8c79c1b9d3124747f8aa04743f27434eb,https://review.opendev.org/593209,refactor: Clean up jsonpath_replace method,"refactor: Clean up jsonpath_replace method  This patch set cleans up jsonpath_replace method to increase its readability. Currently, there is some weird legacy code in there which doesn't make much sense and is most likely dead code. In fact, before this change, there was no unit test for validating that `MissingDocumentPattern` is raised correctly.  The `jsonpath_replace` is refactored to only call the inner private function _do_replace once, after performing data expansion (populating the data dictionary with nonexistent nested keys).  Unit tests have been added to validate the exception above.  Change-Id: I1c18c4f8c79c1b9d3124747f8aa04743f27434eb",quality,,,,,,
airship%2Farmada~master~I84051ae4901011093f987479861df5f89561bb2c,https://review.opendev.org/591403,Validation refactor,"[WIP] Validation refactor This PS removes the unnecessary validation call in update_manifests since the validation call already happens in pre_flight_ops.  Added exception handling in pre_flight_ops.  Also validate_armada_documents now throws the exception InvalidManifestException accordingly. Added exception handling in _validate_documents (test.py).  Introduced ArmadaNegativeHandlerTestCase class in test_armada.py, along with updating unit tests in test_validate.py, test_override.py, test_manifest.py.  Updated test_update_manifests_invalid to test something more meaningful because previously a non-existing yaml was passed into Override resulting in the override to be None.  Change-Id: I84051ae4901011093f987479861df5f89561bb2c",testing,,,,,,
airship%2Farmada~master~I84051ae4901011093f987479861df5f89561bb2c,https://review.opendev.org/591403,Validation refactor,"[WIP] Validation refactor This PS removes the unnecessary validation call in update_manifests since the validation call already happens in pre_flight_ops.  Added exception handling in pre_flight_ops.  Also validate_armada_documents now throws the exception InvalidManifestException accordingly. Added exception handling in _validate_documents (test.py).  Introduced ArmadaNegativeHandlerTestCase class in test_armada.py, along with updating unit tests in test_validate.py, test_override.py, test_manifest.py.  Updated test_update_manifests_invalid to test something more meaningful because previously a non-existing yaml was passed into Override resulting in the override to be None.  Change-Id: I84051ae4901011093f987479861df5f89561bb2c",objective,,,,,,
openstack%2Fnova~master~Ide6544d1cf9e1ed154b42075acdd7af986c3afe8,https://review.opendev.org/588159,Refactor AllocationFixture in placement test,Refactor AllocationFixture in placement test  This patch refactors the allocation fixture used in some placement api tests by substituting common functions in test_base.py for the existing object management functions.  Change-Id: Ide6544d1cf9e1ed154b42075acdd7af986c3afe8,testing,,,,,,
openstack%2Fnova~master~Ide6544d1cf9e1ed154b42075acdd7af986c3afe8,https://review.opendev.org/588159,Refactor AllocationFixture in placement test,Refactor AllocationFixture in placement test  This patch refactors the allocation fixture used in some placement api tests by substituting common functions in test_base.py for the existing object management functions.  Change-Id: Ide6544d1cf9e1ed154b42075acdd7af986c3afe8,objective,,,,,,
openstack%2Fnova~master~Ide6544d1cf9e1ed154b42075acdd7af986c3afe8,https://review.opendev.org/588159,Refactor AllocationFixture in placement test,Refactor AllocationFixture in placement test  This patch refactors the allocation fixture used in some placement api tests by substituting common functions in test_base.py for the existing object management functions.  Change-Id: Ide6544d1cf9e1ed154b42075acdd7af986c3afe8,quality,,,,,,
openstack%2Ftempest~master~I0a77350bb0832f0ecf5c50de48b81a8bb9609d2d,https://review.opendev.org/583385,refactor: Prepare test_list_projects for pre-prov,move some project list tests to static (part 1)  This is part 1 of 2 commits to use existing credentials to execute part 1 aims to move the following tests:   * test_list_projects   * test_list_projects_with_name so that users with a cloud using the pre-provisioned credential provider can execute these tests. Part 2 will refactor.  The other tests cannot be moved because they require resources to be created explained below:   * test_list_projects_with_parent     - if this test requires a project with a parent then we cannot       use pre-provisioned credentials because there is no way to       provide an account with a parent using the current       implementation of the pre-provisioned credential provider.   * test_list_projects_with_enabled     - if this test requires projects that are disabled then we       cannot use pre-provisioned credentials because there is no       way to provide an account that is disabled with the current       implementation of the pre-provisioned credential provider.  Change-Id: I0a77350bb0832f0ecf5c50de48b81a8bb9609d2d,testing,,,,,,
openstack%2Ftempest~master~I0a77350bb0832f0ecf5c50de48b81a8bb9609d2d,https://review.opendev.org/583385,refactor: Prepare test_list_projects for pre-prov,move some project list tests to static (part 1)  This is part 1 of 2 commits to use existing credentials to execute part 1 aims to move the following tests:   * test_list_projects   * test_list_projects_with_name so that users with a cloud using the pre-provisioned credential provider can execute these tests. Part 2 will refactor.  The other tests cannot be moved because they require resources to be created explained below:   * test_list_projects_with_parent     - if this test requires a project with a parent then we cannot       use pre-provisioned credentials because there is no way to       provide an account with a parent using the current       implementation of the pre-provisioned credential provider.   * test_list_projects_with_enabled     - if this test requires projects that are disabled then we       cannot use pre-provisioned credentials because there is no       way to provide an account that is disabled with the current       implementation of the pre-provisioned credential provider.  Change-Id: I0a77350bb0832f0ecf5c50de48b81a8bb9609d2d,objective,,,,,,
x%2Fvmware-nsx-tempest-plugin~master~I4cd89f49562c780754ebfb7e93c38b4e6556e314,https://review.opendev.org/584976,refactor top-level pkg to vmware_nsx_tempest_plugin,refactor top-level pkg to vmware_nsx_tempest_plugin  This patch refactors the source and supporting files to use the top level package name of vmware_nsx_tempest_plugin. This better matches the project name as well as the name we plan to publish to PYPI with as per the discussion in [1].  A sample release has been published to the test pypi repo [2] to ensure this works.  [1] https://review.openstack.org/#/c/584498/ [2] https://test.pypi.org/project/vmware-nsx-tempest-plugin/  Change-Id: I4cd89f49562c780754ebfb7e93c38b4e6556e314,integration,,,,,,
x%2Fvmware-nsx-tempest-plugin~master~I4cd89f49562c780754ebfb7e93c38b4e6556e314,https://review.opendev.org/584976,refactor top-level pkg to vmware_nsx_tempest_plugin,refactor top-level pkg to vmware_nsx_tempest_plugin  This patch refactors the source and supporting files to use the top level package name of vmware_nsx_tempest_plugin. This better matches the project name as well as the name we plan to publish to PYPI with as per the discussion in [1].  A sample release has been published to the test pypi repo [2] to ensure this works.  [1] https://review.openstack.org/#/c/584498/ [2] https://test.pypi.org/project/vmware-nsx-tempest-plugin/  Change-Id: I4cd89f49562c780754ebfb7e93c38b4e6556e314,objective,,,,,,
openstack%2Fneutron~stable%2Fpike~I6e5783c44c77ec07371921e900ed45efd031ebdb,https://review.opendev.org/584785,Refactor DVR HA migarations DB operations,"Refactor DVR HA migarations DB operations  when a router is migrated from/to HA, router interface device_owner in DB is updated in the AFTER_UPDATE event handler. Because of this we see StaleDataError Trace as described in the bug report. Instead, we follow DVR approach and update it in PRECOMMIT_UPDATE handler, which only does DB changes. Here we update device_owner only between legacy and HA router modes as migration involving DVR is already handled in DVR code.  Also update distributed flag after all DB operations. Otherwise existing code may affect router unbinding during retry as distributed flag already updated before retry.  Testing is covered with scenario tempest test i.e DVR HA migrations tests from gate job ""legacy-tempest-dsvm-neutron-dvr-multinode-scenario"".  Closes-Bug: 1715163 Change-Id: I6e5783c44c77ec07371921e900ed45efd031ebdb (cherry picked from commit 7910c3a1c090ed7a46a32b371ecf73157ddba88f)",integration,,,,,,
openstack%2Fneutron~stable%2Fpike~I6e5783c44c77ec07371921e900ed45efd031ebdb,https://review.opendev.org/584785,Refactor DVR HA migarations DB operations,"Refactor DVR HA migarations DB operations  when a router is migrated from/to HA, router interface device_owner in DB is updated in the AFTER_UPDATE event handler. Because of this we see StaleDataError Trace as described in the bug report. Instead, we follow DVR approach and update it in PRECOMMIT_UPDATE handler, which only does DB changes. Here we update device_owner only between legacy and HA router modes as migration involving DVR is already handled in DVR code.  Also update distributed flag after all DB operations. Otherwise existing code may affect router unbinding during retry as distributed flag already updated before retry.  Testing is covered with scenario tempest test i.e DVR HA migrations tests from gate job ""legacy-tempest-dsvm-neutron-dvr-multinode-scenario"".  Closes-Bug: 1715163 Change-Id: I6e5783c44c77ec07371921e900ed45efd031ebdb (cherry picked from commit 7910c3a1c090ed7a46a32b371ecf73157ddba88f)",testing,,,,,,
openstack%2Fneutron~stable%2Fpike~I6e5783c44c77ec07371921e900ed45efd031ebdb,https://review.opendev.org/584785,Refactor DVR HA migarations DB operations,"Refactor DVR HA migarations DB operations  when a router is migrated from/to HA, router interface device_owner in DB is updated in the AFTER_UPDATE event handler. Because of this we see StaleDataError Trace as described in the bug report. Instead, we follow DVR approach and update it in PRECOMMIT_UPDATE handler, which only does DB changes. Here we update device_owner only between legacy and HA router modes as migration involving DVR is already handled in DVR code.  Also update distributed flag after all DB operations. Otherwise existing code may affect router unbinding during retry as distributed flag already updated before retry.  Testing is covered with scenario tempest test i.e DVR HA migrations tests from gate job ""legacy-tempest-dsvm-neutron-dvr-multinode-scenario"".  Closes-Bug: 1715163 Change-Id: I6e5783c44c77ec07371921e900ed45efd031ebdb (cherry picked from commit 7910c3a1c090ed7a46a32b371ecf73157ddba88f)",objective,,,,,,
airship%2Fshipyard~master~I437ff9c583358188e27de0e2f6987c38ca85ab2f,https://review.opendev.org/585760,Refactor imports to support loading dags for tests,"Refactor imports to support loading dags for tests  Updates the imports for the dags and operators to support both ""as deployed"" and ""as tested"" package configurations. This allows for a simple test to be added that at least imorts and checks the dags to ensure they contain steps.  A future refactor may eliminate the need for some/much of this by moving the operators away from the plugin appraoch such that they can be statically built into the airflow pod and used like a third party library instead of being appended to the airflow plugins. For now though, this maintains the status quo for the way these are used in a deployed way.  Change-Id: I437ff9c583358188e27de0e2f6987c38ca85ab2f",testing,,,,,,
airship%2Fshipyard~master~I437ff9c583358188e27de0e2f6987c38ca85ab2f,https://review.opendev.org/585760,Refactor imports to support loading dags for tests,"Refactor imports to support loading dags for tests  Updates the imports for the dags and operators to support both ""as deployed"" and ""as tested"" package configurations. This allows for a simple test to be added that at least imorts and checks the dags to ensure they contain steps.  A future refactor may eliminate the need for some/much of this by moving the operators away from the plugin appraoch such that they can be statically built into the airflow pod and used like a third party library instead of being appended to the airflow plugins. For now though, this maintains the status quo for the way these are used in a deployed way.  Change-Id: I437ff9c583358188e27de0e2f6987c38ca85ab2f",quality,,,,,,
airship%2Fshipyard~master~I437ff9c583358188e27de0e2f6987c38ca85ab2f,https://review.opendev.org/585760,Refactor imports to support loading dags for tests,"Refactor imports to support loading dags for tests  Updates the imports for the dags and operators to support both ""as deployed"" and ""as tested"" package configurations. This allows for a simple test to be added that at least imorts and checks the dags to ensure they contain steps.  A future refactor may eliminate the need for some/much of this by moving the operators away from the plugin appraoch such that they can be statically built into the airflow pod and used like a third party library instead of being appended to the airflow plugins. For now though, this maintains the status quo for the way these are used in a deployed way.  Change-Id: I437ff9c583358188e27de0e2f6987c38ca85ab2f",objective,,,,,,
openstack%2Ftempest~master~I4121b85aa271ccd7df30d7675bd923cb84a5673a,https://review.opendev.org/579942,refactor: Combine nearly duplicate group tests together,refactor: Combine nearly duplicate group tests together  This patchset combines test_group_update_with_few_fields with test_group_create_update_get since the first one is almost the exact same as the update scenario in the second test.  test_group_update_with_few_fields just updates 1 field and checks whether the other fields remain unchanged. This is a unique test case that is very niche and so shouldn't really be its own test case. It can be combined with test_group_create_update_get.  Also this patchset adds better comments and also adds assertions for checking that the domain_id of the group is correct.  Change-Id: I4121b85aa271ccd7df30d7675bd923cb84a5673a,testing,,,,,,
openstack%2Ftempest~master~I4121b85aa271ccd7df30d7675bd923cb84a5673a,https://review.opendev.org/579942,refactor: Combine nearly duplicate group tests together,refactor: Combine nearly duplicate group tests together  This patchset combines test_group_update_with_few_fields with test_group_create_update_get since the first one is almost the exact same as the update scenario in the second test.  test_group_update_with_few_fields just updates 1 field and checks whether the other fields remain unchanged. This is a unique test case that is very niche and so shouldn't really be its own test case. It can be combined with test_group_create_update_get.  Also this patchset adds better comments and also adds assertions for checking that the domain_id of the group is correct.  Change-Id: I4121b85aa271ccd7df30d7675bd923cb84a5673a,quality,,,,,,
openstack%2Ftempest~master~I4121b85aa271ccd7df30d7675bd923cb84a5673a,https://review.opendev.org/579942,refactor: Combine nearly duplicate group tests together,refactor: Combine nearly duplicate group tests together  This patchset combines test_group_update_with_few_fields with test_group_create_update_get since the first one is almost the exact same as the update scenario in the second test.  test_group_update_with_few_fields just updates 1 field and checks whether the other fields remain unchanged. This is a unique test case that is very niche and so shouldn't really be its own test case. It can be combined with test_group_create_update_get.  Also this patchset adds better comments and also adds assertions for checking that the domain_id of the group is correct.  Change-Id: I4121b85aa271ccd7df30d7675bd923cb84a5673a,objective,,,,,,
openstack%2Ftempest~master~I86b418f56dfb8087e49965196971b28ab71c138e,https://review.opendev.org/579940,refactor: Add setup_test_group to identity admin base test class,refactor: Add setup_test_group to identity admin base test class  This patchset adds a setup_test_group helper to identity admin base test class which is similar to other methods like setup_test_user to cut down on cookie cutter create/addCleanup code throughout tests that create groups. Note that this is an instance level method so class level group creation isn't refactored.  Change-Id: I86b418f56dfb8087e49965196971b28ab71c138e,testing,,,,,,
openstack%2Ftempest~master~I86b418f56dfb8087e49965196971b28ab71c138e,https://review.opendev.org/579940,refactor: Add setup_test_group to identity admin base test class,refactor: Add setup_test_group to identity admin base test class  This patchset adds a setup_test_group helper to identity admin base test class which is similar to other methods like setup_test_user to cut down on cookie cutter create/addCleanup code throughout tests that create groups. Note that this is an instance level method so class level group creation isn't refactored.  Change-Id: I86b418f56dfb8087e49965196971b28ab71c138e,objective,,,,,,
openstack%2Fglance~master~I7108179e0d96e09638ff783b029a8216f0938c3b,https://review.opendev.org/566947,Refactor wait_for_scrubber_shutdown function,"Refactor wait_for_scrubber_shutdown function  The wait_for_scrubber_shutdown function catches AssertionErrors and retries.  Refactor it so that it only retries for a specific error (namely, when glance scrubber is running in daemon mode when the test is being executed) by changing the function so that it returns values instead of relying on test assertions in the function passed to it.  Also refactor the tests that call wait_for_scrubber_shutdown so that they check the returned results instead of using assertions in the function they pass to wait_for_scrubber_shutdown.  This is a follow-up to https://review.openstack.org/#/c/566681/  Change-Id: I7108179e0d96e09638ff783b029a8216f0938c3b",testing,,,,,,
openstack%2Fglance~master~I7108179e0d96e09638ff783b029a8216f0938c3b,https://review.opendev.org/566947,Refactor wait_for_scrubber_shutdown function,"Refactor wait_for_scrubber_shutdown function  The wait_for_scrubber_shutdown function catches AssertionErrors and retries.  Refactor it so that it only retries for a specific error (namely, when glance scrubber is running in daemon mode when the test is being executed) by changing the function so that it returns values instead of relying on test assertions in the function passed to it.  Also refactor the tests that call wait_for_scrubber_shutdown so that they check the returned results instead of using assertions in the function they pass to wait_for_scrubber_shutdown.  This is a follow-up to https://review.openstack.org/#/c/566681/  Change-Id: I7108179e0d96e09638ff783b029a8216f0938c3b",objective,,,,,,
airship%2Fshipyard~master~I53de7da6bd4182e824366fdbb5221c7c9ae5be09,https://review.opendev.org/569841,[refactor] logging refactor + redaction filter,[refactor] logging refactor + redaction filter  Refactors the uwsgi-based logging filter to encapsulate better and adds a redaction filter for api logging.  This change now also includes bringing a stray test back into the correct location.  Change-Id: I53de7da6bd4182e824366fdbb5221c7c9ae5be09,testing,,,,,,
airship%2Fshipyard~master~I53de7da6bd4182e824366fdbb5221c7c9ae5be09,https://review.opendev.org/569841,[refactor] logging refactor + redaction filter,[refactor] logging refactor + redaction filter  Refactors the uwsgi-based logging filter to encapsulate better and adds a redaction filter for api logging.  This change now also includes bringing a stray test back into the correct location.  Change-Id: I53de7da6bd4182e824366fdbb5221c7c9ae5be09,objective,,,,,,
airship%2Fshipyard~master~I53de7da6bd4182e824366fdbb5221c7c9ae5be09,https://review.opendev.org/569841,[refactor] logging refactor + redaction filter,[refactor] logging refactor + redaction filter  Refactors the uwsgi-based logging filter to encapsulate better and adds a redaction filter for api logging.  This change now also includes bringing a stray test back into the correct location.  Change-Id: I53de7da6bd4182e824366fdbb5221c7c9ae5be09,integration,,,,,,
openstack%2Fswift~feature%2Fdeep-review~I4455677abb114a645cff93cd41b394d227e805de,https://review.opendev.org/565742,"Refactoring, test infrastructure changes and cleanup","Refactoring, test infrastructure changes and cleanup  ...in preparation for the container sharding feature.  Change-Id: I4455677abb114a645cff93cd41b394d227e805de",testing,,,,,,
openstack%2Fswift~feature%2Fdeep-review~I4455677abb114a645cff93cd41b394d227e805de,https://review.opendev.org/565742,"Refactoring, test infrastructure changes and cleanup","Refactoring, test infrastructure changes and cleanup  ...in preparation for the container sharding feature.  Change-Id: I4455677abb114a645cff93cd41b394d227e805de",objective,,,,,,
openstack%2Ftripleo-common~master~I9d55ccfbd2875046dc7512413c3be3254a45910a,https://review.opendev.org/562460,Refactor functions out of ProcessTemplateAction,"Refactor functions out of ProcessTemplateAction  This needs to be common utility code for the next change in this series, and breaking them out allows the test coverage to be improved.  Change-Id: I9d55ccfbd2875046dc7512413c3be3254a45910a Blueprint: container-prepare-workflow",testing,,,,,,
openstack%2Ftripleo-common~master~I9d55ccfbd2875046dc7512413c3be3254a45910a,https://review.opendev.org/562460,Refactor functions out of ProcessTemplateAction,"Refactor functions out of ProcessTemplateAction  This needs to be common utility code for the next change in this series, and breaking them out allows the test coverage to be improved.  Change-Id: I9d55ccfbd2875046dc7512413c3be3254a45910a Blueprint: container-prepare-workflow",objective,,,,,,
openstack%2Fnova~master~Iac23a574a05e62a99aab20ffce4265f4fb5a44d9,https://review.opendev.org/561819,ServerActionsSampleJsonTest refactor,"[WIP] ServerActionsSampleJsonTest refactor  Change the instance action content to a real world action.  In Setup, we create an instance and then stop it. That would be 2 actions(create and stop), and the stop action should have a ""compute_stop_instance"" event. And then we do 2.1/2.21/2.51 test case based on these actions, like we have done in 2.58.  Change-Id: Iac23a574a05e62a99aab20ffce4265f4fb5a44d9",testing,,,,,,
openstack%2Fnova~master~Iac23a574a05e62a99aab20ffce4265f4fb5a44d9,https://review.opendev.org/561819,ServerActionsSampleJsonTest refactor,"[WIP] ServerActionsSampleJsonTest refactor  Change the instance action content to a real world action.  In Setup, we create an instance and then stop it. That would be 2 actions(create and stop), and the stop action should have a ""compute_stop_instance"" event. And then we do 2.1/2.21/2.51 test case based on these actions, like we have done in 2.58.  Change-Id: Iac23a574a05e62a99aab20ffce4265f4fb5a44d9",objective,,,,,,
openstack%2Fnova~stable%2Focata~I08278c10104786a12835ab64a3602503901285bc,https://review.opendev.org/561603,Refactor a test method including 3 test cases,"Refactor a test method including 3 test cases  The test_swap_volume_volume_api_usage method in test_compute_mgr.py has 3 test cases (1 normal, 2 errors). So devide it to the following 3 test methods.  * test_swap_volume_volume_api_usage * test_swap_volume_with_compute_driver_exception * test_swap_volume_with_initialize_connection_exception  Change-Id: I08278c10104786a12835ab64a3602503901285bc (cherry picked from commit 1a55fad16a90599119a5106a7c7014f81ecee845)",testing,,,,,,
openstack%2Fnova~stable%2Focata~I08278c10104786a12835ab64a3602503901285bc,https://review.opendev.org/561603,Refactor a test method including 3 test cases,"Refactor a test method including 3 test cases  The test_swap_volume_volume_api_usage method in test_compute_mgr.py has 3 test cases (1 normal, 2 errors). So devide it to the following 3 test methods.  * test_swap_volume_volume_api_usage * test_swap_volume_with_compute_driver_exception * test_swap_volume_with_initialize_connection_exception  Change-Id: I08278c10104786a12835ab64a3602503901285bc (cherry picked from commit 1a55fad16a90599119a5106a7c7014f81ecee845)",objective,,,,,,
openstack%2Fglance~master~I040b0b8b35d9780206652aedf178cb38481c2020,https://review.opendev.org/550025,Refactor scrubber functional test,[WIP]Refactor scrubber functional test  Refactor scrubber functional test to remove the dependence on Glance V1 and Glance registry  Change-Id: I040b0b8b35d9780206652aedf178cb38481c2020,testing,,,,,,
openstack%2Fglance~master~I040b0b8b35d9780206652aedf178cb38481c2020,https://review.opendev.org/550025,Refactor scrubber functional test,[WIP]Refactor scrubber functional test  Refactor scrubber functional test to remove the dependence on Glance V1 and Glance registry  Change-Id: I040b0b8b35d9780206652aedf178cb38481c2020,objective,,,,,,
openstack%2Fglance~master~I040b0b8b35d9780206652aedf178cb38481c2020,https://review.opendev.org/550025,Refactor scrubber functional test,[WIP]Refactor scrubber functional test  Refactor scrubber functional test to remove the dependence on Glance V1 and Glance registry  Change-Id: I040b0b8b35d9780206652aedf178cb38481c2020,quality,,,,,,
starlingx%2Fmetal~master~Ia4683672e3a2852b5b4837167b2dcd2a1e4e6d57,https://review.opendev.org/790792,Refactor background in-service start host services handling,Refactor background in-service start host services handling  The maintenance add_handler fsm loads inventory and recovers host state over a process restart. If the active controller's uptime is less than 15 minutes the restart event is treated as a Dead Office Recovery (DOR) and is more forgiving to host recovery by scheduling the 'start host services' as a background operation so as to not hold up the add operation.  The current implementation of the background handling of 'start host services' is not handling the AIO subfunction case properly in DOR mode as well as being difficult to follow and therfore fix and maintain. This miss handling leads to maintenance incorrectly failing the node with a subfunction configuration error over the DOR case.  This update refactors the background handling of 'start host services' to fix the issue and improve its clearity and maintainability.  Test Cases:  PASS: Verify AIO DX DOR handling PASS: Verify AIO DX active controller reboot handling       - standby with uptime ; < 15 min and > 15 min PASS: Verify AIO DX standby controller reboot handling PASS: Verify subfunction configuration error handling  Regression:  PASS: Verify start host services wait/retry handling. PASS: Verify start host services failure handling. PASS: Verify DOR of Standard system PASS: Verify DOR of AIO Plus system PASS: Verify AIO System Install PASS: Verify Standard System Install PASS: Verify AIO plus system install  Change-Id: Ia4683672e3a2852b5b4837167b2dcd2a1e4e6d57 Closes-Bug: 1928095 Signed-off-by: Eric MacDonald <eric.macdonald@windriver.com>,testing,,,,,,
starlingx%2Fmetal~master~Ia4683672e3a2852b5b4837167b2dcd2a1e4e6d57,https://review.opendev.org/790792,Refactor background in-service start host services handling,Refactor background in-service start host services handling  The maintenance add_handler fsm loads inventory and recovers host state over a process restart. If the active controller's uptime is less than 15 minutes the restart event is treated as a Dead Office Recovery (DOR) and is more forgiving to host recovery by scheduling the 'start host services' as a background operation so as to not hold up the add operation.  The current implementation of the background handling of 'start host services' is not handling the AIO subfunction case properly in DOR mode as well as being difficult to follow and therfore fix and maintain. This miss handling leads to maintenance incorrectly failing the node with a subfunction configuration error over the DOR case.  This update refactors the background handling of 'start host services' to fix the issue and improve its clearity and maintainability.  Test Cases:  PASS: Verify AIO DX DOR handling PASS: Verify AIO DX active controller reboot handling       - standby with uptime ; < 15 min and > 15 min PASS: Verify AIO DX standby controller reboot handling PASS: Verify subfunction configuration error handling  Regression:  PASS: Verify start host services wait/retry handling. PASS: Verify start host services failure handling. PASS: Verify DOR of Standard system PASS: Verify DOR of AIO Plus system PASS: Verify AIO System Install PASS: Verify Standard System Install PASS: Verify AIO plus system install  Change-Id: Ia4683672e3a2852b5b4837167b2dcd2a1e4e6d57 Closes-Bug: 1928095 Signed-off-by: Eric MacDonald <eric.macdonald@windriver.com>,quality,,,,,,
starlingx%2Fmetal~master~Ia4683672e3a2852b5b4837167b2dcd2a1e4e6d57,https://review.opendev.org/790792,Refactor background in-service start host services handling,Refactor background in-service start host services handling  The maintenance add_handler fsm loads inventory and recovers host state over a process restart. If the active controller's uptime is less than 15 minutes the restart event is treated as a Dead Office Recovery (DOR) and is more forgiving to host recovery by scheduling the 'start host services' as a background operation so as to not hold up the add operation.  The current implementation of the background handling of 'start host services' is not handling the AIO subfunction case properly in DOR mode as well as being difficult to follow and therfore fix and maintain. This miss handling leads to maintenance incorrectly failing the node with a subfunction configuration error over the DOR case.  This update refactors the background handling of 'start host services' to fix the issue and improve its clearity and maintainability.  Test Cases:  PASS: Verify AIO DX DOR handling PASS: Verify AIO DX active controller reboot handling       - standby with uptime ; < 15 min and > 15 min PASS: Verify AIO DX standby controller reboot handling PASS: Verify subfunction configuration error handling  Regression:  PASS: Verify start host services wait/retry handling. PASS: Verify start host services failure handling. PASS: Verify DOR of Standard system PASS: Verify DOR of AIO Plus system PASS: Verify AIO System Install PASS: Verify Standard System Install PASS: Verify AIO plus system install  Change-Id: Ia4683672e3a2852b5b4837167b2dcd2a1e4e6d57 Closes-Bug: 1928095 Signed-off-by: Eric MacDonald <eric.macdonald@windriver.com>,objective,,,,,,
openstack%2Fkeystone~master~Iedbde34ef5aa84905fd6b5f2297bf7f46dd7d278,https://review.opendev.org/541074,Finish refactoring self.*_api out of tests,Finish refactoring self.*_api out of tests  A previous change started remove the self magic:    Ic2094dca56158d8e4cd843eadff837f3a17ea38f  This commit finishes that work. A subsequent patch will remove the self manager logic all together and we'll fix up any trivial test infrastructure then.  Change-Id: Iedbde34ef5aa84905fd6b5f2297bf7f46dd7d278,testing,,,,,,
openstack%2Fkeystone~master~Iedbde34ef5aa84905fd6b5f2297bf7f46dd7d278,https://review.opendev.org/541074,Finish refactoring self.*_api out of tests,Finish refactoring self.*_api out of tests  A previous change started remove the self magic:    Ic2094dca56158d8e4cd843eadff837f3a17ea38f  This commit finishes that work. A subsequent patch will remove the self manager logic all together and we'll fix up any trivial test infrastructure then.  Change-Id: Iedbde34ef5aa84905fd6b5f2297bf7f46dd7d278,objective,,,,,,
openstack%2Fkeystone~master~Ic2094dca56158d8e4cd843eadff837f3a17ea38f,https://review.opendev.org/540557,Refactor self.*_api out of tests,"Refactor self.*_api out of tests  Just like the APIs in keystone, we should be using the `keystone.common.provider_api.ProviderAPIs` to load managers instead of self.  This makes those changes for a few of the test modules. Finding occurrences can be done with `grep -R 'self.*_api' keystone/tests/`.  Change-Id: Ic2094dca56158d8e4cd843eadff837f3a17ea38f",integration,,,,,,
openstack%2Fkeystone~master~Ic2094dca56158d8e4cd843eadff837f3a17ea38f,https://review.opendev.org/540557,Refactor self.*_api out of tests,"Refactor self.*_api out of tests  Just like the APIs in keystone, we should be using the `keystone.common.provider_api.ProviderAPIs` to load managers instead of self.  This makes those changes for a few of the test modules. Finding occurrences can be done with `grep -R 'self.*_api' keystone/tests/`.  Change-Id: Ic2094dca56158d8e4cd843eadff837f3a17ea38f",testing,,,,,,
openstack%2Fswift~master~If75803648169f85b854c3d5d8784aaebbd93805b,https://review.opendev.org/770124,Refactor reconstructor probe tests,Refactor reconstructor probe tests  Refactor the reconstructor probe test to share common setup and helper methods.  Change-Id: If75803648169f85b854c3d5d8784aaebbd93805b,testing,,,,,,
openstack%2Fswift~master~If75803648169f85b854c3d5d8784aaebbd93805b,https://review.opendev.org/770124,Refactor reconstructor probe tests,Refactor reconstructor probe tests  Refactor the reconstructor probe test to share common setup and helper methods.  Change-Id: If75803648169f85b854c3d5d8784aaebbd93805b,objective,,,,,,
openstack%2Fswift~master~If75803648169f85b854c3d5d8784aaebbd93805b,https://review.opendev.org/770124,Refactor reconstructor probe tests,Refactor reconstructor probe tests  Refactor the reconstructor probe test to share common setup and helper methods.  Change-Id: If75803648169f85b854c3d5d8784aaebbd93805b,quality,,,,,,
openstack%2Finstack-undercloud~master~I094771e5fc3d5ae102ddf99301822e1d122e414b,https://review.opendev.org/533363,Refactor unit test to set up config fixture in setup class,Refactor unit test to set up config fixture in setup class  Change-Id: I094771e5fc3d5ae102ddf99301822e1d122e414b,testing,,,,,,
openstack%2Fheat~master~Ifa7728402e1189348b1c4fcc0bbbd1eec8c0deaf,https://review.opendev.org/529608,Refactor unit tests for server network,Refactor unit tests for server network  * Consolidate unit test fake_interface to one global.    Instead of three implementations of the fake_interface. Use    one shared globally defined implementation. * Use create_old_net() instead of just writing the dict. * Adds the subnet_id property in fixed_ips of fake interfaces. * Use 'network' instead of deprecated 'uuid'  Related-Bug: #1696483 Change-Id: Ifa7728402e1189348b1c4fcc0bbbd1eec8c0deaf,testing,,,,,,
openstack%2Fheat~master~Ifa7728402e1189348b1c4fcc0bbbd1eec8c0deaf,https://review.opendev.org/529608,Refactor unit tests for server network,Refactor unit tests for server network  * Consolidate unit test fake_interface to one global.    Instead of three implementations of the fake_interface. Use    one shared globally defined implementation. * Use create_old_net() instead of just writing the dict. * Adds the subnet_id property in fixed_ips of fake interfaces. * Use 'network' instead of deprecated 'uuid'  Related-Bug: #1696483 Change-Id: Ifa7728402e1189348b1c4fcc0bbbd1eec8c0deaf,quality,,,,,,
openstack%2Fheat~master~Ifa7728402e1189348b1c4fcc0bbbd1eec8c0deaf,https://review.opendev.org/529608,Refactor unit tests for server network,Refactor unit tests for server network  * Consolidate unit test fake_interface to one global.    Instead of three implementations of the fake_interface. Use    one shared globally defined implementation. * Use create_old_net() instead of just writing the dict. * Adds the subnet_id property in fixed_ips of fake interfaces. * Use 'network' instead of deprecated 'uuid'  Related-Bug: #1696483 Change-Id: Ifa7728402e1189348b1c4fcc0bbbd1eec8c0deaf,objective,,,,,,
openstack%2Fdragonflow~master~I377da65e3115439be61c66285bf1d269e0af1892,https://review.opendev.org/529577,Refactor test_apps.py,"Refactor test_apps.py  The fullstack test file test_apps.py has become too big to maintain. This patch breaks it up into smaller, application-specifi chunks.  Change-Id: I377da65e3115439be61c66285bf1d269e0af1892 Closes-Bug: #1739604",testing,,,,,,
openstack%2Fdragonflow~master~I377da65e3115439be61c66285bf1d269e0af1892,https://review.opendev.org/529577,Refactor test_apps.py,"Refactor test_apps.py  The fullstack test file test_apps.py has become too big to maintain. This patch breaks it up into smaller, application-specifi chunks.  Change-Id: I377da65e3115439be61c66285bf1d269e0af1892 Closes-Bug: #1739604",quality,,,,,,
openstack%2Fdragonflow~master~I377da65e3115439be61c66285bf1d269e0af1892,https://review.opendev.org/529577,Refactor test_apps.py,"Refactor test_apps.py  The fullstack test file test_apps.py has become too big to maintain. This patch breaks it up into smaller, application-specifi chunks.  Change-Id: I377da65e3115439be61c66285bf1d269e0af1892 Closes-Bug: #1739604",objective,,,,,,
openstack%2Fnova~master~I34527a3b2ac33ec3b1c6cce2c4a2163eea1ada4d,https://review.opendev.org/518124,Refactor test_allocation_candidates,"Refactor test_allocation_candidates  For the sake of code deduplication, LOC reduction, and readability (improved signal:noise ratio), this change set implements some convenience methods in AllocationCandidatesTestCase for creation of placement artifacts such as resource providers, inventory, and allocations, as well as for extracting and comparing results of get_allocation_candidates.  This only changes test code; and is just a refactor - no tests are added, removed, or substantively changed.  Change-Id: I34527a3b2ac33ec3b1c6cce2c4a2163eea1ada4d",testing,,,,,,
openstack%2Fnova~master~I34527a3b2ac33ec3b1c6cce2c4a2163eea1ada4d,https://review.opendev.org/518124,Refactor test_allocation_candidates,"Refactor test_allocation_candidates  For the sake of code deduplication, LOC reduction, and readability (improved signal:noise ratio), this change set implements some convenience methods in AllocationCandidatesTestCase for creation of placement artifacts such as resource providers, inventory, and allocations, as well as for extracting and comparing results of get_allocation_candidates.  This only changes test code; and is just a refactor - no tests are added, removed, or substantively changed.  Change-Id: I34527a3b2ac33ec3b1c6cce2c4a2163eea1ada4d",quality,,,,,,
openstack%2Fnova~master~I34527a3b2ac33ec3b1c6cce2c4a2163eea1ada4d,https://review.opendev.org/518124,Refactor test_allocation_candidates,"Refactor test_allocation_candidates  For the sake of code deduplication, LOC reduction, and readability (improved signal:noise ratio), this change set implements some convenience methods in AllocationCandidatesTestCase for creation of placement artifacts such as resource providers, inventory, and allocations, as well as for extracting and comparing results of get_allocation_candidates.  This only changes test code; and is just a refactor - no tests are added, removed, or substantively changed.  Change-Id: I34527a3b2ac33ec3b1c6cce2c4a2163eea1ada4d",objective,,,,,,
openstack%2Fptgbot~master~I26e3683bbf3b7daab68407cd9928ee3d7f5c50dc,https://review.opendev.org/764373,Refactor processing of track and admin commands,"Refactor processing of track and admin commands  Separate the processing of track commands and admin commands into separate files, and normalize handling of messages.  Adjust test cases so that they match the new normalized messages.  Change-Id: I26e3683bbf3b7daab68407cd9928ee3d7f5c50dc",testing,,,,,,
openstack%2Fptgbot~master~I26e3683bbf3b7daab68407cd9928ee3d7f5c50dc,https://review.opendev.org/764373,Refactor processing of track and admin commands,"Refactor processing of track and admin commands  Separate the processing of track commands and admin commands into separate files, and normalize handling of messages.  Adjust test cases so that they match the new normalized messages.  Change-Id: I26e3683bbf3b7daab68407cd9928ee3d7f5c50dc",objective,,,,,,
openstack%2Fptgbot~master~I26e3683bbf3b7daab68407cd9928ee3d7f5c50dc,https://review.opendev.org/764373,Refactor processing of track and admin commands,"Refactor processing of track and admin commands  Separate the processing of track commands and admin commands into separate files, and normalize handling of messages.  Adjust test cases so that they match the new normalized messages.  Change-Id: I26e3683bbf3b7daab68407cd9928ee3d7f5c50dc",quality,,,,,,
openstack%2Fkeystone~master~Iee0a0942e49295081437306d3942109c4132b704,https://review.opendev.org/507694,Refactor test_backend_ldap tests,"Refactor test_backend_ldap tests  Currently, the testing backend for LDAP relies on multiple inheritance of many base and testing classes, which results in many of these tests being ran multiple times needlessly. This change puts the LDAPIdentity class, which is used by multiple other test cases into its own subclass in order that the testing framework will not run it on its own.  Change-Id: Iee0a0942e49295081437306d3942109c4132b704 Partial-Bug: #1373865",testing,,,,,,
openstack%2Fkeystone~master~Iee0a0942e49295081437306d3942109c4132b704,https://review.opendev.org/507694,Refactor test_backend_ldap tests,"Refactor test_backend_ldap tests  Currently, the testing backend for LDAP relies on multiple inheritance of many base and testing classes, which results in many of these tests being ran multiple times needlessly. This change puts the LDAPIdentity class, which is used by multiple other test cases into its own subclass in order that the testing framework will not run it on its own.  Change-Id: Iee0a0942e49295081437306d3942109c4132b704 Partial-Bug: #1373865",quality,,,,,,
openstack%2Fkeystone~master~Iee0a0942e49295081437306d3942109c4132b704,https://review.opendev.org/507694,Refactor test_backend_ldap tests,"Refactor test_backend_ldap tests  Currently, the testing backend for LDAP relies on multiple inheritance of many base and testing classes, which results in many of these tests being ran multiple times needlessly. This change puts the LDAPIdentity class, which is used by multiple other test cases into its own subclass in order that the testing framework will not run it on its own.  Change-Id: Iee0a0942e49295081437306d3942109c4132b704 Partial-Bug: #1373865",objective,,,,,,
openstack%2Fpuppet-openstack-integration~master~Ib122ddd105529de5e12389cc9db2e4e09ec4ad54,https://review.opendev.org/504402,Refactor usage of RabbitMQ resources,"Refactor usage of RabbitMQ resources  This patch refactors all creation of RabbitMQ resources such as users and ACLs to a define called openstack_integration::mq_user.  This will make sure RabbitMQ is automatically installed as well, as there are times where dependencies to RabbitMQ are added to things like Keystone which break Beaker tests in other repos (but we don't know they're broken until the change merges).  In addition, instead of setting up dependencies on the tagged services, we use the anchors provided which should hopefully test against them as well.  Change-Id: Ib122ddd105529de5e12389cc9db2e4e09ec4ad54",testing,,,,,,
openstack%2Fpuppet-openstack-integration~master~Ib122ddd105529de5e12389cc9db2e4e09ec4ad54,https://review.opendev.org/504402,Refactor usage of RabbitMQ resources,"Refactor usage of RabbitMQ resources  This patch refactors all creation of RabbitMQ resources such as users and ACLs to a define called openstack_integration::mq_user.  This will make sure RabbitMQ is automatically installed as well, as there are times where dependencies to RabbitMQ are added to things like Keystone which break Beaker tests in other repos (but we don't know they're broken until the change merges).  In addition, instead of setting up dependencies on the tagged services, we use the anchors provided which should hopefully test against them as well.  Change-Id: Ib122ddd105529de5e12389cc9db2e4e09ec4ad54",integration,,,,,,
openstack%2Fpuppet-openstack-integration~master~Ib122ddd105529de5e12389cc9db2e4e09ec4ad54,https://review.opendev.org/504402,Refactor usage of RabbitMQ resources,"Refactor usage of RabbitMQ resources  This patch refactors all creation of RabbitMQ resources such as users and ACLs to a define called openstack_integration::mq_user.  This will make sure RabbitMQ is automatically installed as well, as there are times where dependencies to RabbitMQ are added to things like Keystone which break Beaker tests in other repos (but we don't know they're broken until the change merges).  In addition, instead of setting up dependencies on the tagged services, we use the anchors provided which should hopefully test against them as well.  Change-Id: Ib122ddd105529de5e12389cc9db2e4e09ec4ad54",objective,,,,,,
openstack%2Fneutron~master~I16a1936c04dca206b50026e796d512cf76f1bebb,https://review.opendev.org/496701,API test refactoring about create_project,API test refactoring about create_project  There are some calls to create project in API tests. This patch prepares create_project method so that the tests use.  Change-Id: I16a1936c04dca206b50026e796d512cf76f1bebb,testing,,,,,,
openstack%2Fneutron~master~I16a1936c04dca206b50026e796d512cf76f1bebb,https://review.opendev.org/496701,API test refactoring about create_project,API test refactoring about create_project  There are some calls to create project in API tests. This patch prepares create_project method so that the tests use.  Change-Id: I16a1936c04dca206b50026e796d512cf76f1bebb,objective,,,,,,
openstack%2Fnova~master~Ia0bb32fd92ae723c505d0fce5691e0fe0540f10d,https://review.opendev.org/491850,placement: refactor healing of allocations in RT,"placement: refactor healing of allocations in RT  Updates the RT method for ""healing"" instance allocations so that we only delete allocations (and delete the entirely for an instance) in the event that the instance has been SHELVED_OFFLOADED or DELETED. Adds log statements to the method to give us a good idea of what the state of various things are during test runs.  Note that this patch only partially fixes LP #1707071 to remove some of the back-and-forth allocation trampling that was going on for move operations. The next patch adds the final piece of the puzzle which is to have the confirm/revert resize step on the source or destination compute host *correct* a doubled-up allocation. What this patch does is prevent the healing function from deleting allocations unless the instance is deleted or shelved-offloaded.  Partial-bug: #1707071  Change-Id: Ia0bb32fd92ae723c505d0fce5691e0fe0540f10d",testing,,,,,,
openstack%2Fnova~master~Ia0bb32fd92ae723c505d0fce5691e0fe0540f10d,https://review.opendev.org/491850,placement: refactor healing of allocations in RT,"placement: refactor healing of allocations in RT  Updates the RT method for ""healing"" instance allocations so that we only delete allocations (and delete the entirely for an instance) in the event that the instance has been SHELVED_OFFLOADED or DELETED. Adds log statements to the method to give us a good idea of what the state of various things are during test runs.  Note that this patch only partially fixes LP #1707071 to remove some of the back-and-forth allocation trampling that was going on for move operations. The next patch adds the final piece of the puzzle which is to have the confirm/revert resize step on the source or destination compute host *correct* a doubled-up allocation. What this patch does is prevent the healing function from deleting allocations unless the instance is deleted or shelved-offloaded.  Partial-bug: #1707071  Change-Id: Ia0bb32fd92ae723c505d0fce5691e0fe0540f10d",integration,,,,,,
openstack%2Fnova~master~Ia0bb32fd92ae723c505d0fce5691e0fe0540f10d,https://review.opendev.org/491850,placement: refactor healing of allocations in RT,"placement: refactor healing of allocations in RT  Updates the RT method for ""healing"" instance allocations so that we only delete allocations (and delete the entirely for an instance) in the event that the instance has been SHELVED_OFFLOADED or DELETED. Adds log statements to the method to give us a good idea of what the state of various things are during test runs.  Note that this patch only partially fixes LP #1707071 to remove some of the back-and-forth allocation trampling that was going on for move operations. The next patch adds the final piece of the puzzle which is to have the confirm/revert resize step on the source or destination compute host *correct* a doubled-up allocation. What this patch does is prevent the healing function from deleting allocations unless the instance is deleted or shelved-offloaded.  Partial-bug: #1707071  Change-Id: Ia0bb32fd92ae723c505d0fce5691e0fe0540f10d",objective,,,,,,
openstack%2Fpython-zunclient~master~I49403d88c6d64577d5a6c1a11e36a6d4c3bf0eba,https://review.opendev.org/494965,[Refactor code] Support dynamic load Client module,"[Refactor code] Support dynamic load Client module depend on given version  - Support dynamic load Client module depend on given version. At this time,   Zunclient has only 1 version, but this patch will be useful in the future. - Change related test cases. - Remove hardcode version.  Change-Id: I49403d88c6d64577d5a6c1a11e36a6d4c3bf0eba",integration,,,,,,
openstack%2Fpython-zunclient~master~I49403d88c6d64577d5a6c1a11e36a6d4c3bf0eba,https://review.opendev.org/494965,[Refactor code] Support dynamic load Client module,"[Refactor code] Support dynamic load Client module depend on given version  - Support dynamic load Client module depend on given version. At this time,   Zunclient has only 1 version, but this patch will be useful in the future. - Change related test cases. - Remove hardcode version.  Change-Id: I49403d88c6d64577d5a6c1a11e36a6d4c3bf0eba",testing,,,,,,
x%2Fnetworking-cisco~master~I4125b33375c1b5a956041ef04db294f2024b6520,https://review.opendev.org/485801,Refactor/Refine the core automated vPC code,"Refactor/Refine the core automated vPC code  The main objective of this changeset is to refactor and refine the large method which is core to Nexus automated port channel creation. While refactoring, I found that we can also generate the action 'switchport mode trunk' without regard to whether it is a port channel interface or ethernet.  Also added to this changeset are failure test cases for the refactored/refined method.  Change-Id: I4125b33375c1b5a956041ef04db294f2024b6520 Closes-bug:  #1705294",testing,,,,,,
x%2Fnetworking-cisco~master~I4125b33375c1b5a956041ef04db294f2024b6520,https://review.opendev.org/485801,Refactor/Refine the core automated vPC code,"Refactor/Refine the core automated vPC code  The main objective of this changeset is to refactor and refine the large method which is core to Nexus automated port channel creation. While refactoring, I found that we can also generate the action 'switchport mode trunk' without regard to whether it is a port channel interface or ethernet.  Also added to this changeset are failure test cases for the refactored/refined method.  Change-Id: I4125b33375c1b5a956041ef04db294f2024b6520 Closes-bug:  #1705294",quality,,,,,,
x%2Fnetworking-cisco~master~I4125b33375c1b5a956041ef04db294f2024b6520,https://review.opendev.org/485801,Refactor/Refine the core automated vPC code,"Refactor/Refine the core automated vPC code  The main objective of this changeset is to refactor and refine the large method which is core to Nexus automated port channel creation. While refactoring, I found that we can also generate the action 'switchport mode trunk' without regard to whether it is a port channel interface or ethernet.  Also added to this changeset are failure test cases for the refactored/refined method.  Change-Id: I4125b33375c1b5a956041ef04db294f2024b6520 Closes-bug:  #1705294",objective,,,,,,
openstack%2Ftempest~master~Ic7847161c4acfb83aa4c28341aa1ea97cf8a711d,https://review.opendev.org/489544,Refactor test_user_update,"Refactor test_user_update  test_user_update looks a little mess and not easy to distinguish the test steps from the continuous lines, so this is to refactor it to make it more readable.  Change-Id: Ic7847161c4acfb83aa4c28341aa1ea97cf8a711d",testing,,,,,,
openstack%2Ftempest~master~Ic7847161c4acfb83aa4c28341aa1ea97cf8a711d,https://review.opendev.org/489544,Refactor test_user_update,"Refactor test_user_update  test_user_update looks a little mess and not easy to distinguish the test steps from the continuous lines, so this is to refactor it to make it more readable.  Change-Id: Ic7847161c4acfb83aa4c28341aa1ea97cf8a711d",quality,,,,,,
openstack%2Ftempest~master~Ic7847161c4acfb83aa4c28341aa1ea97cf8a711d,https://review.opendev.org/489544,Refactor test_user_update,"Refactor test_user_update  test_user_update looks a little mess and not easy to distinguish the test steps from the continuous lines, so this is to refactor it to make it more readable.  Change-Id: Ic7847161c4acfb83aa4c28341aa1ea97cf8a711d",objective,,,,,,
openstack%2Fpatrole~master~I2f49137ff71089ecf9764ee1f7887b64185249dd,https://review.opendev.org/475156,Create rbac utils fixture and refactor tests,"Create rbac utils fixture and refactor tests  This commit creates a test fixture for rbac_utils.RbacUtils and refactors test_rbac_utils tests accordingly. This allows other tests to use the fixture as needed, improving code maintenance and readability, as well as the ease with which tests can be written.  Specifically:   - adds fixtures file for overriding conf settings and     for rbac_utils.RbacUtils   - refactors rbac_utils tests to use the appropriate     fixture  Change-Id: I2f49137ff71089ecf9764ee1f7887b64185249dd",testing,,,,,,
openstack%2Fpatrole~master~I2f49137ff71089ecf9764ee1f7887b64185249dd,https://review.opendev.org/475156,Create rbac utils fixture and refactor tests,"Create rbac utils fixture and refactor tests  This commit creates a test fixture for rbac_utils.RbacUtils and refactors test_rbac_utils tests accordingly. This allows other tests to use the fixture as needed, improving code maintenance and readability, as well as the ease with which tests can be written.  Specifically:   - adds fixtures file for overriding conf settings and     for rbac_utils.RbacUtils   - refactors rbac_utils tests to use the appropriate     fixture  Change-Id: I2f49137ff71089ecf9764ee1f7887b64185249dd",quality,,,,,,
openstack%2Fpatrole~master~I2f49137ff71089ecf9764ee1f7887b64185249dd,https://review.opendev.org/475156,Create rbac utils fixture and refactor tests,"Create rbac utils fixture and refactor tests  This commit creates a test fixture for rbac_utils.RbacUtils and refactors test_rbac_utils tests accordingly. This allows other tests to use the fixture as needed, improving code maintenance and readability, as well as the ease with which tests can be written.  Specifically:   - adds fixtures file for overriding conf settings and     for rbac_utils.RbacUtils   - refactors rbac_utils tests to use the appropriate     fixture  Change-Id: I2f49137ff71089ecf9764ee1f7887b64185249dd",objective,,,,,,
openstack%2Fhorizon~master~Iad66c882738fd90eb6dd6de3df96459c10a29aa2,https://review.opendev.org/759651,Refactor quota related unit tests,"Refactor quota related unit tests  openstack_dashboard/dashboards/project/floating_ips/tests.py: The floating IP panel implementation calls openstack_dashboard.usage.quotas.tenant_quota_usages, but its unit test mocks functions called inside tenant_quota_usages. tenant_quota_usages itself should be mocked.  openstack_dashboard/test/unit/usage/test_quotas.py: Mocked methods were not verified test_tenant_quota_usages_non_legacy. Verifications for called methods are added. Mocking floating_ip_supported is dropped as it is not called and there is no need to mock it.  Change-Id: Iad66c882738fd90eb6dd6de3df96459c10a29aa2",testing,,,,,,
openstack%2Fhorizon~master~Iad66c882738fd90eb6dd6de3df96459c10a29aa2,https://review.opendev.org/759651,Refactor quota related unit tests,"Refactor quota related unit tests  openstack_dashboard/dashboards/project/floating_ips/tests.py: The floating IP panel implementation calls openstack_dashboard.usage.quotas.tenant_quota_usages, but its unit test mocks functions called inside tenant_quota_usages. tenant_quota_usages itself should be mocked.  openstack_dashboard/test/unit/usage/test_quotas.py: Mocked methods were not verified test_tenant_quota_usages_non_legacy. Verifications for called methods are added. Mocking floating_ip_supported is dropped as it is not called and there is no need to mock it.  Change-Id: Iad66c882738fd90eb6dd6de3df96459c10a29aa2",objective,,,,,,
openstack%2Fhorizon~master~Iad66c882738fd90eb6dd6de3df96459c10a29aa2,https://review.opendev.org/759651,Refactor quota related unit tests,"Refactor quota related unit tests  openstack_dashboard/dashboards/project/floating_ips/tests.py: The floating IP panel implementation calls openstack_dashboard.usage.quotas.tenant_quota_usages, but its unit test mocks functions called inside tenant_quota_usages. tenant_quota_usages itself should be mocked.  openstack_dashboard/test/unit/usage/test_quotas.py: Mocked methods were not verified test_tenant_quota_usages_non_legacy. Verifications for called methods are added. Mocking floating_ip_supported is dropped as it is not called and there is no need to mock it.  Change-Id: Iad66c882738fd90eb6dd6de3df96459c10a29aa2",objective,,,,,,
openstack%2Fkeystoneauth~master~I1435d2dc16db7b1a7f5dfe76562de56ba8450531,https://review.opendev.org/477246,Refactor volume mock urls in identity_common tests,"Refactor volume mock urls in identity_common tests  The large set of copy-pasta test urls make it hard to follow what is being mocked and what should be returned. Put in a class to manage it with clearly named things.  This exposes a bug, but fixing the bug is hairy. Comment out that bit with a note to fix it. The fix comes in the next patch, but is hopefully clearer to read with the test refactor decoupled.  Change-Id: I1435d2dc16db7b1a7f5dfe76562de56ba8450531",testing,,,,,,
openstack%2Fkeystoneauth~master~I1435d2dc16db7b1a7f5dfe76562de56ba8450531,https://review.opendev.org/477246,Refactor volume mock urls in identity_common tests,"Refactor volume mock urls in identity_common tests  The large set of copy-pasta test urls make it hard to follow what is being mocked and what should be returned. Put in a class to manage it with clearly named things.  This exposes a bug, but fixing the bug is hairy. Comment out that bit with a note to fix it. The fix comes in the next patch, but is hopefully clearer to read with the test refactor decoupled.  Change-Id: I1435d2dc16db7b1a7f5dfe76562de56ba8450531",quality,,,,,,
openstack%2Fkeystoneauth~master~I1435d2dc16db7b1a7f5dfe76562de56ba8450531,https://review.opendev.org/477246,Refactor volume mock urls in identity_common tests,"Refactor volume mock urls in identity_common tests  The large set of copy-pasta test urls make it hard to follow what is being mocked and what should be returned. Put in a class to manage it with clearly named things.  This exposes a bug, but fixing the bug is hairy. Comment out that bit with a note to fix it. The fix comes in the next patch, but is hopefully clearer to read with the test refactor decoupled.  Change-Id: I1435d2dc16db7b1a7f5dfe76562de56ba8450531",objective,,,,,,
openstack%2Fkeystoneauth~master~I1435d2dc16db7b1a7f5dfe76562de56ba8450531,https://review.opendev.org/477246,Refactor volume mock urls in identity_common tests,"Refactor volume mock urls in identity_common tests  The large set of copy-pasta test urls make it hard to follow what is being mocked and what should be returned. Put in a class to manage it with clearly named things.  This exposes a bug, but fixing the bug is hairy. Comment out that bit with a note to fix it. The fix comes in the next patch, but is hopefully clearer to read with the test refactor decoupled.  Change-Id: I1435d2dc16db7b1a7f5dfe76562de56ba8450531",objective,,,,,,
openstack%2Fnova~master~I1ac25de5698303488a82071deed884b443951dc0,https://review.opendev.org/395436,Refactor a test method including 7 test cases,"Refactor a test method including 7 test cases  The test_swap_volume_volume_api_usage method in test_compute_api.py has 7 test cases (1 normal, 6 errors). So devide it to the following 7 test methods.  * test_swap_volume_volume_api_usage * test_swap_volume_with_invalid_server_state * test_swap_volume_with_old_volume_not_attached * test_swap_volume_with_another_server_volume * test_swap_volume_with_new_volume_attached * test_swap_volume_with_smaller_new_volume * test_swap_volume_with_swap_volume_error  Change-Id: I1ac25de5698303488a82071deed884b443951dc0",testing,,,,,,
openstack%2Fnova~master~I1ac25de5698303488a82071deed884b443951dc0,https://review.opendev.org/395436,Refactor a test method including 7 test cases,"Refactor a test method including 7 test cases  The test_swap_volume_volume_api_usage method in test_compute_api.py has 7 test cases (1 normal, 6 errors). So devide it to the following 7 test methods.  * test_swap_volume_volume_api_usage * test_swap_volume_with_invalid_server_state * test_swap_volume_with_old_volume_not_attached * test_swap_volume_with_another_server_volume * test_swap_volume_with_new_volume_attached * test_swap_volume_with_smaller_new_volume * test_swap_volume_with_swap_volume_error  Change-Id: I1ac25de5698303488a82071deed884b443951dc0",objective,,,,,,
openstack%2Fopenstack-ansible-ops~master~I81ac9273ee1646ede23e435da56ff211546a7d04,https://review.opendev.org/470396,Refactor glance image tests to use OpenStackSDK,"Refactor glance image tests to use OpenStackSDK  This reduces the number of direct dependencies, and makes the tests more uniform.  Since glance was the only remaining test with the direct client references, the imports and code using the clients directly have been removed.  Change-Id: I81ac9273ee1646ede23e435da56ff211546a7d04",testing,,,,,,
openstack%2Fopenstack-ansible-ops~master~I81ac9273ee1646ede23e435da56ff211546a7d04,https://review.opendev.org/470396,Refactor glance image tests to use OpenStackSDK,"Refactor glance image tests to use OpenStackSDK  This reduces the number of direct dependencies, and makes the tests more uniform.  Since glance was the only remaining test with the direct client references, the imports and code using the clients directly have been removed.  Change-Id: I81ac9273ee1646ede23e435da56ff211546a7d04",quality,,,,,,
openstack%2Fopenstack-ansible-ops~master~I81ac9273ee1646ede23e435da56ff211546a7d04,https://review.opendev.org/470396,Refactor glance image tests to use OpenStackSDK,"Refactor glance image tests to use OpenStackSDK  This reduces the number of direct dependencies, and makes the tests more uniform.  Since glance was the only remaining test with the direct client references, the imports and code using the clients directly have been removed.  Change-Id: I81ac9273ee1646ede23e435da56ff211546a7d04",objective,,,,,,
openstack%2Fopenstack-ansible-ops~master~Ic5ee06367904ba6bc569399432908de1b08233cd,https://review.opendev.org/470328,Refactor Keystone test to use OpenStackSDK,"Refactor Keystone test to use OpenStackSDK  By using OpenStack SDK, the tests are more uniform, and we reduce the direct dependencies we have to install.  Change-Id: Ic5ee06367904ba6bc569399432908de1b08233cd",testing,,,,,,
openstack%2Fopenstack-ansible-ops~master~Ic5ee06367904ba6bc569399432908de1b08233cd,https://review.opendev.org/470328,Refactor Keystone test to use OpenStackSDK,"Refactor Keystone test to use OpenStackSDK  By using OpenStack SDK, the tests are more uniform, and we reduce the direct dependencies we have to install.  Change-Id: Ic5ee06367904ba6bc569399432908de1b08233cd",objective,,,,,,
openstack%2Fopenstack-ansible-ops~master~Ic5ee06367904ba6bc569399432908de1b08233cd,https://review.opendev.org/470328,Refactor Keystone test to use OpenStackSDK,"Refactor Keystone test to use OpenStackSDK  By using OpenStack SDK, the tests are more uniform, and we reduce the direct dependencies we have to install.  Change-Id: Ic5ee06367904ba6bc569399432908de1b08233cd",quality,,,,,,
x%2Fmonitorstack~master~I922079e4a556a171aadd801a8cc932e1e08f9b5d,https://review.opendev.org/469339,refactor testing directory layout,refactor testing directory layout  This changes the layout of the tests. Before both unit and functional tests were in the same place. That made it so development really needed to happen on linux because of tests like uptime needing /proc/uptime This change puts those kind of tests into a functional testing dir and adds a unit and functional test arg to tox.  Change-Id: I922079e4a556a171aadd801a8cc932e1e08f9b5d Signed-off-by: Michael Rice <michael.rice@rackspace.com>,testing,,,,,,
x%2Fmonitorstack~master~I922079e4a556a171aadd801a8cc932e1e08f9b5d,https://review.opendev.org/469339,refactor testing directory layout,refactor testing directory layout  This changes the layout of the tests. Before both unit and functional tests were in the same place. That made it so development really needed to happen on linux because of tests like uptime needing /proc/uptime This change puts those kind of tests into a functional testing dir and adds a unit and functional test arg to tox.  Change-Id: I922079e4a556a171aadd801a8cc932e1e08f9b5d Signed-off-by: Michael Rice <michael.rice@rackspace.com>,objective,,,,,,
x%2Fmonitorstack~master~I922079e4a556a171aadd801a8cc932e1e08f9b5d,https://review.opendev.org/469339,refactor testing directory layout,refactor testing directory layout  This changes the layout of the tests. Before both unit and functional tests were in the same place. That made it so development really needed to happen on linux because of tests like uptime needing /proc/uptime This change puts those kind of tests into a functional testing dir and adds a unit and functional test arg to tox.  Change-Id: I922079e4a556a171aadd801a8cc932e1e08f9b5d Signed-off-by: Michael Rice <michael.rice@rackspace.com>,quality,,,,,,
openstack%2Fos-vif~stable%2Fvictoria~I3fdbea4f48cb79ebfd03a4da21e2232ccafb7a76,https://review.opendev.org/756406,Refactor code of linux_net to more cleaner and increase performace,"Refactor code of linux_net to more cleaner and increase performace  The patch adds new functions '_get_phys_port_name' for reading physical port name of the SR-IOV port and '_get_phys_switch_id' for reading physical port switch ID of the SR-IOV port, in addition to refactoring 'get_representor_port' to use the new functions and decrease calls for ""_get_pf_func"" and netdevs associated with the PF will now be processed in the loop, however it will not be matching 'phys_port_name' which ensures the correct behaviour.  In addition to updating the unit test for linux_net and remove not needed mocks  Related-Bug: #1892132 Change-Id: I3fdbea4f48cb79ebfd03a4da21e2232ccafb7a76 (cherry picked from commit 76f7565b99e637d74878955a0033f35e9eb0e13f)",quality,,,,,,
openstack%2Fos-vif~stable%2Fvictoria~I3fdbea4f48cb79ebfd03a4da21e2232ccafb7a76,https://review.opendev.org/756406,Refactor code of linux_net to more cleaner and increase performace,"Refactor code of linux_net to more cleaner and increase performace  The patch adds new functions '_get_phys_port_name' for reading physical port name of the SR-IOV port and '_get_phys_switch_id' for reading physical port switch ID of the SR-IOV port, in addition to refactoring 'get_representor_port' to use the new functions and decrease calls for ""_get_pf_func"" and netdevs associated with the PF will now be processed in the loop, however it will not be matching 'phys_port_name' which ensures the correct behaviour.  In addition to updating the unit test for linux_net and remove not needed mocks  Related-Bug: #1892132 Change-Id: I3fdbea4f48cb79ebfd03a4da21e2232ccafb7a76 (cherry picked from commit 76f7565b99e637d74878955a0033f35e9eb0e13f)",objective,,,,,,
openstack%2Fmanila~master~I03ae35b67e76b382b04747541afab0e4f574942c,https://review.opendev.org/463507,Refactor share instances tempest test,"Refactor share instances tempest test  Use ddt in share instances tempest test, and use list_share_instances instead of get_instances_of_share  TrivialFix Change-Id: I03ae35b67e76b382b04747541afab0e4f574942c",testing,,,,,,
openstack%2Fmanila~master~I03ae35b67e76b382b04747541afab0e4f574942c,https://review.opendev.org/463507,Refactor share instances tempest test,"Refactor share instances tempest test  Use ddt in share instances tempest test, and use list_share_instances instead of get_instances_of_share  TrivialFix Change-Id: I03ae35b67e76b382b04747541afab0e4f574942c",objective,,,,,,
openstack%2Fnova~master~I08278c10104786a12835ab64a3602503901285bc,https://review.opendev.org/394738,Refactor a test method including 3 test cases,"Refactor a test method including 3 test cases  The test_swap_volume_volume_api_usage method in test_compute_mgr.py has 3 test cases (1 normal, 2 errors). So devide it to the following 3 test cases.  * test_swap_volume_volume_api_usage * test_swap_volume_with_compute_driver_exception * test_swap_volume_with_initialize_connection_exception  Change-Id: I08278c10104786a12835ab64a3602503901285bc",testing,,,,,,
openstack%2Fnova~master~I08278c10104786a12835ab64a3602503901285bc,https://review.opendev.org/394738,Refactor a test method including 3 test cases,"Refactor a test method including 3 test cases  The test_swap_volume_volume_api_usage method in test_compute_mgr.py has 3 test cases (1 normal, 2 errors). So devide it to the following 3 test cases.  * test_swap_volume_volume_api_usage * test_swap_volume_with_compute_driver_exception * test_swap_volume_with_initialize_connection_exception  Change-Id: I08278c10104786a12835ab64a3602503901285bc",objective,,,,,,
openstack%2Fsahara~master~Ic6733974760972a3711b3a623bd27b50a621960c,https://review.opendev.org/456114,Refactor unit test of cdh plugin,"Refactor unit test of cdh plugin  Refactor some testcases of CDH plugin, and also add some tests to increase unit test coverage.  Change-Id: Ic6733974760972a3711b3a623bd27b50a621960c Partial-implements: bp refactor-cdh-plugin",testing,,,,,,
openstack%2Fsahara~master~Ic6733974760972a3711b3a623bd27b50a621960c,https://review.opendev.org/456114,Refactor unit test of cdh plugin,"Refactor unit test of cdh plugin  Refactor some testcases of CDH plugin, and also add some tests to increase unit test coverage.  Change-Id: Ic6733974760972a3711b3a623bd27b50a621960c Partial-implements: bp refactor-cdh-plugin",objective,,,,,,
x%2Fcloudroast~master~I2ff1bace501c684990b8f18febd54e64a86a5eab,https://review.opendev.org/457386,Refactor Object Range Request Test,Refactor Object Range Request Test  * Refactor all tests to correctly use   object generators for data-driven   tests.  Change-Id: I2ff1bace501c684990b8f18febd54e64a86a5eab,testing,,,,,,
x%2Fcloudroast~master~I2ff1bace501c684990b8f18febd54e64a86a5eab,https://review.opendev.org/457386,Refactor Object Range Request Test,Refactor Object Range Request Test  * Refactor all tests to correctly use   object generators for data-driven   tests.  Change-Id: I2ff1bace501c684990b8f18febd54e64a86a5eab,objective,,,,,,
openstack%2Fswift~master~Ifd3d0fa66773e640bb61cc528f7a1b2358e97d91,https://review.opendev.org/440466,TestObjectController refactoring,"Draft: TestObjController refactoring  From the related change of ECDuplication, Swift have a couple of Test classes for EC policy, normal EC and EC Duplication, in the test/unit/proxy/test_server.py. To enable the classes, the related change abstracts the EC test cases as the ECTestMixin class to gather test methods into one place but it was worse because TestObjController did still have both test cases for replication and for ec that may be hard to understand the test class structure.  Hence, this patch attempts to refactor the structure as  From:       ECTestMixin             |     ----------------------------------     |                                | TestObjController           TestObjControllerECDuplication (for replication and EC)    (for EC Duplication Policy)  To:      BaseTestObjController             |     ----------------------------------     |                                | TestObjController           BaseTestECObjController (for replication)                    |                           --------------------------                           |                        |                   TestECObjController       TestECDuplicationObjController                   (for EC policy)           (for EC Duplication Policy)  TODO: 1. Make sure we could set `unpatch_policies` for TestECObjController and   TestECDuplicationObjController rather than call `unpatch_policies` for   all methods (patch_policies for those classes is for the reason?) 2. If we could do the item 1, perhaps setting ec_policy as class variable   is better than that setting ec_policy_index and than retrieve the   policy in each test method.  Related-Change: Idd155401982a2c48110c30b480966a863f6bd305 Change-Id: Ifd3d0fa66773e640bb61cc528f7a1b2358e97d91",testing,,,,,,
openstack%2Fswift~master~Ifd3d0fa66773e640bb61cc528f7a1b2358e97d91,https://review.opendev.org/440466,TestObjectController refactoring,"Draft: TestObjController refactoring  From the related change of ECDuplication, Swift have a couple of Test classes for EC policy, normal EC and EC Duplication, in the test/unit/proxy/test_server.py. To enable the classes, the related change abstracts the EC test cases as the ECTestMixin class to gather test methods into one place but it was worse because TestObjController did still have both test cases for replication and for ec that may be hard to understand the test class structure.  Hence, this patch attempts to refactor the structure as  From:       ECTestMixin             |     ----------------------------------     |                                | TestObjController           TestObjControllerECDuplication (for replication and EC)    (for EC Duplication Policy)  To:      BaseTestObjController             |     ----------------------------------     |                                | TestObjController           BaseTestECObjController (for replication)                    |                           --------------------------                           |                        |                   TestECObjController       TestECDuplicationObjController                   (for EC policy)           (for EC Duplication Policy)  TODO: 1. Make sure we could set `unpatch_policies` for TestECObjController and   TestECDuplicationObjController rather than call `unpatch_policies` for   all methods (patch_policies for those classes is for the reason?) 2. If we could do the item 1, perhaps setting ec_policy as class variable   is better than that setting ec_policy_index and than retrieve the   policy in each test method.  Related-Change: Idd155401982a2c48110c30b480966a863f6bd305 Change-Id: Ifd3d0fa66773e640bb61cc528f7a1b2358e97d91",objective,,,,,,
openstack%2Fswift~master~Ifd3d0fa66773e640bb61cc528f7a1b2358e97d91,https://review.opendev.org/440466,TestObjectController refactoring,"Draft: TestObjController refactoring  From the related change of ECDuplication, Swift have a couple of Test classes for EC policy, normal EC and EC Duplication, in the test/unit/proxy/test_server.py. To enable the classes, the related change abstracts the EC test cases as the ECTestMixin class to gather test methods into one place but it was worse because TestObjController did still have both test cases for replication and for ec that may be hard to understand the test class structure.  Hence, this patch attempts to refactor the structure as  From:       ECTestMixin             |     ----------------------------------     |                                | TestObjController           TestObjControllerECDuplication (for replication and EC)    (for EC Duplication Policy)  To:      BaseTestObjController             |     ----------------------------------     |                                | TestObjController           BaseTestECObjController (for replication)                    |                           --------------------------                           |                        |                   TestECObjController       TestECDuplicationObjController                   (for EC policy)           (for EC Duplication Policy)  TODO: 1. Make sure we could set `unpatch_policies` for TestECObjController and   TestECDuplicationObjController rather than call `unpatch_policies` for   all methods (patch_policies for those classes is for the reason?) 2. If we could do the item 1, perhaps setting ec_policy as class variable   is better than that setting ec_policy_index and than retrieve the   policy in each test method.  Related-Change: Idd155401982a2c48110c30b480966a863f6bd305 Change-Id: Ifd3d0fa66773e640bb61cc528f7a1b2358e97d91",quality,,,,,,
openstack%2Fneutron~master~Icfc251a7d460246e91e260a4ac503d10c4031170,https://review.opendev.org/425800,Refactoring _create_test methods for OVO UTs,Refactoring _create_test methods for OVO UTs  Most of the _create_test methods create a property and only uses its id during their execution.  This change pretends to simplify the returned data and reduce the number of lines used for the creation of test data used during the execution of Unit Tests for Oslo-Versioned Objects.  Change-Id: Icfc251a7d460246e91e260a4ac503d10c4031170 Partially-Implements: blueprint adopt-oslo-versioned-objects-for-db,testing,,,,,,
openstack%2Fneutron~master~Icfc251a7d460246e91e260a4ac503d10c4031170,https://review.opendev.org/425800,Refactoring _create_test methods for OVO UTs,Refactoring _create_test methods for OVO UTs  Most of the _create_test methods create a property and only uses its id during their execution.  This change pretends to simplify the returned data and reduce the number of lines used for the creation of test data used during the execution of Unit Tests for Oslo-Versioned Objects.  Change-Id: Icfc251a7d460246e91e260a4ac503d10c4031170 Partially-Implements: blueprint adopt-oslo-versioned-objects-for-db,quality,,,,,,
openstack%2Fneutron~master~Icfc251a7d460246e91e260a4ac503d10c4031170,https://review.opendev.org/425800,Refactoring _create_test methods for OVO UTs,Refactoring _create_test methods for OVO UTs  Most of the _create_test methods create a property and only uses its id during their execution.  This change pretends to simplify the returned data and reduce the number of lines used for the creation of test data used during the execution of Unit Tests for Oslo-Versioned Objects.  Change-Id: Icfc251a7d460246e91e260a4ac503d10c4031170 Partially-Implements: blueprint adopt-oslo-versioned-objects-for-db,objective,,,,,,
openstack%2Fopenstack-ansible-openstack_hosts~master~I5d26b055fe8582b29ff40e0daa896bf1b7207161,https://review.opendev.org/455851,Refactor host specific kernel module tasks,"Refactor host specific kernel module tasks  Update the 'openstack_host_specific_kernel_modules' tasks so that they no longer need to skip ansible lint checking. The kernel configuration file is now slurped and searched through to find out if the provided list of modules are valid and loadable.  For testing, a 'openstack_host_specific_kernel_modules' test var and assertion has been added.  Change-Id: I5d26b055fe8582b29ff40e0daa896bf1b7207161",integration,,,,,,
openstack%2Fopenstack-ansible-openstack_hosts~master~I5d26b055fe8582b29ff40e0daa896bf1b7207161,https://review.opendev.org/455851,Refactor host specific kernel module tasks,"Refactor host specific kernel module tasks  Update the 'openstack_host_specific_kernel_modules' tasks so that they no longer need to skip ansible lint checking. The kernel configuration file is now slurped and searched through to find out if the provided list of modules are valid and loadable.  For testing, a 'openstack_host_specific_kernel_modules' test var and assertion has been added.  Change-Id: I5d26b055fe8582b29ff40e0daa896bf1b7207161",objective,,,,,,
openstack%2Fkeystone~master~Ib81fa33ad56d4ac6962c4978d8c4410aab6be384,https://review.opendev.org/453229,Move and refactor test_revoke_by_audit_chain_id,Move and refactor test_revoke_by_audit_chain_id  This patch moves test_revoke_by_audit_chain_id and refactors it to test the revocation backend instead of using a spoofed backend _matches.  Change-Id: Ib81fa33ad56d4ac6962c4978d8c4410aab6be384,quality,,,,,,
openstack%2Fkeystone~master~Ib81fa33ad56d4ac6962c4978d8c4410aab6be384,https://review.opendev.org/453229,Move and refactor test_revoke_by_audit_chain_id,Move and refactor test_revoke_by_audit_chain_id  This patch moves test_revoke_by_audit_chain_id and refactors it to test the revocation backend instead of using a spoofed backend _matches.  Change-Id: Ib81fa33ad56d4ac6962c4978d8c4410aab6be384,objective,,,,,,
openstack%2Fkeystone~master~I7824242026c6aeb695e56aee544c9a97447e2de1,https://review.opendev.org/452908,Move and refactor project_and_user_and_role,Move and refactor project_and_user_and_role  This patch moves test_by_project_and_user_and_role and refactors it to test the revocation backend instead of using a spoofed backend _matches.  Change-Id: I7824242026c6aeb695e56aee544c9a97447e2de1,quality,,,,,,
openstack%2Fkeystone~master~I7824242026c6aeb695e56aee544c9a97447e2de1,https://review.opendev.org/452908,Move and refactor project_and_user_and_role,Move and refactor project_and_user_and_role  This patch moves test_by_project_and_user_and_role and refactors it to test the revocation backend instead of using a spoofed backend _matches.  Change-Id: I7824242026c6aeb695e56aee544c9a97447e2de1,objective,,,,,,
openstack%2Fkeystone~master~Iec39d50c0ad075e247c2d9ddd88d72e6af2cdb86,https://review.opendev.org/452801,Move and refactor test_by_domain_domain,Move and refactor test_by_domain_domain  This patch moves test_by_domain_domain and refactors it to test the revocation backend instead of using a spoofed backend _matches.  Change-Id: Iec39d50c0ad075e247c2d9ddd88d72e6af2cdb86,quality,,,,,,
openstack%2Fkeystone~master~Iec39d50c0ad075e247c2d9ddd88d72e6af2cdb86,https://review.opendev.org/452801,Move and refactor test_by_domain_domain,Move and refactor test_by_domain_domain  This patch moves test_by_domain_domain and refactors it to test the revocation backend instead of using a spoofed backend _matches.  Change-Id: Iec39d50c0ad075e247c2d9ddd88d72e6af2cdb86,objective,,,,,,
openstack%2Fkeystone~master~I8a2acc9c8d5f13789c3b70720190204389ac0dad,https://review.opendev.org/452788,Move and refactor test_by_domain_project,Move and refactor test_by_domain_project  This patch moves test_by_domain_project and refactors it to test the revocation backend instead of using a spoofed backend _matches.  Change-Id: I8a2acc9c8d5f13789c3b70720190204389ac0dad,quality,,,,,,
openstack%2Fkeystone~master~I8a2acc9c8d5f13789c3b70720190204389ac0dad,https://review.opendev.org/452788,Move and refactor test_by_domain_project,Move and refactor test_by_domain_project  This patch moves test_by_domain_project and refactors it to test the revocation backend instead of using a spoofed backend _matches.  Change-Id: I8a2acc9c8d5f13789c3b70720190204389ac0dad,objective,,,,,,
openstack%2Fkeystone~master~Idc03c3341b31f6fabd0d5499d987c6361ef2c0f8,https://review.opendev.org/452783,Move and refactor test_by_domain_user,Move and refactor test_by_domain_user  This patch moves test_by_domain_user and refactors it to test the revocation backend instead of using a spoofed backend _matches.  Change-Id: Idc03c3341b31f6fabd0d5499d987c6361ef2c0f8,quality,,,,,,
openstack%2Fkeystone~master~Idc03c3341b31f6fabd0d5499d987c6361ef2c0f8,https://review.opendev.org/452783,Move and refactor test_by_domain_user,Move and refactor test_by_domain_user  This patch moves test_by_domain_user and refactors it to test the revocation backend instead of using a spoofed backend _matches.  Change-Id: Idc03c3341b31f6fabd0d5499d987c6361ef2c0f8,objective,,,,,,
openstack%2Fdragonflow~master~I9509157073066eb7c9e633ffd67c2ee12d70b902,https://review.opendev.org/440920,Refactor code for extra route and add fullstack test,"Refactor code for extra route and add fullstack test  Since there is unique key for router, it can apply to extra route too.  And cookie for extra route openflow rule can be removed, because router interface can't be deleted if there is extra route associated with it. The only way to delete an extra route is through router update, so the deletion doesn't need cookie to match flow.  Change-Id: I9509157073066eb7c9e633ffd67c2ee12d70b902 Closes-Bug: #1669650",testing,,,,,,
openstack%2Fdragonflow~master~I9509157073066eb7c9e633ffd67c2ee12d70b902,https://review.opendev.org/440920,Refactor code for extra route and add fullstack test,"Refactor code for extra route and add fullstack test  Since there is unique key for router, it can apply to extra route too.  And cookie for extra route openflow rule can be removed, because router interface can't be deleted if there is extra route associated with it. The only way to delete an extra route is through router update, so the deletion doesn't need cookie to match flow.  Change-Id: I9509157073066eb7c9e633ffd67c2ee12d70b902 Closes-Bug: #1669650",objective,,,,,,
openstack%2Fdragonflow~master~I9509157073066eb7c9e633ffd67c2ee12d70b902,https://review.opendev.org/440920,Refactor code for extra route and add fullstack test,"Refactor code for extra route and add fullstack test  Since there is unique key for router, it can apply to extra route too.  And cookie for extra route openflow rule can be removed, because router interface can't be deleted if there is extra route associated with it. The only way to delete an extra route is through router update, so the deletion doesn't need cookie to match flow.  Change-Id: I9509157073066eb7c9e633ffd67c2ee12d70b902 Closes-Bug: #1669650",quality,,,,,,
openstack%2Fmanila~stable%2Focata~If4d6029f2250e80c1eec0debb1b09a805d997028,https://review.opendev.org/434289,[Tempest] Refactor api/tests/admin/test_share_servers module,"[Tempest] Refactor api/tests/admin/test_share_servers module  Doing following things:  - Use ddt module removing code duplication.  - Use v2 APIs instead of deprecated v1.  - Use correct 'share_server_id' for    'test_show_share_server_details' test to avoid concurrency issues.    For more details, see closed b_u_g.  Change-Id: If4d6029f2250e80c1eec0debb1b09a805d997028 Closes-Bug: #1663865 (cherry picked from commit 6e4e8fbfb4494a344ac342561ccad61514506a5c)",integration,,,,,,
openstack%2Fmanila~stable%2Focata~If4d6029f2250e80c1eec0debb1b09a805d997028,https://review.opendev.org/434289,[Tempest] Refactor api/tests/admin/test_share_servers module,"[Tempest] Refactor api/tests/admin/test_share_servers module  Doing following things:  - Use ddt module removing code duplication.  - Use v2 APIs instead of deprecated v1.  - Use correct 'share_server_id' for    'test_show_share_server_details' test to avoid concurrency issues.    For more details, see closed b_u_g.  Change-Id: If4d6029f2250e80c1eec0debb1b09a805d997028 Closes-Bug: #1663865 (cherry picked from commit 6e4e8fbfb4494a344ac342561ccad61514506a5c)",quality,,,,,,
openstack%2Fmanila~stable%2Focata~If4d6029f2250e80c1eec0debb1b09a805d997028,https://review.opendev.org/434289,[Tempest] Refactor api/tests/admin/test_share_servers module,"[Tempest] Refactor api/tests/admin/test_share_servers module  Doing following things:  - Use ddt module removing code duplication.  - Use v2 APIs instead of deprecated v1.  - Use correct 'share_server_id' for    'test_show_share_server_details' test to avoid concurrency issues.    For more details, see closed b_u_g.  Change-Id: If4d6029f2250e80c1eec0debb1b09a805d997028 Closes-Bug: #1663865 (cherry picked from commit 6e4e8fbfb4494a344ac342561ccad61514506a5c)",testing,,,,,,
openstack%2Fmanila~stable%2Focata~If4d6029f2250e80c1eec0debb1b09a805d997028,https://review.opendev.org/434289,[Tempest] Refactor api/tests/admin/test_share_servers module,"[Tempest] Refactor api/tests/admin/test_share_servers module  Doing following things:  - Use ddt module removing code duplication.  - Use v2 APIs instead of deprecated v1.  - Use correct 'share_server_id' for    'test_show_share_server_details' test to avoid concurrency issues.    For more details, see closed b_u_g.  Change-Id: If4d6029f2250e80c1eec0debb1b09a805d997028 Closes-Bug: #1663865 (cherry picked from commit 6e4e8fbfb4494a344ac342561ccad61514506a5c)",objective,,,,,,
openstack%2Fpython-openstackclient~master~I1afcc04ba705b0bbb85628117e7ca91080cf1895,https://review.opendev.org/442645,Refactor ServerTests and ServerEventTests functional test classes,Refactor ServerTests and ServerEventTests functional test classes  Move common bits into a compute.v2.common.ComputeTestCase class so they are available as needed without calling into other test classes.  Change-Id: I1afcc04ba705b0bbb85628117e7ca91080cf1895,testing,,,,,,
openstack%2Fpython-openstackclient~master~I1afcc04ba705b0bbb85628117e7ca91080cf1895,https://review.opendev.org/442645,Refactor ServerTests and ServerEventTests functional test classes,Refactor ServerTests and ServerEventTests functional test classes  Move common bits into a compute.v2.common.ComputeTestCase class so they are available as needed without calling into other test classes.  Change-Id: I1afcc04ba705b0bbb85628117e7ca91080cf1895,objective,,,,,,
jjb%2Fjenkins-job-builder~master~I89809e8082469f814f245db4a9ab7658aac8a405,https://review.opendev.org/336090,Refactor base test classes inheritance for reuse,Refactor base test classes inheritance for reuse  Refactor base test class inheritance to allow for BaseTest class to be reused without needing to also import the TestCase class everywhere in order to avoid having the common test function executed on base classes.  This makes it easier to build base testing classes and then simplifies the subclassing of these for actual tests.  Change-Id: I89809e8082469f814f245db4a9ab7658aac8a405,testing,,,,,,
jjb%2Fjenkins-job-builder~master~I89809e8082469f814f245db4a9ab7658aac8a405,https://review.opendev.org/336090,Refactor base test classes inheritance for reuse,Refactor base test classes inheritance for reuse  Refactor base test class inheritance to allow for BaseTest class to be reused without needing to also import the TestCase class everywhere in order to avoid having the common test function executed on base classes.  This makes it easier to build base testing classes and then simplifies the subclassing of these for actual tests.  Change-Id: I89809e8082469f814f245db4a9ab7658aac8a405,quality,,,,,,
jjb%2Fjenkins-job-builder~master~I89809e8082469f814f245db4a9ab7658aac8a405,https://review.opendev.org/336090,Refactor base test classes inheritance for reuse,Refactor base test classes inheritance for reuse  Refactor base test class inheritance to allow for BaseTest class to be reused without needing to also import the TestCase class everywhere in order to avoid having the common test function executed on base classes.  This makes it easier to build base testing classes and then simplifies the subclassing of these for actual tests.  Change-Id: I89809e8082469f814f245db4a9ab7658aac8a405,objective,,,,,,
x%2Fnova-dpm~master~I4d9dfcf73bda61670eca41e3db92dcfeb5a1c44a,https://review.opendev.org/443457,Refactor driver.py testcase,"Refactor driver.py testcase  Refactor unit test case for driver.py specially remove vm.CONF = mock.Mock() vm.CONF.host = ""fake-mini"" vm.CONF.dpm.physical_storage_adapter_mappings = ""mapping"" because it is overriding other testcase in other module.  Also remove test case for vm.py and host.py because when we are trying to write test case for other module then few variables are getting overrided. Anyways we need to change the testcase using zhmcclient_mock framework then that time any how we have to delete these test cases. So we are deleting now to not get conflict in other module.  Change-Id: I4d9dfcf73bda61670eca41e3db92dcfeb5a1c44a Signed-off-by: Prabhat Ranjan <pranjank@in.ibm.com>",testing,,,,,,
x%2Fnova-dpm~master~I4d9dfcf73bda61670eca41e3db92dcfeb5a1c44a,https://review.opendev.org/443457,Refactor driver.py testcase,"Refactor driver.py testcase  Refactor unit test case for driver.py specially remove vm.CONF = mock.Mock() vm.CONF.host = ""fake-mini"" vm.CONF.dpm.physical_storage_adapter_mappings = ""mapping"" because it is overriding other testcase in other module.  Also remove test case for vm.py and host.py because when we are trying to write test case for other module then few variables are getting overrided. Anyways we need to change the testcase using zhmcclient_mock framework then that time any how we have to delete these test cases. So we are deleting now to not get conflict in other module.  Change-Id: I4d9dfcf73bda61670eca41e3db92dcfeb5a1c44a Signed-off-by: Prabhat Ranjan <pranjank@in.ibm.com>",objective,,,,,,
x%2Fnova-dpm~master~I4d9dfcf73bda61670eca41e3db92dcfeb5a1c44a,https://review.opendev.org/443457,Refactor driver.py testcase,"Refactor driver.py testcase  Refactor unit test case for driver.py specially remove vm.CONF = mock.Mock() vm.CONF.host = ""fake-mini"" vm.CONF.dpm.physical_storage_adapter_mappings = ""mapping"" because it is overriding other testcase in other module.  Also remove test case for vm.py and host.py because when we are trying to write test case for other module then few variables are getting overrided. Anyways we need to change the testcase using zhmcclient_mock framework then that time any how we have to delete these test cases. So we are deleting now to not get conflict in other module.  Change-Id: I4d9dfcf73bda61670eca41e3db92dcfeb5a1c44a Signed-off-by: Prabhat Ranjan <pranjank@in.ibm.com>",quality,,,,,,
openstack%2Fmanila~master~If4d6029f2250e80c1eec0debb1b09a805d997028,https://review.opendev.org/433003,[Tempest] Refactor api/tests/admin/test_share_servers module,"[Tempest] Refactor api/tests/admin/test_share_servers module  Doing following things:  - Use ddt module removing code duplication.  - Use v2 APIs instead of deprecated v1.  - Use correct 'share_server_id' for    'test_show_share_server_details' test to avoid concurrency issues.    For more details, see closed b_u_g.  Change-Id: If4d6029f2250e80c1eec0debb1b09a805d997028 Closes-Bug: #1663865",integration,,,,,,
openstack%2Fmanila~master~If4d6029f2250e80c1eec0debb1b09a805d997028,https://review.opendev.org/433003,[Tempest] Refactor api/tests/admin/test_share_servers module,"[Tempest] Refactor api/tests/admin/test_share_servers module  Doing following things:  - Use ddt module removing code duplication.  - Use v2 APIs instead of deprecated v1.  - Use correct 'share_server_id' for    'test_show_share_server_details' test to avoid concurrency issues.    For more details, see closed b_u_g.  Change-Id: If4d6029f2250e80c1eec0debb1b09a805d997028 Closes-Bug: #1663865",quality,,,,,,
openstack%2Fmanila~master~If4d6029f2250e80c1eec0debb1b09a805d997028,https://review.opendev.org/433003,[Tempest] Refactor api/tests/admin/test_share_servers module,"[Tempest] Refactor api/tests/admin/test_share_servers module  Doing following things:  - Use ddt module removing code duplication.  - Use v2 APIs instead of deprecated v1.  - Use correct 'share_server_id' for    'test_show_share_server_details' test to avoid concurrency issues.    For more details, see closed b_u_g.  Change-Id: If4d6029f2250e80c1eec0debb1b09a805d997028 Closes-Bug: #1663865",testing,,,,,,
openstack%2Fmanila~master~If4d6029f2250e80c1eec0debb1b09a805d997028,https://review.opendev.org/433003,[Tempest] Refactor api/tests/admin/test_share_servers module,"[Tempest] Refactor api/tests/admin/test_share_servers module  Doing following things:  - Use ddt module removing code duplication.  - Use v2 APIs instead of deprecated v1.  - Use correct 'share_server_id' for    'test_show_share_server_details' test to avoid concurrency issues.    For more details, see closed b_u_g.  Change-Id: If4d6029f2250e80c1eec0debb1b09a805d997028 Closes-Bug: #1663865",objective,,,,,,
openstack%2Fnetworking-odl~master~Ib0a1cbc119120ba520cb702775a7a642deccef3a,https://review.opendev.org/434020,refactor test_dependency_validations,"refactor test_dependency_validations  refactor test_dependency_validations to create fake test data. As bonus, we fix data. {'id': <id>} should be returned for network data. not <network id>  Change-Id: Ib0a1cbc119120ba520cb702775a7a642deccef3a",testing,,,,,,
openstack%2Fnetworking-odl~master~Ib0a1cbc119120ba520cb702775a7a642deccef3a,https://review.opendev.org/434020,refactor test_dependency_validations,"refactor test_dependency_validations  refactor test_dependency_validations to create fake test data. As bonus, we fix data. {'id': <id>} should be returned for network data. not <network id>  Change-Id: Ib0a1cbc119120ba520cb702775a7a642deccef3a",objective,,,,,,
openstack%2Fcinder~master~I6b03652ead141b1c5b6f27016de29cbbb6be9296,https://review.opendev.org/431067,[11/11] Refactor test_volume file,"[11/11] Refactor test_volume file  Due to the situation, that we've already had more that 7000 lines of code in this file and it contains different test cases, it is reasonably to divide it into smaller files.  This patch includes different test cases that are connected with volumes. Just move file to volume directory.  Change-Id: I6b03652ead141b1c5b6f27016de29cbbb6be9296",quality,,,,,,
openstack%2Fcinder~master~I6b03652ead141b1c5b6f27016de29cbbb6be9296,https://review.opendev.org/431067,[11/11] Refactor test_volume file,"[11/11] Refactor test_volume file  Due to the situation, that we've already had more that 7000 lines of code in this file and it contains different test cases, it is reasonably to divide it into smaller files.  This patch includes different test cases that are connected with volumes. Just move file to volume directory.  Change-Id: I6b03652ead141b1c5b6f27016de29cbbb6be9296",testing,,,,,,
openstack%2Fcinder~master~I6b03652ead141b1c5b6f27016de29cbbb6be9296,https://review.opendev.org/431067,[11/11] Refactor test_volume file,"[11/11] Refactor test_volume file  Due to the situation, that we've already had more that 7000 lines of code in this file and it contains different test cases, it is reasonably to divide it into smaller files.  This patch includes different test cases that are connected with volumes. Just move file to volume directory.  Change-Id: I6b03652ead141b1c5b6f27016de29cbbb6be9296",objective,,,,,,
openstack%2Fpython-openstackclient~master~I969df3c8dbca21a62f6245e3e95680cf3cd47dc1,https://review.opendev.org/431512,Refactor volume functional test in volume v1,"Refactor volume functional test in volume v1  There is a patch for refactor of volume funtional test in volume v2 [1], but v1 is missing, this change add the v1 refactor with joson format.  [1]: https://review.openstack.org/#/c/417349  Change-Id: I969df3c8dbca21a62f6245e3e95680cf3cd47dc1",testing,,,,,,
openstack%2Fpython-openstackclient~master~I969df3c8dbca21a62f6245e3e95680cf3cd47dc1,https://review.opendev.org/431512,Refactor volume functional test in volume v1,"Refactor volume functional test in volume v1  There is a patch for refactor of volume funtional test in volume v2 [1], but v1 is missing, this change add the v1 refactor with joson format.  [1]: https://review.openstack.org/#/c/417349  Change-Id: I969df3c8dbca21a62f6245e3e95680cf3cd47dc1",objective,,,,,,
openstack%2Fpython-openstackclient~master~I969df3c8dbca21a62f6245e3e95680cf3cd47dc1,https://review.opendev.org/431512,Refactor volume functional test in volume v1,"Refactor volume functional test in volume v1  There is a patch for refactor of volume funtional test in volume v2 [1], but v1 is missing, this change add the v1 refactor with joson format.  [1]: https://review.openstack.org/#/c/417349  Change-Id: I969df3c8dbca21a62f6245e3e95680cf3cd47dc1",objective,,,,,,
openstack%2Fcinder~master~If59f29b2fe6ebc526bf2f08a34f45ef5303442ce,https://review.opendev.org/431061,[5/11] Refactor test_volume file,"[5/11] Refactor test_volume file  Due to the situation, that we've already had more that 7000 lines of code in this file and it contains different test cases, it is reasonably to divide it into smaller files.  This patch includes test cases that are connected with capabilities and getting volumes by active window test cases.  Change-Id: If59f29b2fe6ebc526bf2f08a34f45ef5303442ce",quality,,,,,,
openstack%2Fcinder~master~If59f29b2fe6ebc526bf2f08a34f45ef5303442ce,https://review.opendev.org/431061,[5/11] Refactor test_volume file,"[5/11] Refactor test_volume file  Due to the situation, that we've already had more that 7000 lines of code in this file and it contains different test cases, it is reasonably to divide it into smaller files.  This patch includes test cases that are connected with capabilities and getting volumes by active window test cases.  Change-Id: If59f29b2fe6ebc526bf2f08a34f45ef5303442ce",testing,,,,,,
openstack%2Fcinder~master~If59f29b2fe6ebc526bf2f08a34f45ef5303442ce,https://review.opendev.org/431061,[5/11] Refactor test_volume file,"[5/11] Refactor test_volume file  Due to the situation, that we've already had more that 7000 lines of code in this file and it contains different test cases, it is reasonably to divide it into smaller files.  This patch includes test cases that are connected with capabilities and getting volumes by active window test cases.  Change-Id: If59f29b2fe6ebc526bf2f08a34f45ef5303442ce",objective,,,,,,
openstack%2Fcinder~master~I68b27a00d0d8fd83e68a90bea45d6975cb8d33ce,https://review.opendev.org/431065,[9/11] Refactor test_volume file,"[9/11] Refactor test_volume file  Due to the situation, that we've already had more that 7000 lines of code in this file and it contains different test cases, it is reasonably to divide it into smaller files.  This patch includes test cases that are connected with images.  Change-Id: I68b27a00d0d8fd83e68a90bea45d6975cb8d33ce",quality,,,,,,
openstack%2Fcinder~master~I68b27a00d0d8fd83e68a90bea45d6975cb8d33ce,https://review.opendev.org/431065,[9/11] Refactor test_volume file,"[9/11] Refactor test_volume file  Due to the situation, that we've already had more that 7000 lines of code in this file and it contains different test cases, it is reasonably to divide it into smaller files.  This patch includes test cases that are connected with images.  Change-Id: I68b27a00d0d8fd83e68a90bea45d6975cb8d33ce",testing,,,,,,
openstack%2Fcinder~master~I68b27a00d0d8fd83e68a90bea45d6975cb8d33ce,https://review.opendev.org/431065,[9/11] Refactor test_volume file,"[9/11] Refactor test_volume file  Due to the situation, that we've already had more that 7000 lines of code in this file and it contains different test cases, it is reasonably to divide it into smaller files.  This patch includes test cases that are connected with images.  Change-Id: I68b27a00d0d8fd83e68a90bea45d6975cb8d33ce",objective,,,,,,
openstack%2Fcinder~master~I366bc6647f783b5a8af76d81f7a32e7a274b80ab,https://review.opendev.org/431063,[7/11] Refactor test_volume file,"[7/11] Refactor test_volume file  Due to the situation, that we've already had more that 7000 lines of code in this file and it contains different test cases, it is reasonably to divide it into smaller files.  This patch includes test cases that are connected with init host test cases.  Change-Id: I366bc6647f783b5a8af76d81f7a32e7a274b80ab",quality,,,,,,
openstack%2Fcinder~master~I366bc6647f783b5a8af76d81f7a32e7a274b80ab,https://review.opendev.org/431063,[7/11] Refactor test_volume file,"[7/11] Refactor test_volume file  Due to the situation, that we've already had more that 7000 lines of code in this file and it contains different test cases, it is reasonably to divide it into smaller files.  This patch includes test cases that are connected with init host test cases.  Change-Id: I366bc6647f783b5a8af76d81f7a32e7a274b80ab",testing,,,,,,
openstack%2Fcinder~master~I366bc6647f783b5a8af76d81f7a32e7a274b80ab,https://review.opendev.org/431063,[7/11] Refactor test_volume file,"[7/11] Refactor test_volume file  Due to the situation, that we've already had more that 7000 lines of code in this file and it contains different test cases, it is reasonably to divide it into smaller files.  This patch includes test cases that are connected with init host test cases.  Change-Id: I366bc6647f783b5a8af76d81f7a32e7a274b80ab",objective,,,,,,
openstack%2Fcinder~master~I3cb76c107bc9a33ab37b78221d5c293db2f8ed43,https://review.opendev.org/431059,[3/11] Refactor test_volume file,"[3/9] Refactor test_volume file  Due to the situation, that we've already had more that 7000 lines of code in this file and it contains different test cases, it is reasonably to divide it into smaller files.  This patch includes test cases that are connected with volume manage test cases.  Change-Id: I3cb76c107bc9a33ab37b78221d5c293db2f8ed43",quality,,,,,,
openstack%2Fcinder~master~I3cb76c107bc9a33ab37b78221d5c293db2f8ed43,https://review.opendev.org/431059,[3/11] Refactor test_volume file,"[3/9] Refactor test_volume file  Due to the situation, that we've already had more that 7000 lines of code in this file and it contains different test cases, it is reasonably to divide it into smaller files.  This patch includes test cases that are connected with volume manage test cases.  Change-Id: I3cb76c107bc9a33ab37b78221d5c293db2f8ed43",testing,,,,,,
openstack%2Fcinder~master~I3cb76c107bc9a33ab37b78221d5c293db2f8ed43,https://review.opendev.org/431059,[3/11] Refactor test_volume file,"[3/9] Refactor test_volume file  Due to the situation, that we've already had more that 7000 lines of code in this file and it contains different test cases, it is reasonably to divide it into smaller files.  This patch includes test cases that are connected with volume manage test cases.  Change-Id: I3cb76c107bc9a33ab37b78221d5c293db2f8ed43",objective,,,,,,
openstack%2Fcinder~master~I076b22771143f90444b298f97f31077c18920c49,https://review.opendev.org/431066,[10/11] Refactor test_volume file,"[10/11] Refactor test_volume file  Due to the situation, that we've already had more that 7000 lines of code in this file and it contains different test cases, it is reasonably to divide it into smaller files.  This patch includes test cases that are connected with snapshots.  Change-Id: I076b22771143f90444b298f97f31077c18920c49",quality,,,,,,
openstack%2Fcinder~master~I076b22771143f90444b298f97f31077c18920c49,https://review.opendev.org/431066,[10/11] Refactor test_volume file,"[10/11] Refactor test_volume file  Due to the situation, that we've already had more that 7000 lines of code in this file and it contains different test cases, it is reasonably to divide it into smaller files.  This patch includes test cases that are connected with snapshots.  Change-Id: I076b22771143f90444b298f97f31077c18920c49",testing,,,,,,
openstack%2Fcinder~master~I076b22771143f90444b298f97f31077c18920c49,https://review.opendev.org/431066,[10/11] Refactor test_volume file,"[10/11] Refactor test_volume file  Due to the situation, that we've already had more that 7000 lines of code in this file and it contains different test cases, it is reasonably to divide it into smaller files.  This patch includes test cases that are connected with snapshots.  Change-Id: I076b22771143f90444b298f97f31077c18920c49",objective,,,,,,
openstack%2Fcinder~master~Ib0926cadc5070c24cb7fe18da38ab341da768687,https://review.opendev.org/431062,[6/11] Refactor test_volume file,"[6/11] Refactor test_volume file  Due to the situation, that we've already had more that 7000 lines of code in this file and it contains different test cases, it is reasonably to divide it into smaller files.  This patch includes test cases that are connected with initializing connection and attach/detach test cases.  Change-Id: Ib0926cadc5070c24cb7fe18da38ab341da768687",quality,,,,,,
openstack%2Fcinder~master~Ib0926cadc5070c24cb7fe18da38ab341da768687,https://review.opendev.org/431062,[6/11] Refactor test_volume file,"[6/11] Refactor test_volume file  Due to the situation, that we've already had more that 7000 lines of code in this file and it contains different test cases, it is reasonably to divide it into smaller files.  This patch includes test cases that are connected with initializing connection and attach/detach test cases.  Change-Id: Ib0926cadc5070c24cb7fe18da38ab341da768687",testing,,,,,,
openstack%2Fcinder~master~Ib0926cadc5070c24cb7fe18da38ab341da768687,https://review.opendev.org/431062,[6/11] Refactor test_volume file,"[6/11] Refactor test_volume file  Due to the situation, that we've already had more that 7000 lines of code in this file and it contains different test cases, it is reasonably to divide it into smaller files.  This patch includes test cases that are connected with initializing connection and attach/detach test cases.  Change-Id: Ib0926cadc5070c24cb7fe18da38ab341da768687",objective,,,,,,
openstack%2Fcinder~master~Ib48b14b771e637b39bfeef8b39d334aa14d4a3ca,https://review.opendev.org/431064,[8/11] Refactor test_volume file,"[8/11] Refactor test_volume file  Due to the situation, that we've already had more that 7000 lines of code in this file and it contains different test cases, it is reasonably to divide it into smaller files.  This patch includes test cases that are connected with migration and retype volume operations test cases.  Change-Id: Ib48b14b771e637b39bfeef8b39d334aa14d4a3ca",quality,,,,,,
openstack%2Fcinder~master~Ib48b14b771e637b39bfeef8b39d334aa14d4a3ca,https://review.opendev.org/431064,[8/11] Refactor test_volume file,"[8/11] Refactor test_volume file  Due to the situation, that we've already had more that 7000 lines of code in this file and it contains different test cases, it is reasonably to divide it into smaller files.  This patch includes test cases that are connected with migration and retype volume operations test cases.  Change-Id: Ib48b14b771e637b39bfeef8b39d334aa14d4a3ca",testing,,,,,,
openstack%2Fcinder~master~Ib48b14b771e637b39bfeef8b39d334aa14d4a3ca,https://review.opendev.org/431064,[8/11] Refactor test_volume file,"[8/11] Refactor test_volume file  Due to the situation, that we've already had more that 7000 lines of code in this file and it contains different test cases, it is reasonably to divide it into smaller files.  This patch includes test cases that are connected with migration and retype volume operations test cases.  Change-Id: Ib48b14b771e637b39bfeef8b39d334aa14d4a3ca",objective,,,,,,
openstack%2Fpython-openstackclient~master~I7098b1c3bee680e47e414dcb4fa272628cdec1eb,https://review.opendev.org/432142,Refactor availability zone functional test,Refactor availability zone list functional test  Using json format output.  Change-Id: I7098b1c3bee680e47e414dcb4fa272628cdec1eb,testing,,,,,,
openstack%2Fpython-openstackclient~master~I7098b1c3bee680e47e414dcb4fa272628cdec1eb,https://review.opendev.org/432142,Refactor availability zone functional test,Refactor availability zone list functional test  Using json format output.  Change-Id: I7098b1c3bee680e47e414dcb4fa272628cdec1eb,objective,,,,,,
openstack%2Fpython-openstackclient~master~If4e7a73502a888c50de17ec19ef7e8d02dd23f1d,https://review.opendev.org/432155,Refactor module functional test,"Refactor module functional test  Combine ""test_module_list_no_options"" and ""test_module_list_with_all_option"" into one test, and modify the test for ""--all' option.  Change-Id: If4e7a73502a888c50de17ec19ef7e8d02dd23f1d",testing,,,,,,
openstack%2Fpython-openstackclient~master~If4e7a73502a888c50de17ec19ef7e8d02dd23f1d,https://review.opendev.org/432155,Refactor module functional test,"Refactor module functional test  Combine ""test_module_list_no_options"" and ""test_module_list_with_all_option"" into one test, and modify the test for ""--all' option.  Change-Id: If4e7a73502a888c50de17ec19ef7e8d02dd23f1d",objective,,,,,,
openstack%2Fcinder~master~I5c60f17d950161a9d4df0278a5753413268b0175,https://review.opendev.org/431060,[4/11] Refactor test_volume file,"[4/9] Refactor test_volume file  Due to the situation, that we've already had more that 7000 lines of code in this file and it contains different test cases, it is reasonably to divide it into smaller files.  This patch includes test cases that are connected with replication and failover test cases.  Change-Id: I5c60f17d950161a9d4df0278a5753413268b0175",quality,,,,,,
openstack%2Fcinder~master~I5c60f17d950161a9d4df0278a5753413268b0175,https://review.opendev.org/431060,[4/11] Refactor test_volume file,"[4/9] Refactor test_volume file  Due to the situation, that we've already had more that 7000 lines of code in this file and it contains different test cases, it is reasonably to divide it into smaller files.  This patch includes test cases that are connected with replication and failover test cases.  Change-Id: I5c60f17d950161a9d4df0278a5753413268b0175",testing,,,,,,
openstack%2Fcinder~master~I5c60f17d950161a9d4df0278a5753413268b0175,https://review.opendev.org/431060,[4/11] Refactor test_volume file,"[4/9] Refactor test_volume file  Due to the situation, that we've already had more that 7000 lines of code in this file and it contains different test cases, it is reasonably to divide it into smaller files.  This patch includes test cases that are connected with replication and failover test cases.  Change-Id: I5c60f17d950161a9d4df0278a5753413268b0175",objective,,,,,,
openstack%2Fcinder~master~I8aad2460d587e3211828314d89eccd684a673f00,https://review.opendev.org/431058,[2/11] Refactor test_volume file,"[2/9] Refactor test_volume file  Due to the situation, that we've already had more that 7000 lines of code in this file and it contains different test cases, it is reasonably to divide it into smaller files.  This patch includes test cases that are connected with drivers and base driver test cases.  Change-Id: I8aad2460d587e3211828314d89eccd684a673f00",quality,,,,,,
openstack%2Fcinder~master~I8aad2460d587e3211828314d89eccd684a673f00,https://review.opendev.org/431058,[2/11] Refactor test_volume file,"[2/9] Refactor test_volume file  Due to the situation, that we've already had more that 7000 lines of code in this file and it contains different test cases, it is reasonably to divide it into smaller files.  This patch includes test cases that are connected with drivers and base driver test cases.  Change-Id: I8aad2460d587e3211828314d89eccd684a673f00",testing,,,,,,
openstack%2Fcinder~master~I8aad2460d587e3211828314d89eccd684a673f00,https://review.opendev.org/431058,[2/11] Refactor test_volume file,"[2/9] Refactor test_volume file  Due to the situation, that we've already had more that 7000 lines of code in this file and it contains different test cases, it is reasonably to divide it into smaller files.  This patch includes test cases that are connected with drivers and base driver test cases.  Change-Id: I8aad2460d587e3211828314d89eccd684a673f00",objective,,,,,,
openstack%2Fcinder~master~I69ef0601bceb857565f36907eb8811379a5bfb77,https://review.opendev.org/431057,[1/11] Refactor test_volume file,"[1/9] Refactor test_volume file  Due to the situation, that we've already had more that 7000 lines of code in this file and it contains different test cases, it is reasonably to divide it into smaller files.  This patch includes test cases that are connected with: 1) Availability zone; 2) Policy  Change-Id: I69ef0601bceb857565f36907eb8811379a5bfb77",quality,,,,,,
openstack%2Fcinder~master~I69ef0601bceb857565f36907eb8811379a5bfb77,https://review.opendev.org/431057,[1/11] Refactor test_volume file,"[1/9] Refactor test_volume file  Due to the situation, that we've already had more that 7000 lines of code in this file and it contains different test cases, it is reasonably to divide it into smaller files.  This patch includes test cases that are connected with: 1) Availability zone; 2) Policy  Change-Id: I69ef0601bceb857565f36907eb8811379a5bfb77",testing,,,,,,
openstack%2Fcinder~master~I69ef0601bceb857565f36907eb8811379a5bfb77,https://review.opendev.org/431057,[1/11] Refactor test_volume file,"[1/9] Refactor test_volume file  Due to the situation, that we've already had more that 7000 lines of code in this file and it contains different test cases, it is reasonably to divide it into smaller files.  This patch includes test cases that are connected with: 1) Availability zone; 2) Policy  Change-Id: I69ef0601bceb857565f36907eb8811379a5bfb77",objective,,,,,,
x%2Fnova-lxd~master~I575054422386462df170a0a75fac74fbec6f6086,https://review.opendev.org/411985,Refactor the flavor <-> profile work,"Refactor the flavor <-> profile work  There is a single interface to pass in an instance and get back a matching profile for the instance now: `flavor.to_profile`. It uses a map of functions to generate the config and devices from the instance and network/block device info.  All the unit tests that are added here were added *before* the beginning of the refactor, so there should be no broken functionality in this refactor. Along with that, this increases our test coverage by about 15%.  Change-Id: I575054422386462df170a0a75fac74fbec6f6086",testing,,,,,,
x%2Fnova-lxd~master~I575054422386462df170a0a75fac74fbec6f6086,https://review.opendev.org/411985,Refactor the flavor <-> profile work,"Refactor the flavor <-> profile work  There is a single interface to pass in an instance and get back a matching profile for the instance now: `flavor.to_profile`. It uses a map of functions to generate the config and devices from the instance and network/block device info.  All the unit tests that are added here were added *before* the beginning of the refactor, so there should be no broken functionality in this refactor. Along with that, this increases our test coverage by about 15%.  Change-Id: I575054422386462df170a0a75fac74fbec6f6086",quality,,,,,,
x%2Fnova-lxd~master~I575054422386462df170a0a75fac74fbec6f6086,https://review.opendev.org/411985,Refactor the flavor <-> profile work,"Refactor the flavor <-> profile work  There is a single interface to pass in an instance and get back a matching profile for the instance now: `flavor.to_profile`. It uses a map of functions to generate the config and devices from the instance and network/block device info.  All the unit tests that are added here were added *before* the beginning of the refactor, so there should be no broken functionality in this refactor. Along with that, this increases our test coverage by about 15%.  Change-Id: I575054422386462df170a0a75fac74fbec6f6086",objective,,,,,,
x%2Fnovajoin~master~I6c0b52ed964851eff43c2d3fb209a90f9b1539e4,https://review.opendev.org/427763,Refactor the connection code to be more robust,"Refactor the connection code to be more robust  Remove some duplicated code, handle KerberosError and make get_host_and_realm() a top-level method.  Add integration test for IPA connection code. It must be run manually against a current installation at the moment.  Make the default IPA retry two so we actually do a retr  Change-Id: I6c0b52ed964851eff43c2d3fb209a90f9b1539e4",testing,,,,,,
x%2Fnovajoin~master~I6c0b52ed964851eff43c2d3fb209a90f9b1539e4,https://review.opendev.org/427763,Refactor the connection code to be more robust,"Refactor the connection code to be more robust  Remove some duplicated code, handle KerberosError and make get_host_and_realm() a top-level method.  Add integration test for IPA connection code. It must be run manually against a current installation at the moment.  Make the default IPA retry two so we actually do a retr  Change-Id: I6c0b52ed964851eff43c2d3fb209a90f9b1539e4",quality,,,,,,
x%2Fnovajoin~master~I6c0b52ed964851eff43c2d3fb209a90f9b1539e4,https://review.opendev.org/427763,Refactor the connection code to be more robust,"Refactor the connection code to be more robust  Remove some duplicated code, handle KerberosError and make get_host_and_realm() a top-level method.  Add integration test for IPA connection code. It must be run manually against a current installation at the moment.  Make the default IPA retry two so we actually do a retr  Change-Id: I6c0b52ed964851eff43c2d3fb209a90f9b1539e4",objective,,,,,,
openstack%2Fcinder~master~I047445c9e7e87e1ac0139a73cf50fc0627cd61a9,https://review.opendev.org/378659,Refactor scheduler RPC API test cases,Refactor scheduler RPC API test cases  This commit refactors scheduler RPC API test cases using a generic RPCAPITestCase framework.  Change-Id: I047445c9e7e87e1ac0139a73cf50fc0627cd61a9,testing,,,,,,
openstack%2Fcinder~master~I047445c9e7e87e1ac0139a73cf50fc0627cd61a9,https://review.opendev.org/378659,Refactor scheduler RPC API test cases,Refactor scheduler RPC API test cases  This commit refactors scheduler RPC API test cases using a generic RPCAPITestCase framework.  Change-Id: I047445c9e7e87e1ac0139a73cf50fc0627cd61a9,objective,,,,,,
openstack%2Fcinder~master~Ib6e198d0c6e0287eaa99f2093b1977e3db47f820,https://review.opendev.org/378658,Refactor volume RPC API test cases,Refactore volume RPC API test cases  This commit refactors volume RPC API test cases using a generic RPCAPITestCase framework.  Change-Id: Ib6e198d0c6e0287eaa99f2093b1977e3db47f820,testing,,,,,,
openstack%2Fcinder~master~Ib6e198d0c6e0287eaa99f2093b1977e3db47f820,https://review.opendev.org/378658,Refactor volume RPC API test cases,Refactore volume RPC API test cases  This commit refactors volume RPC API test cases using a generic RPCAPITestCase framework.  Change-Id: Ib6e198d0c6e0287eaa99f2093b1977e3db47f820,objective,,,,,,
openstack%2Fcinder~master~Ie4760d540e44860d599494d504010b8024ea935e,https://review.opendev.org/378585,Refactor backup RPC API test cases,"Refactor backup RPC API test cases  Our RPC API tests definitely need some refactoring. We have 3 different implementations of such TestCase, each going to it's own direction. Moreover these test cases aren't really asserting a lot and give us very little possiblities in writing tests.  This commit initiates refactoring effort with the simplest API - backup. It is moving the test case to a generic cinder.test.RPCAPITestcase class and enhances the checks there. Following commits will repeat the efforts for scheduler and volume RPC APIs.  Change-Id: Ie4760d540e44860d599494d504010b8024ea935e",testing,,,,,,
openstack%2Fcinder~master~Ie4760d540e44860d599494d504010b8024ea935e,https://review.opendev.org/378585,Refactor backup RPC API test cases,"Refactor backup RPC API test cases  Our RPC API tests definitely need some refactoring. We have 3 different implementations of such TestCase, each going to it's own direction. Moreover these test cases aren't really asserting a lot and give us very little possiblities in writing tests.  This commit initiates refactoring effort with the simplest API - backup. It is moving the test case to a generic cinder.test.RPCAPITestcase class and enhances the checks there. Following commits will repeat the efforts for scheduler and volume RPC APIs.  Change-Id: Ie4760d540e44860d599494d504010b8024ea935e",objective,,,,,,
openstack%2Fironic~master~Iddb69520ad8f1f1561fd351ad055c12b338c8fb0,https://review.opendev.org/420106,Refactor DRAC driver boot-device tests,"Refactor DRAC driver boot-device tests  This reduces the amount of copy-and-pasting in the tests, making it more obvious what changes between tests and what each test method is testing. It also makes it easier to extend the tests to handle UEFI-mode boot devices (in a followup patch).  Change-Id: Iddb69520ad8f1f1561fd351ad055c12b338c8fb0",testing,,,,,,
openstack%2Fironic~master~Iddb69520ad8f1f1561fd351ad055c12b338c8fb0,https://review.opendev.org/420106,Refactor DRAC driver boot-device tests,"Refactor DRAC driver boot-device tests  This reduces the amount of copy-and-pasting in the tests, making it more obvious what changes between tests and what each test method is testing. It also makes it easier to extend the tests to handle UEFI-mode boot devices (in a followup patch).  Change-Id: Iddb69520ad8f1f1561fd351ad055c12b338c8fb0",objective,,,,,,
openstack%2Fironic~master~Iddb69520ad8f1f1561fd351ad055c12b338c8fb0,https://review.opendev.org/420106,Refactor DRAC driver boot-device tests,"Refactor DRAC driver boot-device tests  This reduces the amount of copy-and-pasting in the tests, making it more obvious what changes between tests and what each test method is testing. It also makes it easier to extend the tests to handle UEFI-mode boot devices (in a followup patch).  Change-Id: Iddb69520ad8f1f1561fd351ad055c12b338c8fb0",quality,,,,,,
openstack%2Fdragonflow~master~I55edadd0cb6f2d6c4dc5fcec6d8f5bb52d9a5f2a,https://review.opendev.org/393787,Refactor test case for ml2 mech driver(subnet),Refactor test case for ml2 mech driver(subnet)  This patch makes the test case atomic and introduces ml2 test cases.  Change-Id: I55edadd0cb6f2d6c4dc5fcec6d8f5bb52d9a5f2a Partial-Bug: #1633078,testing,,,,,,
openstack%2Fdragonflow~master~I55edadd0cb6f2d6c4dc5fcec6d8f5bb52d9a5f2a,https://review.opendev.org/393787,Refactor test case for ml2 mech driver(subnet),Refactor test case for ml2 mech driver(subnet)  This patch makes the test case atomic and introduces ml2 test cases.  Change-Id: I55edadd0cb6f2d6c4dc5fcec6d8f5bb52d9a5f2a Partial-Bug: #1633078,objective,,,,,,
openstack%2Fdragonflow~master~Idcbe4d07f38741cfbb69a12aea5df1b35d466c14,https://review.opendev.org/393773,Refactor test case for ml2 mech driver(port),Refactor test case for ml2 mech driver(port)  This patch makes the test case atomic and introduces ml2 test cases.  Change-Id: Idcbe4d07f38741cfbb69a12aea5df1b35d466c14 Partial-Bug: #1633078,testing,,,,,,
openstack%2Fdragonflow~master~Idcbe4d07f38741cfbb69a12aea5df1b35d466c14,https://review.opendev.org/393773,Refactor test case for ml2 mech driver(port),Refactor test case for ml2 mech driver(port)  This patch makes the test case atomic and introduces ml2 test cases.  Change-Id: Idcbe4d07f38741cfbb69a12aea5df1b35d466c14 Partial-Bug: #1633078,objective,,,,,,
openstack%2Ffuel-library~stable%2Fnewton~I876ab09d687916195dcb82633f0242fc823c0357,https://review.opendev.org/416206,Refactor rabbitmq ordering,Refactor rabbitmq ordering  - Refactor Service_status['rabbitmq'] in pacemaker and non pacemaker   mode. As a part cmd_check was changed to 'rabbitmqctl   node_health_check && rabbitmqctl cluster_status' as cluster_status may   fail due to issues on other nodes. Also it doesn't have timeout thus   operation may hang up. Instead node_health_check will check the node   and check cluster on success. - Staging::File as MODULES-1650 has been merged - Specify ordering between rabbitmq_user_permissions and rabbitmq_user - Write test that verifies that service is before the actual user  Change-Id: I876ab09d687916195dcb82633f0242fc823c0357 Closes-Bug: #1652268 Signed-off-by: Sergii Golovatiuk <sgolovatiuk@mirantis.com>,testing,,,,,,
openstack%2Ffuel-library~stable%2Fnewton~I876ab09d687916195dcb82633f0242fc823c0357,https://review.opendev.org/416206,Refactor rabbitmq ordering,Refactor rabbitmq ordering  - Refactor Service_status['rabbitmq'] in pacemaker and non pacemaker   mode. As a part cmd_check was changed to 'rabbitmqctl   node_health_check && rabbitmqctl cluster_status' as cluster_status may   fail due to issues on other nodes. Also it doesn't have timeout thus   operation may hang up. Instead node_health_check will check the node   and check cluster on success. - Staging::File as MODULES-1650 has been merged - Specify ordering between rabbitmq_user_permissions and rabbitmq_user - Write test that verifies that service is before the actual user  Change-Id: I876ab09d687916195dcb82633f0242fc823c0357 Closes-Bug: #1652268 Signed-off-by: Sergii Golovatiuk <sgolovatiuk@mirantis.com>,objective,,,,,,
openstack%2Ffuel-library~stable%2Fnewton~I876ab09d687916195dcb82633f0242fc823c0357,https://review.opendev.org/416206,Refactor rabbitmq ordering,Refactor rabbitmq ordering  - Refactor Service_status['rabbitmq'] in pacemaker and non pacemaker   mode. As a part cmd_check was changed to 'rabbitmqctl   node_health_check && rabbitmqctl cluster_status' as cluster_status may   fail due to issues on other nodes. Also it doesn't have timeout thus   operation may hang up. Instead node_health_check will check the node   and check cluster on success. - Staging::File as MODULES-1650 has been merged - Specify ordering between rabbitmq_user_permissions and rabbitmq_user - Write test that verifies that service is before the actual user  Change-Id: I876ab09d687916195dcb82633f0242fc823c0357 Closes-Bug: #1652268 Signed-off-by: Sergii Golovatiuk <sgolovatiuk@mirantis.com>,integration,,,,,,
openstack%2Ffuel-library~master~I876ab09d687916195dcb82633f0242fc823c0357,https://review.opendev.org/414627,Refactor rabbitmq ordering,Refactor rabbitmq ordifing  - Refactor Service_status['rabbitmq'] in pacemaker and non pacemaker   mode. As a part cmd_check was changed to 'rabbitmqctl   node_health_check && rabbitmqctl cluster_status' as cluster_status may   fail due to issues on other nodes. Also it doesn't have timeout thus   operation may hang up. Instead node_health_check will check the node   and check cluster on success. - Staging::File as MODULES-1650 has been merged - Specify ordering between rabbitmq_user_permissions and rabbitmq_user - Write test that verifies that service is before the actual user  Change-Id: I876ab09d687916195dcb82633f0242fc823c0357 Closes-Bug: #1652268,testing,,,,,,
openstack%2Ffuel-library~master~I876ab09d687916195dcb82633f0242fc823c0357,https://review.opendev.org/414627,Refactor rabbitmq ordering,Refactor rabbitmq ordifing  - Refactor Service_status['rabbitmq'] in pacemaker and non pacemaker   mode. As a part cmd_check was changed to 'rabbitmqctl   node_health_check && rabbitmqctl cluster_status' as cluster_status may   fail due to issues on other nodes. Also it doesn't have timeout thus   operation may hang up. Instead node_health_check will check the node   and check cluster on success. - Staging::File as MODULES-1650 has been merged - Specify ordering between rabbitmq_user_permissions and rabbitmq_user - Write test that verifies that service is before the actual user  Change-Id: I876ab09d687916195dcb82633f0242fc823c0357 Closes-Bug: #1652268,objective,,,,,,
openstack%2Ffuel-library~master~I876ab09d687916195dcb82633f0242fc823c0357,https://review.opendev.org/414627,Refactor rabbitmq ordering,Refactor rabbitmq ordifing  - Refactor Service_status['rabbitmq'] in pacemaker and non pacemaker   mode. As a part cmd_check was changed to 'rabbitmqctl   node_health_check && rabbitmqctl cluster_status' as cluster_status may   fail due to issues on other nodes. Also it doesn't have timeout thus   operation may hang up. Instead node_health_check will check the node   and check cluster on success. - Staging::File as MODULES-1650 has been merged - Specify ordering between rabbitmq_user_permissions and rabbitmq_user - Write test that verifies that service is before the actual user  Change-Id: I876ab09d687916195dcb82633f0242fc823c0357 Closes-Bug: #1652268,integration,,,,,,
openstack%2Fdragonflow~master~Ie8ff371bf00256ec4b279525daae3965ab82609a,https://review.opendev.org/393750,Refactor test case for ml2 mech driver(qos),Refactor test case for ml2 mech driver(qos)  This patch makes the test case atomic.  Change-Id: Ie8ff371bf00256ec4b279525daae3965ab82609a Partial-Bug: #1633078,testing,,,,,,
openstack%2Fdragonflow~master~Ie8ff371bf00256ec4b279525daae3965ab82609a,https://review.opendev.org/393750,Refactor test case for ml2 mech driver(qos),Refactor test case for ml2 mech driver(qos)  This patch makes the test case atomic.  Change-Id: Ie8ff371bf00256ec4b279525daae3965ab82609a Partial-Bug: #1633078,objective,,,,,,
openstack%2Fos-vif~master~I3fdbea4f48cb79ebfd03a4da21e2232ccafb7a76,https://review.opendev.org/746673,Refactor code of linux_net to more cleaner and increase performace,"Update linux_net - Refactor code of linux_net to more cleaner and increase performace  This patch introduce new function '_get_phys_port_name' for reading physical port name of the SR-IOV port, and refactors 'get_representor_port' to use the new function and decrease calls for ""_get_pf_func"".  In addition to updating the unit test for linux_net and remove not needed mocks  Change-Id: I3fdbea4f48cb79ebfd03a4da21e2232ccafb7a76",testing,,,,,,
openstack%2Fos-vif~master~I3fdbea4f48cb79ebfd03a4da21e2232ccafb7a76,https://review.opendev.org/746673,Refactor code of linux_net to more cleaner and increase performace,"Update linux_net - Refactor code of linux_net to more cleaner and increase performace  This patch introduce new function '_get_phys_port_name' for reading physical port name of the SR-IOV port, and refactors 'get_representor_port' to use the new function and decrease calls for ""_get_pf_func"".  In addition to updating the unit test for linux_net and remove not needed mocks  Change-Id: I3fdbea4f48cb79ebfd03a4da21e2232ccafb7a76",quality,,,,,,
openstack%2Fos-vif~master~I3fdbea4f48cb79ebfd03a4da21e2232ccafb7a76,https://review.opendev.org/746673,Refactor code of linux_net to more cleaner and increase performace,"Update linux_net - Refactor code of linux_net to more cleaner and increase performace  This patch introduce new function '_get_phys_port_name' for reading physical port name of the SR-IOV port, and refactors 'get_representor_port' to use the new function and decrease calls for ""_get_pf_func"".  In addition to updating the unit test for linux_net and remove not needed mocks  Change-Id: I3fdbea4f48cb79ebfd03a4da21e2232ccafb7a76",objective,,,,,,
x%2Fcollectd-openstack-plugins~master~I5bd0a8cfe8eb55407f3d6827c0bb4b509dae8c8c,https://review.opendev.org/389286,Refactor directory structure for multiple plugins,"Refactor directory structure for multiple plugins  - Add collectd_ceilometer.ceilometer dir - Add collectd_ceilometer.common dir - Move test files to collectd_ceilometer/tests/{ceilometer,common} - Add base code to collectd_ceilometer/tests  Change-Id: I5bd0a8cfe8eb55407f3d6827c0bb4b509dae8c8c",testing,,,,,,
x%2Fcollectd-openstack-plugins~master~I5bd0a8cfe8eb55407f3d6827c0bb4b509dae8c8c,https://review.opendev.org/389286,Refactor directory structure for multiple plugins,"Refactor directory structure for multiple plugins  - Add collectd_ceilometer.ceilometer dir - Add collectd_ceilometer.common dir - Move test files to collectd_ceilometer/tests/{ceilometer,common} - Add base code to collectd_ceilometer/tests  Change-Id: I5bd0a8cfe8eb55407f3d6827c0bb4b509dae8c8c",objective,,,,,,
x%2Fcollectd-openstack-plugins~master~I5bd0a8cfe8eb55407f3d6827c0bb4b509dae8c8c,https://review.opendev.org/389286,Refactor directory structure for multiple plugins,"Refactor directory structure for multiple plugins  - Add collectd_ceilometer.ceilometer dir - Add collectd_ceilometer.common dir - Move test files to collectd_ceilometer/tests/{ceilometer,common} - Add base code to collectd_ceilometer/tests  Change-Id: I5bd0a8cfe8eb55407f3d6827c0bb4b509dae8c8c",quality,,,,,,
x%2Ffuel-ccp-tests~master~I27eb98e46978205f4a4e9769e368d4720e2f8b55,https://review.opendev.org/408147,Refactor fixtures that check required files and settings,"Refactor fixtures that check required files and settings  Refactor those fixtures in a more general way, so they can be used in any test, not only netchecker one. Just set class variables required_files and required_settings to use them In that way all required files and settings will be in the test class, and not in the fixture itself.  Change-Id: I27eb98e46978205f4a4e9769e368d4720e2f8b55",testing,,,,,,
x%2Ffuel-ccp-tests~master~I27eb98e46978205f4a4e9769e368d4720e2f8b55,https://review.opendev.org/408147,Refactor fixtures that check required files and settings,"Refactor fixtures that check required files and settings  Refactor those fixtures in a more general way, so they can be used in any test, not only netchecker one. Just set class variables required_files and required_settings to use them In that way all required files and settings will be in the test class, and not in the fixture itself.  Change-Id: I27eb98e46978205f4a4e9769e368d4720e2f8b55",objective,,,,,,
x%2Ffuel-ccp-tests~master~I27eb98e46978205f4a4e9769e368d4720e2f8b55,https://review.opendev.org/408147,Refactor fixtures that check required files and settings,"Refactor fixtures that check required files and settings  Refactor those fixtures in a more general way, so they can be used in any test, not only netchecker one. Just set class variables required_files and required_settings to use them In that way all required files and settings will be in the test class, and not in the fixture itself.  Change-Id: I27eb98e46978205f4a4e9769e368d4720e2f8b55",quality,,,,,,
x%2Fcollectd-openstack-plugins~master~I4db8a94243ecbe98cd6bc13e4b66293172346dcd,https://review.opendev.org/357433,Refactor and test main entry point.,WIP: Refactor and test main entry point.  Change-Id: I4db8a94243ecbe98cd6bc13e4b66293172346dcd,testing,,,,,,
x%2Franger-tempest-plugin~master~Icd8a6417d9c0cd328bda9c6412e43851574f268c,https://review.opendev.org/755596,Refactor image test cases for shared images,Refactor image test cases for shared images  Change-Id: Icd8a6417d9c0cd328bda9c6412e43851574f268c,testing,,,,,,
openstack%2Fdragonflow~master~Id218d611c02691bfbbd57676ac9c2e46beea7060,https://review.opendev.org/401191,refactor redis unit test code,refactor redis unit test code  Change-Id: Id218d611c02691bfbbd57676ac9c2e46beea7060 Closes-bug: #1643443,testing,,,,,,
openstack%2Fkeystone~master~I982fcead0f6cb89a13057ee5275087d2e32612cc,https://review.opendev.org/399937,refactor notification test to work with either format,"refactor notification test to work with either format  The _test_notification_operation function only works with the `basic` notification format.  For the `cadf` format to work, it is necessary to mock the _create_cadf_payload call.  Change-Id: I982fcead0f6cb89a13057ee5275087d2e32612cc Related-Bug: #1641660",testing,,,,,,
openstack%2Fkeystone~master~I982fcead0f6cb89a13057ee5275087d2e32612cc,https://review.opendev.org/399937,refactor notification test to work with either format,"refactor notification test to work with either format  The _test_notification_operation function only works with the `basic` notification format.  For the `cadf` format to work, it is necessary to mock the _create_cadf_payload call.  Change-Id: I982fcead0f6cb89a13057ee5275087d2e32612cc Related-Bug: #1641660",objective,,,,,,
airship%2Fairshipctl~master~Ia811887b684b2129ca30dd90b5afc72e726271ff,https://review.opendev.org/746844,Refactor cluster status command,"Refactor cluster status command  This patch moves all cluster status functionality from cmd level to pkg level as well as unit tests, making code cleaner and improving actual test coverage.  Change-Id: Ia811887b684b2129ca30dd90b5afc72e726271ff Signed-off-by: Ruslan Aliev <raliev@mirantis.com>",testing,,,,,,
airship%2Fairshipctl~master~Ia811887b684b2129ca30dd90b5afc72e726271ff,https://review.opendev.org/746844,Refactor cluster status command,"Refactor cluster status command  This patch moves all cluster status functionality from cmd level to pkg level as well as unit tests, making code cleaner and improving actual test coverage.  Change-Id: Ia811887b684b2129ca30dd90b5afc72e726271ff Signed-off-by: Ruslan Aliev <raliev@mirantis.com>",objective,,,,,,
airship%2Fairshipctl~master~Ia811887b684b2129ca30dd90b5afc72e726271ff,https://review.opendev.org/746844,Refactor cluster status command,"Refactor cluster status command  This patch moves all cluster status functionality from cmd level to pkg level as well as unit tests, making code cleaner and improving actual test coverage.  Change-Id: Ia811887b684b2129ca30dd90b5afc72e726271ff Signed-off-by: Ruslan Aliev <raliev@mirantis.com>",quality,,,,,,
openstack%2Fpython-keystoneclient~master~Idb894da724e252b01405fc937c021fd8981ee090,https://review.opendev.org/398407,Refactor test_domain_configs,"Refactor test_domain_configs  Do not reuse the environment domain, create a new one to be fully controlled by the test cases.  Change-Id: Idb894da724e252b01405fc937c021fd8981ee090",testing,,,,,,
openstack%2Fpython-keystoneclient~master~Idb894da724e252b01405fc937c021fd8981ee090,https://review.opendev.org/398407,Refactor test_domain_configs,"Refactor test_domain_configs  Do not reuse the environment domain, create a new one to be fully controlled by the test cases.  Change-Id: Idb894da724e252b01405fc937c021fd8981ee090",objective,,,,,,
openstack%2Fpython-keystoneclient~master~Idb894da724e252b01405fc937c021fd8981ee090,https://review.opendev.org/398407,Refactor test_domain_configs,"Refactor test_domain_configs  Do not reuse the environment domain, create a new one to be fully controlled by the test cases.  Change-Id: Idb894da724e252b01405fc937c021fd8981ee090",quality,,,,,,
openstack%2Fdragonflow~master~I6ff8e2a6b5048195166b55a731f324fce3e8c7e7,https://review.opendev.org/393674,Refactor test case for ml2 mech driver(remote port),Refactor test case for ml2 mech driver(remote port)  This patch makes the test case atomic.  Change-Id: I6ff8e2a6b5048195166b55a731f324fce3e8c7e7 Partial-Bug: #1633078,testing,,,,,,
openstack%2Fdragonflow~master~I6ff8e2a6b5048195166b55a731f324fce3e8c7e7,https://review.opendev.org/393674,Refactor test case for ml2 mech driver(remote port),Refactor test case for ml2 mech driver(remote port)  This patch makes the test case atomic.  Change-Id: I6ff8e2a6b5048195166b55a731f324fce3e8c7e7 Partial-Bug: #1633078,objective,,,,,,
x%2Fpython-cratonclient~master~Ibd6a36714135d14355c3b4f48fced83b852581a9,https://review.opendev.org/392298,Refactor shell unittests and add hosts shell tests,Refactor shell unittests and add hosts shell tests  This refactors our shell unittest helpers into three base classes for further unit test classes to subclass and extend. This also corrects some problems with the hosts shell parameters that either didn't previous work or were wrong and no longer belong.  Change-Id: Ibd6a36714135d14355c3b4f48fced83b852581a9,testing,,,,,,
x%2Fpython-cratonclient~master~Ibd6a36714135d14355c3b4f48fced83b852581a9,https://review.opendev.org/392298,Refactor shell unittests and add hosts shell tests,Refactor shell unittests and add hosts shell tests  This refactors our shell unittest helpers into three base classes for further unit test classes to subclass and extend. This also corrects some problems with the hosts shell parameters that either didn't previous work or were wrong and no longer belong.  Change-Id: Ibd6a36714135d14355c3b4f48fced83b852581a9,quality,,,,,,
x%2Fpython-cratonclient~master~Ibd6a36714135d14355c3b4f48fced83b852581a9,https://review.opendev.org/392298,Refactor shell unittests and add hosts shell tests,Refactor shell unittests and add hosts shell tests  This refactors our shell unittest helpers into three base classes for further unit test classes to subclass and extend. This also corrects some problems with the hosts shell parameters that either didn't previous work or were wrong and no longer belong.  Change-Id: Ibd6a36714135d14355c3b4f48fced83b852581a9,objective,,,,,,
openstack%2Fdragonflow~master~I9b4cc2ef34dc9b196f50a0cf3846566a0aa034b0,https://review.opendev.org/392133,Refactor test case for ml2 mech driver(port security),Refactor test case for ml2 mech driver(port security)  This patch makes the test case atomic and introduces ml2 test cases.  Change-Id: I9b4cc2ef34dc9b196f50a0cf3846566a0aa034b0 Partial-Bug: #1633078,testing,,,,,,
openstack%2Fdragonflow~master~I9b4cc2ef34dc9b196f50a0cf3846566a0aa034b0,https://review.opendev.org/392133,Refactor test case for ml2 mech driver(port security),Refactor test case for ml2 mech driver(port security)  This patch makes the test case atomic and introduces ml2 test cases.  Change-Id: I9b4cc2ef34dc9b196f50a0cf3846566a0aa034b0 Partial-Bug: #1633078,objective,,,,,,
openstack%2Fdragonflow~master~I82e138a493407e8059c800eabc6488b4f603c1dd,https://review.opendev.org/386325,Refactor test case for ml2 mech driver(allow address pair),Refactor test case for ml2 mech driver(allow address pair)  This patch makes the test case atomic and introduces ml2 test cases.  Change-Id: I82e138a493407e8059c800eabc6488b4f603c1dd Partial-Bug: #1633078,testing,,,,,,
openstack%2Fdragonflow~master~I82e138a493407e8059c800eabc6488b4f603c1dd,https://review.opendev.org/386325,Refactor test case for ml2 mech driver(allow address pair),Refactor test case for ml2 mech driver(allow address pair)  This patch makes the test case atomic and introduces ml2 test cases.  Change-Id: I82e138a493407e8059c800eabc6488b4f603c1dd Partial-Bug: #1633078,objective,,,,,,
openstack%2Fcinder~master~Ieb6137cb1cb3ec1c6e4e9d51fa0f74f17e363be9,https://review.opendev.org/355323,[Trivial] Refactor the using of dict.get() in the test assertion,"Refactor the using of dict.get() in the test assertion  In this patch, we will refactor the test assertions in which there are dict.get(key), with a explicit way(i.e. dict[key]), or assert the existence of key directly with assertNotIn().  Change-Id: Ieb6137cb1cb3ec1c6e4e9d51fa0f74f17e363be9 Partial-Bug: #1613154",testing,,,,,,
openstack%2Fcinder~master~Ieb6137cb1cb3ec1c6e4e9d51fa0f74f17e363be9,https://review.opendev.org/355323,[Trivial] Refactor the using of dict.get() in the test assertion,"Refactor the using of dict.get() in the test assertion  In this patch, we will refactor the test assertions in which there are dict.get(key), with a explicit way(i.e. dict[key]), or assert the existence of key directly with assertNotIn().  Change-Id: Ieb6137cb1cb3ec1c6e4e9d51fa0f74f17e363be9 Partial-Bug: #1613154",objective,,,,,,
openstack%2Fcinder~master~Ieb6137cb1cb3ec1c6e4e9d51fa0f74f17e363be9,https://review.opendev.org/355323,[Trivial] Refactor the using of dict.get() in the test assertion,"Refactor the using of dict.get() in the test assertion  In this patch, we will refactor the test assertions in which there are dict.get(key), with a explicit way(i.e. dict[key]), or assert the existence of key directly with assertNotIn().  Change-Id: Ieb6137cb1cb3ec1c6e4e9d51fa0f74f17e363be9 Partial-Bug: #1613154",quality,,,,,,
openstack%2Fnova~master~Ic39d60327a1296e8c8532a4b3330a410a8527e25,https://review.opendev.org/268800,Refactor and objectify flavor fakes used in api tests,Refactor and objectify flavor fakes used in api tests  This change reworks a lot of the flavor related fakes used in api tests and move them into the common fakes module for reuse between different test modules.  Change-Id: Ic39d60327a1296e8c8532a4b3330a410a8527e25,testing,,,,,,
openstack%2Fnova~master~Ic39d60327a1296e8c8532a4b3330a410a8527e25,https://review.opendev.org/268800,Refactor and objectify flavor fakes used in api tests,Refactor and objectify flavor fakes used in api tests  This change reworks a lot of the flavor related fakes used in api tests and move them into the common fakes module for reuse between different test modules.  Change-Id: Ic39d60327a1296e8c8532a4b3330a410a8527e25,objective,,,,,,
openstack%2Fnova~master~Ic39d60327a1296e8c8532a4b3330a410a8527e25,https://review.opendev.org/268800,Refactor and objectify flavor fakes used in api tests,Refactor and objectify flavor fakes used in api tests  This change reworks a lot of the flavor related fakes used in api tests and move them into the common fakes module for reuse between different test modules.  Change-Id: Ic39d60327a1296e8c8532a4b3330a410a8527e25,quality,,,,,,
openstack%2Fpuppet-nova~master~I199b2c1e368c75e13af419ff0d268ef1edb7ac53,https://review.opendev.org/752369,Refactor unit tests for the nova::compute class,Refactor unit tests for the nova::compute class  ... and add some missing test cases.  Change-Id: I199b2c1e368c75e13af419ff0d268ef1edb7ac53,testing,,,,,,
openstack%2Fpython-openstackclient~master~Ia76bf41a911457282b293dfaf0af311b1a9194ce,https://review.opendev.org/381909,Refactor qos spec unit test in volume v1,Refactor qos spec unit test in volume v1  Refactor qos spec unit test with FakeQos class in volume v1.  Change-Id: Ia76bf41a911457282b293dfaf0af311b1a9194ce,testing,,,,,,
x%2Fgit-upstream~master~I46a27281f3f0c01848a388ad05302599f4eff1c9,https://review.opendev.org/377913,Refactor test to allow additional,Refactor test to allow additional  Adjust unit test checking to make way for additional tests to be added to the same class while ensuring can verify the resulting tree while different commit messages may be recorded.  Ensure separate parser is created for each test to prevent ensure the 'search_refs' option is isolated per test scenario as otherwise each scenario will append entries as it is set on the class.  These lay the ground work to adding tests to check that git-upstream can work with SHA1 and tags as inputs in addition to branches.  Change-Id: I46a27281f3f0c01848a388ad05302599f4eff1c9 Related-Bug: #1547180,testing,,,,,,
x%2Fgit-upstream~master~I46a27281f3f0c01848a388ad05302599f4eff1c9,https://review.opendev.org/377913,Refactor test to allow additional,Refactor test to allow additional  Adjust unit test checking to make way for additional tests to be added to the same class while ensuring can verify the resulting tree while different commit messages may be recorded.  Ensure separate parser is created for each test to prevent ensure the 'search_refs' option is isolated per test scenario as otherwise each scenario will append entries as it is set on the class.  These lay the ground work to adding tests to check that git-upstream can work with SHA1 and tags as inputs in addition to branches.  Change-Id: I46a27281f3f0c01848a388ad05302599f4eff1c9 Related-Bug: #1547180,objective,,,,,,
openstack%2Ftacker~master~Iee231428b7f30c4710b264e73ba71b5d5a4f84bb,https://review.opendev.org/363351,Device refactor part4: rename vm plugin and db into vnfm plugin and db,Device refactor part4: move plugin and db to right directory  Next part is planned to move test cases.  Change-Id: Iee231428b7f30c4710b264e73ba71b5d5a4f84bb Partial-bug: #1589018,testing,,,,,,
openstack%2Ftacker~master~Iee231428b7f30c4710b264e73ba71b5d5a4f84bb,https://review.opendev.org/363351,Device refactor part4: rename vm plugin and db into vnfm plugin and db,Device refactor part4: move plugin and db to right directory  Next part is planned to move test cases.  Change-Id: Iee231428b7f30c4710b264e73ba71b5d5a4f84bb Partial-bug: #1589018,objective,,,,,,
openstack%2Fpython-openstackclient~master~Ic3c1a46d5bff9048d0095f5739ae9e5a34ca6b5b,https://review.opendev.org/373732,Refactor volume unit test with FakeVolume class in volume v1,"Refactor volume unit test with FakeVolume class in volume v1  FakeVolume class has been added in the fake.py in volume v1, this patch refactors the volume command unit tests with the FakeVolume class.  Change-Id: Ic3c1a46d5bff9048d0095f5739ae9e5a34ca6b5b",testing,,,,,,
openstack%2Fpython-openstackclient~master~Ic3c1a46d5bff9048d0095f5739ae9e5a34ca6b5b,https://review.opendev.org/373732,Refactor volume unit test with FakeVolume class in volume v1,"Refactor volume unit test with FakeVolume class in volume v1  FakeVolume class has been added in the fake.py in volume v1, this patch refactors the volume command unit tests with the FakeVolume class.  Change-Id: Ic3c1a46d5bff9048d0095f5739ae9e5a34ca6b5b",objective,,,,,,
openstack%2Fneutron~master~Id1ca4ce7b134d9729e68661cedb2f5556e58d6ff,https://review.opendev.org/366052,tests: refactor objects test cases to use db models instead of dicts,"tests: refactor objects test cases to use db models instead of dicts  This should reflect the code under test better, and is needed for one of patches in the review queue (I130609194f15b89df89e5606fb8193849edd14d8) to pass some of those test cases.  Change-Id: Id1ca4ce7b134d9729e68661cedb2f5556e58d6ff",integration,,,,,,
openstack%2Fneutron~master~Id1ca4ce7b134d9729e68661cedb2f5556e58d6ff,https://review.opendev.org/366052,tests: refactor objects test cases to use db models instead of dicts,"tests: refactor objects test cases to use db models instead of dicts  This should reflect the code under test better, and is needed for one of patches in the review queue (I130609194f15b89df89e5606fb8193849edd14d8) to pass some of those test cases.  Change-Id: Id1ca4ce7b134d9729e68661cedb2f5556e58d6ff",testing,,,,,,
openstack%2Fneutron~master~Id1ca4ce7b134d9729e68661cedb2f5556e58d6ff,https://review.opendev.org/366052,tests: refactor objects test cases to use db models instead of dicts,"tests: refactor objects test cases to use db models instead of dicts  This should reflect the code under test better, and is needed for one of patches in the review queue (I130609194f15b89df89e5606fb8193849edd14d8) to pass some of those test cases.  Change-Id: Id1ca4ce7b134d9729e68661cedb2f5556e58d6ff",objective,,,,,,
openstack%2Felection~master~Ibd7fad3eb4d39f1edca624b981fa602d2b4c4d40,https://review.opendev.org/366484,Refactor candidacy checking tools,"Refactor candidacy checkign tools  This is a large chnage as it does several things  1. Moves to using the gerrit REST API to collecting open reviews (as    opposed to ssh 2. Moves the selection of validating commits from scraping git logs to    the gerrit REST API 3. Uses the new utils.py function for getting the project data 4. Avoids any git checkouts/downloads during the validation process 5. tools/check-new-candidacy still checks all open changes 6. tools/check-ptl-candidacy.py checks a single change, now specified as    a change ID rather then a file path  Work to be done in follow-up commits  1. Add testing, now that this is more modular we can mock json blobs to    test code and avoid regressions 2. Add a manual toll to specify a project and community member and check    that, even if it doesn't match data in an open review 3. Add quality tools such as flake8 / yamllint to keep code/data neat 4. Modify the docs generation to understand that files are now IRC nicks    and to get thw chnage author as the candidate.  Change-Id: Ibd7fad3eb4d39f1edca624b981fa602d2b4c4d40",testing,,,,,,
openstack%2Felection~master~Ibd7fad3eb4d39f1edca624b981fa602d2b4c4d40,https://review.opendev.org/366484,Refactor candidacy checking tools,"Refactor candidacy checkign tools  This is a large chnage as it does several things  1. Moves to using the gerrit REST API to collecting open reviews (as    opposed to ssh 2. Moves the selection of validating commits from scraping git logs to    the gerrit REST API 3. Uses the new utils.py function for getting the project data 4. Avoids any git checkouts/downloads during the validation process 5. tools/check-new-candidacy still checks all open changes 6. tools/check-ptl-candidacy.py checks a single change, now specified as    a change ID rather then a file path  Work to be done in follow-up commits  1. Add testing, now that this is more modular we can mock json blobs to    test code and avoid regressions 2. Add a manual toll to specify a project and community member and check    that, even if it doesn't match data in an open review 3. Add quality tools such as flake8 / yamllint to keep code/data neat 4. Modify the docs generation to understand that files are now IRC nicks    and to get thw chnage author as the candidate.  Change-Id: Ibd7fad3eb4d39f1edca624b981fa602d2b4c4d40",integration,,,,,,
openstack%2Felection~master~Ibd7fad3eb4d39f1edca624b981fa602d2b4c4d40,https://review.opendev.org/366484,Refactor candidacy checking tools,"Refactor candidacy checkign tools  This is a large chnage as it does several things  1. Moves to using the gerrit REST API to collecting open reviews (as    opposed to ssh 2. Moves the selection of validating commits from scraping git logs to    the gerrit REST API 3. Uses the new utils.py function for getting the project data 4. Avoids any git checkouts/downloads during the validation process 5. tools/check-new-candidacy still checks all open changes 6. tools/check-ptl-candidacy.py checks a single change, now specified as    a change ID rather then a file path  Work to be done in follow-up commits  1. Add testing, now that this is more modular we can mock json blobs to    test code and avoid regressions 2. Add a manual toll to specify a project and community member and check    that, even if it doesn't match data in an open review 3. Add quality tools such as flake8 / yamllint to keep code/data neat 4. Modify the docs generation to understand that files are now IRC nicks    and to get thw chnage author as the candidate.  Change-Id: Ibd7fad3eb4d39f1edca624b981fa602d2b4c4d40",objective,,,,,,
openstack%2Ftacker~master~Ia23564990fe6070c5f9163618688bfcab4dc87de,https://review.opendev.org/366479,Refactor Tacker unit tests to remove xml support,"Refactor Tacker unit tests to remove xml support  In part of test refactoring, removing xml support form tacker/tests/unit and tacker/api  Change-Id: Ia23564990fe6070c5f9163618688bfcab4dc87de Partial-Bug: #1579167",testing,,,,,,
openstack%2Ftacker~master~Ia23564990fe6070c5f9163618688bfcab4dc87de,https://review.opendev.org/366479,Refactor Tacker unit tests to remove xml support,"Refactor Tacker unit tests to remove xml support  In part of test refactoring, removing xml support form tacker/tests/unit and tacker/api  Change-Id: Ia23564990fe6070c5f9163618688bfcab4dc87de Partial-Bug: #1579167",objective,,,,,,
opendev%2Fgit-review~master~I554b4aa4f07fe4230c11d3ae62a77acbd66e7d84,https://review.opendev.org/308476,Refactor Isolated Env to use in unit tests,Refactor Isolated Env to use in unit tests  Refactor the setup of the Environment and base test directories to allow the same settings to be applied to the unit tests.  Change-Id: I554b4aa4f07fe4230c11d3ae62a77acbd66e7d84,testing,,,,,,
opendev%2Fgit-review~master~I554b4aa4f07fe4230c11d3ae62a77acbd66e7d84,https://review.opendev.org/308476,Refactor Isolated Env to use in unit tests,Refactor Isolated Env to use in unit tests  Refactor the setup of the Environment and base test directories to allow the same settings to be applied to the unit tests.  Change-Id: I554b4aa4f07fe4230c11d3ae62a77acbd66e7d84,objective,,,,,,
opendev%2Fgit-review~master~I554b4aa4f07fe4230c11d3ae62a77acbd66e7d84,https://review.opendev.org/308476,Refactor Isolated Env to use in unit tests,Refactor Isolated Env to use in unit tests  Refactor the setup of the Environment and base test directories to allow the same settings to be applied to the unit tests.  Change-Id: I554b4aa4f07fe4230c11d3ae62a77acbd66e7d84,quality,,,,,,
openstack%2Fnova~master~I83af64689c26fb8b825c0f1abf81821bbaacb2ac,https://review.opendev.org/342944,Refactor instance action notification sample test,Refactor instance action notification sample test  Every instance action notification sample test needs an instance to work with. Until now each test booted a new instance. This patch refactors the tests to use a common instance where it is possible.  This optimization speeds up the test execution significantly. Before the commit:   Sum of execute time for each test: 151.7733 sec.  After the commit:   Sum of execute time for each test: 74.7535 sec.  Please note that only 6 actions are tested right now but there will be ~40 when every notification is transformed so this will give use speed in the future as well.  Change-Id: I83af64689c26fb8b825c0f1abf81821bbaacb2ac,testing,,,,,,
openstack%2Fnova~master~I83af64689c26fb8b825c0f1abf81821bbaacb2ac,https://review.opendev.org/342944,Refactor instance action notification sample test,Refactor instance action notification sample test  Every instance action notification sample test needs an instance to work with. Until now each test booted a new instance. This patch refactors the tests to use a common instance where it is possible.  This optimization speeds up the test execution significantly. Before the commit:   Sum of execute time for each test: 151.7733 sec.  After the commit:   Sum of execute time for each test: 74.7535 sec.  Please note that only 6 actions are tested right now but there will be ~40 when every notification is transformed so this will give use speed in the future as well.  Change-Id: I83af64689c26fb8b825c0f1abf81821bbaacb2ac,quality,,,,,,
openstack%2Fnova~master~I83af64689c26fb8b825c0f1abf81821bbaacb2ac,https://review.opendev.org/342944,Refactor instance action notification sample test,Refactor instance action notification sample test  Every instance action notification sample test needs an instance to work with. Until now each test booted a new instance. This patch refactors the tests to use a common instance where it is possible.  This optimization speeds up the test execution significantly. Before the commit:   Sum of execute time for each test: 151.7733 sec.  After the commit:   Sum of execute time for each test: 74.7535 sec.  Please note that only 6 actions are tested right now but there will be ~40 when every notification is transformed so this will give use speed in the future as well.  Change-Id: I83af64689c26fb8b825c0f1abf81821bbaacb2ac,objective,,,,,,
openstack%2Fnova~master~I8a8dea0c8e2bcc689a7141bca53a1564325939bc,https://review.opendev.org/352610,rt: Refactor unit test for trackable migrations,"rt: Refactor unit test for trackable migrations  There was a functional test in test_resource_tracker.py call test_no_move_type() that was setting up a resource tracker instance and populating it only to test whether the migration's migration_type was one of three that are tracked by the resource tracker.  This was silly, so I converted this into a real unit test, derived from NoDBTestCase, in test_tracker.py and converted the _is_trackable_migration() method on ResourceTracker to just be a module-level method since it wasn't referencing self or anything.  Change-Id: I8a8dea0c8e2bcc689a7141bca53a1564325939bc",testing,,,,,,
openstack%2Fnova~master~I8a8dea0c8e2bcc689a7141bca53a1564325939bc,https://review.opendev.org/352610,rt: Refactor unit test for trackable migrations,"rt: Refactor unit test for trackable migrations  There was a functional test in test_resource_tracker.py call test_no_move_type() that was setting up a resource tracker instance and populating it only to test whether the migration's migration_type was one of three that are tracked by the resource tracker.  This was silly, so I converted this into a real unit test, derived from NoDBTestCase, in test_tracker.py and converted the _is_trackable_migration() method on ResourceTracker to just be a module-level method since it wasn't referencing self or anything.  Change-Id: I8a8dea0c8e2bcc689a7141bca53a1564325939bc",objective,,,,,,
openstack%2Fpython-novaclient~master~Ifbc6af6f1e42033c9ad8923cb063d345e520fb00,https://review.opendev.org/347555,Refactor test_servers APIVersion setup,Refactor test_servers APIVersion setup  Set APIVersion in the base test class instead of in every derived test class.  Change-Id: Ifbc6af6f1e42033c9ad8923cb063d345e520fb00 Co-Authored-By: Andrey Kurilin <akurilin@mirantis.com>,testing,,,,,,
openstack%2Fpython-novaclient~master~Ifbc6af6f1e42033c9ad8923cb063d345e520fb00,https://review.opendev.org/347555,Refactor test_servers APIVersion setup,Refactor test_servers APIVersion setup  Set APIVersion in the base test class instead of in every derived test class.  Change-Id: Ifbc6af6f1e42033c9ad8923cb063d345e520fb00 Co-Authored-By: Andrey Kurilin <akurilin@mirantis.com>,quality,,,,,,
openstack%2Fpython-novaclient~master~Ifbc6af6f1e42033c9ad8923cb063d345e520fb00,https://review.opendev.org/347555,Refactor test_servers APIVersion setup,Refactor test_servers APIVersion setup  Set APIVersion in the base test class instead of in every derived test class.  Change-Id: Ifbc6af6f1e42033c9ad8923cb063d345e520fb00 Co-Authored-By: Andrey Kurilin <akurilin@mirantis.com>,objective,,,,,,
openstack%2Fnova~master~Icff202e0c8866cad72fe977281a5829759659282,https://review.opendev.org/350319,rt: Refactor test_dupe_filter unit test,"rt: refactor test_dupe_filter unit test  The TestMoveClaim.test_dupe_filter() unit test was a poorly-written unit test. Not only was it not actually isolating the particular piece of code being tested properly, but the assertion it was making was not proving that filtering that the code was doing actually worked.  This patch refactors that unit test out of TestMoveClaim and into its own TestUpdateUsageFromMigrations test case class that isolates the area of tested code to just the function in question and puts assertions into the unit test that actually verify the *correct* migration is filtered not just *any* migration.  Change-Id: Icff202e0c8866cad72fe977281a5829759659282",testing,,,,,,
openstack%2Fnova~master~Icff202e0c8866cad72fe977281a5829759659282,https://review.opendev.org/350319,rt: Refactor test_dupe_filter unit test,"rt: refactor test_dupe_filter unit test  The TestMoveClaim.test_dupe_filter() unit test was a poorly-written unit test. Not only was it not actually isolating the particular piece of code being tested properly, but the assertion it was making was not proving that filtering that the code was doing actually worked.  This patch refactors that unit test out of TestMoveClaim and into its own TestUpdateUsageFromMigrations test case class that isolates the area of tested code to just the function in question and puts assertions into the unit test that actually verify the *correct* migration is filtered not just *any* migration.  Change-Id: Icff202e0c8866cad72fe977281a5829759659282",objective,,,,,,
openstack%2Fnova~master~Idd12fa2e5eff134f91d408a434669d62d0672672,https://review.opendev.org/350292,rt: Refactor resize claim abort unit test,"rt: Refactor resize claim abort unit test  Next unit test to pull from the TestMoveClaim class and refactor is test_claim_abort(). For this, we simply add a few extra lines that test the claim abort behaviour to the test_resize_claim_same_host() test method introduced in the previous patch in this series.  Note: This patch removes two existing unit tests in test_tracker.TestMoveClaim: test_claim_abort() and test_same_host(). The refactored TestResizeClaim.test_resize_claim_same_host() contains all the assertions that both of these unit tests contained.  Change-Id: Idd12fa2e5eff134f91d408a434669d62d0672672",testing,,,,,,
openstack%2Fnova~master~Idd12fa2e5eff134f91d408a434669d62d0672672,https://review.opendev.org/350292,rt: Refactor resize claim abort unit test,"rt: Refactor resize claim abort unit test  Next unit test to pull from the TestMoveClaim class and refactor is test_claim_abort(). For this, we simply add a few extra lines that test the claim abort behaviour to the test_resize_claim_same_host() test method introduced in the previous patch in this series.  Note: This patch removes two existing unit tests in test_tracker.TestMoveClaim: test_claim_abort() and test_same_host(). The refactored TestResizeClaim.test_resize_claim_same_host() contains all the assertions that both of these unit tests contained.  Change-Id: Idd12fa2e5eff134f91d408a434669d62d0672672",objective,,,,,,
openstack%2Fnova~master~I370d32e1019208adacdb17ae75d87a8711e4d8c4,https://review.opendev.org/349746,rt: Refactor resize_claim unit test,rt: Refactor resize_claim unit test  I don't care for the way the migration and resize unit tests were done in the test_tracker.py file. It isn't clear what is being asserted in the unit tests because of layers of nested helper functions. This patch is the start of a series that refactors these tests to be more readable. First up was the unit test for resize_claim on the same host.  Change-Id: I370d32e1019208adacdb17ae75d87a8711e4d8c4,testing,,,,,,
openstack%2Fnova~master~I370d32e1019208adacdb17ae75d87a8711e4d8c4,https://review.opendev.org/349746,rt: Refactor resize_claim unit test,rt: Refactor resize_claim unit test  I don't care for the way the migration and resize unit tests were done in the test_tracker.py file. It isn't clear what is being asserted in the unit tests because of layers of nested helper functions. This patch is the start of a series that refactors these tests to be more readable. First up was the unit test for resize_claim on the same host.  Change-Id: I370d32e1019208adacdb17ae75d87a8711e4d8c4,objective,,,,,,
openstack%2Fnova~master~I370d32e1019208adacdb17ae75d87a8711e4d8c4,https://review.opendev.org/349746,rt: Refactor resize_claim unit test,rt: Refactor resize_claim unit test  I don't care for the way the migration and resize unit tests were done in the test_tracker.py file. It isn't clear what is being asserted in the unit tests because of layers of nested helper functions. This patch is the start of a series that refactors these tests to be more readable. First up was the unit test for resize_claim on the same host.  Change-Id: I370d32e1019208adacdb17ae75d87a8711e4d8c4,quality,,,,,,
openstack%2Fsenlin~master~Ic8ac5acac17bd013c25089a7db58d32ac0dfa5ba,https://review.opendev.org/351463,Refactor rally plugin,"Refactor rally plugin  This patch refactors rally plugin for senlin. Since the plugin for basic cluster and profile operations has been merged into rally repo, we can remove duplicated util functions and test scenarios from senlin repo. Related test jobs are also changed accordingly.  Change-Id: Ic8ac5acac17bd013c25089a7db58d32ac0dfa5ba",testing,,,,,,
openstack%2Fsenlin~master~Ic8ac5acac17bd013c25089a7db58d32ac0dfa5ba,https://review.opendev.org/351463,Refactor rally plugin,"Refactor rally plugin  This patch refactors rally plugin for senlin. Since the plugin for basic cluster and profile operations has been merged into rally repo, we can remove duplicated util functions and test scenarios from senlin repo. Related test jobs are also changed accordingly.  Change-Id: Ic8ac5acac17bd013c25089a7db58d32ac0dfa5ba",objective,,,,,,
openstack%2Fsenlin~master~Ic8ac5acac17bd013c25089a7db58d32ac0dfa5ba,https://review.opendev.org/351463,Refactor rally plugin,"Refactor rally plugin  This patch refactors rally plugin for senlin. Since the plugin for basic cluster and profile operations has been merged into rally repo, we can remove duplicated util functions and test scenarios from senlin repo. Related test jobs are also changed accordingly.  Change-Id: Ic8ac5acac17bd013c25089a7db58d32ac0dfa5ba",quality,,,,,,
openstack%2Ftricircle~master~Icab2d6a2e25cc3387e5ee9951cc0b53491e012ee,https://review.opendev.org/350367,Fix the issue introduced by Neutron config file refactorying,"Fix the issue introduced by Neutron config file refactorying  1.What is the problem core_opts has been moved from neutron/common.py to neutron/conf/common.py, the migration leads the py27 test failured in tricircle/tests/base.py.  2.What's need to be fixed: import common.py from neutron/conf/common.py instead from from neutron/common.py  3.What is the purpose of this patch set: fix the py27 check and gate test error introduced by Neutron config file refactorying.  Change-Id: Icab2d6a2e25cc3387e5ee9951cc0b53491e012ee Signed-off-by: joehuang <joehuang@huawei.com>",integration,,,,,,
openstack%2Ftricircle~master~Icab2d6a2e25cc3387e5ee9951cc0b53491e012ee,https://review.opendev.org/350367,Fix the issue introduced by Neutron config file refactorying,"Fix the issue introduced by Neutron config file refactorying  1.What is the problem core_opts has been moved from neutron/common.py to neutron/conf/common.py, the migration leads the py27 test failured in tricircle/tests/base.py.  2.What's need to be fixed: import common.py from neutron/conf/common.py instead from from neutron/common.py  3.What is the purpose of this patch set: fix the py27 check and gate test error introduced by Neutron config file refactorying.  Change-Id: Icab2d6a2e25cc3387e5ee9951cc0b53491e012ee Signed-off-by: joehuang <joehuang@huawei.com>",integration,,,,,,
openstack%2Ftricircle~master~Icab2d6a2e25cc3387e5ee9951cc0b53491e012ee,https://review.opendev.org/350367,Fix the issue introduced by Neutron config file refactorying,"Fix the issue introduced by Neutron config file refactorying  1.What is the problem core_opts has been moved from neutron/common.py to neutron/conf/common.py, the migration leads the py27 test failured in tricircle/tests/base.py.  2.What's need to be fixed: import common.py from neutron/conf/common.py instead from from neutron/common.py  3.What is the purpose of this patch set: fix the py27 check and gate test error introduced by Neutron config file refactorying.  Change-Id: Icab2d6a2e25cc3387e5ee9951cc0b53491e012ee Signed-off-by: joehuang <joehuang@huawei.com>",objective,,,,,,
openstack%2Fcinder~master~I8c7bf93079bd67181994eb04487aff5575631153,https://review.opendev.org/346093,NetApp: Refactor unit tests,"NetApp: Refactor unit tests  Some of the older unit tests for the NetApp driver code have become obsolete since adding new unit tests over time. These tests also used mox in some places. So,  * Rewrite unit tests that were using mox * Move unit tests to the right place in the test code tree * Add unit tests and improve code coverage  Change-Id: I8c7bf93079bd67181994eb04487aff5575631153 Closes-Bug: #1514026",testing,,,,,,
openstack%2Fcinder~master~I8c7bf93079bd67181994eb04487aff5575631153,https://review.opendev.org/346093,NetApp: Refactor unit tests,"NetApp: Refactor unit tests  Some of the older unit tests for the NetApp driver code have become obsolete since adding new unit tests over time. These tests also used mox in some places. So,  * Rewrite unit tests that were using mox * Move unit tests to the right place in the test code tree * Add unit tests and improve code coverage  Change-Id: I8c7bf93079bd67181994eb04487aff5575631153 Closes-Bug: #1514026",objective,,,,,,
openstack%2Fcinder~master~I8c7bf93079bd67181994eb04487aff5575631153,https://review.opendev.org/346093,NetApp: Refactor unit tests,"NetApp: Refactor unit tests  Some of the older unit tests for the NetApp driver code have become obsolete since adding new unit tests over time. These tests also used mox in some places. So,  * Rewrite unit tests that were using mox * Move unit tests to the right place in the test code tree * Add unit tests and improve code coverage  Change-Id: I8c7bf93079bd67181994eb04487aff5575631153 Closes-Bug: #1514026",quality,,,,,,
x%2Ffuel-ccp~master~I876b0caacfc58c336a394eb270d6faf7c187e7bb,https://review.opendev.org/347439,Refactor namespace variable creation,Refactor namespace variable creation  This is needed for next patches to get rid of code duplication and for test  Change-Id: I876b0caacfc58c336a394eb270d6faf7c187e7bb,testing,,,,,,
x%2Ffuel-ccp~master~I876b0caacfc58c336a394eb270d6faf7c187e7bb,https://review.opendev.org/347439,Refactor namespace variable creation,Refactor namespace variable creation  This is needed for next patches to get rid of code duplication and for test  Change-Id: I876b0caacfc58c336a394eb270d6faf7c187e7bb,objective,,,,,,
x%2Ffuel-ccp~master~I876b0caacfc58c336a394eb270d6faf7c187e7bb,https://review.opendev.org/347439,Refactor namespace variable creation,Refactor namespace variable creation  This is needed for next patches to get rid of code duplication and for test  Change-Id: I876b0caacfc58c336a394eb270d6faf7c187e7bb,quality,,,,,,
openstack%2Fproject-config~master~Ie89fb4d481d8c88f433a25587d6447bf4e9e1434,https://review.opendev.org/340567,Refactor Ironic job macro,"Refactor Ironic job macro  Ironic is getting more and more jobs to test the different deployment scenarios we support, every time we add a new optional feature we add a new conditional to the existing macro to enable it for one job, and then we have to add a new variable to every job template that uses that macro.  This is getting unmanageable and messy, so this patch refactors out the configurations we've been controlling using conditionals into their own builders which can be pulled into a job-template only if required. It does this by writing the optional script parts into a file call ironic-extra-vars which is then sourced in the main ironic macro.  This patch takes all the Ironic jobs that are largely the same, and refactors them into a single template, and then uses the jenkins job builder matrixing system to generate the jobs instead of explicitly defining each one.  Change-Id: Ie89fb4d481d8c88f433a25587d6447bf4e9e1434",testing,,,,,,
openstack%2Fproject-config~master~Ie89fb4d481d8c88f433a25587d6447bf4e9e1434,https://review.opendev.org/340567,Refactor Ironic job macro,"Refactor Ironic job macro  Ironic is getting more and more jobs to test the different deployment scenarios we support, every time we add a new optional feature we add a new conditional to the existing macro to enable it for one job, and then we have to add a new variable to every job template that uses that macro.  This is getting unmanageable and messy, so this patch refactors out the configurations we've been controlling using conditionals into their own builders which can be pulled into a job-template only if required. It does this by writing the optional script parts into a file call ironic-extra-vars which is then sourced in the main ironic macro.  This patch takes all the Ironic jobs that are largely the same, and refactors them into a single template, and then uses the jenkins job builder matrixing system to generate the jobs instead of explicitly defining each one.  Change-Id: Ie89fb4d481d8c88f433a25587d6447bf4e9e1434",quality,,,,,,
openstack%2Fproject-config~master~Ie89fb4d481d8c88f433a25587d6447bf4e9e1434,https://review.opendev.org/340567,Refactor Ironic job macro,"Refactor Ironic job macro  Ironic is getting more and more jobs to test the different deployment scenarios we support, every time we add a new optional feature we add a new conditional to the existing macro to enable it for one job, and then we have to add a new variable to every job template that uses that macro.  This is getting unmanageable and messy, so this patch refactors out the configurations we've been controlling using conditionals into their own builders which can be pulled into a job-template only if required. It does this by writing the optional script parts into a file call ironic-extra-vars which is then sourced in the main ironic macro.  This patch takes all the Ironic jobs that are largely the same, and refactors them into a single template, and then uses the jenkins job builder matrixing system to generate the jobs instead of explicitly defining each one.  Change-Id: Ie89fb4d481d8c88f433a25587d6447bf4e9e1434",objective,,,,,,
openstack%2Fopenstack-ansible~stable%2Fmitaka~I064c1c480d261a885666b7dc3edc4cd0769876a6,https://review.opendev.org/346833,Refactor run-playbooks,"Refactor run-playbooks  This changes the run playbooks script so that its using our core CLI tools and is no longer a special case script running bits outside of simply running the deployment tools as they've been designed.  The script is still executing all of the playbooks using the ""scripts-library"" function ``install_bits`` so that we ensure gate success by having a retry on a playbook execution in the case of transient failure.  A notice has been added to the script whenever it exits notifying the deployer that they should now work out of the playbooks directory and never execute the run-playbooks.sh script ever again. Within the notice links to our documentation have been added.  The ironic services were removed from the integrated gate because they're not ready for general consumption and not being tested at this time because no test configuration has been added into the tempest role or the ``run-tempest.sh`` script.  Change-Id: I064c1c480d261a885666b7dc3edc4cd0769876a6 Signed-off-by: Kevin Carter <kevin.carter@rackspace.com> (cherry picked from commit 9be0662c4f79783d4db8736b89bbd38063635067)",integration,,,,,,
openstack%2Fopenstack-ansible~stable%2Fmitaka~I064c1c480d261a885666b7dc3edc4cd0769876a6,https://review.opendev.org/346833,Refactor run-playbooks,"Refactor run-playbooks  This changes the run playbooks script so that its using our core CLI tools and is no longer a special case script running bits outside of simply running the deployment tools as they've been designed.  The script is still executing all of the playbooks using the ""scripts-library"" function ``install_bits`` so that we ensure gate success by having a retry on a playbook execution in the case of transient failure.  A notice has been added to the script whenever it exits notifying the deployer that they should now work out of the playbooks directory and never execute the run-playbooks.sh script ever again. Within the notice links to our documentation have been added.  The ironic services were removed from the integrated gate because they're not ready for general consumption and not being tested at this time because no test configuration has been added into the tempest role or the ``run-tempest.sh`` script.  Change-Id: I064c1c480d261a885666b7dc3edc4cd0769876a6 Signed-off-by: Kevin Carter <kevin.carter@rackspace.com> (cherry picked from commit 9be0662c4f79783d4db8736b89bbd38063635067)",objective,,,,,,
openstack%2Fopenstack-ansible~stable%2Fmitaka~I064c1c480d261a885666b7dc3edc4cd0769876a6,https://review.opendev.org/346833,Refactor run-playbooks,"Refactor run-playbooks  This changes the run playbooks script so that its using our core CLI tools and is no longer a special case script running bits outside of simply running the deployment tools as they've been designed.  The script is still executing all of the playbooks using the ""scripts-library"" function ``install_bits`` so that we ensure gate success by having a retry on a playbook execution in the case of transient failure.  A notice has been added to the script whenever it exits notifying the deployer that they should now work out of the playbooks directory and never execute the run-playbooks.sh script ever again. Within the notice links to our documentation have been added.  The ironic services were removed from the integrated gate because they're not ready for general consumption and not being tested at this time because no test configuration has been added into the tempest role or the ``run-tempest.sh`` script.  Change-Id: I064c1c480d261a885666b7dc3edc4cd0769876a6 Signed-off-by: Kevin Carter <kevin.carter@rackspace.com> (cherry picked from commit 9be0662c4f79783d4db8736b89bbd38063635067)",testing,,,,,,
openstack%2Fkeystone~master~I6be1c5c583d336cc83cf3670c10d4364ddc16bbd,https://review.opendev.org/345099,refactor: make TestFetchRevocationList test uuid,"refactor: make TestFetchRevocationList test uuid  The TestFetchRevocationList should be inherited and tested by the uuid token provider. The other token providers don't support Revocation Lists, so don't test them with it.  This is an effort to break https://review.openstack.org/#/c/258650 into smaller, more reviewable pieces.  Co-Authored-By: Raildo Mascena <raildo@lsd.ufcg.edu.br> Co-Authored-By: Adam Young <ayound@redhat.com>  Change-Id: I6be1c5c583d336cc83cf3670c10d4364ddc16bbd Partial-Bug: 1561054",testing,,,,,,
openstack%2Fkeystone~master~I6be1c5c583d336cc83cf3670c10d4364ddc16bbd,https://review.opendev.org/345099,refactor: make TestFetchRevocationList test uuid,"refactor: make TestFetchRevocationList test uuid  The TestFetchRevocationList should be inherited and tested by the uuid token provider. The other token providers don't support Revocation Lists, so don't test them with it.  This is an effort to break https://review.openstack.org/#/c/258650 into smaller, more reviewable pieces.  Co-Authored-By: Raildo Mascena <raildo@lsd.ufcg.edu.br> Co-Authored-By: Adam Young <ayound@redhat.com>  Change-Id: I6be1c5c583d336cc83cf3670c10d4364ddc16bbd Partial-Bug: 1561054",quality,,,,,,
openstack%2Fkeystone~master~I6be1c5c583d336cc83cf3670c10d4364ddc16bbd,https://review.opendev.org/345099,refactor: make TestFetchRevocationList test uuid,"refactor: make TestFetchRevocationList test uuid  The TestFetchRevocationList should be inherited and tested by the uuid token provider. The other token providers don't support Revocation Lists, so don't test them with it.  This is an effort to break https://review.openstack.org/#/c/258650 into smaller, more reviewable pieces.  Co-Authored-By: Raildo Mascena <raildo@lsd.ufcg.edu.br> Co-Authored-By: Adam Young <ayound@redhat.com>  Change-Id: I6be1c5c583d336cc83cf3670c10d4364ddc16bbd Partial-Bug: 1561054",objective,,,,,,
openstack%2Fkeystone~master~Ie80f74e47046c5d8d3c2f31e5b84e4210e775f7f,https://review.opendev.org/345089,refactor: make TestAuthKerberos test pki/pkiz/uuid,"refactor: make TestAuthKerberos test pki/pkiz/uuid  This helps us move towards fernet because we don't support bind authentication with the Fernet provider, so when we set Fernet to be the default we won't run these tests. We will only run Kerberos tests against token providers that support it.  Co-Authored-By: Raildo Mascena <raildo@lsd.ufcg.edu.br> Co-Authored-By: Adam Young <ayound@redhat.com>  Change-Id: Ie80f74e47046c5d8d3c2f31e5b84e4210e775f7f Partial-Bug: 1561054",testing,,,,,,
openstack%2Fkeystone~master~Ie80f74e47046c5d8d3c2f31e5b84e4210e775f7f,https://review.opendev.org/345089,refactor: make TestAuthKerberos test pki/pkiz/uuid,"refactor: make TestAuthKerberos test pki/pkiz/uuid  This helps us move towards fernet because we don't support bind authentication with the Fernet provider, so when we set Fernet to be the default we won't run these tests. We will only run Kerberos tests against token providers that support it.  Co-Authored-By: Raildo Mascena <raildo@lsd.ufcg.edu.br> Co-Authored-By: Adam Young <ayound@redhat.com>  Change-Id: Ie80f74e47046c5d8d3c2f31e5b84e4210e775f7f Partial-Bug: 1561054",objective,,,,,,
openstack%2Fkeystone~master~I3ae63c8ff50a897ef0ae6e8129abc02e5b93747c,https://review.opendev.org/345075,refactor: inherit AuthWithRemoteUser for other providers,refactor: inherit AuthWithRemoteUser for other providers  This commit makes it so that the AuthWithRemoteUser class no longer inherits from other tests cases. Instead it inherits from `object` and I've added several other classes that setup each token provider to test the cases in AuthWithRemoteUser.  This helps us move towards making Fernet the default token provider.  Co-Authored-By: Raildo Mascena <raildo@lsd.ufcg.edu.br> Co-Authored-By: Adam Young <ayound@redhat.com>  Change-Id: I3ae63c8ff50a897ef0ae6e8129abc02e5b93747c Partial-Bug: 1561054,testing,,,,,,
openstack%2Fkeystone~master~I3ae63c8ff50a897ef0ae6e8129abc02e5b93747c,https://review.opendev.org/345075,refactor: inherit AuthWithRemoteUser for other providers,refactor: inherit AuthWithRemoteUser for other providers  This commit makes it so that the AuthWithRemoteUser class no longer inherits from other tests cases. Instead it inherits from `object` and I've added several other classes that setup each token provider to test the cases in AuthWithRemoteUser.  This helps us move towards making Fernet the default token provider.  Co-Authored-By: Raildo Mascena <raildo@lsd.ufcg.edu.br> Co-Authored-By: Adam Young <ayound@redhat.com>  Change-Id: I3ae63c8ff50a897ef0ae6e8129abc02e5b93747c Partial-Bug: 1561054,quality,,,,,,
openstack%2Fkeystone~master~I3ae63c8ff50a897ef0ae6e8129abc02e5b93747c,https://review.opendev.org/345075,refactor: inherit AuthWithRemoteUser for other providers,refactor: inherit AuthWithRemoteUser for other providers  This commit makes it so that the AuthWithRemoteUser class no longer inherits from other tests cases. Instead it inherits from `object` and I've added several other classes that setup each token provider to test the cases in AuthWithRemoteUser.  This helps us move towards making Fernet the default token provider.  Co-Authored-By: Raildo Mascena <raildo@lsd.ufcg.edu.br> Co-Authored-By: Adam Young <ayound@redhat.com>  Change-Id: I3ae63c8ff50a897ef0ae6e8129abc02e5b93747c Partial-Bug: 1561054,objective,,,,,,
openstack%2Fkeystone~master~I28e575ddada8492bd4fc17b78cb00651d9d4af07,https://review.opendev.org/343886,Refactor TestAuthExternalDomain to not inherit tests,"Refactor TestAuthExternalDomain to not inherit tests  Previously, TestAuthExternalDomain was inheriting from test_v3.RestfulTestCase, which allowed it to run as part of the keystone test suite. This commit breaks it into a class that only inherits from `object` and introduces 3 other classes the inherit the old TestAuthExternalDomain and run the tests according to the setup needed.  Since the Fernet provider doesn't support bind authentication, there is no test class to setup Fernet and run the TestAuthExternalDomain behaviors. This change will make defaulting to Fernet easier.  This fix was originally a part of https://review.openstack.org/#/c/258650 but this is an attempt to break 258650 into smaller, more reviewable, pieces.  Co-Authored-By: Raildo Mascena <raildo@lsd.ufcg.edu.br> Co-Authored-By: Adam Young <ayound@redhat.com>  Change-Id: I28e575ddada8492bd4fc17b78cb00651d9d4af07 Partial-Bug: 1561054",testing,,,,,,
openstack%2Fkeystone~master~I28e575ddada8492bd4fc17b78cb00651d9d4af07,https://review.opendev.org/343886,Refactor TestAuthExternalDomain to not inherit tests,"Refactor TestAuthExternalDomain to not inherit tests  Previously, TestAuthExternalDomain was inheriting from test_v3.RestfulTestCase, which allowed it to run as part of the keystone test suite. This commit breaks it into a class that only inherits from `object` and introduces 3 other classes the inherit the old TestAuthExternalDomain and run the tests according to the setup needed.  Since the Fernet provider doesn't support bind authentication, there is no test class to setup Fernet and run the TestAuthExternalDomain behaviors. This change will make defaulting to Fernet easier.  This fix was originally a part of https://review.openstack.org/#/c/258650 but this is an attempt to break 258650 into smaller, more reviewable, pieces.  Co-Authored-By: Raildo Mascena <raildo@lsd.ufcg.edu.br> Co-Authored-By: Adam Young <ayound@redhat.com>  Change-Id: I28e575ddada8492bd4fc17b78cb00651d9d4af07 Partial-Bug: 1561054",quality,,,,,,
openstack%2Fkeystone~master~I28e575ddada8492bd4fc17b78cb00651d9d4af07,https://review.opendev.org/343886,Refactor TestAuthExternalDomain to not inherit tests,"Refactor TestAuthExternalDomain to not inherit tests  Previously, TestAuthExternalDomain was inheriting from test_v3.RestfulTestCase, which allowed it to run as part of the keystone test suite. This commit breaks it into a class that only inherits from `object` and introduces 3 other classes the inherit the old TestAuthExternalDomain and run the tests according to the setup needed.  Since the Fernet provider doesn't support bind authentication, there is no test class to setup Fernet and run the TestAuthExternalDomain behaviors. This change will make defaulting to Fernet easier.  This fix was originally a part of https://review.openstack.org/#/c/258650 but this is an attempt to break 258650 into smaller, more reviewable, pieces.  Co-Authored-By: Raildo Mascena <raildo@lsd.ufcg.edu.br> Co-Authored-By: Adam Young <ayound@redhat.com>  Change-Id: I28e575ddada8492bd4fc17b78cb00651d9d4af07 Partial-Bug: 1561054",objective,,,,,,
openstack%2Fkuryr~master~I91a402a159817462535e77296217a9dd7eb0fd08,https://review.opendev.org/336784,Refactoring: Drop all the code except common one,[WIP] Refactoring: RPC and namespace support  TODO: test cases  Implements blueprint code-refactoring  Change-Id: I91a402a159817462535e77296217a9dd7eb0fd08,testing,,,,,,
openstack%2Fkuryr~master~I91a402a159817462535e77296217a9dd7eb0fd08,https://review.opendev.org/336784,Refactoring: Drop all the code except common one,[WIP] Refactoring: RPC and namespace support  TODO: test cases  Implements blueprint code-refactoring  Change-Id: I91a402a159817462535e77296217a9dd7eb0fd08,objective,,,,,,
openstack%2Fsyntribos~master~Idfcb2a995857b4be0aaf5d78c06b546751062c8f,https://review.opendev.org/340477,Refactored Auth test,Refactored Auth test  Significantly refactored test for improper authorization checks to match the new style of tests.  Change-Id: Idfcb2a995857b4be0aaf5d78c06b546751062c8f,testing,,,,,,
openstack%2Fsyntribos~master~Idfcb2a995857b4be0aaf5d78c06b546751062c8f,https://review.opendev.org/340477,Refactored Auth test,Refactored Auth test  Significantly refactored test for improper authorization checks to match the new style of tests.  Change-Id: Idfcb2a995857b4be0aaf5d78c06b546751062c8f,objective,,,,,,
openstack%2Fcinder~master~I50ed7329a4b397468abd54cfe9f3b1aa91483682,https://review.opendev.org/333232,VMware: Refactor vmdk unit tests,"VMware: Refactor vmdk unit tests  The unit test for _get_vc_version() tests multiple cases. This patch refactors the unit test to fix the issue. Also, it refactors the unit tests for do_setup() to reduce code duplication.  Change-Id: I50ed7329a4b397468abd54cfe9f3b1aa91483682",testing,,,,,,
openstack%2Fcinder~master~I50ed7329a4b397468abd54cfe9f3b1aa91483682,https://review.opendev.org/333232,VMware: Refactor vmdk unit tests,"VMware: Refactor vmdk unit tests  The unit test for _get_vc_version() tests multiple cases. This patch refactors the unit test to fix the issue. Also, it refactors the unit tests for do_setup() to reduce code duplication.  Change-Id: I50ed7329a4b397468abd54cfe9f3b1aa91483682",objective,,,,,,
openstack%2Ffuel-devops~master~I1aa74044c91c6ccbc92e151de3bc891866bbc662,https://review.opendev.org/334096,Refactoring of retry decorator,Refactoring of retry decorator  - retry decorator was changed and now requires to specify exception class.   Other exceptions won't be caught by retry decorator. - Added DevopsException class - Removed retries for minor libvirt driver methods - Removed redundant retry on SSHClient.__connect_sftp - Added unit test for retry decorator  Change-Id: I1aa74044c91c6ccbc92e151de3bc891866bbc662,testing,,,,,,
openstack%2Ffuel-devops~master~I1aa74044c91c6ccbc92e151de3bc891866bbc662,https://review.opendev.org/334096,Refactoring of retry decorator,Refactoring of retry decorator  - retry decorator was changed and now requires to specify exception class.   Other exceptions won't be caught by retry decorator. - Added DevopsException class - Removed retries for minor libvirt driver methods - Removed redundant retry on SSHClient.__connect_sftp - Added unit test for retry decorator  Change-Id: I1aa74044c91c6ccbc92e151de3bc891866bbc662,quality,,,,,,
openstack%2Ffuel-devops~master~I1aa74044c91c6ccbc92e151de3bc891866bbc662,https://review.opendev.org/334096,Refactoring of retry decorator,Refactoring of retry decorator  - retry decorator was changed and now requires to specify exception class.   Other exceptions won't be caught by retry decorator. - Added DevopsException class - Removed retries for minor libvirt driver methods - Removed redundant retry on SSHClient.__connect_sftp - Added unit test for retry decorator  Change-Id: I1aa74044c91c6ccbc92e151de3bc891866bbc662,objective,,,,,,
openstack%2Fswift~feature%2Fcrypto-review~I9bfbf4e47cb0eb370e7a74d18c78d67b6b9d6645,https://review.opendev.org/328203,Refactor tests and add tests,"Refactor tests and add tests  Relocates some test infrastructure in preparation for use with encryption tests, in particular moves the test server setup code from test/unit/proxy/test_server.py to a new helpers.py so that it can be re-used.  Adds unit test coverage for extract_swift_bytes and functional test coverage for container listings. Adds a check on the content and metadata of reconciled objects in probe tests.  Change-Id: I9bfbf4e47cb0eb370e7a74d18c78d67b6b9d6645",testing,,,,,,
openstack%2Fswift~feature%2Fcrypto-review~I9bfbf4e47cb0eb370e7a74d18c78d67b6b9d6645,https://review.opendev.org/328203,Refactor tests and add tests,"Refactor tests and add tests  Relocates some test infrastructure in preparation for use with encryption tests, in particular moves the test server setup code from test/unit/proxy/test_server.py to a new helpers.py so that it can be re-used.  Adds unit test coverage for extract_swift_bytes and functional test coverage for container listings. Adds a check on the content and metadata of reconciled objects in probe tests.  Change-Id: I9bfbf4e47cb0eb370e7a74d18c78d67b6b9d6645",objective,,,,,,
openstack%2Fkeystonemiddleware~master~I345fe4f4c2a0d8f98ba1ff10491802002d590fa6,https://review.opendev.org/334294,Refactor API tests to not run middleware,"Refactor API tests to not run middleware  The API tests don't really use the API, they just test the creation of an event so focus them on that.  There are two tests that are in the API class that really do test middleware so they are moved back.  Change-Id: I345fe4f4c2a0d8f98ba1ff10491802002d590fa6",testing,,,,,,
openstack%2Fkeystonemiddleware~master~I345fe4f4c2a0d8f98ba1ff10491802002d590fa6,https://review.opendev.org/334294,Refactor API tests to not run middleware,"Refactor API tests to not run middleware  The API tests don't really use the API, they just test the creation of an event so focus them on that.  There are two tests that are in the API class that really do test middleware so they are moved back.  Change-Id: I345fe4f4c2a0d8f98ba1ff10491802002d590fa6",integration,,,,,,
openstack%2Fkeystonemiddleware~master~I345fe4f4c2a0d8f98ba1ff10491802002d590fa6,https://review.opendev.org/334294,Refactor API tests to not run middleware,"Refactor API tests to not run middleware  The API tests don't really use the API, they just test the creation of an event so focus them on that.  There are two tests that are in the API class that really do test middleware so they are moved back.  Change-Id: I345fe4f4c2a0d8f98ba1ff10491802002d590fa6",objective,,,,,,
openstack%2Fheat-translator~master~I7634f5be99be9f3a4547161140c0804002b71a25,https://review.opendev.org/334093,Refactor main test module,Refactor main test module  Refactor to remove duplication of test code.  Change-Id: I7634f5be99be9f3a4547161140c0804002b71a25,testing,,,,,,
openstack%2Fheat-translator~master~I7634f5be99be9f3a4547161140c0804002b71a25,https://review.opendev.org/334093,Refactor main test module,Refactor main test module  Refactor to remove duplication of test code.  Change-Id: I7634f5be99be9f3a4547161140c0804002b71a25,quality,,,,,,
openstack%2Fheat-translator~master~I7634f5be99be9f3a4547161140c0804002b71a25,https://review.opendev.org/334093,Refactor main test module,Refactor main test module  Refactor to remove duplication of test code.  Change-Id: I7634f5be99be9f3a4547161140c0804002b71a25,objective,,,,,,
openstack%2Fpython-openstackclient~master~I988fd6365f2652185dd96d9417f294eba9c31cd9,https://review.opendev.org/332744,"Refactor unit test of ""compute service list"" command","Refactor unit test of ""compute service list"" command  The unit test of ""compute service list"" only checked the ""Disabled Reason"" columns and its data. It is not enough. This patch change the test to check all datas in the list.  Also, this patch modify the ""Id"" to ""ID"" in this command.  Change-Id: I988fd6365f2652185dd96d9417f294eba9c31cd9",testing,,,,,,
openstack%2Fpython-openstackclient~master~I988fd6365f2652185dd96d9417f294eba9c31cd9,https://review.opendev.org/332744,"Refactor unit test of ""compute service list"" command","Refactor unit test of ""compute service list"" command  The unit test of ""compute service list"" only checked the ""Disabled Reason"" columns and its data. It is not enough. This patch change the test to check all datas in the list.  Also, this patch modify the ""Id"" to ""ID"" in this command.  Change-Id: I988fd6365f2652185dd96d9417f294eba9c31cd9",objective,,,,,,
openstack%2Fkeystone~master~I95a19b2413740ac0c7e21636dd7f2f0dbbd00d69,https://review.opendev.org/330221,Refactor test_validate_v2_scoped_token_with_v3_api,"Refactor test_validate_v2_scoped_token_with_v3_api  This commit moves the test_validate_v2_scoped_token_with_v3_api test from the TestAuth module to the TokenAPITests module. It also renames the test to accurately reflect what it is doing. Lastly, it removes a utility method, get_v2_token() because it was no longer in use in TestAuth.  Change-Id: I95a19b2413740ac0c7e21636dd7f2f0dbbd00d69",testing,,,,,,
openstack%2Fkeystone~master~I95a19b2413740ac0c7e21636dd7f2f0dbbd00d69,https://review.opendev.org/330221,Refactor test_validate_v2_scoped_token_with_v3_api,"Refactor test_validate_v2_scoped_token_with_v3_api  This commit moves the test_validate_v2_scoped_token_with_v3_api test from the TestAuth module to the TokenAPITests module. It also renames the test to accurately reflect what it is doing. Lastly, it removes a utility method, get_v2_token() because it was no longer in use in TestAuth.  Change-Id: I95a19b2413740ac0c7e21636dd7f2f0dbbd00d69",objective,,,,,,
openstack%2Fglance~stable%2Fussuri~I80cf190f122ce61a47340181e1ad02ee24b5cb2d,https://review.opendev.org/748000,Refactor common auth token code in images test,"Refactor common auth token code in images test  This pulls out the authentication token manipulation used by some of the images functional tests, which is replicated in several places into a single helper. This will also be used by a subsequent functional test for cross-owner copy-image support.  Change-Id: I80cf190f122ce61a47340181e1ad02ee24b5cb2d (cherry picked from commit 1b172798cd8346b8500e5faf5ae39d63c297c5b7)",testing,,,,,,
openstack%2Fglance~stable%2Fussuri~I80cf190f122ce61a47340181e1ad02ee24b5cb2d,https://review.opendev.org/748000,Refactor common auth token code in images test,"Refactor common auth token code in images test  This pulls out the authentication token manipulation used by some of the images functional tests, which is replicated in several places into a single helper. This will also be used by a subsequent functional test for cross-owner copy-image support.  Change-Id: I80cf190f122ce61a47340181e1ad02ee24b5cb2d (cherry picked from commit 1b172798cd8346b8500e5faf5ae39d63c297c5b7)",quality,,,,,,
openstack%2Fglance~stable%2Fussuri~I80cf190f122ce61a47340181e1ad02ee24b5cb2d,https://review.opendev.org/748000,Refactor common auth token code in images test,"Refactor common auth token code in images test  This pulls out the authentication token manipulation used by some of the images functional tests, which is replicated in several places into a single helper. This will also be used by a subsequent functional test for cross-owner copy-image support.  Change-Id: I80cf190f122ce61a47340181e1ad02ee24b5cb2d (cherry picked from commit 1b172798cd8346b8500e5faf5ae39d63c297c5b7)",objective,,,,,,
openstack%2Ffuel-library~master~I4398804040c819b783cebd05842ffdbbb8ea561e,https://review.opendev.org/323386,Refactor Netrings fact and it's tests for:,Refactor Netrings fact and it's tests for:  1. passing test if run under OSX (stub :kernel fact into test) 2. make waiting cycle for all started threads 3. re-implement netrings properties gather as ruby class  Change-Id: I4398804040c819b783cebd05842ffdbbb8ea561e Closes-bug: #1587470,testing,,,,,,
openstack%2Ffuel-library~master~I4398804040c819b783cebd05842ffdbbb8ea561e,https://review.opendev.org/323386,Refactor Netrings fact and it's tests for:,Refactor Netrings fact and it's tests for:  1. passing test if run under OSX (stub :kernel fact into test) 2. make waiting cycle for all started threads 3. re-implement netrings properties gather as ruby class  Change-Id: I4398804040c819b783cebd05842ffdbbb8ea561e Closes-bug: #1587470,integration,,,,,,
openstack%2Ffuel-library~master~I4398804040c819b783cebd05842ffdbbb8ea561e,https://review.opendev.org/323386,Refactor Netrings fact and it's tests for:,Refactor Netrings fact and it's tests for:  1. passing test if run under OSX (stub :kernel fact into test) 2. make waiting cycle for all started threads 3. re-implement netrings properties gather as ruby class  Change-Id: I4398804040c819b783cebd05842ffdbbb8ea561e Closes-bug: #1587470,objective,,,,,,
openstack%2Fcinder~master~Id825e5704248114b215cc0e36790dde180456ecb,https://review.opendev.org/293928,VMware: Refactor unit tests,VMware: Refactor unit tests  There are unit tests which test multiple code paths and methods. This patch refactors the unit tests for the following methods in the vmdk module to fix this: * _get_extra_spec_storage_profile * _get_storage_profile * _get_storage_profile_id  Change-Id: Id825e5704248114b215cc0e36790dde180456ecb,testing,,,,,,
openstack%2Fcinder~master~Id825e5704248114b215cc0e36790dde180456ecb,https://review.opendev.org/293928,VMware: Refactor unit tests,VMware: Refactor unit tests  There are unit tests which test multiple code paths and methods. This patch refactors the unit tests for the following methods in the vmdk module to fix this: * _get_extra_spec_storage_profile * _get_storage_profile * _get_storage_profile_id  Change-Id: Id825e5704248114b215cc0e36790dde180456ecb,objective,,,,,,
openstack%2Fproject-config~master~I093f2791723172b4995adc5b73fa5e23623e0614,https://review.opendev.org/321613,Refactorize Puppet versions testing matrix,"Refactorize Puppet versions testing matrix  * Run puppet-unit-latest only on master, as non-voting.   The goal of this job is to test very latest versions of Puppet and   provide early feedback. * On master (current Newton), stop running unit tests on 3.3, 3.4, 3.7   and 4.0. A recent poll showed that 3.6, 3.8 and recent 4.x were the   most used by our community. * On stable/mitaka and master (current Newton), start running unit tests   on 4.5 (latest version) as voting.  Coverage summary: Liberty: 3.3, 3.4, 3.6, 3.7, 3.8, 4.0 Mitaka: 3.3, 3.4, 3.6, 3.7, 3.8, 4.0, 4.5 Newton: 3.6, 3.8, 4.5 and latest (non-voting)  Change-Id: I093f2791723172b4995adc5b73fa5e23623e0614",testing,,,,,,
openstack%2Fproject-config~master~I093f2791723172b4995adc5b73fa5e23623e0614,https://review.opendev.org/321613,Refactorize Puppet versions testing matrix,"Refactorize Puppet versions testing matrix  * Run puppet-unit-latest only on master, as non-voting.   The goal of this job is to test very latest versions of Puppet and   provide early feedback. * On master (current Newton), stop running unit tests on 3.3, 3.4, 3.7   and 4.0. A recent poll showed that 3.6, 3.8 and recent 4.x were the   most used by our community. * On stable/mitaka and master (current Newton), start running unit tests   on 4.5 (latest version) as voting.  Coverage summary: Liberty: 3.3, 3.4, 3.6, 3.7, 3.8, 4.0 Mitaka: 3.3, 3.4, 3.6, 3.7, 3.8, 4.0, 4.5 Newton: 3.6, 3.8, 4.5 and latest (non-voting)  Change-Id: I093f2791723172b4995adc5b73fa5e23623e0614",objective,,,,,,
openstack%2Fproject-config~master~I093f2791723172b4995adc5b73fa5e23623e0614,https://review.opendev.org/321613,Refactorize Puppet versions testing matrix,"Refactorize Puppet versions testing matrix  * Run puppet-unit-latest only on master, as non-voting.   The goal of this job is to test very latest versions of Puppet and   provide early feedback. * On master (current Newton), stop running unit tests on 3.3, 3.4, 3.7   and 4.0. A recent poll showed that 3.6, 3.8 and recent 4.x were the   most used by our community. * On stable/mitaka and master (current Newton), start running unit tests   on 4.5 (latest version) as voting.  Coverage summary: Liberty: 3.3, 3.4, 3.6, 3.7, 3.8, 4.0 Mitaka: 3.3, 3.4, 3.6, 3.7, 3.8, 4.0, 4.5 Newton: 3.6, 3.8, 4.5 and latest (non-voting)  Change-Id: I093f2791723172b4995adc5b73fa5e23623e0614",integration,,,,,,
x%2Fpython-oneviewclient~master~Ib080d58d666e39865cc7c03121d0341361c9617c,https://review.opendev.org/321262,Fixing __getattribute__ def and refactor from_json,Fixing __getattribute__ def and refactor from_json  The previous command left a __getattribute__ definition in models.OneViewObject that would enter a infinite loop when called with an argument that isn't on the attribute_map of the instance. I'm removing it since it was legacy of a test and shoudn't had remained on the code. This also refactors duplicate code on *_from_json methods.  Change-Id: Ib080d58d666e39865cc7c03121d0341361c9617c,testing,,,,,,
x%2Fpython-oneviewclient~master~Ib080d58d666e39865cc7c03121d0341361c9617c,https://review.opendev.org/321262,Fixing __getattribute__ def and refactor from_json,Fixing __getattribute__ def and refactor from_json  The previous command left a __getattribute__ definition in models.OneViewObject that would enter a infinite loop when called with an argument that isn't on the attribute_map of the instance. I'm removing it since it was legacy of a test and shoudn't had remained on the code. This also refactors duplicate code on *_from_json methods.  Change-Id: Ib080d58d666e39865cc7c03121d0341361c9617c,quality,,,,,,
x%2Fpython-oneviewclient~master~Ib080d58d666e39865cc7c03121d0341361c9617c,https://review.opendev.org/321262,Fixing __getattribute__ def and refactor from_json,Fixing __getattribute__ def and refactor from_json  The previous command left a __getattribute__ definition in models.OneViewObject that would enter a infinite loop when called with an argument that isn't on the attribute_map of the instance. I'm removing it since it was legacy of a test and shoudn't had remained on the code. This also refactors duplicate code on *_from_json methods.  Change-Id: Ib080d58d666e39865cc7c03121d0341361c9617c,objective,,,,,,
openstack%2Fmonasca-agent~master~I6badfd3612ba52f55b73219b4581e94ff79cc73b,https://review.opendev.org/320243,Refactor process test,"Refactor process test  The tests relied on psutils Python module which is not part of monasca. The used functions and classes are substituted by mock objects that simulate their behavior, making the test independent of third party modules.  common.py is refactored to make it pep8 compatible  Change-Id: I6badfd3612ba52f55b73219b4581e94ff79cc73b",testing,,,,,,
openstack%2Fmonasca-agent~master~I6badfd3612ba52f55b73219b4581e94ff79cc73b,https://review.opendev.org/320243,Refactor process test,"Refactor process test  The tests relied on psutils Python module which is not part of monasca. The used functions and classes are substituted by mock objects that simulate their behavior, making the test independent of third party modules.  common.py is refactored to make it pep8 compatible  Change-Id: I6badfd3612ba52f55b73219b4581e94ff79cc73b",quality,,,,,,
openstack%2Fmonasca-agent~master~I6badfd3612ba52f55b73219b4581e94ff79cc73b,https://review.opendev.org/320243,Refactor process test,"Refactor process test  The tests relied on psutils Python module which is not part of monasca. The used functions and classes are substituted by mock objects that simulate their behavior, making the test independent of third party modules.  common.py is refactored to make it pep8 compatible  Change-Id: I6badfd3612ba52f55b73219b4581e94ff79cc73b",objective,,,,,,
openstack%2Frally~master~I6cbd0de35b87c93ad7530ce18c4f24e48344b2a0,https://review.opendev.org/313940,Refactor unit test for nova scenario utils,Refactor unit test for nova scenario utils  - Improve test cases for various methods - Add assertions and make them uniform across various   methods being tested  Change-Id: I6cbd0de35b87c93ad7530ce18c4f24e48344b2a0,testing,,,,,,
openstack%2Frally~master~I6cbd0de35b87c93ad7530ce18c4f24e48344b2a0,https://review.opendev.org/313940,Refactor unit test for nova scenario utils,Refactor unit test for nova scenario utils  - Improve test cases for various methods - Add assertions and make them uniform across various   methods being tested  Change-Id: I6cbd0de35b87c93ad7530ce18c4f24e48344b2a0,objective,,,,,,
openstack%2Fcinder~master~I8b86896e90a89d0c60f54c6b2a9ea3eda1841e9b,https://review.opendev.org/289877,VMware: Unit test refactoring,VMware: Unit test refactoring  There are unit tests which test multiple code paths and methods. This patch refactors the unit tests for the following methods in the vmdk module to fix this: * copy_volume_to_image * _in_use * retype  Change-Id: I8b86896e90a89d0c60f54c6b2a9ea3eda1841e9b,testing,,,,,,
openstack%2Fcinder~master~I8b86896e90a89d0c60f54c6b2a9ea3eda1841e9b,https://review.opendev.org/289877,VMware: Unit test refactoring,VMware: Unit test refactoring  There are unit tests which test multiple code paths and methods. This patch refactors the unit tests for the following methods in the vmdk module to fix this: * copy_volume_to_image * _in_use * retype  Change-Id: I8b86896e90a89d0c60f54c6b2a9ea3eda1841e9b,objective,,,,,,
openstack%2Fironic-inspector~master~If74221642723b0a6bea439dbcbdd360a43e7172f,https://review.opendev.org/304185,Refactor test_process,Refactor test_process  * Use fixtures instead of a self-invented decorator * Give proper names to mocks * Swift from inline mocks to @decorators * Split TestProcess into several test cases * Remove the old style of setting side_effect (via iter)  Change-Id: If74221642723b0a6bea439dbcbdd360a43e7172f,testing,,,,,,
openstack%2Fironic-inspector~master~If74221642723b0a6bea439dbcbdd360a43e7172f,https://review.opendev.org/304185,Refactor test_process,Refactor test_process  * Use fixtures instead of a self-invented decorator * Give proper names to mocks * Swift from inline mocks to @decorators * Split TestProcess into several test cases * Remove the old style of setting side_effect (via iter)  Change-Id: If74221642723b0a6bea439dbcbdd360a43e7172f,quality,,,,,,
openstack%2Fironic-inspector~master~If74221642723b0a6bea439dbcbdd360a43e7172f,https://review.opendev.org/304185,Refactor test_process,Refactor test_process  * Use fixtures instead of a self-invented decorator * Give proper names to mocks * Swift from inline mocks to @decorators * Split TestProcess into several test cases * Remove the old style of setting side_effect (via iter)  Change-Id: If74221642723b0a6bea439dbcbdd360a43e7172f,objective,,,,,,
openstack%2Ffuel-qa~stable%2Fmitaka~I2245b939e91bab9d4f48b072e89d86163a0dd6b0,https://review.opendev.org/310473,Add update testrail fields functionality for testrail reporter and small refactoring of description parsing,Add update testrail fields functionality for testrail reporter and small refactoring of description parsing  Add update_case() method to testrail client Pull parsing custom cases fields into _get_custom_cases_fields() method Add _get_fields_to_update() method to test cases uploader Change log message for up-to-date cases Add new file: datetime_util.py Add method that converts duration to testrail estimate format Register new file in the doc/testrail.rst Change duration regexp and pull it into compiled instance Pull tests discovering and test plan creation into   _create_test_plan_from_registry() function Pull various case checks into _is_case_processable() function Pull test case name getter actions into _get_test_case_name() function Pull case 'not included' verification into _is_not_included() function Pull case 'excluded' verification into _is_excluded() function Pull docstring getter actions into _get_docstring() function Pull docstring parsing actions into _parse_docstring() function Add support for multiline title and test case steps  Change-Id: I2245b939e91bab9d4f48b072e89d86163a0dd6b0 Closes-Bug: #1558008 (cherry picked from commit 4ac47dad9b8394fdbea8ea0a5d2501d5fd290c49),objective,,,,,,
openstack%2Ffuel-qa~stable%2Fmitaka~I2245b939e91bab9d4f48b072e89d86163a0dd6b0,https://review.opendev.org/310473,Add update testrail fields functionality for testrail reporter and small refactoring of description parsing,Add update testrail fields functionality for testrail reporter and small refactoring of description parsing  Add update_case() method to testrail client Pull parsing custom cases fields into _get_custom_cases_fields() method Add _get_fields_to_update() method to test cases uploader Change log message for up-to-date cases Add new file: datetime_util.py Add method that converts duration to testrail estimate format Register new file in the doc/testrail.rst Change duration regexp and pull it into compiled instance Pull tests discovering and test plan creation into   _create_test_plan_from_registry() function Pull various case checks into _is_case_processable() function Pull test case name getter actions into _get_test_case_name() function Pull case 'not included' verification into _is_not_included() function Pull case 'excluded' verification into _is_excluded() function Pull docstring getter actions into _get_docstring() function Pull docstring parsing actions into _parse_docstring() function Add support for multiline title and test case steps  Change-Id: I2245b939e91bab9d4f48b072e89d86163a0dd6b0 Closes-Bug: #1558008 (cherry picked from commit 4ac47dad9b8394fdbea8ea0a5d2501d5fd290c49),testing,,,,,,
openstack%2Ffuel-qa~stable%2Fmitaka~I2245b939e91bab9d4f48b072e89d86163a0dd6b0,https://review.opendev.org/310473,Add update testrail fields functionality for testrail reporter and small refactoring of description parsing,Add update testrail fields functionality for testrail reporter and small refactoring of description parsing  Add update_case() method to testrail client Pull parsing custom cases fields into _get_custom_cases_fields() method Add _get_fields_to_update() method to test cases uploader Change log message for up-to-date cases Add new file: datetime_util.py Add method that converts duration to testrail estimate format Register new file in the doc/testrail.rst Change duration regexp and pull it into compiled instance Pull tests discovering and test plan creation into   _create_test_plan_from_registry() function Pull various case checks into _is_case_processable() function Pull test case name getter actions into _get_test_case_name() function Pull case 'not included' verification into _is_not_included() function Pull case 'excluded' verification into _is_excluded() function Pull docstring getter actions into _get_docstring() function Pull docstring parsing actions into _parse_docstring() function Add support for multiline title and test case steps  Change-Id: I2245b939e91bab9d4f48b072e89d86163a0dd6b0 Closes-Bug: #1558008 (cherry picked from commit 4ac47dad9b8394fdbea8ea0a5d2501d5fd290c49),objective,,,,,,
openstack%2Fopenstack-ansible~master~I3629c9d0704a7412832d7e898463d376b4e13317,https://review.opendev.org/308047,Refactor main inventory function for testability,"Refactor main inventory function for testability  This change alters the dynamic_inventory.py file's main function with two main changes:      * main now accepts arguments, which could be the ArgParse parsed       arguments or a plain dictionary for testing     * return output to then be printed, instead of just printing.  With these changes, testing inventory can now be done via Python imports rather than a subprocess call. This make existing tests more clear, and allows for using pdb when creating future patches. With the subprocess method, a pdb in the dynamic_inventory.py would cause the test suite to hang, since the subprocess was waiting for input.  Existing functionality is *not* changed - arguments and output are simply being moved to make the code easier to test.  Change-Id: I3629c9d0704a7412832d7e898463d376b4e13317",testing,,,,,,
openstack%2Fopenstack-ansible~master~I3629c9d0704a7412832d7e898463d376b4e13317,https://review.opendev.org/308047,Refactor main inventory function for testability,"Refactor main inventory function for testability  This change alters the dynamic_inventory.py file's main function with two main changes:      * main now accepts arguments, which could be the ArgParse parsed       arguments or a plain dictionary for testing     * return output to then be printed, instead of just printing.  With these changes, testing inventory can now be done via Python imports rather than a subprocess call. This make existing tests more clear, and allows for using pdb when creating future patches. With the subprocess method, a pdb in the dynamic_inventory.py would cause the test suite to hang, since the subprocess was waiting for input.  Existing functionality is *not* changed - arguments and output are simply being moved to make the code easier to test.  Change-Id: I3629c9d0704a7412832d7e898463d376b4e13317",quality,,,,,,
openstack%2Fopenstack-ansible~master~I3629c9d0704a7412832d7e898463d376b4e13317,https://review.opendev.org/308047,Refactor main inventory function for testability,"Refactor main inventory function for testability  This change alters the dynamic_inventory.py file's main function with two main changes:      * main now accepts arguments, which could be the ArgParse parsed       arguments or a plain dictionary for testing     * return output to then be printed, instead of just printing.  With these changes, testing inventory can now be done via Python imports rather than a subprocess call. This make existing tests more clear, and allows for using pdb when creating future patches. With the subprocess method, a pdb in the dynamic_inventory.py would cause the test suite to hang, since the subprocess was waiting for input.  Existing functionality is *not* changed - arguments and output are simply being moved to make the code easier to test.  Change-Id: I3629c9d0704a7412832d7e898463d376b4e13317",objective,,,,,,
x%2Fgit-upstream~master~I94352f3c7cbf61a6036d4c4d564d1efcc60cc8f8,https://review.opendev.org/276234,Refactor import command tests to use scenarios,"Refactor import command tests to use scenarios  Move import command tests to use scenarios to build the trees and consolidate the additional test code as much as possible to a single function.  Using yaml to describe the trees results in easier to read test cases, which by following the existing format for other tests allows for consistency throughout the unit tests.  Change-Id: I94352f3c7cbf61a6036d4c4d564d1efcc60cc8f8",testing,,,,,,
x%2Fgit-upstream~master~I94352f3c7cbf61a6036d4c4d564d1efcc60cc8f8,https://review.opendev.org/276234,Refactor import command tests to use scenarios,"Refactor import command tests to use scenarios  Move import command tests to use scenarios to build the trees and consolidate the additional test code as much as possible to a single function.  Using yaml to describe the trees results in easier to read test cases, which by following the existing format for other tests allows for consistency throughout the unit tests.  Change-Id: I94352f3c7cbf61a6036d4c4d564d1efcc60cc8f8",quality,,,,,,
x%2Fgit-upstream~master~I94352f3c7cbf61a6036d4c4d564d1efcc60cc8f8,https://review.opendev.org/276234,Refactor import command tests to use scenarios,"Refactor import command tests to use scenarios  Move import command tests to use scenarios to build the trees and consolidate the additional test code as much as possible to a single function.  Using yaml to describe the trees results in easier to read test cases, which by following the existing format for other tests allows for consistency throughout the unit tests.  Change-Id: I94352f3c7cbf61a6036d4c4d564d1efcc60cc8f8",objective,,,,,,
openstack%2Fneutron~stable%2Fmitaka~I97aeb8d1d5773ef3d59e8f908aea34ccceb38378,https://review.opendev.org/299774,Refactor and fix dummy process fixture,"Remove obsolete keepalived PID files before start  This is a combination of 2 commits. The first commit's message is:  keepalived refuses to start and claims ""daemon already started"" when there is already a process with the same PID as found in either the VRRP or the main process PID file. This happens even in case when the new process is not keepalived. The situation can happen when the neutron node is reset and the obsolete PID files are not cleaned before neutron is started.  This commit adds PID file cleanup before keepalived start.  Closes-Bug: 1561046 Change-Id: Ib6b6f2fe76fe82253f195c9eab6b243d9eb76fa2 (cherry picked from commit e98fabb5836b12bc40a2b64a2668893ea73c2320)  2nd commit fixes the test, message is:  Refactor and fix dummy process fixture  Extracting the test fixture that creates a new process and leaves it running for a given amount of time into helpers where other fixtures for functional tests live. This both keeps the fixtures at one place and increases visibility of the fixture so that it can be reused in other tests. At the same time, the fixture is fixed as the original code omitted starting the process.  Change-Id: I97aeb8d1d5773ef3d59e8f908aea34ccceb38378 Related-Bug: 1561046 (cherry picked from commit 2690eed19a749fb1b50bb38f3d01fce0f1497f39)",testing,,,,,,
openstack%2Fneutron~stable%2Fmitaka~I97aeb8d1d5773ef3d59e8f908aea34ccceb38378,https://review.opendev.org/299774,Refactor and fix dummy process fixture,"Remove obsolete keepalived PID files before start  This is a combination of 2 commits. The first commit's message is:  keepalived refuses to start and claims ""daemon already started"" when there is already a process with the same PID as found in either the VRRP or the main process PID file. This happens even in case when the new process is not keepalived. The situation can happen when the neutron node is reset and the obsolete PID files are not cleaned before neutron is started.  This commit adds PID file cleanup before keepalived start.  Closes-Bug: 1561046 Change-Id: Ib6b6f2fe76fe82253f195c9eab6b243d9eb76fa2 (cherry picked from commit e98fabb5836b12bc40a2b64a2668893ea73c2320)  2nd commit fixes the test, message is:  Refactor and fix dummy process fixture  Extracting the test fixture that creates a new process and leaves it running for a given amount of time into helpers where other fixtures for functional tests live. This both keeps the fixtures at one place and increases visibility of the fixture so that it can be reused in other tests. At the same time, the fixture is fixed as the original code omitted starting the process.  Change-Id: I97aeb8d1d5773ef3d59e8f908aea34ccceb38378 Related-Bug: 1561046 (cherry picked from commit 2690eed19a749fb1b50bb38f3d01fce0f1497f39)",quality,,,,,,
openstack%2Fneutron~stable%2Fmitaka~I97aeb8d1d5773ef3d59e8f908aea34ccceb38378,https://review.opendev.org/299774,Refactor and fix dummy process fixture,"Remove obsolete keepalived PID files before start  This is a combination of 2 commits. The first commit's message is:  keepalived refuses to start and claims ""daemon already started"" when there is already a process with the same PID as found in either the VRRP or the main process PID file. This happens even in case when the new process is not keepalived. The situation can happen when the neutron node is reset and the obsolete PID files are not cleaned before neutron is started.  This commit adds PID file cleanup before keepalived start.  Closes-Bug: 1561046 Change-Id: Ib6b6f2fe76fe82253f195c9eab6b243d9eb76fa2 (cherry picked from commit e98fabb5836b12bc40a2b64a2668893ea73c2320)  2nd commit fixes the test, message is:  Refactor and fix dummy process fixture  Extracting the test fixture that creates a new process and leaves it running for a given amount of time into helpers where other fixtures for functional tests live. This both keeps the fixtures at one place and increases visibility of the fixture so that it can be reused in other tests. At the same time, the fixture is fixed as the original code omitted starting the process.  Change-Id: I97aeb8d1d5773ef3d59e8f908aea34ccceb38378 Related-Bug: 1561046 (cherry picked from commit 2690eed19a749fb1b50bb38f3d01fce0f1497f39)",objective,,,,,,
openstack%2Ftripleo-upgrade~stable%2Ftrain~Ia04f6fac9538ac5f13bc084c9e41dc00e62b84fb,https://review.opendev.org/745887,Refactor FFWD run to run on 1/3rd of controlplane,Refactor FFWD run to run on 1/3rd of controlplane  In order to pass the workload test we can't skip networker and other roles. We have to upgrade whole controlplane at once. Ceph OSD in this case can be updated together with Ceph Mon and it will not cause an outage.  Change-Id: Ia04f6fac9538ac5f13bc084c9e41dc00e62b84fb (cherry picked from commit 6884d3c0d5227b1b31b67f99e5c459465a954d27) (cherry picked from commit 389c95fb535036cc061cb1d771c0abddfde58cca),testing,,,,,,
openstack%2Ftripleo-upgrade~stable%2Ftrain~Ia04f6fac9538ac5f13bc084c9e41dc00e62b84fb,https://review.opendev.org/745887,Refactor FFWD run to run on 1/3rd of controlplane,Refactor FFWD run to run on 1/3rd of controlplane  In order to pass the workload test we can't skip networker and other roles. We have to upgrade whole controlplane at once. Ceph OSD in this case can be updated together with Ceph Mon and it will not cause an outage.  Change-Id: Ia04f6fac9538ac5f13bc084c9e41dc00e62b84fb (cherry picked from commit 6884d3c0d5227b1b31b67f99e5c459465a954d27) (cherry picked from commit 389c95fb535036cc061cb1d771c0abddfde58cca),integration,,,,,,
openstack%2Ftripleo-upgrade~stable%2Ftrain~Ia04f6fac9538ac5f13bc084c9e41dc00e62b84fb,https://review.opendev.org/745887,Refactor FFWD run to run on 1/3rd of controlplane,Refactor FFWD run to run on 1/3rd of controlplane  In order to pass the workload test we can't skip networker and other roles. We have to upgrade whole controlplane at once. Ceph OSD in this case can be updated together with Ceph Mon and it will not cause an outage.  Change-Id: Ia04f6fac9538ac5f13bc084c9e41dc00e62b84fb (cherry picked from commit 6884d3c0d5227b1b31b67f99e5c459465a954d27) (cherry picked from commit 389c95fb535036cc061cb1d771c0abddfde58cca),objective,,,,,,
openstack%2Ftripleo-upgrade~stable%2Fussuri~Ia04f6fac9538ac5f13bc084c9e41dc00e62b84fb,https://review.opendev.org/745886,Refactor FFWD run to run on 1/3rd of controlplane,Refactor FFWD run to run on 1/3rd of controlplane  In order to pass the workload test we can't skip networker and other roles. We have to upgrade whole controlplane at once. Ceph OSD in this case can be updated together with Ceph Mon and it will not cause an outage.  Change-Id: Ia04f6fac9538ac5f13bc084c9e41dc00e62b84fb (cherry picked from commit 6884d3c0d5227b1b31b67f99e5c459465a954d27),testing,,,,,,
openstack%2Ftripleo-upgrade~stable%2Fussuri~Ia04f6fac9538ac5f13bc084c9e41dc00e62b84fb,https://review.opendev.org/745886,Refactor FFWD run to run on 1/3rd of controlplane,Refactor FFWD run to run on 1/3rd of controlplane  In order to pass the workload test we can't skip networker and other roles. We have to upgrade whole controlplane at once. Ceph OSD in this case can be updated together with Ceph Mon and it will not cause an outage.  Change-Id: Ia04f6fac9538ac5f13bc084c9e41dc00e62b84fb (cherry picked from commit 6884d3c0d5227b1b31b67f99e5c459465a954d27),integration,,,,,,
openstack%2Ftripleo-upgrade~stable%2Fussuri~Ia04f6fac9538ac5f13bc084c9e41dc00e62b84fb,https://review.opendev.org/745886,Refactor FFWD run to run on 1/3rd of controlplane,Refactor FFWD run to run on 1/3rd of controlplane  In order to pass the workload test we can't skip networker and other roles. We have to upgrade whole controlplane at once. Ceph OSD in this case can be updated together with Ceph Mon and it will not cause an outage.  Change-Id: Ia04f6fac9538ac5f13bc084c9e41dc00e62b84fb (cherry picked from commit 6884d3c0d5227b1b31b67f99e5c459465a954d27),objective,,,,,,
openstack%2Ftripleo-upgrade~master~Ia04f6fac9538ac5f13bc084c9e41dc00e62b84fb,https://review.opendev.org/743952,Refactor FFWD run to run on 1/3rd of controlplane,Refactor FFWD run to run on 1/3rd of controlplane  In order to pass the workload test we can't skip networker and other roles. We have to upgrade whole controlplane at once. Ceph OSD in this case can be updated together with Ceph Mon and it will not cause an outage.  Change-Id: Ia04f6fac9538ac5f13bc084c9e41dc00e62b84fb,testing,,,,,,
openstack%2Ftripleo-upgrade~master~Ia04f6fac9538ac5f13bc084c9e41dc00e62b84fb,https://review.opendev.org/743952,Refactor FFWD run to run on 1/3rd of controlplane,Refactor FFWD run to run on 1/3rd of controlplane  In order to pass the workload test we can't skip networker and other roles. We have to upgrade whole controlplane at once. Ceph OSD in this case can be updated together with Ceph Mon and it will not cause an outage.  Change-Id: Ia04f6fac9538ac5f13bc084c9e41dc00e62b84fb,integration,,,,,,
openstack%2Ftripleo-upgrade~master~Ia04f6fac9538ac5f13bc084c9e41dc00e62b84fb,https://review.opendev.org/743952,Refactor FFWD run to run on 1/3rd of controlplane,Refactor FFWD run to run on 1/3rd of controlplane  In order to pass the workload test we can't skip networker and other roles. We have to upgrade whole controlplane at once. Ceph OSD in this case can be updated together with Ceph Mon and it will not cause an outage.  Change-Id: Ia04f6fac9538ac5f13bc084c9e41dc00e62b84fb,objective,,,,,,
openstack%2Fopenstack-ansible~master~Icbd96609d958197edcb0d5a8f4b1abcd8c7fc1e4,https://review.opendev.org/298981,Refactor user config loading into function,Refactor user config loading into function  Refactoring into a testable function in order to add further test coverage as well as cleanup the implementation of the main function to be nothing more than a sequence of clear and concise function calls  Change-Id: Icbd96609d958197edcb0d5a8f4b1abcd8c7fc1e4,testing,,,,,,
openstack%2Fopenstack-ansible~master~Icbd96609d958197edcb0d5a8f4b1abcd8c7fc1e4,https://review.opendev.org/298981,Refactor user config loading into function,Refactor user config loading into function  Refactoring into a testable function in order to add further test coverage as well as cleanup the implementation of the main function to be nothing more than a sequence of clear and concise function calls  Change-Id: Icbd96609d958197edcb0d5a8f4b1abcd8c7fc1e4,quality,,,,,,
openstack%2Fopenstack-ansible~master~Icbd96609d958197edcb0d5a8f4b1abcd8c7fc1e4,https://review.opendev.org/298981,Refactor user config loading into function,Refactor user config loading into function  Refactoring into a testable function in order to add further test coverage as well as cleanup the implementation of the main function to be nothing more than a sequence of clear and concise function calls  Change-Id: Icbd96609d958197edcb0d5a8f4b1abcd8c7fc1e4,objective,,,,,,
openstack%2Fswift~master~I55f7cd279436b5c9f71d81fecf06021380e35579,https://review.opendev.org/260325,Refactor CORS unit tests,"Add CORS unit tests more  This is a follow-up patch for https://review.openstack.org/#/c/258392/ That one added good unit test cases for various kinds of allowe_origin like '*' or ''(empty). However, the result of handling in Swift proxy will depend on strict_cors_mode option configuration.  This patch refactors the unit tests to split out for strict_cors_mode = on/off and add some missing unit tests for each case.  Change-Id: I55f7cd279436b5c9f71d81fecf06021380e35579",testing,,,,,,
openstack%2Fswift~master~I55f7cd279436b5c9f71d81fecf06021380e35579,https://review.opendev.org/260325,Refactor CORS unit tests,"Add CORS unit tests more  This is a follow-up patch for https://review.openstack.org/#/c/258392/ That one added good unit test cases for various kinds of allowe_origin like '*' or ''(empty). However, the result of handling in Swift proxy will depend on strict_cors_mode option configuration.  This patch refactors the unit tests to split out for strict_cors_mode = on/off and add some missing unit tests for each case.  Change-Id: I55f7cd279436b5c9f71d81fecf06021380e35579",objective,,,,,,
osf%2Frefstack~master~I3c8a4826c4c52c58978817c0aca8ec6da136185f,https://review.opendev.org/300273,Add/refactor functional API tests,"Add/refactor functional API tests  More functional tests were added to increase coverage, and some existing test cases were fixed as they apparently were not formatted properly.  Change-Id: I3c8a4826c4c52c58978817c0aca8ec6da136185f",testing,,,,,,
osf%2Frefstack~master~I3c8a4826c4c52c58978817c0aca8ec6da136185f,https://review.opendev.org/300273,Add/refactor functional API tests,"Add/refactor functional API tests  More functional tests were added to increase coverage, and some existing test cases were fixed as they apparently were not formatted properly.  Change-Id: I3c8a4826c4c52c58978817c0aca8ec6da136185f",quality,,,,,,
osf%2Frefstack~master~I3c8a4826c4c52c58978817c0aca8ec6da136185f,https://review.opendev.org/300273,Add/refactor functional API tests,"Add/refactor functional API tests  More functional tests were added to increase coverage, and some existing test cases were fixed as they apparently were not formatted properly.  Change-Id: I3c8a4826c4c52c58978817c0aca8ec6da136185f",objective,,,,,,
openstack%2Ffuel-qa~stable%2F7.0~Ife5f3626d029d061413f6345a72ac630fa9da154,https://review.opendev.org/300856,Refactoring of upgrade tests,"Refactoring of upgrade tests  Adding to function upgrade_master possibility of choosing rollback, refactoring some test cases to use upgrade_master method.  Change-Id: Ife5f3626d029d061413f6345a72ac630fa9da154 Closes-Bug: #1486990",testing,,,,,,
openstack%2Ffuel-qa~stable%2F7.0~Ife5f3626d029d061413f6345a72ac630fa9da154,https://review.opendev.org/300856,Refactoring of upgrade tests,"Refactoring of upgrade tests  Adding to function upgrade_master possibility of choosing rollback, refactoring some test cases to use upgrade_master method.  Change-Id: Ife5f3626d029d061413f6345a72ac630fa9da154 Closes-Bug: #1486990",objective,,,,,,
openstack%2Ffuel-qa~stable%2F7.0~Ife5f3626d029d061413f6345a72ac630fa9da154,https://review.opendev.org/300856,Refactoring of upgrade tests,"Refactoring of upgrade tests  Adding to function upgrade_master possibility of choosing rollback, refactoring some test cases to use upgrade_master method.  Change-Id: Ife5f3626d029d061413f6345a72ac630fa9da154 Closes-Bug: #1486990",objective,,,,,,
openstack%2Fneutron~stable%2Fkilo~I97aeb8d1d5773ef3d59e8f908aea34ccceb38378,https://review.opendev.org/299784,Refactor and fix dummy process fixture,"Remove obsolete keepalived PID files before start  This is a combination of 2 commits. The first commit's message is:  keepalived refuses to start and claims ""daemon already started"" when there is already a process with the same PID as found in either the VRRP or the main process PID file. This happens even in case when the new process is not keepalived. The situation can happen when the neutron node is reset and the obsolete PID files are not cleaned before neutron is started.  This commit adds PID file cleanup before keepalived start.  Closes-Bug: 1561046 Change-Id: Ib6b6f2fe76fe82253f195c9eab6b243d9eb76fa2 (cherry picked from commit e98fabb5836b12bc40a2b64a2668893ea73c2320)  2nd commit fixes the test, message is:  Refactor and fix dummy process fixture  Extracting the test fixture that creates a new process and leaves it running for a given amount of time into helpers where other fixtures for functional tests live. This both keeps the fixtures at one place and increases visibility of the fixture so that it can be reused in other tests. At the same time, the fixture is fixed as the original code omitted starting the process.  This commit has been adjusted to kilo's version of fixtures by modifying setUp() method.  Change-Id: I97aeb8d1d5773ef3d59e8f908aea34ccceb38378 Related-Bug: 1561046 (cherry picked from commit 2690eed19a749fb1b50bb38f3d01fce0f1497f39)",testing,,,,,,
openstack%2Fneutron~stable%2Fkilo~I97aeb8d1d5773ef3d59e8f908aea34ccceb38378,https://review.opendev.org/299784,Refactor and fix dummy process fixture,"Remove obsolete keepalived PID files before start  This is a combination of 2 commits. The first commit's message is:  keepalived refuses to start and claims ""daemon already started"" when there is already a process with the same PID as found in either the VRRP or the main process PID file. This happens even in case when the new process is not keepalived. The situation can happen when the neutron node is reset and the obsolete PID files are not cleaned before neutron is started.  This commit adds PID file cleanup before keepalived start.  Closes-Bug: 1561046 Change-Id: Ib6b6f2fe76fe82253f195c9eab6b243d9eb76fa2 (cherry picked from commit e98fabb5836b12bc40a2b64a2668893ea73c2320)  2nd commit fixes the test, message is:  Refactor and fix dummy process fixture  Extracting the test fixture that creates a new process and leaves it running for a given amount of time into helpers where other fixtures for functional tests live. This both keeps the fixtures at one place and increases visibility of the fixture so that it can be reused in other tests. At the same time, the fixture is fixed as the original code omitted starting the process.  This commit has been adjusted to kilo's version of fixtures by modifying setUp() method.  Change-Id: I97aeb8d1d5773ef3d59e8f908aea34ccceb38378 Related-Bug: 1561046 (cherry picked from commit 2690eed19a749fb1b50bb38f3d01fce0f1497f39)",quality,,,,,,
openstack%2Fneutron~stable%2Fkilo~I97aeb8d1d5773ef3d59e8f908aea34ccceb38378,https://review.opendev.org/299784,Refactor and fix dummy process fixture,"Remove obsolete keepalived PID files before start  This is a combination of 2 commits. The first commit's message is:  keepalived refuses to start and claims ""daemon already started"" when there is already a process with the same PID as found in either the VRRP or the main process PID file. This happens even in case when the new process is not keepalived. The situation can happen when the neutron node is reset and the obsolete PID files are not cleaned before neutron is started.  This commit adds PID file cleanup before keepalived start.  Closes-Bug: 1561046 Change-Id: Ib6b6f2fe76fe82253f195c9eab6b243d9eb76fa2 (cherry picked from commit e98fabb5836b12bc40a2b64a2668893ea73c2320)  2nd commit fixes the test, message is:  Refactor and fix dummy process fixture  Extracting the test fixture that creates a new process and leaves it running for a given amount of time into helpers where other fixtures for functional tests live. This both keeps the fixtures at one place and increases visibility of the fixture so that it can be reused in other tests. At the same time, the fixture is fixed as the original code omitted starting the process.  This commit has been adjusted to kilo's version of fixtures by modifying setUp() method.  Change-Id: I97aeb8d1d5773ef3d59e8f908aea34ccceb38378 Related-Bug: 1561046 (cherry picked from commit 2690eed19a749fb1b50bb38f3d01fce0f1497f39)",objective,,,,,,
openstack%2Fneutron~stable%2Fliberty~I97aeb8d1d5773ef3d59e8f908aea34ccceb38378,https://review.opendev.org/299788,Refactor and fix dummy process fixture,"Remove obsolete keepalived PID files before start  This is a combination of 2 commits. The first commit's message is:  keepalived refuses to start and claims ""daemon already started"" when there is already a process with the same PID as found in either the VRRP or the main process PID file. This happens even in case when the new process is not keepalived. The situation can happen when the neutron node is reset and the obsolete PID files are not cleaned before neutron is started.  This commit adds PID file cleanup before keepalived start.  Closes-Bug: 1561046 Change-Id: Ib6b6f2fe76fe82253f195c9eab6b243d9eb76fa2 (cherry picked from commit e98fabb5836b12bc40a2b64a2668893ea73c2320)  2nd commit fixes the test, message is:  Refactor and fix dummy process fixture  Extracting the test fixture that creates a new process and leaves it running for a given amount of time into helpers where other fixtures for functional tests live. This both keeps the fixtures at one place and increases visibility of the fixture so that it can be reused in other tests. At the same time, the fixture is fixed as the original code omitted starting the process.  Change-Id: I97aeb8d1d5773ef3d59e8f908aea34ccceb38378 Related-Bug: 1561046 (cherry picked from commit 2690eed19a749fb1b50bb38f3d01fce0f1497f39)",testing,,,,,,
openstack%2Fneutron~stable%2Fliberty~I97aeb8d1d5773ef3d59e8f908aea34ccceb38378,https://review.opendev.org/299788,Refactor and fix dummy process fixture,"Remove obsolete keepalived PID files before start  This is a combination of 2 commits. The first commit's message is:  keepalived refuses to start and claims ""daemon already started"" when there is already a process with the same PID as found in either the VRRP or the main process PID file. This happens even in case when the new process is not keepalived. The situation can happen when the neutron node is reset and the obsolete PID files are not cleaned before neutron is started.  This commit adds PID file cleanup before keepalived start.  Closes-Bug: 1561046 Change-Id: Ib6b6f2fe76fe82253f195c9eab6b243d9eb76fa2 (cherry picked from commit e98fabb5836b12bc40a2b64a2668893ea73c2320)  2nd commit fixes the test, message is:  Refactor and fix dummy process fixture  Extracting the test fixture that creates a new process and leaves it running for a given amount of time into helpers where other fixtures for functional tests live. This both keeps the fixtures at one place and increases visibility of the fixture so that it can be reused in other tests. At the same time, the fixture is fixed as the original code omitted starting the process.  Change-Id: I97aeb8d1d5773ef3d59e8f908aea34ccceb38378 Related-Bug: 1561046 (cherry picked from commit 2690eed19a749fb1b50bb38f3d01fce0f1497f39)",quality,,,,,,
openstack%2Fneutron~stable%2Fliberty~I97aeb8d1d5773ef3d59e8f908aea34ccceb38378,https://review.opendev.org/299788,Refactor and fix dummy process fixture,"Remove obsolete keepalived PID files before start  This is a combination of 2 commits. The first commit's message is:  keepalived refuses to start and claims ""daemon already started"" when there is already a process with the same PID as found in either the VRRP or the main process PID file. This happens even in case when the new process is not keepalived. The situation can happen when the neutron node is reset and the obsolete PID files are not cleaned before neutron is started.  This commit adds PID file cleanup before keepalived start.  Closes-Bug: 1561046 Change-Id: Ib6b6f2fe76fe82253f195c9eab6b243d9eb76fa2 (cherry picked from commit e98fabb5836b12bc40a2b64a2668893ea73c2320)  2nd commit fixes the test, message is:  Refactor and fix dummy process fixture  Extracting the test fixture that creates a new process and leaves it running for a given amount of time into helpers where other fixtures for functional tests live. This both keeps the fixtures at one place and increases visibility of the fixture so that it can be reused in other tests. At the same time, the fixture is fixed as the original code omitted starting the process.  Change-Id: I97aeb8d1d5773ef3d59e8f908aea34ccceb38378 Related-Bug: 1561046 (cherry picked from commit 2690eed19a749fb1b50bb38f3d01fce0f1497f39)",objective,,,,,,
openstack%2Fmistral~stable%2Fmitaka~I0330870e4382f01c4519b5c48e43ac50a08db338,https://review.opendev.org/299741,Refactor workflow controller and fix a bug in _fail_workflow(),"Refactor workflow controller and fix a bug in _fail010_workflow()  * Method get_controller is moved out from WorkflowController class   because it's not related with its functionality directly * Fixed tests accordingly * ""not found"" test has been removed because there's no way now to   make ""not found"" exceptin get raised. In order to make it happen   we need to have a new workflow specification class w/o corresponding   WorkflowController implementation. So that exception is just left   just to check ourselves when we're working on a new WorkflowController   implementation.  Change-Id: I0330870e4382f01c4519b5c48e43ac50a08db338 (cherry picked from commit 9a1a157274663cf812d577d3702f3b5a12c0ca01)",testing,,,,,,
openstack%2Fmistral~stable%2Fmitaka~I0330870e4382f01c4519b5c48e43ac50a08db338,https://review.opendev.org/299741,Refactor workflow controller and fix a bug in _fail_workflow(),"Refactor workflow controller and fix a bug in _fail010_workflow()  * Method get_controller is moved out from WorkflowController class   because it's not related with its functionality directly * Fixed tests accordingly * ""not found"" test has been removed because there's no way now to   make ""not found"" exceptin get raised. In order to make it happen   we need to have a new workflow specification class w/o corresponding   WorkflowController implementation. So that exception is just left   just to check ourselves when we're working on a new WorkflowController   implementation.  Change-Id: I0330870e4382f01c4519b5c48e43ac50a08db338 (cherry picked from commit 9a1a157274663cf812d577d3702f3b5a12c0ca01)",quality,,,,,,
openstack%2Fmistral~stable%2Fmitaka~I0330870e4382f01c4519b5c48e43ac50a08db338,https://review.opendev.org/299741,Refactor workflow controller and fix a bug in _fail_workflow(),"Refactor workflow controller and fix a bug in _fail010_workflow()  * Method get_controller is moved out from WorkflowController class   because it's not related with its functionality directly * Fixed tests accordingly * ""not found"" test has been removed because there's no way now to   make ""not found"" exceptin get raised. In order to make it happen   we need to have a new workflow specification class w/o corresponding   WorkflowController implementation. So that exception is just left   just to check ourselves when we're working on a new WorkflowController   implementation.  Change-Id: I0330870e4382f01c4519b5c48e43ac50a08db338 (cherry picked from commit 9a1a157274663cf812d577d3702f3b5a12c0ca01)",objective,,,,,,
openstack%2Fneutron~master~I97aeb8d1d5773ef3d59e8f908aea34ccceb38378,https://review.opendev.org/299211,Refactor and fix dummy process fixture,"Refactor and fix dummy process fixture  Extracting the test fixture that creates a new process and leaves it running for a given amount of time into helpers where other fixtures for functional tests live. This both keeps the fixtures at one place and increases visibility of the fixture so that it can be reused in other tests. At the same time, the fixture is fixed as the original code omitted starting the process.  Change-Id: I97aeb8d1d5773ef3d59e8f908aea34ccceb38378 Related-Bug: 1561046",testing,,,,,,
openstack%2Fneutron~master~I97aeb8d1d5773ef3d59e8f908aea34ccceb38378,https://review.opendev.org/299211,Refactor and fix dummy process fixture,"Refactor and fix dummy process fixture  Extracting the test fixture that creates a new process and leaves it running for a given amount of time into helpers where other fixtures for functional tests live. This both keeps the fixtures at one place and increases visibility of the fixture so that it can be reused in other tests. At the same time, the fixture is fixed as the original code omitted starting the process.  Change-Id: I97aeb8d1d5773ef3d59e8f908aea34ccceb38378 Related-Bug: 1561046",quality,,,,,,
openstack%2Fneutron~master~I97aeb8d1d5773ef3d59e8f908aea34ccceb38378,https://review.opendev.org/299211,Refactor and fix dummy process fixture,"Refactor and fix dummy process fixture  Extracting the test fixture that creates a new process and leaves it running for a given amount of time into helpers where other fixtures for functional tests live. This both keeps the fixtures at one place and increases visibility of the fixture so that it can be reused in other tests. At the same time, the fixture is fixed as the original code omitted starting the process.  Change-Id: I97aeb8d1d5773ef3d59e8f908aea34ccceb38378 Related-Bug: 1561046",objective,,,,,,
openstack%2Fneutron~stable%2Fliberty~I663f1264fb3963789b79a4a7c3e46d232b2f0620,https://review.opendev.org/274053,Optimize and refactor router delete execution,Refactor router delete processing  The discussion in [2] indicated that [1] would lead to orphaned items during error cases.  This refactoring replaces the optimistic approach followed by [1] with a separate delete code path that does not execute the operations that take place within the namespace that will be removed.  Operations that take place outside of those namespaces are still performed to ensure that no orphaned items result.  A comment has been added to the functional test to explain what case is being tested.  [1] https://review.openstack.org/#/c/240971 [2] conversation starting at http://goo.gl/bZgvqW  Conflicts:         neutron/agent/l3/dvr_edge_ha_router.py         neutron/agent/l3/router_info.py         neutron/tests/functional/agent/l3/test_dvr_router.py  Change-Id: I663f1264fb3963789b79a4a7c3e46d232b2f0620 Signed-off-by: Ryan Moats <rmoats@us.ibm.com> (cherry picked from commit 300f73d489ce0131035bac59a1f12787e20bf3ab),testing,,,,,,
openstack%2Fneutron~stable%2Fliberty~I663f1264fb3963789b79a4a7c3e46d232b2f0620,https://review.opendev.org/274053,Optimize and refactor router delete execution,Refactor router delete processing  The discussion in [2] indicated that [1] would lead to orphaned items during error cases.  This refactoring replaces the optimistic approach followed by [1] with a separate delete code path that does not execute the operations that take place within the namespace that will be removed.  Operations that take place outside of those namespaces are still performed to ensure that no orphaned items result.  A comment has been added to the functional test to explain what case is being tested.  [1] https://review.openstack.org/#/c/240971 [2] conversation starting at http://goo.gl/bZgvqW  Conflicts:         neutron/agent/l3/dvr_edge_ha_router.py         neutron/agent/l3/router_info.py         neutron/tests/functional/agent/l3/test_dvr_router.py  Change-Id: I663f1264fb3963789b79a4a7c3e46d232b2f0620 Signed-off-by: Ryan Moats <rmoats@us.ibm.com> (cherry picked from commit 300f73d489ce0131035bac59a1f12787e20bf3ab),quality,,,,,,
openstack%2Fneutron~stable%2Fliberty~I663f1264fb3963789b79a4a7c3e46d232b2f0620,https://review.opendev.org/274053,Optimize and refactor router delete execution,Refactor router delete processing  The discussion in [2] indicated that [1] would lead to orphaned items during error cases.  This refactoring replaces the optimistic approach followed by [1] with a separate delete code path that does not execute the operations that take place within the namespace that will be removed.  Operations that take place outside of those namespaces are still performed to ensure that no orphaned items result.  A comment has been added to the functional test to explain what case is being tested.  [1] https://review.openstack.org/#/c/240971 [2] conversation starting at http://goo.gl/bZgvqW  Conflicts:         neutron/agent/l3/dvr_edge_ha_router.py         neutron/agent/l3/router_info.py         neutron/tests/functional/agent/l3/test_dvr_router.py  Change-Id: I663f1264fb3963789b79a4a7c3e46d232b2f0620 Signed-off-by: Ryan Moats <rmoats@us.ibm.com> (cherry picked from commit 300f73d489ce0131035bac59a1f12787e20bf3ab),objective,,,,,,
airship%2Fairshipctl~master~I80c449e213d9aed9abd11fe794afac07ca16bdc6,https://review.opendev.org/744055,Add and refactor cluster cmd unit tests,"Add and refactor cluster cmd unit tests  This patch adds some missing cmd unit tests for cluster module and refactors current ones as well, slightly improving test coverage.  Change-Id: I80c449e213d9aed9abd11fe794afac07ca16bdc6 Signed-off-by: Ruslan Aliev <raliev@mirantis.com>",testing,,,,,,
airship%2Fairshipctl~master~I80c449e213d9aed9abd11fe794afac07ca16bdc6,https://review.opendev.org/744055,Add and refactor cluster cmd unit tests,"Add and refactor cluster cmd unit tests  This patch adds some missing cmd unit tests for cluster module and refactors current ones as well, slightly improving test coverage.  Change-Id: I80c449e213d9aed9abd11fe794afac07ca16bdc6 Signed-off-by: Ruslan Aliev <raliev@mirantis.com>",objective,,,,,,
openstack%2Fcastellan~master~I00af70554a21c957bb88caa9e6a052089020d3f7,https://review.opendev.org/290103,Refactor Barbican Key Manager Tests,Refactor Barbican Key Manager Tests  Refactor Barbican Key Manager Test Cases with different auth types to inherit from a common base class.  Change-Id: I00af70554a21c957bb88caa9e6a052089020d3f7,testing,,,,,,
openstack%2Fcastellan~master~I00af70554a21c957bb88caa9e6a052089020d3f7,https://review.opendev.org/290103,Refactor Barbican Key Manager Tests,Refactor Barbican Key Manager Tests  Refactor Barbican Key Manager Test Cases with different auth types to inherit from a common base class.  Change-Id: I00af70554a21c957bb88caa9e6a052089020d3f7,quality,,,,,,
openstack%2Fcastellan~master~I00af70554a21c957bb88caa9e6a052089020d3f7,https://review.opendev.org/290103,Refactor Barbican Key Manager Tests,Refactor Barbican Key Manager Tests  Refactor Barbican Key Manager Test Cases with different auth types to inherit from a common base class.  Change-Id: I00af70554a21c957bb88caa9e6a052089020d3f7,objective,,,,,,
openstack%2Ffreezer~master~I46194b40b3a65c15b6095cfb7388dcfd30d95997,https://review.opendev.org/288416,Refactoring of code:,"Refactoring of code:  1) new snapshot module with code vss, lvm and part of backup.py - create_snapshot and remove_snapshot This module should contain all code related shadow, vss and any new snapshots.  2) new openstack module with code from osclient, restore and backup (BackupOS) This module should contain code related to cinder/nova backups  3) new utils module with code from utils, win_utils, bandwidth, config, exec_cmd, validator, streaming This module should containd code related to anything that cannot be extracted to its own module  4) new test modules - snapshot, utils, openstack and apiclient. Test scheduler daemon is now located in scheduler module.  5) Backup.py is deleted and code placed to openstack.backup (BackupOS) and to job.BackupJob  Change-Id: I46194b40b3a65c15b6095cfb7388dcfd30d95997",testing,,,,,,
openstack%2Ffreezer~master~I46194b40b3a65c15b6095cfb7388dcfd30d95997,https://review.opendev.org/288416,Refactoring of code:,"Refactoring of code:  1) new snapshot module with code vss, lvm and part of backup.py - create_snapshot and remove_snapshot This module should contain all code related shadow, vss and any new snapshots.  2) new openstack module with code from osclient, restore and backup (BackupOS) This module should contain code related to cinder/nova backups  3) new utils module with code from utils, win_utils, bandwidth, config, exec_cmd, validator, streaming This module should containd code related to anything that cannot be extracted to its own module  4) new test modules - snapshot, utils, openstack and apiclient. Test scheduler daemon is now located in scheduler module.  5) Backup.py is deleted and code placed to openstack.backup (BackupOS) and to job.BackupJob  Change-Id: I46194b40b3a65c15b6095cfb7388dcfd30d95997",quality,,,,,,
openstack%2Ffreezer~master~I46194b40b3a65c15b6095cfb7388dcfd30d95997,https://review.opendev.org/288416,Refactoring of code:,"Refactoring of code:  1) new snapshot module with code vss, lvm and part of backup.py - create_snapshot and remove_snapshot This module should contain all code related shadow, vss and any new snapshots.  2) new openstack module with code from osclient, restore and backup (BackupOS) This module should contain code related to cinder/nova backups  3) new utils module with code from utils, win_utils, bandwidth, config, exec_cmd, validator, streaming This module should containd code related to anything that cannot be extracted to its own module  4) new test modules - snapshot, utils, openstack and apiclient. Test scheduler daemon is now located in scheduler module.  5) Backup.py is deleted and code placed to openstack.backup (BackupOS) and to job.BackupJob  Change-Id: I46194b40b3a65c15b6095cfb7388dcfd30d95997",objective,,,,,,
openstack%2Fopenstack-chef-repo~master~Ic1a1863343be0d0d21b66a804af18c67ee625ee0,https://review.opendev.org/289809,add heat back to allinone role after refactoring,add heat back to allinone role after refactoring  * added orchestration recipes to integration test (allinone role) * added heat queries back to basic_queries in Rakefile (were removed previously   until refactore)  Change-Id: Ic1a1863343be0d0d21b66a804af18c67ee625ee0 Implements: blueprint cookbook-refactoring Depends-On: I16a29e28068d106f0edcbe04cb529aabbbed1ac5,testing,,,,,,
openstack%2Fopenstack-chef-repo~master~Ic1a1863343be0d0d21b66a804af18c67ee625ee0,https://review.opendev.org/289809,add heat back to allinone role after refactoring,add heat back to allinone role after refactoring  * added orchestration recipes to integration test (allinone role) * added heat queries back to basic_queries in Rakefile (were removed previously   until refactore)  Change-Id: Ic1a1863343be0d0d21b66a804af18c67ee625ee0 Implements: blueprint cookbook-refactoring Depends-On: I16a29e28068d106f0edcbe04cb529aabbbed1ac5,objective,,,,,,
openstack%2Fopenstack-chef-repo~master~Ic1a1863343be0d0d21b66a804af18c67ee625ee0,https://review.opendev.org/289809,add heat back to allinone role after refactoring,add heat back to allinone role after refactoring  * added orchestration recipes to integration test (allinone role) * added heat queries back to basic_queries in Rakefile (were removed previously   until refactore)  Change-Id: Ic1a1863343be0d0d21b66a804af18c67ee625ee0 Implements: blueprint cookbook-refactoring Depends-On: I16a29e28068d106f0edcbe04cb529aabbbed1ac5,objective,,,,,,
openstack%2Fironic~master~I05dc9b8f594ea3d20e2a7fed72476bb4dd6b819a,https://review.opendev.org/266238,Refactor the management verbs check to utils,"Refactor the management verbs check to utils  There are some API version checks in the utils like fields, provisioning state: https://github.com/openstack/ironic/blob/master/ironic/api/controllers/v1/utils.py#L190 https://github.com/openstack/ironic/blob/master/ironic/api/controllers/v1/utils.py#L202  Also, there is a API version related check about management verbs: https://github.com/openstack/ironic/blob/master/ironic/api/controllers/v1/node.py#L107  Will move the management verbs check in the utils to contain all the API version related check code. Also add some related test cases.  Change-Id: I05dc9b8f594ea3d20e2a7fed72476bb4dd6b819a",testing,,,,,,
openstack%2Fironic~master~I05dc9b8f594ea3d20e2a7fed72476bb4dd6b819a,https://review.opendev.org/266238,Refactor the management verbs check to utils,"Refactor the management verbs check to utils  There are some API version checks in the utils like fields, provisioning state: https://github.com/openstack/ironic/blob/master/ironic/api/controllers/v1/utils.py#L190 https://github.com/openstack/ironic/blob/master/ironic/api/controllers/v1/utils.py#L202  Also, there is a API version related check about management verbs: https://github.com/openstack/ironic/blob/master/ironic/api/controllers/v1/node.py#L107  Will move the management verbs check in the utils to contain all the API version related check code. Also add some related test cases.  Change-Id: I05dc9b8f594ea3d20e2a7fed72476bb4dd6b819a",objective,,,,,,
openstack%2Fironic-inspector~master~Ie460b550031f49c53375270ded240131cb5f124d,https://review.opendev.org/287731,Refactor base test classes,Refactor base test classes  - use config fixture - explicitly different config init for unit vs functional tests  Change-Id: Ie460b550031f49c53375270ded240131cb5f124d,testing,,,,,,
openstack%2Fironic-inspector~master~Ie460b550031f49c53375270ded240131cb5f124d,https://review.opendev.org/287731,Refactor base test classes,Refactor base test classes  - use config fixture - explicitly different config init for unit vs functional tests  Change-Id: Ie460b550031f49c53375270ded240131cb5f124d,quality,,,,,,
openstack%2Fironic-inspector~master~Ie460b550031f49c53375270ded240131cb5f124d,https://review.opendev.org/287731,Refactor base test classes,Refactor base test classes  - use config fixture - explicitly different config init for unit vs functional tests  Change-Id: Ie460b550031f49c53375270ded240131cb5f124d,objective,,,,,,
openstack%2Ffuel-library~master~I86c04e3e5de204a221ba2c52717fb5adc1fa6b72,https://review.opendev.org/284765,Refactor master node noop test,[WIP] Refactor master node noop test  Change-Id: I86c04e3e5de204a221ba2c52717fb5adc1fa6b72 Closes-Bug: 1543533,testing,,,,,,
openstack%2Ffuel-library~master~I86c04e3e5de204a221ba2c52717fb5adc1fa6b72,https://review.opendev.org/284765,Refactor master node noop test,[WIP] Refactor master node noop test  Change-Id: I86c04e3e5de204a221ba2c52717fb5adc1fa6b72 Closes-Bug: 1543533,objective,,,,,,
openstack%2Fmanila~stable%2Fliberty~Ia584e3e6bd02f937df7630a1d09d49c888f77c8f,https://review.opendev.org/280828,Refactor share metadata tests to use DB,"Refactor share metadata tests to use DB  For the moment tests in 'manila.tests.api.v1.test_share_metadata' module mock all DB requests. It leads to failures in main code if we use DB-specific things. So, refactor all tests in that module to use test DB to unblock usage of DB-specific things.  Change-Id: Ia584e3e6bd02f937df7630a1d09d49c888f77c8f Partial-Bug: #1528227 (cherry picked from commit 7319e0fe6f52c74b09fbfb4bca49ef49322ecc0e)",testing,,,,,,
openstack%2Fmanila~stable%2Fliberty~Ia584e3e6bd02f937df7630a1d09d49c888f77c8f,https://review.opendev.org/280828,Refactor share metadata tests to use DB,"Refactor share metadata tests to use DB  For the moment tests in 'manila.tests.api.v1.test_share_metadata' module mock all DB requests. It leads to failures in main code if we use DB-specific things. So, refactor all tests in that module to use test DB to unblock usage of DB-specific things.  Change-Id: Ia584e3e6bd02f937df7630a1d09d49c888f77c8f Partial-Bug: #1528227 (cherry picked from commit 7319e0fe6f52c74b09fbfb4bca49ef49322ecc0e)",integration,,,,,,
openstack%2Fmanila~stable%2Fliberty~Ia584e3e6bd02f937df7630a1d09d49c888f77c8f,https://review.opendev.org/280828,Refactor share metadata tests to use DB,"Refactor share metadata tests to use DB  For the moment tests in 'manila.tests.api.v1.test_share_metadata' module mock all DB requests. It leads to failures in main code if we use DB-specific things. So, refactor all tests in that module to use test DB to unblock usage of DB-specific things.  Change-Id: Ia584e3e6bd02f937df7630a1d09d49c888f77c8f Partial-Bug: #1528227 (cherry picked from commit 7319e0fe6f52c74b09fbfb4bca49ef49322ecc0e)",objective,,,,,,
openstack%2Fstorlets~master~If19187d68b27ac8eb1535475de8ff5c3dfa5ee2d,https://review.opendev.org/277322,Refactor test_storlet_handler,[WIP] Refactor test_storlet_handler  Remaining TODOs  * Refactor whole test cases  * Rebase to the ongoing refactoring patch  * Add Asserts about request parameters  Change-Id: If19187d68b27ac8eb1535475de8ff5c3dfa5ee2d,testing,,,,,,
openstack%2Fstorlets~master~If19187d68b27ac8eb1535475de8ff5c3dfa5ee2d,https://review.opendev.org/277322,Refactor test_storlet_handler,[WIP] Refactor test_storlet_handler  Remaining TODOs  * Refactor whole test cases  * Rebase to the ongoing refactoring patch  * Add Asserts about request parameters  Change-Id: If19187d68b27ac8eb1535475de8ff5c3dfa5ee2d,objective,,,,,,
openstack%2Ffuel-qa~master~Ib98243af7919f231818f5896244c8f37c70c54fb,https://review.opendev.org/279195,Refactoring all cli related tests,"Refactoring all cli related tests   * Use ssh_manager instead of context manager and remote  * delete remote as variable of function, all methods are executed    on master node so it is not necessary  * changes was accepted for cli tests , test_cli_base, and    create_backup_reset_restore_and_deploy_via_cli test  Change-Id: Ib98243af7919f231818f5896244c8f37c70c54fb Closes-Bug: #1544229",testing,,,,,,
openstack%2Ffuel-qa~master~Ib98243af7919f231818f5896244c8f37c70c54fb,https://review.opendev.org/279195,Refactoring all cli related tests,"Refactoring all cli related tests   * Use ssh_manager instead of context manager and remote  * delete remote as variable of function, all methods are executed    on master node so it is not necessary  * changes was accepted for cli tests , test_cli_base, and    create_backup_reset_restore_and_deploy_via_cli test  Change-Id: Ib98243af7919f231818f5896244c8f37c70c54fb Closes-Bug: #1544229",quality,,,,,,
openstack%2Ffuel-qa~master~Ib98243af7919f231818f5896244c8f37c70c54fb,https://review.opendev.org/279195,Refactoring all cli related tests,"Refactoring all cli related tests   * Use ssh_manager instead of context manager and remote  * delete remote as variable of function, all methods are executed    on master node so it is not necessary  * changes was accepted for cli tests , test_cli_base, and    create_backup_reset_restore_and_deploy_via_cli test  Change-Id: Ib98243af7919f231818f5896244c8f37c70c54fb Closes-Bug: #1544229",objective,,,,,,
openstack%2Fkeystone~master~I3c914a53839b4f5fafec841b9755c8981d4a5edc,https://review.opendev.org/255559,refactor: Remove unused test method,refactor: Remove unused test method  This method was unused. Removing it from the test code.  Change-Id: I3c914a53839b4f5fafec841b9755c8981d4a5edc,testing,,,,,,
openstack%2Fkeystone~master~I3c914a53839b4f5fafec841b9755c8981d4a5edc,https://review.opendev.org/255559,refactor: Remove unused test method,refactor: Remove unused test method  This method was unused. Removing it from the test code.  Change-Id: I3c914a53839b4f5fafec841b9755c8981d4a5edc,objective,,,,,,
openstack%2Foslo.config~master~I73b2ec508adbecba1f8270ac82976b54f78e74ab,https://review.opendev.org/276947,refactor sphinxext and add unit tests,"refactor sphinxext and add unit tests  Break up the directive into separate functions that are easier to test individually, and start adding unit tests.  Change-Id: I73b2ec508adbecba1f8270ac82976b54f78e74ab Signed-off-by: Doug Hellmann <doug@doughellmann.com>",testing,,,,,,
openstack%2Foslo.config~master~I73b2ec508adbecba1f8270ac82976b54f78e74ab,https://review.opendev.org/276947,refactor sphinxext and add unit tests,"refactor sphinxext and add unit tests  Break up the directive into separate functions that are easier to test individually, and start adding unit tests.  Change-Id: I73b2ec508adbecba1f8270ac82976b54f78e74ab Signed-off-by: Doug Hellmann <doug@doughellmann.com>",quality,,,,,,
openstack%2Foslo.config~master~I73b2ec508adbecba1f8270ac82976b54f78e74ab,https://review.opendev.org/276947,refactor sphinxext and add unit tests,"refactor sphinxext and add unit tests  Break up the directive into separate functions that are easier to test individually, and start adding unit tests.  Change-Id: I73b2ec508adbecba1f8270ac82976b54f78e74ab Signed-off-by: Doug Hellmann <doug@doughellmann.com>",objective,,,,,,
openstack%2Fneutron~master~I6f56b0534e65bf036f4ebe34c51aef52c5859cd3,https://review.opendev.org/262558,Refactor remove_router_interface() for DVR,"Refactor remove_router_interface() for DVR  Currently this method duplicates code from l3_db, looks complicated and hard to read. The patch refactors it to reuse code from l3_db just adding needed dvr related handling. New methods (introduced by parent patch) were used to know which dvr agents should router be deleted from. This will be needed when we remove explicit binding of dvr agents to routers in later patches.  The patch also removes useless 'mock all' kind of test and replaces it with a functional test.  Partially implements blueprint improve-dvr-l3-agent-binding  Change-Id: I6f56b0534e65bf036f4ebe34c51aef52c5859cd3",testing,,,,,,
openstack%2Fneutron~master~I6f56b0534e65bf036f4ebe34c51aef52c5859cd3,https://review.opendev.org/262558,Refactor remove_router_interface() for DVR,"Refactor remove_router_interface() for DVR  Currently this method duplicates code from l3_db, looks complicated and hard to read. The patch refactors it to reuse code from l3_db just adding needed dvr related handling. New methods (introduced by parent patch) were used to know which dvr agents should router be deleted from. This will be needed when we remove explicit binding of dvr agents to routers in later patches.  The patch also removes useless 'mock all' kind of test and replaces it with a functional test.  Partially implements blueprint improve-dvr-l3-agent-binding  Change-Id: I6f56b0534e65bf036f4ebe34c51aef52c5859cd3",quality,,,,,,
openstack%2Fneutron~master~I6f56b0534e65bf036f4ebe34c51aef52c5859cd3,https://review.opendev.org/262558,Refactor remove_router_interface() for DVR,"Refactor remove_router_interface() for DVR  Currently this method duplicates code from l3_db, looks complicated and hard to read. The patch refactors it to reuse code from l3_db just adding needed dvr related handling. New methods (introduced by parent patch) were used to know which dvr agents should router be deleted from. This will be needed when we remove explicit binding of dvr agents to routers in later patches.  The patch also removes useless 'mock all' kind of test and replaces it with a functional test.  Partially implements blueprint improve-dvr-l3-agent-binding  Change-Id: I6f56b0534e65bf036f4ebe34c51aef52c5859cd3",objective,,,,,,
x%2Fnetworking-cisco~stable%2Fliberty~Id7a29546d7857a85c5b0be88f7f3adb4421a9478,https://review.opendev.org/265853,Refactor Nexus test code to remove duplication,"Refactor Nexus test code to remove duplication  In preparation for newer development, now is the time to eliminate redundancy in the file 'test_cisco_nexus.py' by splitting its content into three files:  test_cisco_nexus_base.py:   contains shared information test_cisco_nexus_events.py: contains tests for incoming events test_cisco_nexus_replay.py: contains tests focused on replay activity  Change-Id: Id7a29546d7857a85c5b0be88f7f3adb4421a9478 Closes-bug:  #1528937 (cherry picked from commit 4f089889778b149ac185fb083e5e27c61c732b2a)",testing,,,,,,
x%2Fnetworking-cisco~stable%2Fliberty~Id7a29546d7857a85c5b0be88f7f3adb4421a9478,https://review.opendev.org/265853,Refactor Nexus test code to remove duplication,"Refactor Nexus test code to remove duplication  In preparation for newer development, now is the time to eliminate redundancy in the file 'test_cisco_nexus.py' by splitting its content into three files:  test_cisco_nexus_base.py:   contains shared information test_cisco_nexus_events.py: contains tests for incoming events test_cisco_nexus_replay.py: contains tests focused on replay activity  Change-Id: Id7a29546d7857a85c5b0be88f7f3adb4421a9478 Closes-bug:  #1528937 (cherry picked from commit 4f089889778b149ac185fb083e5e27c61c732b2a)",quality,,,,,,
x%2Fnetworking-cisco~stable%2Fliberty~Id7a29546d7857a85c5b0be88f7f3adb4421a9478,https://review.opendev.org/265853,Refactor Nexus test code to remove duplication,"Refactor Nexus test code to remove duplication  In preparation for newer development, now is the time to eliminate redundancy in the file 'test_cisco_nexus.py' by splitting its content into three files:  test_cisco_nexus_base.py:   contains shared information test_cisco_nexus_events.py: contains tests for incoming events test_cisco_nexus_replay.py: contains tests focused on replay activity  Change-Id: Id7a29546d7857a85c5b0be88f7f3adb4421a9478 Closes-bug:  #1528937 (cherry picked from commit 4f089889778b149ac185fb083e5e27c61c732b2a)",objective,,,,,,
openstack%2Fkeystone~master~Ifdd0657c7c0e3dd80445faa7349bed2f041a1940,https://review.opendev.org/266396,Refactor test auth_plugin config into fixture,Refactor test auth_plugin config into fixture  Moving the logic into a fixture so we can use it without the large class hierarchies.  Change-Id: Ifdd0657c7c0e3dd80445faa7349bed2f041a1940,testing,,,,,,
openstack%2Fkeystone~master~Ifdd0657c7c0e3dd80445faa7349bed2f041a1940,https://review.opendev.org/266396,Refactor test auth_plugin config into fixture,Refactor test auth_plugin config into fixture  Moving the logic into a fixture so we can use it without the large class hierarchies.  Change-Id: Ifdd0657c7c0e3dd80445faa7349bed2f041a1940,quality,,,,,,
openstack%2Fkeystone~master~Ifdd0657c7c0e3dd80445faa7349bed2f041a1940,https://review.opendev.org/266396,Refactor test auth_plugin config into fixture,Refactor test auth_plugin config into fixture  Moving the logic into a fixture so we can use it without the large class hierarchies.  Change-Id: Ifdd0657c7c0e3dd80445faa7349bed2f041a1940,objective,,,,,,
openstack%2Fpython-openstackclient~master~Ie6aa3fa27ab2a468c67da31209107517259631c2,https://review.opendev.org/265558,Refactor abstract columns and datalist out in image and object test cases,"Refactor abstract columns and datalist out in image,volume and object test cases  columns and datalist has been set in each test case in image, volume and object which is not necessary. This patch abstract it out and remove all redundant code.  Change-Id: Ie6aa3fa27ab2a468c67da31209107517259631c2 Related-Bug: 1532384",quality,,,,,,
openstack%2Fpython-openstackclient~master~Ie6aa3fa27ab2a468c67da31209107517259631c2,https://review.opendev.org/265558,Refactor abstract columns and datalist out in image and object test cases,"Refactor abstract columns and datalist out in image,volume and object test cases  columns and datalist has been set in each test case in image, volume and object which is not necessary. This patch abstract it out and remove all redundant code.  Change-Id: Ie6aa3fa27ab2a468c67da31209107517259631c2 Related-Bug: 1532384",objective,,,,,,
openstack%2Fpython-openstackclient~master~I3a09d5d2db86da986bdcfbf2310978ced181017d,https://review.opendev.org/266431,Refactor: Abstract columns and datalist out in volume test cases,"Refactor: Abstract columns and datalist out in volume test cases  columns and datalist has been set in each test case in volume, which is not necessary. This patch abstract it out and remove all redundant code.  Change-Id: I3a09d5d2db86da986bdcfbf2310978ced181017d related-bug: #1531816",testing,,,,,,
openstack%2Fpython-openstackclient~master~I3a09d5d2db86da986bdcfbf2310978ced181017d,https://review.opendev.org/266431,Refactor: Abstract columns and datalist out in volume test cases,"Refactor: Abstract columns and datalist out in volume test cases  columns and datalist has been set in each test case in volume, which is not necessary. This patch abstract it out and remove all redundant code.  Change-Id: I3a09d5d2db86da986bdcfbf2310978ced181017d related-bug: #1531816",quality,,,,,,
openstack%2Fpython-openstackclient~master~I3a09d5d2db86da986bdcfbf2310978ced181017d,https://review.opendev.org/266431,Refactor: Abstract columns and datalist out in volume test cases,"Refactor: Abstract columns and datalist out in volume test cases  columns and datalist has been set in each test case in volume, which is not necessary. This patch abstract it out and remove all redundant code.  Change-Id: I3a09d5d2db86da986bdcfbf2310978ced181017d related-bug: #1531816",objective,,,,,,
openstack%2Fpython-openstackclient~master~I5e8423722416ea31fdced4c932ed141de90028ab,https://review.opendev.org/264731,Refactor abstract columns and datalist out in compute test cases,"Refactor abstract columns and datalist out in compute test cases  columns and datalist has been set in each test case in compute, which is not necessary. This patch abstract it out and remove all redundant code.  Change-Id: I5e8423722416ea31fdced4c932ed141de90028ab Closes-Bug: #1531816",testing,,,,,,
openstack%2Fpython-openstackclient~master~I5e8423722416ea31fdced4c932ed141de90028ab,https://review.opendev.org/264731,Refactor abstract columns and datalist out in compute test cases,"Refactor abstract columns and datalist out in compute test cases  columns and datalist has been set in each test case in compute, which is not necessary. This patch abstract it out and remove all redundant code.  Change-Id: I5e8423722416ea31fdced4c932ed141de90028ab Closes-Bug: #1531816",quality,,,,,,
openstack%2Fpython-openstackclient~master~I5e8423722416ea31fdced4c932ed141de90028ab,https://review.opendev.org/264731,Refactor abstract columns and datalist out in compute test cases,"Refactor abstract columns and datalist out in compute test cases  columns and datalist has been set in each test case in compute, which is not necessary. This patch abstract it out and remove all redundant code.  Change-Id: I5e8423722416ea31fdced4c932ed141de90028ab Closes-Bug: #1531816",objective,,,,,,
x%2Fsteth~master~I239d498664fabca1fc82bb99a490af9ce3bc3e4a,https://review.opendev.org/268843,Refactor stethoclient unit test,Refactor stethoclient unit test  Change-Id: I239d498664fabca1fc82bb99a490af9ce3bc3e4a,testing,,,,,,
x%2Fsteth~master~I239d498664fabca1fc82bb99a490af9ce3bc3e4a,https://review.opendev.org/268843,Refactor stethoclient unit test,Refactor stethoclient unit test  Change-Id: I239d498664fabca1fc82bb99a490af9ce3bc3e4a,objective,,,,,,
openstack%2Fmurano~master~I64dc2d1064cae53ca773dcaa3d6dcc606a45c0d2,https://review.opendev.org/261304,[test-runner] Refactor mock unit-tests,"[test-runner] Refactor mock unit-tests  Move asserts from Python to MuranoPL code, so now test case are fully written in MuranoPL.  Change-Id: I64dc2d1064cae53ca773dcaa3d6dcc606a45c0d2",testing,,,,,,
openstack%2Fmurano~master~I64dc2d1064cae53ca773dcaa3d6dcc606a45c0d2,https://review.opendev.org/261304,[test-runner] Refactor mock unit-tests,"[test-runner] Refactor mock unit-tests  Move asserts from Python to MuranoPL code, so now test case are fully written in MuranoPL.  Change-Id: I64dc2d1064cae53ca773dcaa3d6dcc606a45c0d2",objective,,,,,,
openstack%2Fmanila~master~Ia584e3e6bd02f937df7630a1d09d49c888f77c8f,https://review.opendev.org/259024,Refactor share metadata tests to use DB,"Refactor share metadata tests to use DB  For the moment tests in 'manila.tests.api.v1.test_share_metadata' module mock all DB requests. It leads to failures in main code if we use DB-specific things. So, refactor all tests in that module to use test DB to unblock usage of DB-specific things.  Change-Id: Ia584e3e6bd02f937df7630a1d09d49c888f77c8f",testing,,,,,,
openstack%2Fmanila~master~Ia584e3e6bd02f937df7630a1d09d49c888f77c8f,https://review.opendev.org/259024,Refactor share metadata tests to use DB,"Refactor share metadata tests to use DB  For the moment tests in 'manila.tests.api.v1.test_share_metadata' module mock all DB requests. It leads to failures in main code if we use DB-specific things. So, refactor all tests in that module to use test DB to unblock usage of DB-specific things.  Change-Id: Ia584e3e6bd02f937df7630a1d09d49c888f77c8f",integration,,,,,,
openstack%2Fmanila~master~Ia584e3e6bd02f937df7630a1d09d49c888f77c8f,https://review.opendev.org/259024,Refactor share metadata tests to use DB,"Refactor share metadata tests to use DB  For the moment tests in 'manila.tests.api.v1.test_share_metadata' module mock all DB requests. It leads to failures in main code if we use DB-specific things. So, refactor all tests in that module to use test DB to unblock usage of DB-specific things.  Change-Id: Ia584e3e6bd02f937df7630a1d09d49c888f77c8f",objective,,,,,,
x%2Fnetworking-cisco~master~Id7a29546d7857a85c5b0be88f7f3adb4421a9478,https://review.opendev.org/261092,Refactor Nexus test code to remove duplication,"Refactor Nexus test code to remove duplication  In preparation for newer development, now is the time to eliminate redundancy in the file 'test_cisco_nexus.py' by splitting its content into three files:  test_cisco_nexus_base.py:   contains shared information test_cisco_nexus_events.py: contains tests for incoming events test_cisco_nexus_replay.py: contains tests focused on replay activity  Change-Id: Id7a29546d7857a85c5b0be88f7f3adb4421a9478 Closes-bug:  #1528937",testing,,,,,,
x%2Fnetworking-cisco~master~Id7a29546d7857a85c5b0be88f7f3adb4421a9478,https://review.opendev.org/261092,Refactor Nexus test code to remove duplication,"Refactor Nexus test code to remove duplication  In preparation for newer development, now is the time to eliminate redundancy in the file 'test_cisco_nexus.py' by splitting its content into three files:  test_cisco_nexus_base.py:   contains shared information test_cisco_nexus_events.py: contains tests for incoming events test_cisco_nexus_replay.py: contains tests focused on replay activity  Change-Id: Id7a29546d7857a85c5b0be88f7f3adb4421a9478 Closes-bug:  #1528937",quality,,,,,,
x%2Fnetworking-cisco~master~Id7a29546d7857a85c5b0be88f7f3adb4421a9478,https://review.opendev.org/261092,Refactor Nexus test code to remove duplication,"Refactor Nexus test code to remove duplication  In preparation for newer development, now is the time to eliminate redundancy in the file 'test_cisco_nexus.py' by splitting its content into three files:  test_cisco_nexus_base.py:   contains shared information test_cisco_nexus_events.py: contains tests for incoming events test_cisco_nexus_replay.py: contains tests focused on replay activity  Change-Id: Id7a29546d7857a85c5b0be88f7f3adb4421a9478 Closes-bug:  #1528937",objective,,,,,,
openstack%2Fdragonflow~master~If7b1f7e104eabe8e9b647f50c8a673445202e9a0,https://review.opendev.org/264055,Refactor fullstack tests,Refactor fullstack tests  Create base test class for creating the Neutron client and the DF NB_API client. Seperate the Neutron API-DB tests from the OVS flows tests with different file  Change-Id: If7b1f7e104eabe8e9b647f50c8a673445202e9a0,testing,,,,,,
openstack%2Fdragonflow~master~If7b1f7e104eabe8e9b647f50c8a673445202e9a0,https://review.opendev.org/264055,Refactor fullstack tests,Refactor fullstack tests  Create base test class for creating the Neutron client and the DF NB_API client. Seperate the Neutron API-DB tests from the OVS flows tests with different file  Change-Id: If7b1f7e104eabe8e9b647f50c8a673445202e9a0,objective,,,,,,
openstack%2Fdragonflow~master~If7b1f7e104eabe8e9b647f50c8a673445202e9a0,https://review.opendev.org/264055,Refactor fullstack tests,Refactor fullstack tests  Create base test class for creating the Neutron client and the DF NB_API client. Seperate the Neutron API-DB tests from the OVS flows tests with different file  Change-Id: If7b1f7e104eabe8e9b647f50c8a673445202e9a0,quality,,,,,,
openstack%2Fstackviz~master~I4a187a1c048d5e6552316d10db0c677432aa8f7e,https://review.opendev.org/264279,Add key-listener to refactored timeline,"Add key-listener to refactored timeline  This change adds a key-listener to navigate between test rectangles on the timeline. When an out-of-view test is selected, the timeline will refocus and bring it into view. Functionality for left and right arrow keys is supported, up and down (to navigate between workers) key are not supported, but may be added in a future patch.  Change-Id: I4a187a1c048d5e6552316d10db0c677432aa8f7e",testing,,,,,,
openstack%2Fstackviz~master~I4a187a1c048d5e6552316d10db0c677432aa8f7e,https://review.opendev.org/264279,Add key-listener to refactored timeline,"Add key-listener to refactored timeline  This change adds a key-listener to navigate between test rectangles on the timeline. When an out-of-view test is selected, the timeline will refocus and bring it into view. Functionality for left and right arrow keys is supported, up and down (to navigate between workers) key are not supported, but may be added in a future patch.  Change-Id: I4a187a1c048d5e6552316d10db0c677432aa8f7e",objective,,,,,,
openstack%2Fstackviz~master~I4a187a1c048d5e6552316d10db0c677432aa8f7e,https://review.opendev.org/264279,Add key-listener to refactored timeline,"Add key-listener to refactored timeline  This change adds a key-listener to navigate between test rectangles on the timeline. When an out-of-view test is selected, the timeline will refocus and bring it into view. Functionality for left and right arrow keys is supported, up and down (to navigate between workers) key are not supported, but may be added in a future patch.  Change-Id: I4a187a1c048d5e6552316d10db0c677432aa8f7e",objective,,,,,,
openstack%2Fcinder~master~I8df68f2cd4331cb7f4993d864417a045908888db,https://review.opendev.org/253541,Small refactoring in test_admin_actions.py,"Small refactoring in test_admin_actions.py  This patch adds the method tearDown(). This method will only be called if the setUp() succeeds, regardless of the outcome of the test method.  Change-Id: I8df68f2cd4331cb7f4993d864417a045908888db",testing,,,,,,
openstack%2Fcinder~master~I8df68f2cd4331cb7f4993d864417a045908888db,https://review.opendev.org/253541,Small refactoring in test_admin_actions.py,"Small refactoring in test_admin_actions.py  This patch adds the method tearDown(). This method will only be called if the setUp() succeeds, regardless of the outcome of the test method.  Change-Id: I8df68f2cd4331cb7f4993d864417a045908888db",objective,,,,,,
openstack%2Fdragonflow~master~I9cfdec5049a9c71ebddbad7d069f9ec271443a10,https://review.opendev.org/261001,Add new test and code refactoring,Add new test and code refactoring  Change-Id: I9cfdec5049a9c71ebddbad7d069f9ec271443a10,testing,,,,,,
openstack%2Fpython-openstackclient~master~Ia2ed7c9e46bf6baabbd62b9d50511c5e8103e5e2,https://review.opendev.org/261825,Refactor: Initialize parser in setUp() in TestKeyValueAction,Refactor: Initialize parser in setUp() in TestKeyValueAction  No need to initialize parser in each test case. Do it in setUp(). Also remove the test_default_values case because it could be tested in the test_good_values case.  Change-Id: Ia2ed7c9e46bf6baabbd62b9d50511c5e8103e5e2,testing,,,,,,
openstack%2Fpython-openstackclient~master~Ia2ed7c9e46bf6baabbd62b9d50511c5e8103e5e2,https://review.opendev.org/261825,Refactor: Initialize parser in setUp() in TestKeyValueAction,Refactor: Initialize parser in setUp() in TestKeyValueAction  No need to initialize parser in each test case. Do it in setUp(). Also remove the test_default_values case because it could be tested in the test_good_values case.  Change-Id: Ia2ed7c9e46bf6baabbd62b9d50511c5e8103e5e2,objective,,,,,,
openstack%2Fdragonflow~master~I010949b5942d5e0b88e75967fc6c415286a44c4e,https://review.opendev.org/259760,Refactor fullstack create network test,"Refactor fullstack create network test  Exception throwing will fail test, no need to catch it, this reduce complexity of the test.  Change-Id: I010949b5942d5e0b88e75967fc6c415286a44c4e",testing,,,,,,
openstack%2Fdragonflow~master~I010949b5942d5e0b88e75967fc6c415286a44c4e,https://review.opendev.org/259760,Refactor fullstack create network test,"Refactor fullstack create network test  Exception throwing will fail test, no need to catch it, this reduce complexity of the test.  Change-Id: I010949b5942d5e0b88e75967fc6c415286a44c4e",quality,,,,,,
openstack%2Fdragonflow~master~I010949b5942d5e0b88e75967fc6c415286a44c4e,https://review.opendev.org/259760,Refactor fullstack create network test,"Refactor fullstack create network test  Exception throwing will fail test, no need to catch it, this reduce complexity of the test.  Change-Id: I010949b5942d5e0b88e75967fc6c415286a44c4e",objective,,,,,,
openstack%2Fcinder~master~Icd2c3d506647b7b9405d83612433fea735d13cc9,https://review.opendev.org/249174,VMware: Unit test refactoring (image to vol - 1/2),VMware: Unit test refactoring  There are cases where a single test tests multiple methods. This patch refactors the unit tests for the following methods in the vmdk module to fix this issue:    * copy_image_to_volume    * _create_volume_from_non_stream_optimized_image  There will be follow-up patches to fix the remaining unit tests.  Change-Id: Icd2c3d506647b7b9405d83612433fea735d13cc9,testing,,,,,,
openstack%2Fcinder~master~Icd2c3d506647b7b9405d83612433fea735d13cc9,https://review.opendev.org/249174,VMware: Unit test refactoring (image to vol - 1/2),VMware: Unit test refactoring  There are cases where a single test tests multiple methods. This patch refactors the unit tests for the following methods in the vmdk module to fix this issue:    * copy_image_to_volume    * _create_volume_from_non_stream_optimized_image  There will be follow-up patches to fix the remaining unit tests.  Change-Id: Icd2c3d506647b7b9405d83612433fea735d13cc9,objective,,,,,,
openstack%2Fkeystone~master~I5bde0007802523a582fe0c93c4d07345c4407afc,https://review.opendev.org/237205,Refactor test use of new_*_ref,"Refactor test use of new_*_ref  The new_*_ref functions were confusing because while some of them used the base new_ref() function, the ones that use it were often removing fields anyways. Then there were other new_*_ref functions that didn't use new_ref() at all. So new_ref() is removed and the functions just create the dict that they need.  Change-Id: I5bde0007802523a582fe0c93c4d07345c4407afc",testing,,,,,,
openstack%2Fkeystone~master~I5bde0007802523a582fe0c93c4d07345c4407afc,https://review.opendev.org/237205,Refactor test use of new_*_ref,"Refactor test use of new_*_ref  The new_*_ref functions were confusing because while some of them used the base new_ref() function, the ones that use it were often removing fields anyways. Then there were other new_*_ref functions that didn't use new_ref() at all. So new_ref() is removed and the functions just create the dict that they need.  Change-Id: I5bde0007802523a582fe0c93c4d07345c4407afc",objective,,,,,,
openstack%2Fkeystone~master~I5bde0007802523a582fe0c93c4d07345c4407afc,https://review.opendev.org/237205,Refactor test use of new_*_ref,"Refactor test use of new_*_ref  The new_*_ref functions were confusing because while some of them used the base new_ref() function, the ones that use it were often removing fields anyways. Then there were other new_*_ref functions that didn't use new_ref() at all. So new_ref() is removed and the functions just create the dict that they need.  Change-Id: I5bde0007802523a582fe0c93c4d07345c4407afc",quality,,,,,,
openstack%2Fkeystone~master~Ie4f1e2e61d89fa10a99c9bebd2b9bd06fccd7c6a,https://review.opendev.org/252706,Refactor: Remove use of self where not needed,"Refactor: Remove use of self where not needed  In test_v3_resource, some tests create local entities scoped to the test class instance, as opposed to scoped only to the test method.  This patch fixes such occurrences.  Change-Id: Ie4f1e2e61d89fa10a99c9bebd2b9bd06fccd7c6a",testing,,,,,,
openstack%2Fkeystone~master~Ie4f1e2e61d89fa10a99c9bebd2b9bd06fccd7c6a,https://review.opendev.org/252706,Refactor: Remove use of self where not needed,"Refactor: Remove use of self where not needed  In test_v3_resource, some tests create local entities scoped to the test class instance, as opposed to scoped only to the test method.  This patch fixes such occurrences.  Change-Id: Ie4f1e2e61d89fa10a99c9bebd2b9bd06fccd7c6a",objective,,,,,,
openstack%2Fcinder~master~I6b738f08b89e518c78a26a934fead42cc86e0c24,https://review.opendev.org/249175,VMware: Unit test refactoring (image to vol - 2/2),VMware: Unit test refactoring  There are cases where a single test tests multiple methods. This patch refactors the unit tests for the following methods in the vmdk module to fix this issue:    * _create_virtual_disk_from_preallocated_image    * _create_virtual_disk_from_sparse_image    * _fetch_stream_optimized_image  There will be follow-up patches to fix the remaining unit tests.  Change-Id: I6b738f08b89e518c78a26a934fead42cc86e0c24,testing,,,,,,
openstack%2Fcinder~master~I6b738f08b89e518c78a26a934fead42cc86e0c24,https://review.opendev.org/249175,VMware: Unit test refactoring (image to vol - 2/2),VMware: Unit test refactoring  There are cases where a single test tests multiple methods. This patch refactors the unit tests for the following methods in the vmdk module to fix this issue:    * _create_virtual_disk_from_preallocated_image    * _create_virtual_disk_from_sparse_image    * _fetch_stream_optimized_image  There will be follow-up patches to fix the remaining unit tests.  Change-Id: I6b738f08b89e518c78a26a934fead42cc86e0c24,objective,,,,,,
openstack%2Fglance~master~I80cf190f122ce61a47340181e1ad02ee24b5cb2d,https://review.opendev.org/738701,Refactor common auth token code in images test,"Refactor common auth token code in images test  This pulls out the authentication token manipulation used by some of the images functional tests, which is replicated in several places into a single helper. This will also be used by a subsequent functional test for cross-owner copy-image support.  Change-Id: I80cf190f122ce61a47340181e1ad02ee24b5cb2d",testing,,,,,,
openstack%2Fglance~master~I80cf190f122ce61a47340181e1ad02ee24b5cb2d,https://review.opendev.org/738701,Refactor common auth token code in images test,"Refactor common auth token code in images test  This pulls out the authentication token manipulation used by some of the images functional tests, which is replicated in several places into a single helper. This will also be used by a subsequent functional test for cross-owner copy-image support.  Change-Id: I80cf190f122ce61a47340181e1ad02ee24b5cb2d",objective,,,,,,
openstack%2Fglance~master~I80cf190f122ce61a47340181e1ad02ee24b5cb2d,https://review.opendev.org/738701,Refactor common auth token code in images test,"Refactor common auth token code in images test  This pulls out the authentication token manipulation used by some of the images functional tests, which is replicated in several places into a single helper. This will also be used by a subsequent functional test for cross-owner copy-image support.  Change-Id: I80cf190f122ce61a47340181e1ad02ee24b5cb2d",quality,,,,,,
openstack%2Fpython-openstackclient~master~I641f6d44852931e31ecda22261bfbc9f451446de,https://review.opendev.org/251621,Refactor network test: Remove unusful test code.,Refactor network test: Remove unusful test code.  openstackclient/tests/network/common.py won't be used anymore. Remove it.  Change-Id: I641f6d44852931e31ecda22261bfbc9f451446de Implements: blueprint osc-network-unit-test-refactor Related-to: blueprint neutron-client,testing,,,,,,
openstack%2Fpython-openstackclient~master~I641f6d44852931e31ecda22261bfbc9f451446de,https://review.opendev.org/251621,Refactor network test: Remove unusful test code.,Refactor network test: Remove unusful test code.  openstackclient/tests/network/common.py won't be used anymore. Remove it.  Change-Id: I641f6d44852931e31ecda22261bfbc9f451446de Implements: blueprint osc-network-unit-test-refactor Related-to: blueprint neutron-client,objective,,,,,,
openstack%2Fpython-openstackclient~master~I641f6d44852931e31ecda22261bfbc9f451446de,https://review.opendev.org/251621,Refactor network test: Remove unusful test code.,Refactor network test: Remove unusful test code.  openstackclient/tests/network/common.py won't be used anymore. Remove it.  Change-Id: I641f6d44852931e31ecda22261bfbc9f451446de Implements: blueprint osc-network-unit-test-refactor Related-to: blueprint neutron-client,quality,,,,,,
openstack%2Fpython-openstackclient~master~I4e72332fcf253407bb3d5f20aaf4be047046e146,https://review.opendev.org/251619,Refactor TestSetNetwork: Use TestNetwork in TestSetNetwork,"Refactor TestSetNetwork: Use TestNetwork in TestSetNetwork  Use TestNetwork in TestSetNetwork, and also setup test command in setUp().  Change-Id: I4e72332fcf253407bb3d5f20aaf4be047046e146 Related-to: blueprint neutron-client",testing,,,,,,
openstack%2Fpython-openstackclient~master~I4e72332fcf253407bb3d5f20aaf4be047046e146,https://review.opendev.org/251619,Refactor TestSetNetwork: Use TestNetwork in TestSetNetwork,"Refactor TestSetNetwork: Use TestNetwork in TestSetNetwork  Use TestNetwork in TestSetNetwork, and also setup test command in setUp().  Change-Id: I4e72332fcf253407bb3d5f20aaf4be047046e146 Related-to: blueprint neutron-client",objective,,,,,,
openstack%2Fpython-openstackclient~master~I37047d7d13931b2a8f25665d6427efc05fc4f989,https://review.opendev.org/251365,Refactor TestDeleteNetwork: Use TestNetwork in TestDeleteNetwork,"Refactor TestDeleteNetwork: Use TestNetwork in TestDeleteNetwork.  Make TestDeleteNetwork inherit from TestNetwork, and have the same class architecture as the other test classes.  Change-Id: I37047d7d13931b2a8f25665d6427efc05fc4f989 Implements: blueprint osc-network-unit-test-refactor",testing,,,,,,
openstack%2Fpython-openstackclient~master~I37047d7d13931b2a8f25665d6427efc05fc4f989,https://review.opendev.org/251365,Refactor TestDeleteNetwork: Use TestNetwork in TestDeleteNetwork,"Refactor TestDeleteNetwork: Use TestNetwork in TestDeleteNetwork.  Make TestDeleteNetwork inherit from TestNetwork, and have the same class architecture as the other test classes.  Change-Id: I37047d7d13931b2a8f25665d6427efc05fc4f989 Implements: blueprint osc-network-unit-test-refactor",quality,,,,,,
openstack%2Fpython-openstackclient~master~I37047d7d13931b2a8f25665d6427efc05fc4f989,https://review.opendev.org/251365,Refactor TestDeleteNetwork: Use TestNetwork in TestDeleteNetwork,"Refactor TestDeleteNetwork: Use TestNetwork in TestDeleteNetwork.  Make TestDeleteNetwork inherit from TestNetwork, and have the same class architecture as the other test classes.  Change-Id: I37047d7d13931b2a8f25665d6427efc05fc4f989 Implements: blueprint osc-network-unit-test-refactor",objective,,,,,,
openstack%2Fpython-openstackclient~master~I349fe7f827524beb541efe7dd9460c534254b80c,https://review.opendev.org/251360,Refactor TestCreateNetwork: Split TestCreateNetwork into two classes for identity v2 and v3,"Refactor TestCreateNetwork: Split TestCreateNetwork into two classes for identity v2 and v3.  In TestCreateNetwork, both Identity v2 and v3 clients are tested. As a result, we should initialize the identity client again and again in each test function.  To reduce redundant code, this patch split TestCreateNetwork to TestCreateNetworkIdentityV2 and V3. And then initialize the identity client only once in each of them.  Change-Id: I349fe7f827524beb541efe7dd9460c534254b80c Implements: blueprint osc-network-unit-test-refactor",quality,,,,,,
openstack%2Fpython-openstackclient~master~I349fe7f827524beb541efe7dd9460c534254b80c,https://review.opendev.org/251360,Refactor TestCreateNetwork: Split TestCreateNetwork into two classes for identity v2 and v3,"Refactor TestCreateNetwork: Split TestCreateNetwork into two classes for identity v2 and v3.  In TestCreateNetwork, both Identity v2 and v3 clients are tested. As a result, we should initialize the identity client again and again in each test function.  To reduce redundant code, this patch split TestCreateNetwork to TestCreateNetworkIdentityV2 and V3. And then initialize the identity client only once in each of them.  Change-Id: I349fe7f827524beb541efe7dd9460c534254b80c Implements: blueprint osc-network-unit-test-refactor",objective,,,,,,
openstack%2Fpython-openstackclient~master~I349fe7f827524beb541efe7dd9460c534254b80c,https://review.opendev.org/251360,Refactor TestCreateNetwork: Split TestCreateNetwork into two classes for identity v2 and v3,"Refactor TestCreateNetwork: Split TestCreateNetwork into two classes for identity v2 and v3.  In TestCreateNetwork, both Identity v2 and v3 clients are tested. As a result, we should initialize the identity client again and again in each test function.  To reduce redundant code, this patch split TestCreateNetwork to TestCreateNetworkIdentityV2 and V3. And then initialize the identity client only once in each of them.  Change-Id: I349fe7f827524beb541efe7dd9460c534254b80c Implements: blueprint osc-network-unit-test-refactor",testing,,,,,,
openstack%2Fpython-openstackclient~master~I6f239dd54b9401ff2bbcf7ffdeb18769a450f573,https://review.opendev.org/251359,Refactor network test: Introduce TestNetworkv2 and TestNetwork to improve unit test of network,"Refactor network test: Introduce TestNetworkv2 and TestNetwork to improve unit test of network.  The class inherit architecture in network unit test is different from other test classes, which leads to lots of redundant code. This patch will make it the same as the other test classes. And it will be more convenience for the coming up refactor.  Change-Id: I6f239dd54b9401ff2bbcf7ffdeb18769a450f573 Implements: blueprint osc-network-unit-test-refactor",testing,,,,,,
openstack%2Fpython-openstackclient~master~I6f239dd54b9401ff2bbcf7ffdeb18769a450f573,https://review.opendev.org/251359,Refactor network test: Introduce TestNetworkv2 and TestNetwork to improve unit test of network,"Refactor network test: Introduce TestNetworkv2 and TestNetwork to improve unit test of network.  The class inherit architecture in network unit test is different from other test classes, which leads to lots of redundant code. This patch will make it the same as the other test classes. And it will be more convenience for the coming up refactor.  Change-Id: I6f239dd54b9401ff2bbcf7ffdeb18769a450f573 Implements: blueprint osc-network-unit-test-refactor",quality,,,,,,
openstack%2Fpython-openstackclient~master~I6f239dd54b9401ff2bbcf7ffdeb18769a450f573,https://review.opendev.org/251359,Refactor network test: Introduce TestNetworkv2 and TestNetwork to improve unit test of network,"Refactor network test: Introduce TestNetworkv2 and TestNetwork to improve unit test of network.  The class inherit architecture in network unit test is different from other test classes, which leads to lots of redundant code. This patch will make it the same as the other test classes. And it will be more convenience for the coming up refactor.  Change-Id: I6f239dd54b9401ff2bbcf7ffdeb18769a450f573 Implements: blueprint osc-network-unit-test-refactor",objective,,,,,,
openstack%2Fpython-openstackclient~master~I6f735f7d9fa29a8ab435adaef17ca559df1fdcee,https://review.opendev.org/250629,Refactor: Abstract datalist out in TestFlavorList to avoid redundant code.,"Refactor: Abstract datalist out in TestFlavorList to avoid redundant code.  datalist has been set in each test case in TestFlavorList, which is not necessary. This patch abstract it out and remove all redundant code.  Change-Id: I6f735f7d9fa29a8ab435adaef17ca559df1fdcee Implements: blueprint improve-flavor-unit-test",testing,,,,,,
openstack%2Fpython-openstackclient~master~I6f735f7d9fa29a8ab435adaef17ca559df1fdcee,https://review.opendev.org/250629,Refactor: Abstract datalist out in TestFlavorList to avoid redundant code.,"Refactor: Abstract datalist out in TestFlavorList to avoid redundant code.  datalist has been set in each test case in TestFlavorList, which is not necessary. This patch abstract it out and remove all redundant code.  Change-Id: I6f735f7d9fa29a8ab435adaef17ca559df1fdcee Implements: blueprint improve-flavor-unit-test",quality,,,,,,
openstack%2Fpython-openstackclient~master~I6f735f7d9fa29a8ab435adaef17ca559df1fdcee,https://review.opendev.org/250629,Refactor: Abstract datalist out in TestFlavorList to avoid redundant code.,"Refactor: Abstract datalist out in TestFlavorList to avoid redundant code.  datalist has been set in each test case in TestFlavorList, which is not necessary. This patch abstract it out and remove all redundant code.  Change-Id: I6f735f7d9fa29a8ab435adaef17ca559df1fdcee Implements: blueprint improve-flavor-unit-test",objective,,,,,,
openstack%2Fpython-openstackclient~master~Ideb2872f073755ac251bd603fd906410ea86c4ef,https://review.opendev.org/250628,Refactor: Abstract columns out in TestFlavorList to avoid redundant code.,"Refactor: Abstract columns out in TestFlavorList to avoid redundant code.  The columns has been set in each test case of TestFlavorList, which is not necessary. This patch abstract it out and remove all redundant code.  Change-Id: Ideb2872f073755ac251bd603fd906410ea86c4ef Implements: blueprint improve-flavor-unit-tes",testing,,,,,,
openstack%2Fpython-openstackclient~master~Ideb2872f073755ac251bd603fd906410ea86c4ef,https://review.opendev.org/250628,Refactor: Abstract columns out in TestFlavorList to avoid redundant code.,"Refactor: Abstract columns out in TestFlavorList to avoid redundant code.  The columns has been set in each test case of TestFlavorList, which is not necessary. This patch abstract it out and remove all redundant code.  Change-Id: Ideb2872f073755ac251bd603fd906410ea86c4ef Implements: blueprint improve-flavor-unit-tes",quality,,,,,,
openstack%2Fpython-openstackclient~master~Ideb2872f073755ac251bd603fd906410ea86c4ef,https://review.opendev.org/250628,Refactor: Abstract columns out in TestFlavorList to avoid redundant code.,"Refactor: Abstract columns out in TestFlavorList to avoid redundant code.  The columns has been set in each test case of TestFlavorList, which is not necessary. This patch abstract it out and remove all redundant code.  Change-Id: Ideb2872f073755ac251bd603fd906410ea86c4ef Implements: blueprint improve-flavor-unit-tes",objective,,,,,,
openstack%2Ffuel-qa~master~I586103f144bab73aa69b4239944ddf128919202b,https://review.opendev.org/240819,Refactor the test for Fuel Master migration,Refactor the test for Fuel Master migration  Refactor the test to use template based approach: - refactor the test to use template driven engine; - add a new nodes config - 1 controller + 1 compute; - add 2 new test configs - for VLAN and VXLAN net. providers :that use the new '1 controller + 1 compute' nodes config.  Change-Id: I586103f144bab73aa69b4239944ddf128919202b,testing,,,,,,
openstack%2Ffuel-qa~master~I586103f144bab73aa69b4239944ddf128919202b,https://review.opendev.org/240819,Refactor the test for Fuel Master migration,Refactor the test for Fuel Master migration  Refactor the test to use template based approach: - refactor the test to use template driven engine; - add a new nodes config - 1 controller + 1 compute; - add 2 new test configs - for VLAN and VXLAN net. providers :that use the new '1 controller + 1 compute' nodes config.  Change-Id: I586103f144bab73aa69b4239944ddf128919202b,objective,,,,,,
openstack%2Fproject-config~master~I015bb7727676a68b1dfc3f04d10a80a308b00435,https://review.opendev.org/240990,Refactor VPN functional tests to use common template,"Refactor VPN functional tests to use common template  This will change the existing functional test jobs to use a common job template. To do this the following steps were taken:  - Make the jobs non-voting, so they don't break the gate. This means   that reviewers need to check the non-voting results, prior to +A.  - Removed experimental functional jobs that were previously created,   in both the neutron and neutron-vpnaas repos. These jobs were going to   replace the existing ones (but do the same thing). Aborting that   approach.  - Remove the experimental API job. A separate commit will add it back   in, and use the new common template, as part of work to getting the   API job working.  Partial-Bug: #1495584  Change-Id: I015bb7727676a68b1dfc3f04d10a80a308b00435",testing,,,,,,
openstack%2Fproject-config~master~I015bb7727676a68b1dfc3f04d10a80a308b00435,https://review.opendev.org/240990,Refactor VPN functional tests to use common template,"Refactor VPN functional tests to use common template  This will change the existing functional test jobs to use a common job template. To do this the following steps were taken:  - Make the jobs non-voting, so they don't break the gate. This means   that reviewers need to check the non-voting results, prior to +A.  - Removed experimental functional jobs that were previously created,   in both the neutron and neutron-vpnaas repos. These jobs were going to   replace the existing ones (but do the same thing). Aborting that   approach.  - Remove the experimental API job. A separate commit will add it back   in, and use the new common template, as part of work to getting the   API job working.  Partial-Bug: #1495584  Change-Id: I015bb7727676a68b1dfc3f04d10a80a308b00435",objective,,,,,,
openstack%2Fproject-config~master~I015bb7727676a68b1dfc3f04d10a80a308b00435,https://review.opendev.org/240990,Refactor VPN functional tests to use common template,"Refactor VPN functional tests to use common template  This will change the existing functional test jobs to use a common job template. To do this the following steps were taken:  - Make the jobs non-voting, so they don't break the gate. This means   that reviewers need to check the non-voting results, prior to +A.  - Removed experimental functional jobs that were previously created,   in both the neutron and neutron-vpnaas repos. These jobs were going to   replace the existing ones (but do the same thing). Aborting that   approach.  - Remove the experimental API job. A separate commit will add it back   in, and use the new common template, as part of work to getting the   API job working.  Partial-Bug: #1495584  Change-Id: I015bb7727676a68b1dfc3f04d10a80a308b00435",quality,,,,,,
openstack%2Fmanila~master~Ifbcad18fc00f9ed0d4f04efead30e8357d88a29f,https://review.opendev.org/237490,EMC VNX Manila Driver Refactoring,EMC VNX Manila Driver Refactoring  EMC VNX Manila driver refactoring targets to the following aspects: 1. Make the object-oriented storage object-oriented 2. Improve the unit test coverage  Change-Id: Ifbcad18fc00f9ed0d4f04efead30e8357d88a29f Implements: blueprint emc-vnx-manila-driver-refactoring,testing,,,,,,
openstack%2Fmanila~master~Ifbcad18fc00f9ed0d4f04efead30e8357d88a29f,https://review.opendev.org/237490,EMC VNX Manila Driver Refactoring,EMC VNX Manila Driver Refactoring  EMC VNX Manila driver refactoring targets to the following aspects: 1. Make the object-oriented storage object-oriented 2. Improve the unit test coverage  Change-Id: Ifbcad18fc00f9ed0d4f04efead30e8357d88a29f Implements: blueprint emc-vnx-manila-driver-refactoring,objective,,,,,,
openstack%2Fopenstack-health~master~Icfebbb8ef3765277ed3c0f21fe6f3ad53c2627cb,https://review.opendev.org/244196,Refactor home controller process data test,"Refactor home controller process data test  This test used to test more functionality than it was meant to. In particular, it should only be concerned about verifying whether the passes/failures were correctly calculated, but instead, if we changed the ordering of the projects, it would also fail.  This modifies it to be concerned only with the calculated project data.  Change-Id: Icfebbb8ef3765277ed3c0f21fe6f3ad53c2627cb Co-Authored-By: Caio Carrara <ccarrara@thoughtworks.com>",testing,,,,,,
openstack%2Fopenstack-health~master~Icfebbb8ef3765277ed3c0f21fe6f3ad53c2627cb,https://review.opendev.org/244196,Refactor home controller process data test,"Refactor home controller process data test  This test used to test more functionality than it was meant to. In particular, it should only be concerned about verifying whether the passes/failures were correctly calculated, but instead, if we changed the ordering of the projects, it would also fail.  This modifies it to be concerned only with the calculated project data.  Change-Id: Icfebbb8ef3765277ed3c0f21fe6f3ad53c2627cb Co-Authored-By: Caio Carrara <ccarrara@thoughtworks.com>",objective,,,,,,
x%2Fevoque~master~I0f4d1a50d010b78bd7a56b39bb4c16315fbe081c,https://review.opendev.org/244071,Refactor DB unit test,Refactor DB unit test  Change-Id: I0f4d1a50d010b78bd7a56b39bb4c16315fbe081c,testing,,,,,,
openstack%2Ftempest~master~Ie0db3b13f2e597b0a01188717c6d6bb77cfed7bd,https://review.opendev.org/241991,Refactor volume_boot_pattern test,Refactor volume_boot_pattern test  Replaced local timpestamp methods to common class methods.  Change-Id: Ie0db3b13f2e597b0a01188717c6d6bb77cfed7bd,testing,,,,,,
openstack%2Ftempest~master~Ie0db3b13f2e597b0a01188717c6d6bb77cfed7bd,https://review.opendev.org/241991,Refactor volume_boot_pattern test,Refactor volume_boot_pattern test  Replaced local timpestamp methods to common class methods.  Change-Id: Ie0db3b13f2e597b0a01188717c6d6bb77cfed7bd,objective,,,,,,
openstack%2Fcinder~master~I17b1c0df4e13bf9900a2fe8d37ff5297a8e7486e,https://review.opendev.org/237543,VMware: Unit test refactoring,"VMware: Unit test refactoring  Some of the unit tests use mox instead of mock. Also, there are cases where a single test tests multiple cases and methods. This patch refactors the unit tests for the following methods in the vmdk module to fix these issues:  * get_volume_stats * _verify_volume_creation * create_volume * delete_volume * _get_extra_spec_disk_type * _get_disk_type * create_snapshot * delete_snapshot  There will be follow-up patches to fix the remaining unit tests.  Partial-bug: #1261097 Change-Id: I17b1c0df4e13bf9900a2fe8d37ff5297a8e7486e",testing,,,,,,
openstack%2Fcinder~master~I17b1c0df4e13bf9900a2fe8d37ff5297a8e7486e,https://review.opendev.org/237543,VMware: Unit test refactoring,"VMware: Unit test refactoring  Some of the unit tests use mox instead of mock. Also, there are cases where a single test tests multiple cases and methods. This patch refactors the unit tests for the following methods in the vmdk module to fix these issues:  * get_volume_stats * _verify_volume_creation * create_volume * delete_volume * _get_extra_spec_disk_type * _get_disk_type * create_snapshot * delete_snapshot  There will be follow-up patches to fix the remaining unit tests.  Partial-bug: #1261097 Change-Id: I17b1c0df4e13bf9900a2fe8d37ff5297a8e7486e",quality,,,,,,
openstack%2Fcinder~master~I17b1c0df4e13bf9900a2fe8d37ff5297a8e7486e,https://review.opendev.org/237543,VMware: Unit test refactoring,"VMware: Unit test refactoring  Some of the unit tests use mox instead of mock. Also, there are cases where a single test tests multiple cases and methods. This patch refactors the unit tests for the following methods in the vmdk module to fix these issues:  * get_volume_stats * _verify_volume_creation * create_volume * delete_volume * _get_extra_spec_disk_type * _get_disk_type * create_snapshot * delete_snapshot  There will be follow-up patches to fix the remaining unit tests.  Partial-bug: #1261097 Change-Id: I17b1c0df4e13bf9900a2fe8d37ff5297a8e7486e",objective,,,,,,
openstack%2Fpython-muranoclient~master~I69d0c9f95fd5686cb184b2477bcba53862bb9f17,https://review.opendev.org/235413,Small refactoring of CLI tests for packages,"Small refactoring of CLI tests for packages  - Removed running of local server from setUp method, because actually it is needed only for one test - Refactored 'import_package_by_url' method to allow it import package not only by url  Change-Id: I69d0c9f95fd5686cb184b2477bcba53862bb9f17",testing,,,,,,
openstack%2Fpython-muranoclient~master~I69d0c9f95fd5686cb184b2477bcba53862bb9f17,https://review.opendev.org/235413,Small refactoring of CLI tests for packages,"Small refactoring of CLI tests for packages  - Removed running of local server from setUp method, because actually it is needed only for one test - Refactored 'import_package_by_url' method to allow it import package not only by url  Change-Id: I69d0c9f95fd5686cb184b2477bcba53862bb9f17",objective,,,,,,
openstack%2Fneutron~master~Id2cf57968f2dfb8bcf18946c922ce2bb51a27766,https://review.opendev.org/236052,Refactor _populate_ports_for_subnets for testability,Refactor _populate_ports_for_subnets for testability  I want to add to this function but I found it very difficult to test the additions that I was making (because this code isn't well covered by UTs).  This patch adds some unit testing so that I can change it more confidently but does not change any functionality.  Change-Id: Id2cf57968f2dfb8bcf18946c922ce2bb51a27766 Partially-implements:  bp/address-scopes,testing,,,,,,
openstack%2Fneutron~master~Id2cf57968f2dfb8bcf18946c922ce2bb51a27766,https://review.opendev.org/236052,Refactor _populate_ports_for_subnets for testability,Refactor _populate_ports_for_subnets for testability  I want to add to this function but I found it very difficult to test the additions that I was making (because this code isn't well covered by UTs).  This patch adds some unit testing so that I can change it more confidently but does not change any functionality.  Change-Id: Id2cf57968f2dfb8bcf18946c922ce2bb51a27766 Partially-implements:  bp/address-scopes,quality,,,,,,
openstack%2Fneutron~master~Id2cf57968f2dfb8bcf18946c922ce2bb51a27766,https://review.opendev.org/236052,Refactor _populate_ports_for_subnets for testability,Refactor _populate_ports_for_subnets for testability  I want to add to this function but I found it very difficult to test the additions that I was making (because this code isn't well covered by UTs).  This patch adds some unit testing so that I can change it more confidently but does not change any functionality.  Change-Id: Id2cf57968f2dfb8bcf18946c922ce2bb51a27766 Partially-implements:  bp/address-scopes,objective,,,,,,
openstack%2Fkeystone~master~I90b17a7196075c164fe8bbd0f43af13a118e4c7e,https://review.opendev.org/233127,Refactor: change 403 status codes in test names,Refactor: change 403 status codes in test names  Change I952cac73a9713bde4ad757371ca8b4ded93f207e refactored the keystone test cases to use the six.moves.http_client for HTTP status codes instead of integers. This change refactors the method names to follow the same pattern.  Change-Id: I90b17a7196075c164fe8bbd0f43af13a118e4c7e,testing,,,,,,
openstack%2Fkeystone~master~I90b17a7196075c164fe8bbd0f43af13a118e4c7e,https://review.opendev.org/233127,Refactor: change 403 status codes in test names,Refactor: change 403 status codes in test names  Change I952cac73a9713bde4ad757371ca8b4ded93f207e refactored the keystone test cases to use the six.moves.http_client for HTTP status codes instead of integers. This change refactors the method names to follow the same pattern.  Change-Id: I90b17a7196075c164fe8bbd0f43af13a118e4c7e,quality,,,,,,
openstack%2Fkeystone~master~I90b17a7196075c164fe8bbd0f43af13a118e4c7e,https://review.opendev.org/233127,Refactor: change 403 status codes in test names,Refactor: change 403 status codes in test names  Change I952cac73a9713bde4ad757371ca8b4ded93f207e refactored the keystone test cases to use the six.moves.http_client for HTTP status codes instead of integers. This change refactors the method names to follow the same pattern.  Change-Id: I90b17a7196075c164fe8bbd0f43af13a118e4c7e,objective,,,,,,
openstack%2Fkeystone~master~I6f0cc05d9bf45a32d50e83151141796ba76325ec,https://review.opendev.org/233126,Refactor: change 410 status codes in test names,Refactor: change 410 status codes in test names  Change I952cac73a9713bde4ad757371ca8b4ded93f207e refactored the keystone test cases to use the six.moves.http_client for HTTP status codes instead of integers. This change refactors the method names to follow the same pattern.  Change-Id: I6f0cc05d9bf45a32d50e83151141796ba76325ec,testing,,,,,,
openstack%2Fkeystone~master~I6f0cc05d9bf45a32d50e83151141796ba76325ec,https://review.opendev.org/233126,Refactor: change 410 status codes in test names,Refactor: change 410 status codes in test names  Change I952cac73a9713bde4ad757371ca8b4ded93f207e refactored the keystone test cases to use the six.moves.http_client for HTTP status codes instead of integers. This change refactors the method names to follow the same pattern.  Change-Id: I6f0cc05d9bf45a32d50e83151141796ba76325ec,quality,,,,,,
openstack%2Fkeystone~master~I6f0cc05d9bf45a32d50e83151141796ba76325ec,https://review.opendev.org/233126,Refactor: change 410 status codes in test names,Refactor: change 410 status codes in test names  Change I952cac73a9713bde4ad757371ca8b4ded93f207e refactored the keystone test cases to use the six.moves.http_client for HTTP status codes instead of integers. This change refactors the method names to follow the same pattern.  Change-Id: I6f0cc05d9bf45a32d50e83151141796ba76325ec,objective,,,,,,
openstack%2Fkeystone~master~Ic830ba42200ea39d0a0bd5f3355b8b32b292ae83,https://review.opendev.org/233125,Refactor: change 400 status codes in test names,Refactor: change 400 status codes in test names  Change I952cac73a9713bde4ad757371ca8b4ded93f207e refactored the keystone test cases to use the six.moves.http_client for HTTP status codes instead of integers. This change refactors the method names to follow the same pattern.  Change-Id: Ic830ba42200ea39d0a0bd5f3355b8b32b292ae83,testing,,,,,,
openstack%2Fkeystone~master~Ic830ba42200ea39d0a0bd5f3355b8b32b292ae83,https://review.opendev.org/233125,Refactor: change 400 status codes in test names,Refactor: change 400 status codes in test names  Change I952cac73a9713bde4ad757371ca8b4ded93f207e refactored the keystone test cases to use the six.moves.http_client for HTTP status codes instead of integers. This change refactors the method names to follow the same pattern.  Change-Id: Ic830ba42200ea39d0a0bd5f3355b8b32b292ae83,quality,,,,,,
openstack%2Fkeystone~master~Ic830ba42200ea39d0a0bd5f3355b8b32b292ae83,https://review.opendev.org/233125,Refactor: change 400 status codes in test names,Refactor: change 400 status codes in test names  Change I952cac73a9713bde4ad757371ca8b4ded93f207e refactored the keystone test cases to use the six.moves.http_client for HTTP status codes instead of integers. This change refactors the method names to follow the same pattern.  Change-Id: Ic830ba42200ea39d0a0bd5f3355b8b32b292ae83,objective,,,,,,
openstack%2Fkeystone~master~I5b48598afa55a7c15ca21e79f9c572001e17b069,https://review.opendev.org/233124,Refactor: change 404 status codes in test names,Refactor: change 404 status codes in test names  Change I952cac73a9713bde4ad757371ca8b4ded93f207e refactored the keystone test cases to use the six.moves.http_client for HTTP status codes instead of integers. This change refactors the method names to follow the same pattern.  Change-Id: I5b48598afa55a7c15ca21e79f9c572001e17b069,testing,,,,,,
openstack%2Fkeystone~master~I5b48598afa55a7c15ca21e79f9c572001e17b069,https://review.opendev.org/233124,Refactor: change 404 status codes in test names,Refactor: change 404 status codes in test names  Change I952cac73a9713bde4ad757371ca8b4ded93f207e refactored the keystone test cases to use the six.moves.http_client for HTTP status codes instead of integers. This change refactors the method names to follow the same pattern.  Change-Id: I5b48598afa55a7c15ca21e79f9c572001e17b069,quality,,,,,,
openstack%2Fkeystone~master~I5b48598afa55a7c15ca21e79f9c572001e17b069,https://review.opendev.org/233124,Refactor: change 404 status codes in test names,Refactor: change 404 status codes in test names  Change I952cac73a9713bde4ad757371ca8b4ded93f207e refactored the keystone test cases to use the six.moves.http_client for HTTP status codes instead of integers. This change refactors the method names to follow the same pattern.  Change-Id: I5b48598afa55a7c15ca21e79f9c572001e17b069,objective,,,,,,
openstack%2Ffuel-qa~stable%2F7.0~I3a6612377ee7cdf7bcc71c0a1d13fba3923896c0,https://review.opendev.org/231500,Refactor reinstall and partition preservation tests,Refactor reinstall and partition preservation tests  Follow changes were done in this patch: - create cluster with controller + mongo instead of   creating separate nodes for controller and mongo. - reinstall_single_mongo_node test was deleted. - merge mongo_partition_preservation and   mysql_partition_preservation tests in   mongo_mysql_partition_preservation test - merge cinder_partition_preservation and   nova_partition_preservation tests in   cinder_nova_partition_preservation test.  Change-Id: I3a6612377ee7cdf7bcc71c0a1d13fba3923896c0 Closes-Bug:#1494768 (cherry picked from commit 9e0040fd96eaf709b0da0e8b8fb13463544038ca),testing,,,,,,
openstack%2Ffuel-qa~stable%2F7.0~I3a6612377ee7cdf7bcc71c0a1d13fba3923896c0,https://review.opendev.org/231500,Refactor reinstall and partition preservation tests,Refactor reinstall and partition preservation tests  Follow changes were done in this patch: - create cluster with controller + mongo instead of   creating separate nodes for controller and mongo. - reinstall_single_mongo_node test was deleted. - merge mongo_partition_preservation and   mysql_partition_preservation tests in   mongo_mysql_partition_preservation test - merge cinder_partition_preservation and   nova_partition_preservation tests in   cinder_nova_partition_preservation test.  Change-Id: I3a6612377ee7cdf7bcc71c0a1d13fba3923896c0 Closes-Bug:#1494768 (cherry picked from commit 9e0040fd96eaf709b0da0e8b8fb13463544038ca),integration,,,,,,
openstack%2Ffuel-qa~stable%2F7.0~I3a6612377ee7cdf7bcc71c0a1d13fba3923896c0,https://review.opendev.org/231500,Refactor reinstall and partition preservation tests,Refactor reinstall and partition preservation tests  Follow changes were done in this patch: - create cluster with controller + mongo instead of   creating separate nodes for controller and mongo. - reinstall_single_mongo_node test was deleted. - merge mongo_partition_preservation and   mysql_partition_preservation tests in   mongo_mysql_partition_preservation test - merge cinder_partition_preservation and   nova_partition_preservation tests in   cinder_nova_partition_preservation test.  Change-Id: I3a6612377ee7cdf7bcc71c0a1d13fba3923896c0 Closes-Bug:#1494768 (cherry picked from commit 9e0040fd96eaf709b0da0e8b8fb13463544038ca),quality,,,,,,
openstack%2Ffuel-qa~stable%2F7.0~I3a6612377ee7cdf7bcc71c0a1d13fba3923896c0,https://review.opendev.org/231500,Refactor reinstall and partition preservation tests,Refactor reinstall and partition preservation tests  Follow changes were done in this patch: - create cluster with controller + mongo instead of   creating separate nodes for controller and mongo. - reinstall_single_mongo_node test was deleted. - merge mongo_partition_preservation and   mysql_partition_preservation tests in   mongo_mysql_partition_preservation test - merge cinder_partition_preservation and   nova_partition_preservation tests in   cinder_nova_partition_preservation test.  Change-Id: I3a6612377ee7cdf7bcc71c0a1d13fba3923896c0 Closes-Bug:#1494768 (cherry picked from commit 9e0040fd96eaf709b0da0e8b8fb13463544038ca),objective,,,,,,
opendev%2Fgrafyaml~master~Idea77b59b1ea2d6a2566e48810aa19c0455479ac,https://review.opendev.org/230061,Refactor grafana.py test coverage,Refactor grafana.py test coverage  Add 2 new tests for the __init__ function. Testing with / without the apikey.  Also rework our requests_mock logic.  Change-Id: Idea77b59b1ea2d6a2566e48810aa19c0455479ac Signed-off-by: Paul Belanger <pabelanger@redhat.com>,testing,,,,,,
opendev%2Fgrafyaml~master~Idea77b59b1ea2d6a2566e48810aa19c0455479ac,https://review.opendev.org/230061,Refactor grafana.py test coverage,Refactor grafana.py test coverage  Add 2 new tests for the __init__ function. Testing with / without the apikey.  Also rework our requests_mock logic.  Change-Id: Idea77b59b1ea2d6a2566e48810aa19c0455479ac Signed-off-by: Paul Belanger <pabelanger@redhat.com>,objective,,,,,,
openstack%2Ffuel-qa~master~Ife5f3626d029d061413f6345a72ac630fa9da154,https://review.opendev.org/216714,Refactoring of upgrade tests,"Refactoring of upgrade tests  Deleting duplicated tests, Adding to function upgrade_master possibility of choosing rollback, refactoring some test cases to use upgrade_master method.  Change-Id: Ife5f3626d029d061413f6345a72ac630fa9da154 Closes-Bug: #1486990",testing,,,,,,
openstack%2Ffuel-qa~master~Ife5f3626d029d061413f6345a72ac630fa9da154,https://review.opendev.org/216714,Refactoring of upgrade tests,"Refactoring of upgrade tests  Deleting duplicated tests, Adding to function upgrade_master possibility of choosing rollback, refactoring some test cases to use upgrade_master method.  Change-Id: Ife5f3626d029d061413f6345a72ac630fa9da154 Closes-Bug: #1486990",quality,,,,,,
openstack%2Ffuel-qa~master~Ife5f3626d029d061413f6345a72ac630fa9da154,https://review.opendev.org/216714,Refactoring of upgrade tests,"Refactoring of upgrade tests  Deleting duplicated tests, Adding to function upgrade_master possibility of choosing rollback, refactoring some test cases to use upgrade_master method.  Change-Id: Ife5f3626d029d061413f6345a72ac630fa9da154 Closes-Bug: #1486990",objective,,,,,,
openstack%2Ffuel-qa~stable%2F6.1~I9791b410fb08a389871b375a075907bccd7c28a2,https://review.opendev.org/222096,Refactoring test 'check_oswl_stat',Refactoring test 'check_oswl_stat'  Changes in test 'check_oswl_stat' and in function 'get_oswls_by_resource_data' Closes-Bug: #1476208  Change-Id: I9791b410fb08a389871b375a075907bccd7c28a2 (cherry picked from commit 5069a7477da9a1141edb4cfbb9bffadd4522d0ae),testing,,,,,,
openstack%2Ffuel-qa~stable%2F6.1~I9791b410fb08a389871b375a075907bccd7c28a2,https://review.opendev.org/222096,Refactoring test 'check_oswl_stat',Refactoring test 'check_oswl_stat'  Changes in test 'check_oswl_stat' and in function 'get_oswls_by_resource_data' Closes-Bug: #1476208  Change-Id: I9791b410fb08a389871b375a075907bccd7c28a2 (cherry picked from commit 5069a7477da9a1141edb4cfbb9bffadd4522d0ae),objective,,,,,,
openstack%2Ffuel-qa~master~I9791b410fb08a389871b375a075907bccd7c28a2,https://review.opendev.org/205050,Refactoring test 'check_oswl_stat',Refactoring test 'check_oswl_stat'  Changes in test 'check_oswl_stat' and in function 'get_oswls_by_resource_data' Closes-Bug: #1476208  Change-Id: I9791b410fb08a389871b375a075907bccd7c28a2,testing,,,,,,
openstack%2Ffuel-qa~master~I9791b410fb08a389871b375a075907bccd7c28a2,https://review.opendev.org/205050,Refactoring test 'check_oswl_stat',Refactoring test 'check_oswl_stat'  Changes in test 'check_oswl_stat' and in function 'get_oswls_by_resource_data' Closes-Bug: #1476208  Change-Id: I9791b410fb08a389871b375a075907bccd7c28a2,objective,,,,,,
openstack%2Fkuryr~master~I0a62c7b83650367f518a031a72c4c56f7a54a8b8,https://review.opendev.org/215164,Refactor the test for /NetworkDriver.CreateNetwork,Refactor the test for /NetworkDriver.CreateNetwork  This patch renames TestKuryrNetworkFailrues to TestKuryrNetworkCreateFailrues and replaces the hardcoded messge test with the variable defined in the Flask exception.  Change-Id: I0a62c7b83650367f518a031a72c4c56f7a54a8b8 Signed-off-by: Taku Fukushima <f.tac.mac@gmail.com>,testing,,,,,,
openstack%2Fkuryr~master~I0a62c7b83650367f518a031a72c4c56f7a54a8b8,https://review.opendev.org/215164,Refactor the test for /NetworkDriver.CreateNetwork,Refactor the test for /NetworkDriver.CreateNetwork  This patch renames TestKuryrNetworkFailrues to TestKuryrNetworkCreateFailrues and replaces the hardcoded messge test with the variable defined in the Flask exception.  Change-Id: I0a62c7b83650367f518a031a72c4c56f7a54a8b8 Signed-off-by: Taku Fukushima <f.tac.mac@gmail.com>,quality,,,,,,
openstack%2Fkuryr~master~I0a62c7b83650367f518a031a72c4c56f7a54a8b8,https://review.opendev.org/215164,Refactor the test for /NetworkDriver.CreateNetwork,Refactor the test for /NetworkDriver.CreateNetwork  This patch renames TestKuryrNetworkFailrues to TestKuryrNetworkCreateFailrues and replaces the hardcoded messge test with the variable defined in the Flask exception.  Change-Id: I0a62c7b83650367f518a031a72c4c56f7a54a8b8 Signed-off-by: Taku Fukushima <f.tac.mac@gmail.com>,objective,,,,,,
openstack%2Fbandit~master~Iaa1186c4b77a52ed1cdb6fb29218307310b41702,https://review.opendev.org/219373,Refactoring Unit Test Directories,"Refactoring Unit Test Directories  This commit creates two paths in tests, /unit and /functional. As we begin to ensure proper unit test coverage we want to use conventions whenever possible to keep our tests properly separated and in conventional locations.  Change-Id: Iaa1186c4b77a52ed1cdb6fb29218307310b41702",testing,,,,,,
openstack%2Fbandit~master~Iaa1186c4b77a52ed1cdb6fb29218307310b41702,https://review.opendev.org/219373,Refactoring Unit Test Directories,"Refactoring Unit Test Directories  This commit creates two paths in tests, /unit and /functional. As we begin to ensure proper unit test coverage we want to use conventions whenever possible to keep our tests properly separated and in conventional locations.  Change-Id: Iaa1186c4b77a52ed1cdb6fb29218307310b41702",quality,,,,,,
openstack%2Fbandit~master~Iaa1186c4b77a52ed1cdb6fb29218307310b41702,https://review.opendev.org/219373,Refactoring Unit Test Directories,"Refactoring Unit Test Directories  This commit creates two paths in tests, /unit and /functional. As we begin to ensure proper unit test coverage we want to use conventions whenever possible to keep our tests properly separated and in conventional locations.  Change-Id: Iaa1186c4b77a52ed1cdb6fb29218307310b41702",objective,,,,,,
openstack%2Fnova~master~I6b225756efcc17bdcd6402606287c35464a3c1d0,https://review.opendev.org/179048,Refactor test cases for live-migrate error case,"Refactory test cases for live-migrate error case  There are a few of exceptions can be raised from live-migrate function in conductor, this patch added some cases for more exceptions handling and refactory the util function with mock.  Change-Id: I6b225756efcc17bdcd6402606287c35464a3c1d0 Related-Bug: 1435633",testing,,,,,,
openstack%2Fnova~master~I6b225756efcc17bdcd6402606287c35464a3c1d0,https://review.opendev.org/179048,Refactor test cases for live-migrate error case,"Refactory test cases for live-migrate error case  There are a few of exceptions can be raised from live-migrate function in conductor, this patch added some cases for more exceptions handling and refactory the util function with mock.  Change-Id: I6b225756efcc17bdcd6402606287c35464a3c1d0 Related-Bug: 1435633",objective,,,,,,
openstack%2Ffuel-qa~master~I0c9727eb7f2f4067f615386790b12fb0220c548c,https://review.opendev.org/214479,Refactor nova-network cases to neutron,"Refactor nova-network cases to neutron  - use neutron in tests migrate_vm_backed_with_ceph and   check_ceph_partitions_after_reboot - add showing ""steps"" from docstring into test cases - refactor fuel master backup/restore helper methods  Change-Id: I0c9727eb7f2f4067f615386790b12fb0220c548c Closes-Bug:#1484155 Closes-Bug:#1483767 Related-Bug:#1485954",testing,,,,,,
openstack%2Ffuel-qa~master~I0c9727eb7f2f4067f615386790b12fb0220c548c,https://review.opendev.org/214479,Refactor nova-network cases to neutron,"Refactor nova-network cases to neutron  - use neutron in tests migrate_vm_backed_with_ceph and   check_ceph_partitions_after_reboot - add showing ""steps"" from docstring into test cases - refactor fuel master backup/restore helper methods  Change-Id: I0c9727eb7f2f4067f615386790b12fb0220c548c Closes-Bug:#1484155 Closes-Bug:#1483767 Related-Bug:#1485954",objective,,,,,,
x%2Fcloudroast~master~I57dcd2f62527973c46ecc8c9691f014aa7cec7e4,https://review.opendev.org/214402,Remove test_rescue_server for reconsideration and refactor,Remove test_rescue_server for reconsideration and refactor  The ability to rescue and unrescue a server as an admin api action is dependant on the configuration of the openstack cloud under test. This test should be refactored to more easily test the expected behavior based on the environment in which it is run.  Change-Id: I57dcd2f62527973c46ecc8c9691f014aa7cec7e4,testing,,,,,,
x%2Fcloudroast~master~I57dcd2f62527973c46ecc8c9691f014aa7cec7e4,https://review.opendev.org/214402,Remove test_rescue_server for reconsideration and refactor,Remove test_rescue_server for reconsideration and refactor  The ability to rescue and unrescue a server as an admin api action is dependant on the configuration of the openstack cloud under test. This test should be refactored to more easily test the expected behavior based on the environment in which it is run.  Change-Id: I57dcd2f62527973c46ecc8c9691f014aa7cec7e4,objective,,,,,,
x%2Fcloudroast~master~I592888019289006149d59fe81392a0811a41850d,https://review.opendev.org/214400,Remove test_connectivity_during_live_migration for later refactor.,"Remove test_connectivity_during_live_migration for later refactor.  This test is very sensitive to timing issues in an openstack environment and, during test failures, can enter into an unhappy path which throws test related code bugs. This test is being removed so that it can be reconsidered and refactored to be more resilient to environmental stressors and gracefully fail in the event of feature failure.  Change-Id: I592888019289006149d59fe81392a0811a41850d",testing,,,,,,
x%2Fcloudroast~master~I592888019289006149d59fe81392a0811a41850d,https://review.opendev.org/214400,Remove test_connectivity_during_live_migration for later refactor.,"Remove test_connectivity_during_live_migration for later refactor.  This test is very sensitive to timing issues in an openstack environment and, during test failures, can enter into an unhappy path which throws test related code bugs. This test is being removed so that it can be reconsidered and refactored to be more resilient to environmental stressors and gracefully fail in the event of feature failure.  Change-Id: I592888019289006149d59fe81392a0811a41850d",quality,,,,,,
x%2Fcloudroast~master~I592888019289006149d59fe81392a0811a41850d,https://review.opendev.org/214400,Remove test_connectivity_during_live_migration for later refactor.,"Remove test_connectivity_during_live_migration for later refactor.  This test is very sensitive to timing issues in an openstack environment and, during test failures, can enter into an unhappy path which throws test related code bugs. This test is being removed so that it can be reconsidered and refactored to be more resilient to environmental stressors and gracefully fail in the event of feature failure.  Change-Id: I592888019289006149d59fe81392a0811a41850d",objective,,,,,,
openstack%2Fneutron-lbaas~master~Ib9733d1a9059f9801e6af8b116093666585f82a2,https://review.opendev.org/207944,Refactor v2 scenario tests,"Refactor v2 scenario tests  When api and scenario tests were copied from tempest and test_healh_monitor_basic was added, scenario code suffered a number of changes which introduced code duplication, worsened its architecture and affected test performance (i.e. test_load_balancer_basic booted 2 instances instead of just one).  This change refactors scenario tests by:   1. Moving all tests into a single module and a single class,      which allows to make set-up easier.   2. Reducing some code duplication in the base module.  NOTE: This patch includes fixes from https://review.openstack.org/#/c/207196/1 . As soon as this change is rebase and ready to merge I'll rebase on top of it.  Change-Id: Ib9733d1a9059f9801e6af8b116093666585f82a2",testing,,,,,,
openstack%2Fneutron-lbaas~master~Ib9733d1a9059f9801e6af8b116093666585f82a2,https://review.opendev.org/207944,Refactor v2 scenario tests,"Refactor v2 scenario tests  When api and scenario tests were copied from tempest and test_healh_monitor_basic was added, scenario code suffered a number of changes which introduced code duplication, worsened its architecture and affected test performance (i.e. test_load_balancer_basic booted 2 instances instead of just one).  This change refactors scenario tests by:   1. Moving all tests into a single module and a single class,      which allows to make set-up easier.   2. Reducing some code duplication in the base module.  NOTE: This patch includes fixes from https://review.openstack.org/#/c/207196/1 . As soon as this change is rebase and ready to merge I'll rebase on top of it.  Change-Id: Ib9733d1a9059f9801e6af8b116093666585f82a2",quality,,,,,,
openstack%2Fneutron-lbaas~master~Ib9733d1a9059f9801e6af8b116093666585f82a2,https://review.opendev.org/207944,Refactor v2 scenario tests,"Refactor v2 scenario tests  When api and scenario tests were copied from tempest and test_healh_monitor_basic was added, scenario code suffered a number of changes which introduced code duplication, worsened its architecture and affected test performance (i.e. test_load_balancer_basic booted 2 instances instead of just one).  This change refactors scenario tests by:   1. Moving all tests into a single module and a single class,      which allows to make set-up easier.   2. Reducing some code duplication in the base module.  NOTE: This patch includes fixes from https://review.openstack.org/#/c/207196/1 . As soon as this change is rebase and ready to merge I'll rebase on top of it.  Change-Id: Ib9733d1a9059f9801e6af8b116093666585f82a2",objective,,,,,,
openstack%2Fkeystone~stable%2Fkilo~Iafb038d5ef6e380a0b48f0bc31ed0da5c526492b,https://review.opendev.org/212944,Refactor: move PKI-specific tests into the appropriate class,Refactor: move PKI-specific tests into the appropriate class  This patch moves PKI and PKIZ specific tests into a PKI specific test class. The PKIZ test class then inherits those tests from the PKI test class. The UUID test class no longer has to override the parent class to skip an irrelevant test.  Change-Id: Iafb038d5ef6e380a0b48f0bc31ed0da5c526492b (cherry picked from commit b9647e1845a894fa1191e31f5d955c9bbcfef783),testing,,,,,,
openstack%2Fkeystone~stable%2Fkilo~Iafb038d5ef6e380a0b48f0bc31ed0da5c526492b,https://review.opendev.org/212944,Refactor: move PKI-specific tests into the appropriate class,Refactor: move PKI-specific tests into the appropriate class  This patch moves PKI and PKIZ specific tests into a PKI specific test class. The PKIZ test class then inherits those tests from the PKI test class. The UUID test class no longer has to override the parent class to skip an irrelevant test.  Change-Id: Iafb038d5ef6e380a0b48f0bc31ed0da5c526492b (cherry picked from commit b9647e1845a894fa1191e31f5d955c9bbcfef783),quality,,,,,,
openstack%2Fkeystone~stable%2Fkilo~Iafb038d5ef6e380a0b48f0bc31ed0da5c526492b,https://review.opendev.org/212944,Refactor: move PKI-specific tests into the appropriate class,Refactor: move PKI-specific tests into the appropriate class  This patch moves PKI and PKIZ specific tests into a PKI specific test class. The PKIZ test class then inherits those tests from the PKI test class. The UUID test class no longer has to override the parent class to skip an irrelevant test.  Change-Id: Iafb038d5ef6e380a0b48f0bc31ed0da5c526492b (cherry picked from commit b9647e1845a894fa1191e31f5d955c9bbcfef783),objective,,,,,,
x%2Fcloudroast~master~I81973c551ae5aca52b11ddf067ad2af18dd54b4f,https://review.opendev.org/214296,Remove test_delete_for_deleted_image_fails for later refactor.,Remove test_delete_for_deleted_image_fails for later refactor.  The test fails depending on the version of Glance used for Nova calls. This test is being removed and reconsidered.  Change-Id: I81973c551ae5aca52b11ddf067ad2af18dd54b4f,testing,,,,,,
x%2Fcloudroast~master~I81973c551ae5aca52b11ddf067ad2af18dd54b4f,https://review.opendev.org/214296,Remove test_delete_for_deleted_image_fails for later refactor.,Remove test_delete_for_deleted_image_fails for later refactor.  The test fails depending on the version of Glance used for Nova calls. This test is being removed and reconsidered.  Change-Id: I81973c551ae5aca52b11ddf067ad2af18dd54b4f,objective,,,,,,
openstack%2Ffuel-ostf~master~I139d186288b6d05a185c878b0d5c1c21c581af69,https://review.opendev.org/208362,Refactor of mysql test: test separated from controller databases,Refactor of mysql test: test separated from controller databases  Rertieve data about mysql hosts from hiera instead of hardcoded controllers  Change-Id: I139d186288b6d05a185c878b0d5c1c21c581af69 Implements: blueprint ostf-separate-services-refactor,testing,,,,,,
openstack%2Ffuel-ostf~master~I139d186288b6d05a185c878b0d5c1c21c581af69,https://review.opendev.org/208362,Refactor of mysql test: test separated from controller databases,Refactor of mysql test: test separated from controller databases  Rertieve data about mysql hosts from hiera instead of hardcoded controllers  Change-Id: I139d186288b6d05a185c878b0d5c1c21c581af69 Implements: blueprint ostf-separate-services-refactor,quality,,,,,,
openstack%2Ffuel-ostf~master~I139d186288b6d05a185c878b0d5c1c21c581af69,https://review.opendev.org/208362,Refactor of mysql test: test separated from controller databases,Refactor of mysql test: test separated from controller databases  Rertieve data about mysql hosts from hiera instead of hardcoded controllers  Change-Id: I139d186288b6d05a185c878b0d5c1c21c581af69 Implements: blueprint ostf-separate-services-refactor,objective,,,,,,
openstack%2Fnova~master~I98740029ed1115491438e93bfcb981b1f1bd7095,https://review.opendev.org/197228,Refactor unit test for InstanceGroup objects,Refactor unit test for InstanceGroup objects  The goal of this patch was to remove the use of the database in the unit tests for the InstanceGroup objects. We now mock out all database interactions in the object unit tests and verify that the calls to the DB API are appropriate.  Change-Id: I98740029ed1115491438e93bfcb981b1f1bd7095,testing,,,,,,
openstack%2Fnova~master~I98740029ed1115491438e93bfcb981b1f1bd7095,https://review.opendev.org/197228,Refactor unit test for InstanceGroup objects,Refactor unit test for InstanceGroup objects  The goal of this patch was to remove the use of the database in the unit tests for the InstanceGroup objects. We now mock out all database interactions in the object unit tests and verify that the calls to the DB API are appropriate.  Change-Id: I98740029ed1115491438e93bfcb981b1f1bd7095,integration,,,,,,
openstack%2Fnova~master~I98740029ed1115491438e93bfcb981b1f1bd7095,https://review.opendev.org/197228,Refactor unit test for InstanceGroup objects,Refactor unit test for InstanceGroup objects  The goal of this patch was to remove the use of the database in the unit tests for the InstanceGroup objects. We now mock out all database interactions in the object unit tests and verify that the calls to the DB API are appropriate.  Change-Id: I98740029ed1115491438e93bfcb981b1f1bd7095,objective,,,,,,
x%2Fooi~master~I85be28a7f278e81b31c78e782c020056f5803d61,https://review.opendev.org/206026,refactor 'show' method from compute controller,"refactor 'show' method from compute controller  This is part of the controller refactoring. The current desing is hard to test, since each API action is done in a single method.  This refactoring tries to split the construction of the OpenStack V2 api requests from all the other logic, so that we can test it separatedly.  Moreover, this refactoring introduces new unit testing, instead of the functional testing that is being done right now.  Change-Id: I85be28a7f278e81b31c78e782c020056f5803d61",testing,,,,,,
x%2Fooi~master~I85be28a7f278e81b31c78e782c020056f5803d61,https://review.opendev.org/206026,refactor 'show' method from compute controller,"refactor 'show' method from compute controller  This is part of the controller refactoring. The current desing is hard to test, since each API action is done in a single method.  This refactoring tries to split the construction of the OpenStack V2 api requests from all the other logic, so that we can test it separatedly.  Moreover, this refactoring introduces new unit testing, instead of the functional testing that is being done right now.  Change-Id: I85be28a7f278e81b31c78e782c020056f5803d61",objective,,,,,,
x%2Fooi~master~I85be28a7f278e81b31c78e782c020056f5803d61,https://review.opendev.org/206026,refactor 'show' method from compute controller,"refactor 'show' method from compute controller  This is part of the controller refactoring. The current desing is hard to test, since each API action is done in a single method.  This refactoring tries to split the construction of the OpenStack V2 api requests from all the other logic, so that we can test it separatedly.  Moreover, this refactoring introduces new unit testing, instead of the functional testing that is being done right now.  Change-Id: I85be28a7f278e81b31c78e782c020056f5803d61",quality,,,,,,
x%2Fooi~master~I56309a6d6c7e40f1c2b83966d03b5098cbf92005,https://review.opendev.org/192201,refactor 'run_action' method from compute controller,"refactor action method from compute controller  This is part of the controller refactoring. The current desing is hard to test, since each API action is done in a single method.  This refactoring tries to split the construction of the OpenStack V2 api requests from all the other logic, so that we can test it separatedly. Moreover, this refactoring introduces new unit testing, instead of the functional testing that is being done right now.  Change-Id: I56309a6d6c7e40f1c2b83966d03b5098cbf92005",testing,,,,,,
x%2Fooi~master~I56309a6d6c7e40f1c2b83966d03b5098cbf92005,https://review.opendev.org/192201,refactor 'run_action' method from compute controller,"refactor action method from compute controller  This is part of the controller refactoring. The current desing is hard to test, since each API action is done in a single method.  This refactoring tries to split the construction of the OpenStack V2 api requests from all the other logic, so that we can test it separatedly. Moreover, this refactoring introduces new unit testing, instead of the functional testing that is being done right now.  Change-Id: I56309a6d6c7e40f1c2b83966d03b5098cbf92005",objective,,,,,,
x%2Fooi~master~I56309a6d6c7e40f1c2b83966d03b5098cbf92005,https://review.opendev.org/192201,refactor 'run_action' method from compute controller,"refactor action method from compute controller  This is part of the controller refactoring. The current desing is hard to test, since each API action is done in a single method.  This refactoring tries to split the construction of the OpenStack V2 api requests from all the other logic, so that we can test it separatedly. Moreover, this refactoring introduces new unit testing, instead of the functional testing that is being done right now.  Change-Id: I56309a6d6c7e40f1c2b83966d03b5098cbf92005",quality,,,,,,
openstack%2Fneutron~master~If2d2554f3509d3da7a6b625fd900d2090a3fe0f2,https://review.opendev.org/736242,Refactor assertEqual statement that includes 'True',"Refactor assertEqual statement that includes 'True'  We have a hacking check to make sure assertTrue is used instead of assertEqual(True, something). The regex used for that likely needs to be fixed as it's overly complex for what it is trying to match.  We are seeing pep8 failures flagging an instance of assertEqual that is comparing a tuple that happens to contain True as one of its values. As an easier path to get around this failure until someone can reevaluate the hacking check regex, this just reformats the test code so that it no longer gets matched by the existing regex.  Change-Id: If2d2554f3509d3da7a6b625fd900d2090a3fe0f2 Signed-off-by: Sean McGinnis <sean.mcginnis@gmail.com>",testing,,,,,,
openstack%2Fneutron~master~If2d2554f3509d3da7a6b625fd900d2090a3fe0f2,https://review.opendev.org/736242,Refactor assertEqual statement that includes 'True',"Refactor assertEqual statement that includes 'True'  We have a hacking check to make sure assertTrue is used instead of assertEqual(True, something). The regex used for that likely needs to be fixed as it's overly complex for what it is trying to match.  We are seeing pep8 failures flagging an instance of assertEqual that is comparing a tuple that happens to contain True as one of its values. As an easier path to get around this failure until someone can reevaluate the hacking check regex, this just reformats the test code so that it no longer gets matched by the existing regex.  Change-Id: If2d2554f3509d3da7a6b625fd900d2090a3fe0f2 Signed-off-by: Sean McGinnis <sean.mcginnis@gmail.com>",objective,,,,,,
openstack%2Fneutron~master~If2d2554f3509d3da7a6b625fd900d2090a3fe0f2,https://review.opendev.org/736242,Refactor assertEqual statement that includes 'True',"Refactor assertEqual statement that includes 'True'  We have a hacking check to make sure assertTrue is used instead of assertEqual(True, something). The regex used for that likely needs to be fixed as it's overly complex for what it is trying to match.  We are seeing pep8 failures flagging an instance of assertEqual that is comparing a tuple that happens to contain True as one of its values. As an easier path to get around this failure until someone can reevaluate the hacking check regex, this just reformats the test code so that it no longer gets matched by the existing regex.  Change-Id: If2d2554f3509d3da7a6b625fd900d2090a3fe0f2 Signed-off-by: Sean McGinnis <sean.mcginnis@gmail.com>",quality,,,,,,
openstack%2Ffuel-qa~master~Iff4fe9ce5876f8dd769873189c5c294c7a6c29fd,https://review.opendev.org/207948,Refactor nova tests to use neutron,Refactor nova tests to use neutron  - Changed test_ha_one_controller_base to use neutron - Changed test_ha_one_controller to use neutron - deploy_ha_one_controller_vlan test was deleted as duplicate of deploy_ha_one_controller_neutron  Change-Id: Iff4fe9ce5876f8dd769873189c5c294c7a6c29fd Closes-Bug: #1478915,testing,,,,,,
openstack%2Ffuel-qa~master~Iff4fe9ce5876f8dd769873189c5c294c7a6c29fd,https://review.opendev.org/207948,Refactor nova tests to use neutron,Refactor nova tests to use neutron  - Changed test_ha_one_controller_base to use neutron - Changed test_ha_one_controller to use neutron - deploy_ha_one_controller_vlan test was deleted as duplicate of deploy_ha_one_controller_neutron  Change-Id: Iff4fe9ce5876f8dd769873189c5c294c7a6c29fd Closes-Bug: #1478915,objective,,,,,,
openstack%2Ffuel-qa~master~Iff4fe9ce5876f8dd769873189c5c294c7a6c29fd,https://review.opendev.org/207948,Refactor nova tests to use neutron,Refactor nova tests to use neutron  - Changed test_ha_one_controller_base to use neutron - Changed test_ha_one_controller to use neutron - deploy_ha_one_controller_vlan test was deleted as duplicate of deploy_ha_one_controller_neutron  Change-Id: Iff4fe9ce5876f8dd769873189c5c294c7a6c29fd Closes-Bug: #1478915,quality,,,,,,
openstack%2Ffuel-qa~master~Ifa52cf353ff73273d7cf2eaac94d0687e1f423dc,https://review.opendev.org/207377,refactoring nova ha system tests to use neutron network manager,refactoring nova ha system tests to use neutron network manager  Changed nova-network-manager to neutron-vlan on next test cases: Add and re-add cinder / compute + cinder to HA cluster Add compute node to cluster in HA mode with flat nova-network Check HA mode on scalability Backup/restore master node with cluster in ha mode  Change-Id: Ifa52cf353ff73273d7cf2eaac94d0687e1f423dc Related-Bug:#1478787,testing,,,,,,
openstack%2Ffuel-qa~master~Ifa52cf353ff73273d7cf2eaac94d0687e1f423dc,https://review.opendev.org/207377,refactoring nova ha system tests to use neutron network manager,refactoring nova ha system tests to use neutron network manager  Changed nova-network-manager to neutron-vlan on next test cases: Add and re-add cinder / compute + cinder to HA cluster Add compute node to cluster in HA mode with flat nova-network Check HA mode on scalability Backup/restore master node with cluster in ha mode  Change-Id: Ifa52cf353ff73273d7cf2eaac94d0687e1f423dc Related-Bug:#1478787,objective,,,,,,
openstack%2Fsenlin~master~Ia02eb1e4fa84c314b04aa656277aed46965c5c9b,https://review.opendev.org/207281,Refactor plugin name checking logic,"Refactor plugin name checking logic  This patch reworks the plugin name checking so that it can be shared among different plugin types. Major revisions include:  - Add a new exception type 'InvalidPlugin' for plugin related   exceptions. - Remove the 'ProfileValidationFailure' exception type, which is not   useful and it is confusing. Replace it with 'InvalidPlugin'. - Remove the 'InvalidPolicyType' exception type, which is not very   useful. Replace it with 'InvalidPlugin'. - Combine profile name checking and policy name checking into a shared   function. Revised the test case as needed.  Change-Id: Ia02eb1e4fa84c314b04aa656277aed46965c5c9b",testing,,,,,,
openstack%2Fsenlin~master~Ia02eb1e4fa84c314b04aa656277aed46965c5c9b,https://review.opendev.org/207281,Refactor plugin name checking logic,"Refactor plugin name checking logic  This patch reworks the plugin name checking so that it can be shared among different plugin types. Major revisions include:  - Add a new exception type 'InvalidPlugin' for plugin related   exceptions. - Remove the 'ProfileValidationFailure' exception type, which is not   useful and it is confusing. Replace it with 'InvalidPlugin'. - Remove the 'InvalidPolicyType' exception type, which is not very   useful. Replace it with 'InvalidPlugin'. - Combine profile name checking and policy name checking into a shared   function. Revised the test case as needed.  Change-Id: Ia02eb1e4fa84c314b04aa656277aed46965c5c9b",objective,,,,,,
openstack%2Fsenlin~master~Ia02eb1e4fa84c314b04aa656277aed46965c5c9b,https://review.opendev.org/207281,Refactor plugin name checking logic,"Refactor plugin name checking logic  This patch reworks the plugin name checking so that it can be shared among different plugin types. Major revisions include:  - Add a new exception type 'InvalidPlugin' for plugin related   exceptions. - Remove the 'ProfileValidationFailure' exception type, which is not   useful and it is confusing. Replace it with 'InvalidPlugin'. - Remove the 'InvalidPolicyType' exception type, which is not very   useful. Replace it with 'InvalidPlugin'. - Combine profile name checking and policy name checking into a shared   function. Revised the test case as needed.  Change-Id: Ia02eb1e4fa84c314b04aa656277aed46965c5c9b",quality,,,,,,
openstack%2Fswift~master~I963e0d0ae0d6569ad1de605034c529529cbb4f9a,https://review.opendev.org/198429,Refactor diskfile,"Refactor diskfile  This patch mostly eliminates the duplicate code that was deliberately left in place during EC review to avoid major churn of the diskfile module prior to the kilo release.  This focuses on obvious de-duplication and shuffling code between classes. It deliberately does not attempt to hammer out every last piece of de-duplication where that would introduce more complex changes - that can come later.  Code is moved from the module level and from ECDiskFile* classes into new BaseDiskFile* classes.  Concrete classes for replication and EC policy retain their existing names i.e. DiskFile[Manager|Writer|Reader|] and ECDiskFile[Manager|Writer|Reader|] respectively.  Knock-on changes:  - fix bug whereby get_hashes was ignoring self.reclaim_age   and always using the default arg value.  - replication diskfile manager now deletes a tombstone that is older   than reclaim_age even when there is a newer .meta file.  - replication diskfile manager will no longer raise an   AssertionError if only a .meta file is found during   hash_cleanup_listdir.  - fix stale test in test_auditor.py: test_with_tombstone didn't   make much sense other than to verify that a tombstone is not   removed by auditor, but the test setup was convoluted and I think   dates back to when object puts did not clean up the object dir.   Now that they do you have to try harder to create a dir with   a tombstone and a data file.  TODO: the naming of _get_hashes() and get_hashes() needs to be fixed:   - both are called from other modules so neither should have     the '_': the heritage is that before we had diskfile.get_hashes()     which was called by DiskFileManager.get_hashes() via     DiskFileManager._get_hashes().   - Now diskfile.get_hashes() has been moved in the class to be     DiskFileManager._get_hashes() but it is still called from the     replicator.   - Do we even need both? get_hashes() does a little more checking     wrt _get_hashes() but replicator has all the info it needs to call     get_hashes() instead and let it build the partition path.  Change-Id: I963e0d0ae0d6569ad1de605034c529529cbb4f9a",testing,,,,,,
openstack%2Fswift~master~I963e0d0ae0d6569ad1de605034c529529cbb4f9a,https://review.opendev.org/198429,Refactor diskfile,"Refactor diskfile  This patch mostly eliminates the duplicate code that was deliberately left in place during EC review to avoid major churn of the diskfile module prior to the kilo release.  This focuses on obvious de-duplication and shuffling code between classes. It deliberately does not attempt to hammer out every last piece of de-duplication where that would introduce more complex changes - that can come later.  Code is moved from the module level and from ECDiskFile* classes into new BaseDiskFile* classes.  Concrete classes for replication and EC policy retain their existing names i.e. DiskFile[Manager|Writer|Reader|] and ECDiskFile[Manager|Writer|Reader|] respectively.  Knock-on changes:  - fix bug whereby get_hashes was ignoring self.reclaim_age   and always using the default arg value.  - replication diskfile manager now deletes a tombstone that is older   than reclaim_age even when there is a newer .meta file.  - replication diskfile manager will no longer raise an   AssertionError if only a .meta file is found during   hash_cleanup_listdir.  - fix stale test in test_auditor.py: test_with_tombstone didn't   make much sense other than to verify that a tombstone is not   removed by auditor, but the test setup was convoluted and I think   dates back to when object puts did not clean up the object dir.   Now that they do you have to try harder to create a dir with   a tombstone and a data file.  TODO: the naming of _get_hashes() and get_hashes() needs to be fixed:   - both are called from other modules so neither should have     the '_': the heritage is that before we had diskfile.get_hashes()     which was called by DiskFileManager.get_hashes() via     DiskFileManager._get_hashes().   - Now diskfile.get_hashes() has been moved in the class to be     DiskFileManager._get_hashes() but it is still called from the     replicator.   - Do we even need both? get_hashes() does a little more checking     wrt _get_hashes() but replicator has all the info it needs to call     get_hashes() instead and let it build the partition path.  Change-Id: I963e0d0ae0d6569ad1de605034c529529cbb4f9a",quality,,,,,,
openstack%2Fswift~master~I963e0d0ae0d6569ad1de605034c529529cbb4f9a,https://review.opendev.org/198429,Refactor diskfile,"Refactor diskfile  This patch mostly eliminates the duplicate code that was deliberately left in place during EC review to avoid major churn of the diskfile module prior to the kilo release.  This focuses on obvious de-duplication and shuffling code between classes. It deliberately does not attempt to hammer out every last piece of de-duplication where that would introduce more complex changes - that can come later.  Code is moved from the module level and from ECDiskFile* classes into new BaseDiskFile* classes.  Concrete classes for replication and EC policy retain their existing names i.e. DiskFile[Manager|Writer|Reader|] and ECDiskFile[Manager|Writer|Reader|] respectively.  Knock-on changes:  - fix bug whereby get_hashes was ignoring self.reclaim_age   and always using the default arg value.  - replication diskfile manager now deletes a tombstone that is older   than reclaim_age even when there is a newer .meta file.  - replication diskfile manager will no longer raise an   AssertionError if only a .meta file is found during   hash_cleanup_listdir.  - fix stale test in test_auditor.py: test_with_tombstone didn't   make much sense other than to verify that a tombstone is not   removed by auditor, but the test setup was convoluted and I think   dates back to when object puts did not clean up the object dir.   Now that they do you have to try harder to create a dir with   a tombstone and a data file.  TODO: the naming of _get_hashes() and get_hashes() needs to be fixed:   - both are called from other modules so neither should have     the '_': the heritage is that before we had diskfile.get_hashes()     which was called by DiskFileManager.get_hashes() via     DiskFileManager._get_hashes().   - Now diskfile.get_hashes() has been moved in the class to be     DiskFileManager._get_hashes() but it is still called from the     replicator.   - Do we even need both? get_hashes() does a little more checking     wrt _get_hashes() but replicator has all the info it needs to call     get_hashes() instead and let it build the partition path.  Change-Id: I963e0d0ae0d6569ad1de605034c529529cbb4f9a",objective,,,,,,
openstack%2Ffuel-ostf~master~I825c72dd8da6e487a71ae70d4af4009b541221e3,https://review.opendev.org/207036,Refactoring galera state test,Refactoring galera state test  1) Removed 1 extra indent level 2) Removed 'return result' expression 3) Changed method of analysis mysql output  Change-Id: I825c72dd8da6e487a71ae70d4af4009b541221e3 Closes-Bug:#1479335,testing,,,,,,
openstack%2Ffuel-ostf~master~I825c72dd8da6e487a71ae70d4af4009b541221e3,https://review.opendev.org/207036,Refactoring galera state test,Refactoring galera state test  1) Removed 1 extra indent level 2) Removed 'return result' expression 3) Changed method of analysis mysql output  Change-Id: I825c72dd8da6e487a71ae70d4af4009b541221e3 Closes-Bug:#1479335,objective,,,,,,
openstack%2Ffuel-ostf~master~I825c72dd8da6e487a71ae70d4af4009b541221e3,https://review.opendev.org/207036,Refactoring galera state test,Refactoring galera state test  1) Removed 1 extra indent level 2) Removed 'return result' expression 3) Changed method of analysis mysql output  Change-Id: I825c72dd8da6e487a71ae70d4af4009b541221e3 Closes-Bug:#1479335,quality,,,,,,
openstack%2Ffuel-qa~master~Ie72ba7c58433f0ebd30d74f55651b940037d92ad,https://review.opendev.org/207235,test_zabbix_py system test refactoring,"test_zabbix_py system test refactoring  * Using neutron instead of nova * Segment type choose by env var NEUTRON_SEGMENT_TYPE   which is 'vlan' by default * Context manager for SSH sessions * 'assert_cluster_ready' calls removed, assume network   verification and ostf will check the same  Change-Id: Ie72ba7c58433f0ebd30d74f55651b940037d92ad Closes-Bug: #1478922",testing,,,,,,
openstack%2Ffuel-qa~master~Ie72ba7c58433f0ebd30d74f55651b940037d92ad,https://review.opendev.org/207235,test_zabbix_py system test refactoring,"test_zabbix_py system test refactoring  * Using neutron instead of nova * Segment type choose by env var NEUTRON_SEGMENT_TYPE   which is 'vlan' by default * Context manager for SSH sessions * 'assert_cluster_ready' calls removed, assume network   verification and ostf will check the same  Change-Id: Ie72ba7c58433f0ebd30d74f55651b940037d92ad Closes-Bug: #1478922",objective,,,,,,
openstack%2Ffuel-qa~master~Ie72ba7c58433f0ebd30d74f55651b940037d92ad,https://review.opendev.org/207235,test_zabbix_py system test refactoring,"test_zabbix_py system test refactoring  * Using neutron instead of nova * Segment type choose by env var NEUTRON_SEGMENT_TYPE   which is 'vlan' by default * Context manager for SSH sessions * 'assert_cluster_ready' calls removed, assume network   verification and ostf will check the same  Change-Id: Ie72ba7c58433f0ebd30d74f55651b940037d92ad Closes-Bug: #1478922",quality,,,,,,
openstack%2Fheat~master~I1178a5127d9fd94fc38cf6d80a88ca75054f2d57,https://review.opendev.org/205165,Fix/refactor test_stack_update_existing_parameters,"Fix/refactor test_stack_update_existing_parameters  This test is supposed to prove that passing the ""existing"" flag to an update_stack call merges existing parameters with any new ones passed into the update, but atm it strangely starts with a stack containing zero existing parameters, and uses some convoluted mocks to prove that the new parameters are used.  So AFAICT it's not really testing what is required and it's pretty hard to read.  Refactoring so we look at the environment passed into the Stack constructor (mocked with mock) enables us to compare the before/ after parameters and ensure the existing and new ones are correctly combined as expected.  Change-Id: I1178a5127d9fd94fc38cf6d80a88ca75054f2d57",testing,,,,,,
openstack%2Fheat~master~I1178a5127d9fd94fc38cf6d80a88ca75054f2d57,https://review.opendev.org/205165,Fix/refactor test_stack_update_existing_parameters,"Fix/refactor test_stack_update_existing_parameters  This test is supposed to prove that passing the ""existing"" flag to an update_stack call merges existing parameters with any new ones passed into the update, but atm it strangely starts with a stack containing zero existing parameters, and uses some convoluted mocks to prove that the new parameters are used.  So AFAICT it's not really testing what is required and it's pretty hard to read.  Refactoring so we look at the environment passed into the Stack constructor (mocked with mock) enables us to compare the before/ after parameters and ensure the existing and new ones are correctly combined as expected.  Change-Id: I1178a5127d9fd94fc38cf6d80a88ca75054f2d57",quality,,,,,,
openstack%2Fheat~master~I1178a5127d9fd94fc38cf6d80a88ca75054f2d57,https://review.opendev.org/205165,Fix/refactor test_stack_update_existing_parameters,"Fix/refactor test_stack_update_existing_parameters  This test is supposed to prove that passing the ""existing"" flag to an update_stack call merges existing parameters with any new ones passed into the update, but atm it strangely starts with a stack containing zero existing parameters, and uses some convoluted mocks to prove that the new parameters are used.  So AFAICT it's not really testing what is required and it's pretty hard to read.  Refactoring so we look at the environment passed into the Stack constructor (mocked with mock) enables us to compare the before/ after parameters and ensure the existing and new ones are correctly combined as expected.  Change-Id: I1178a5127d9fd94fc38cf6d80a88ca75054f2d57",objective,,,,,,
openstack%2Ffuel-qa~master~I83b08726e04bd23f9ad03bdc4f5db1b206d75f8f,https://review.opendev.org/205978,Refactor upgrade system tests,"Refactor upgrade system tests  * Make same method names, test groups and snapshots for all tests. * Remove nova simple, replace nova to neutron. * Remove self.fuel_web.assert_cluster_ready calls. Assume it can be checked by OSTF.  Change-Id: I83b08726e04bd23f9ad03bdc4f5db1b206d75f8f Closes-Bug: #1471305",testing,,,,,,
openstack%2Ffuel-qa~master~I83b08726e04bd23f9ad03bdc4f5db1b206d75f8f,https://review.opendev.org/205978,Refactor upgrade system tests,"Refactor upgrade system tests  * Make same method names, test groups and snapshots for all tests. * Remove nova simple, replace nova to neutron. * Remove self.fuel_web.assert_cluster_ready calls. Assume it can be checked by OSTF.  Change-Id: I83b08726e04bd23f9ad03bdc4f5db1b206d75f8f Closes-Bug: #1471305",objective,,,,,,
openstack%2Ffuel-ostf~master~I55ceadfba19a7aa23d5104fa78569ec34e56b45b,https://review.opendev.org/198415,Refactoring of 'Check stack autoscaling' Heat OSTF test,Refactoring of 'Check stack autoscaling' Heat OSTF test  - Made code style changes in test - Removed unused functions - Optimize some functions by removing dubbed code  Partially implements: blueprint heat-ostf-test-refactoring  Change-Id: I55ceadfba19a7aa23d5104fa78569ec34e56b45b,testing,,,,,,
openstack%2Ffuel-ostf~master~I55ceadfba19a7aa23d5104fa78569ec34e56b45b,https://review.opendev.org/198415,Refactoring of 'Check stack autoscaling' Heat OSTF test,Refactoring of 'Check stack autoscaling' Heat OSTF test  - Made code style changes in test - Removed unused functions - Optimize some functions by removing dubbed code  Partially implements: blueprint heat-ostf-test-refactoring  Change-Id: I55ceadfba19a7aa23d5104fa78569ec34e56b45b,quality,,,,,,
openstack%2Ffuel-ostf~master~I55ceadfba19a7aa23d5104fa78569ec34e56b45b,https://review.opendev.org/198415,Refactoring of 'Check stack autoscaling' Heat OSTF test,Refactoring of 'Check stack autoscaling' Heat OSTF test  - Made code style changes in test - Removed unused functions - Optimize some functions by removing dubbed code  Partially implements: blueprint heat-ostf-test-refactoring  Change-Id: I55ceadfba19a7aa23d5104fa78569ec34e56b45b,objective,,,,,,
openstack%2Ffuel-ostf~master~If24c86c257ff4f85156cfebd03e444047db8adc3,https://review.opendev.org/197517,Advanved stack actions' Heat OSTF test refactoring,"Advanved stack actions' Heat OSTF test refactoring  - Optimized work with stack resources, added new method _get_stack_resources() that allows to return list of any desired stack resources (not only servers) by some criteria. In the next commits _get_stack_instances method will be removed and all other tests will use _get_stack_resources(). - Added checks for statuses of resources. - Made some code style changes.  Implements: heat-ostf-test-refactoring  Change-Id: If24c86c257ff4f85156cfebd03e444047db8adc3",testing,,,,,,
openstack%2Ffuel-ostf~master~If24c86c257ff4f85156cfebd03e444047db8adc3,https://review.opendev.org/197517,Advanved stack actions' Heat OSTF test refactoring,"Advanved stack actions' Heat OSTF test refactoring  - Optimized work with stack resources, added new method _get_stack_resources() that allows to return list of any desired stack resources (not only servers) by some criteria. In the next commits _get_stack_instances method will be removed and all other tests will use _get_stack_resources(). - Added checks for statuses of resources. - Made some code style changes.  Implements: heat-ostf-test-refactoring  Change-Id: If24c86c257ff4f85156cfebd03e444047db8adc3",quality,,,,,,
openstack%2Ffuel-ostf~master~If24c86c257ff4f85156cfebd03e444047db8adc3,https://review.opendev.org/197517,Advanved stack actions' Heat OSTF test refactoring,"Advanved stack actions' Heat OSTF test refactoring  - Optimized work with stack resources, added new method _get_stack_resources() that allows to return list of any desired stack resources (not only servers) by some criteria. In the next commits _get_stack_instances method will be removed and all other tests will use _get_stack_resources(). - Added checks for statuses of resources. - Made some code style changes.  Implements: heat-ostf-test-refactoring  Change-Id: If24c86c257ff4f85156cfebd03e444047db8adc3",objective,,,,,,
openstack%2Faodh~master~I40d227682a40bbd311f4108b1822c8e03e100b0c,https://review.opendev.org/201416,Refactor alarm scenario tests (TestAlarmsBase),"Refactor alarm scenario tests (TestAlarmsBase)  Currently, 'TestAlarms' has several types of test objectives including api, alarm hitory and various alarm rules.  This patch adds new base class 'TestAlarmsBase' by which we can split tests mixed in TestAlarms into different classes.  Change-Id: I40d227682a40bbd311f4108b1822c8e03e100b0c",testing,,,,,,
openstack%2Faodh~master~I40d227682a40bbd311f4108b1822c8e03e100b0c,https://review.opendev.org/201416,Refactor alarm scenario tests (TestAlarmsBase),"Refactor alarm scenario tests (TestAlarmsBase)  Currently, 'TestAlarms' has several types of test objectives including api, alarm hitory and various alarm rules.  This patch adds new base class 'TestAlarmsBase' by which we can split tests mixed in TestAlarms into different classes.  Change-Id: I40d227682a40bbd311f4108b1822c8e03e100b0c",objective,,,,,,
openstack%2Ffuel-ostf~master~I0ea2852f1d643690fb8cdf8dcd2231be42b5b7b2,https://review.opendev.org/198063,Refactor configuration tests,Refactor configuration tests  Not used variables was deleted. SSH connetction in test 'Check usage of default credentials on master node' use credentials of master node.  Change-Id: I0ea2852f1d643690fb8cdf8dcd2231be42b5b7b2 Closes-Bug: 1470910,testing,,,,,,
openstack%2Ffuel-ostf~master~I0ea2852f1d643690fb8cdf8dcd2231be42b5b7b2,https://review.opendev.org/198063,Refactor configuration tests,Refactor configuration tests  Not used variables was deleted. SSH connetction in test 'Check usage of default credentials on master node' use credentials of master node.  Change-Id: I0ea2852f1d643690fb8cdf8dcd2231be42b5b7b2 Closes-Bug: 1470910,quality,,,,,,
openstack%2Ffuel-ostf~master~I0ea2852f1d643690fb8cdf8dcd2231be42b5b7b2,https://review.opendev.org/198063,Refactor configuration tests,Refactor configuration tests  Not used variables was deleted. SSH connetction in test 'Check usage of default credentials on master node' use credentials of master node.  Change-Id: I0ea2852f1d643690fb8cdf8dcd2231be42b5b7b2 Closes-Bug: 1470910,objective,,,,,,
openstack%2Ffuel-web~master~I84e20351e40ca4dc468980d50385479711d685bb,https://review.opendev.org/200056,Refactor 'generate_network_scheme',Add 'default_mapping' to 'network_roles_metadata'    Add 'get_network_roles' method to 'objects.Cluster'   Add 'TestClusterObject.test_get_network_roles' unit test   Add 'default_mapping' to 'network_roles_metadata' of openstack.yaml fixture   Refactor 'NeutronNetworkDeploymentSerializer70.generate_network_scheme' in   order to fetch data using 'get_network_roles'  Change-Id: I84e20351e40ca4dc468980d50385479711d685bb,testing,,,,,,
openstack%2Ffuel-web~master~I84e20351e40ca4dc468980d50385479711d685bb,https://review.opendev.org/200056,Refactor 'generate_network_scheme',Add 'default_mapping' to 'network_roles_metadata'    Add 'get_network_roles' method to 'objects.Cluster'   Add 'TestClusterObject.test_get_network_roles' unit test   Add 'default_mapping' to 'network_roles_metadata' of openstack.yaml fixture   Refactor 'NeutronNetworkDeploymentSerializer70.generate_network_scheme' in   order to fetch data using 'get_network_roles'  Change-Id: I84e20351e40ca4dc468980d50385479711d685bb,objective,,,,,,
openstack%2Fheat~master~I5093a49bda00c676ef805dff1ecfb2e2db803a9c,https://review.opendev.org/199021,Refactor test_share_create_failed test for Manila,"Refactor test_share_create_failed test for Manila  test_share_create_failed check that check_create_complete raises ResourceInError exception, but there is no necessity to create all resource, because if ResourceInError has been raised, heat tries to recreate stack, thereforce test_share_create_failed runs 68 seconds. Now test only checks correct raising ResourceInError in check_create_complete.  Also, refactor such way test_share_create_unknown_status  Change-Id: I5093a49bda00c676ef805dff1ecfb2e2db803a9c",testing,,,,,,
openstack%2Fheat~master~I5093a49bda00c676ef805dff1ecfb2e2db803a9c,https://review.opendev.org/199021,Refactor test_share_create_failed test for Manila,"Refactor test_share_create_failed test for Manila  test_share_create_failed check that check_create_complete raises ResourceInError exception, but there is no necessity to create all resource, because if ResourceInError has been raised, heat tries to recreate stack, thereforce test_share_create_failed runs 68 seconds. Now test only checks correct raising ResourceInError in check_create_complete.  Also, refactor such way test_share_create_unknown_status  Change-Id: I5093a49bda00c676ef805dff1ecfb2e2db803a9c",quality,,,,,,
openstack%2Fheat~master~I5093a49bda00c676ef805dff1ecfb2e2db803a9c,https://review.opendev.org/199021,Refactor test_share_create_failed test for Manila,"Refactor test_share_create_failed test for Manila  test_share_create_failed check that check_create_complete raises ResourceInError exception, but there is no necessity to create all resource, because if ResourceInError has been raised, heat tries to recreate stack, thereforce test_share_create_failed runs 68 seconds. Now test only checks correct raising ResourceInError in check_create_complete.  Also, refactor such way test_share_create_unknown_status  Change-Id: I5093a49bda00c676ef805dff1ecfb2e2db803a9c",objective,,,,,,
openstack%2Fopenstacksdk~master~I41d57696ab90c55ae04ddac557ca3876ca087018,https://review.opendev.org/190337,Refactor verify_get tests,Refactor verify_get tests  Remove the multiple approaches and use one verify_get test method.  Change-Id: I41d57696ab90c55ae04ddac557ca3876ca087018,testing,,,,,,
openstack%2Fopenstacksdk~master~I41d57696ab90c55ae04ddac557ca3876ca087018,https://review.opendev.org/190337,Refactor verify_get tests,Refactor verify_get tests  Remove the multiple approaches and use one verify_get test method.  Change-Id: I41d57696ab90c55ae04ddac557ca3876ca087018,objective,,,,,,
openstack%2Fkeystone~master~Iafb038d5ef6e380a0b48f0bc31ed0da5c526492b,https://review.opendev.org/191873,Refactor: move PKI-specific tests into the appropriate class,Refactor: move PKI-specific tests into the appropriate class  This patch moves PKI and PKIZ specific tests into a PKI specific test class. The PKIZ test class then inherits those tests from the PKI test class. The UUID test class no longer has to override the parent class to skip an irrelevant test.  Change-Id: Iafb038d5ef6e380a0b48f0bc31ed0da5c526492b,testing,,,,,,
openstack%2Fkeystone~master~Iafb038d5ef6e380a0b48f0bc31ed0da5c526492b,https://review.opendev.org/191873,Refactor: move PKI-specific tests into the appropriate class,Refactor: move PKI-specific tests into the appropriate class  This patch moves PKI and PKIZ specific tests into a PKI specific test class. The PKIZ test class then inherits those tests from the PKI test class. The UUID test class no longer has to override the parent class to skip an irrelevant test.  Change-Id: Iafb038d5ef6e380a0b48f0bc31ed0da5c526492b,quality,,,,,,
openstack%2Fkeystone~master~Iafb038d5ef6e380a0b48f0bc31ed0da5c526492b,https://review.opendev.org/191873,Refactor: move PKI-specific tests into the appropriate class,Refactor: move PKI-specific tests into the appropriate class  This patch moves PKI and PKIZ specific tests into a PKI specific test class. The PKIZ test class then inherits those tests from the PKI test class. The UUID test class no longer has to override the parent class to skip an irrelevant test.  Change-Id: Iafb038d5ef6e380a0b48f0bc31ed0da5c526492b,objective,,,,,,
openstack%2Fmagnum~master~I64d1b13cdc7c86a007b200bf2e2547216a66eefc,https://review.opendev.org/189637,Refactor magnum functional test to add Kubernetes API test,"Refactor magnum functional test to add Kubernetes API test  To test Kubernetes API, we need bay created and as already in magnum functional test, we were creating bay. So this patch refactors the code to seperate methods for each operation. So that it can be used at other places.  Change-Id: I64d1b13cdc7c86a007b200bf2e2547216a66eefc Partial-bug: #1460236",testing,,,,,,
openstack%2Fmagnum~master~I64d1b13cdc7c86a007b200bf2e2547216a66eefc,https://review.opendev.org/189637,Refactor magnum functional test to add Kubernetes API test,"Refactor magnum functional test to add Kubernetes API test  To test Kubernetes API, we need bay created and as already in magnum functional test, we were creating bay. So this patch refactors the code to seperate methods for each operation. So that it can be used at other places.  Change-Id: I64d1b13cdc7c86a007b200bf2e2547216a66eefc Partial-bug: #1460236",objective,,,,,,
openstack%2Fcinder~master~I8aa9f756efb0b4fc4a3a0ea960c6f2d8e20ec18a,https://review.opendev.org/179082,Targets test refactoring,"Targets test refactoring  The unit tests for iser inherit from the tgtAdm, it means that any time run tests for iser, tgtAdm tests run too. This chache add TargetFixture to tests, it allows to decouple tests and delete duplicated code.  Other changes:  -  deleted  __init__ in test's classes; __init__ may work as a replacement for setUp, but  setUp should be used instead because it is part of the protocol for writing tests. It also has a counterpart, tearDown, which __init__ does no;  - replaced stubs to mock.  Change-Id: I8aa9f756efb0b4fc4a3a0ea960c6f2d8e20ec18a Closes-Bug: #1420009",testing,,,,,,
openstack%2Fcinder~master~I8aa9f756efb0b4fc4a3a0ea960c6f2d8e20ec18a,https://review.opendev.org/179082,Targets test refactoring,"Targets test refactoring  The unit tests for iser inherit from the tgtAdm, it means that any time run tests for iser, tgtAdm tests run too. This chache add TargetFixture to tests, it allows to decouple tests and delete duplicated code.  Other changes:  -  deleted  __init__ in test's classes; __init__ may work as a replacement for setUp, but  setUp should be used instead because it is part of the protocol for writing tests. It also has a counterpart, tearDown, which __init__ does no;  - replaced stubs to mock.  Change-Id: I8aa9f756efb0b4fc4a3a0ea960c6f2d8e20ec18a Closes-Bug: #1420009",quality,,,,,,
openstack%2Fcinder~master~I8aa9f756efb0b4fc4a3a0ea960c6f2d8e20ec18a,https://review.opendev.org/179082,Targets test refactoring,"Targets test refactoring  The unit tests for iser inherit from the tgtAdm, it means that any time run tests for iser, tgtAdm tests run too. This chache add TargetFixture to tests, it allows to decouple tests and delete duplicated code.  Other changes:  -  deleted  __init__ in test's classes; __init__ may work as a replacement for setUp, but  setUp should be used instead because it is part of the protocol for writing tests. It also has a counterpart, tearDown, which __init__ does no;  - replaced stubs to mock.  Change-Id: I8aa9f756efb0b4fc4a3a0ea960c6f2d8e20ec18a Closes-Bug: #1420009",objective,,,,,,
osf%2Finterop~master~I04a8d0979ed235892c7ccb427dc29075fd4948b7,https://review.opendev.org/183760,Fixed refactored Keystone token names,Fixed refactored Keystone token names  Keystone token tests were moved in a refactoring. Fixed names of test to match latest Tempest.  Change-Id: I04a8d0979ed235892c7ccb427dc29075fd4948b7,testing,,,,,,
osf%2Finterop~master~I04a8d0979ed235892c7ccb427dc29075fd4948b7,https://review.opendev.org/183760,Fixed refactored Keystone token names,Fixed refactored Keystone token names  Keystone token tests were moved in a refactoring. Fixed names of test to match latest Tempest.  Change-Id: I04a8d0979ed235892c7ccb427dc29075fd4948b7,objective,,,,,,
openstack%2Fnova~master~I64391ae01cc52b58d685386b0f2725060bbff44e,https://review.opendev.org/182485,Refactor an unit test to use urlencode(),Refactor an unit test to use urlencode()  Use urlencode() instead of formatting manually URL parameters.  Change-Id: I64391ae01cc52b58d685386b0f2725060bbff44e,testing,,,,,,
openstack%2Fnova~master~I64391ae01cc52b58d685386b0f2725060bbff44e,https://review.opendev.org/182485,Refactor an unit test to use urlencode(),Refactor an unit test to use urlencode()  Use urlencode() instead of formatting manually URL parameters.  Change-Id: I64391ae01cc52b58d685386b0f2725060bbff44e,objective,,,,,,
openstack%2Fpython-novaclient~master~I716be51d7d1825a757934298f06b2f04d64cf0dd,https://review.opendev.org/175854,refactor functional test base class to no inherit from tempest_lib,"refactor functional test base class to no inherit from tempest_lib  Test base classes inheriting outside the existing source tree to anything higher up the stack than testtools is really an anti pattern. It makes it *far* less clear what is going on. We really need to own and understand our base class setup for tests.  This does that unwind, so that we only now call out to tempest_lib in specific ways (like building clients, using decorators). The timeout and log capture pieces are pulled inline.  At the end of this we end up with a base test that defines:   - self.client - a Nova API client  - self.flavor - a workable flavor for booting guests  - self.image - a workable image for booting guests  - self.cli_clients - tempest_lib cli clients  Change-Id: I716be51d7d1825a757934298f06b2f04d64cf0dd",testing,,,,,,
openstack%2Fpython-novaclient~master~I716be51d7d1825a757934298f06b2f04d64cf0dd,https://review.opendev.org/175854,refactor functional test base class to no inherit from tempest_lib,"refactor functional test base class to no inherit from tempest_lib  Test base classes inheriting outside the existing source tree to anything higher up the stack than testtools is really an anti pattern. It makes it *far* less clear what is going on. We really need to own and understand our base class setup for tests.  This does that unwind, so that we only now call out to tempest_lib in specific ways (like building clients, using decorators). The timeout and log capture pieces are pulled inline.  At the end of this we end up with a base test that defines:   - self.client - a Nova API client  - self.flavor - a workable flavor for booting guests  - self.image - a workable image for booting guests  - self.cli_clients - tempest_lib cli clients  Change-Id: I716be51d7d1825a757934298f06b2f04d64cf0dd",quality,,,,,,
openstack%2Fpython-novaclient~master~I716be51d7d1825a757934298f06b2f04d64cf0dd,https://review.opendev.org/175854,refactor functional test base class to no inherit from tempest_lib,"refactor functional test base class to no inherit from tempest_lib  Test base classes inheriting outside the existing source tree to anything higher up the stack than testtools is really an anti pattern. It makes it *far* less clear what is going on. We really need to own and understand our base class setup for tests.  This does that unwind, so that we only now call out to tempest_lib in specific ways (like building clients, using decorators). The timeout and log capture pieces are pulled inline.  At the end of this we end up with a base test that defines:   - self.client - a Nova API client  - self.flavor - a workable flavor for booting guests  - self.image - a workable image for booting guests  - self.cli_clients - tempest_lib cli clients  Change-Id: I716be51d7d1825a757934298f06b2f04d64cf0dd",objective,,,,,,
openstack%2Fpython-cueclient~master~Ieb8c5053583f2e6b797e1d530c369ea0c7dc6a2c,https://review.opendev.org/176957,Refactor cue client tests,Refactor cue client tests  - Added fixtures to test controllers  Change-Id: Ieb8c5053583f2e6b797e1d530c369ea0c7dc6a2c,testing,,,,,,
openstack%2Fpython-cueclient~master~Ieb8c5053583f2e6b797e1d530c369ea0c7dc6a2c,https://review.opendev.org/176957,Refactor cue client tests,Refactor cue client tests  - Added fixtures to test controllers  Change-Id: Ieb8c5053583f2e6b797e1d530c369ea0c7dc6a2c,quality,,,,,,
openstack%2Fpython-cueclient~master~Ieb8c5053583f2e6b797e1d530c369ea0c7dc6a2c,https://review.opendev.org/176957,Refactor cue client tests,Refactor cue client tests  - Added fixtures to test controllers  Change-Id: Ieb8c5053583f2e6b797e1d530c369ea0c7dc6a2c,objective,,,,,,
x%2Fgroup-based-policy~feature%2Frefactor~I9ec6d159b87e77fcd034b2ff6d4e5c0969798b34,https://review.opendev.org/174432,Refactor GBP resource mapping with Neutron RESTful APIs,"Refactor GBP resource mapping with Neutron RESTful APIs  1. Decouple GBP resource mapping from neutron plugins and use Neutron RESTful APIs instead.  2. Move neutron_client related calls to neutron_api_mixin for easier removing in the future.  3. Add mock_neutronv2_api to provide methods to patch the Neutron RESTful API calls with WSGI calls.  4. Modify the existing 'UT' for the resource mapping driver, by patching the RESTful APIs with the WSGI calls, to ensure the test scenarios are still examined and passed.  5. Modify the existing 'UT' for the APIC mapping driver, by patching the RESTful APIs with the WSGI calls, to ensure the test scenarios are still examined and passed.  Change-Id: I9ec6d159b87e77fcd034b2ff6d4e5c0969798b34",testing,,,,,,
x%2Fgroup-based-policy~feature%2Frefactor~I9ec6d159b87e77fcd034b2ff6d4e5c0969798b34,https://review.opendev.org/174432,Refactor GBP resource mapping with Neutron RESTful APIs,"Refactor GBP resource mapping with Neutron RESTful APIs  1. Decouple GBP resource mapping from neutron plugins and use Neutron RESTful APIs instead.  2. Move neutron_client related calls to neutron_api_mixin for easier removing in the future.  3. Add mock_neutronv2_api to provide methods to patch the Neutron RESTful API calls with WSGI calls.  4. Modify the existing 'UT' for the resource mapping driver, by patching the RESTful APIs with the WSGI calls, to ensure the test scenarios are still examined and passed.  5. Modify the existing 'UT' for the APIC mapping driver, by patching the RESTful APIs with the WSGI calls, to ensure the test scenarios are still examined and passed.  Change-Id: I9ec6d159b87e77fcd034b2ff6d4e5c0969798b34",quality,,,,,,
x%2Fgroup-based-policy~feature%2Frefactor~I9ec6d159b87e77fcd034b2ff6d4e5c0969798b34,https://review.opendev.org/174432,Refactor GBP resource mapping with Neutron RESTful APIs,"Refactor GBP resource mapping with Neutron RESTful APIs  1. Decouple GBP resource mapping from neutron plugins and use Neutron RESTful APIs instead.  2. Move neutron_client related calls to neutron_api_mixin for easier removing in the future.  3. Add mock_neutronv2_api to provide methods to patch the Neutron RESTful API calls with WSGI calls.  4. Modify the existing 'UT' for the resource mapping driver, by patching the RESTful APIs with the WSGI calls, to ensure the test scenarios are still examined and passed.  5. Modify the existing 'UT' for the APIC mapping driver, by patching the RESTful APIs with the WSGI calls, to ensure the test scenarios are still examined and passed.  Change-Id: I9ec6d159b87e77fcd034b2ff6d4e5c0969798b34",objective,,,,,,
openstack%2Fneutron-vpnaas~master~I240a66cddb64dec7c6954bc249e69b2c9ed9628f,https://review.opendev.org/172142,VPNaaS: Refactor functional tests to use discover,"VPNaaS: Refactor functional tests to use discover  (WIP: DO NOT MERGE)  Attempt to use OS_TEST_FILTERS to specify the test combinations to run, for the two functional test jobs.  Currently, it seems to only be running the tests in common area.  Change-Id: I240a66cddb64dec7c6954bc249e69b2c9ed9628f",testing,,,,,,
openstack%2Fneutron-vpnaas~master~I240a66cddb64dec7c6954bc249e69b2c9ed9628f,https://review.opendev.org/172142,VPNaaS: Refactor functional tests to use discover,"VPNaaS: Refactor functional tests to use discover  (WIP: DO NOT MERGE)  Attempt to use OS_TEST_FILTERS to specify the test combinations to run, for the two functional test jobs.  Currently, it seems to only be running the tests in common area.  Change-Id: I240a66cddb64dec7c6954bc249e69b2c9ed9628f",objective,,,,,,
openstack%2Fnova~master~Ia5f732110dd850e270a33bc5e6640164b2a53e74,https://review.opendev.org/163359,refactored test in vmware test_read_write_util to pass with random PYTHONHASHSEED,refactored test in vmware test_read_write_util to pass with random PYTHONHASHSEED  changed request url param generation to respect param order before assertion Partial-Bug: #1348818  Change-Id: Ia5f732110dd850e270a33bc5e6640164b2a53e74,testing,,,,,,
openstack%2Fnova~master~Ia5f732110dd850e270a33bc5e6640164b2a53e74,https://review.opendev.org/163359,refactored test in vmware test_read_write_util to pass with random PYTHONHASHSEED,refactored test in vmware test_read_write_util to pass with random PYTHONHASHSEED  changed request url param generation to respect param order before assertion Partial-Bug: #1348818  Change-Id: Ia5f732110dd850e270a33bc5e6640164b2a53e74,quality,,,,,,
openstack%2Fnova~master~Ia5f732110dd850e270a33bc5e6640164b2a53e74,https://review.opendev.org/163359,refactored test in vmware test_read_write_util to pass with random PYTHONHASHSEED,refactored test in vmware test_read_write_util to pass with random PYTHONHASHSEED  changed request url param generation to respect param order before assertion Partial-Bug: #1348818  Change-Id: Ia5f732110dd850e270a33bc5e6640164b2a53e74,objective,,,,,,
openstack%2Fsahara~master~I5d86b4bc3c497d2610ec6bca646d12ff80d75fdd,https://review.opendev.org/165618,Minor refactor of the integration service test,Minor refactor of the integration service test  remove the duplicate code  Closes-bug: #1432863 Change-Id: I5d86b4bc3c497d2610ec6bca646d12ff80d75fdd,testing,,,,,,
openstack%2Fsahara~master~I5d86b4bc3c497d2610ec6bca646d12ff80d75fdd,https://review.opendev.org/165618,Minor refactor of the integration service test,Minor refactor of the integration service test  remove the duplicate code  Closes-bug: #1432863 Change-Id: I5d86b4bc3c497d2610ec6bca646d12ff80d75fdd,quality,,,,,,
openstack%2Fsahara~master~I5d86b4bc3c497d2610ec6bca646d12ff80d75fdd,https://review.opendev.org/165618,Minor refactor of the integration service test,Minor refactor of the integration service test  remove the duplicate code  Closes-bug: #1432863 Change-Id: I5d86b4bc3c497d2610ec6bca646d12ff80d75fdd,objective,,,,,,
openstack%2Fnova~master~Ic2dfbc0d2ccf7a1f71929b78d7c7d784a2f8b7f5,https://review.opendev.org/133665,Refactor some service tests and make them not require db,Refactor some service tests and make them not require db  This refactors service tests in a few different ways:   - Remove unnecessary calls  - Make tests test what they say instead of something that other tests    already cover (make TestLauncher into something else than testing    what test_service_random_port already does)  - Make them not require db  Change-Id: Ic2dfbc0d2ccf7a1f71929b78d7c7d784a2f8b7f5,testing,,,,,,
openstack%2Fnova~master~Ic2dfbc0d2ccf7a1f71929b78d7c7d784a2f8b7f5,https://review.opendev.org/133665,Refactor some service tests and make them not require db,Refactor some service tests and make them not require db  This refactors service tests in a few different ways:   - Remove unnecessary calls  - Make tests test what they say instead of something that other tests    already cover (make TestLauncher into something else than testing    what test_service_random_port already does)  - Make them not require db  Change-Id: Ic2dfbc0d2ccf7a1f71929b78d7c7d784a2f8b7f5,objective,,,,,,
openstack%2Fglance~master~I0ae51c64bd24457276ad3d7f9eb73fca7f354e49,https://review.opendev.org/80847,Refactor API function test class,Refactor API function test class       - Move API requests to separate methods      - Update setUp to create a stable background for each test  Closes bug: #1293210  Change-Id: I0ae51c64bd24457276ad3d7f9eb73fca7f354e49,testing,,,,,,
openstack%2Fglance~master~I0ae51c64bd24457276ad3d7f9eb73fca7f354e49,https://review.opendev.org/80847,Refactor API function test class,Refactor API function test class       - Move API requests to separate methods      - Update setUp to create a stable background for each test  Closes bug: #1293210  Change-Id: I0ae51c64bd24457276ad3d7f9eb73fca7f354e49,quality,,,,,,
openstack%2Fglance~master~I0ae51c64bd24457276ad3d7f9eb73fca7f354e49,https://review.opendev.org/80847,Refactor API function test class,Refactor API function test class       - Move API requests to separate methods      - Update setUp to create a stable background for each test  Closes bug: #1293210  Change-Id: I0ae51c64bd24457276ad3d7f9eb73fca7f354e49,objective,,,,,,
openstack%2Fironic~master~I4a49099c6b8ff3b7078d57a49212f6663d03d698,https://review.opendev.org/169981,Refactor test code to reduce duplication,"Refactor test code to reduce duplication  As part of review 163730 a helper method was identified as being duplicated.  This patch moves the code to a common location, and updates the users of it to use the new version.  There's no functionality change in this patch, just a refactoring.  Change-Id: I4a49099c6b8ff3b7078d57a49212f6663d03d698",testing,,,,,,
openstack%2Fironic~master~I4a49099c6b8ff3b7078d57a49212f6663d03d698,https://review.opendev.org/169981,Refactor test code to reduce duplication,"Refactor test code to reduce duplication  As part of review 163730 a helper method was identified as being duplicated.  This patch moves the code to a common location, and updates the users of it to use the new version.  There's no functionality change in this patch, just a refactoring.  Change-Id: I4a49099c6b8ff3b7078d57a49212f6663d03d698",quality,,,,,,
openstack%2Fironic~master~I4a49099c6b8ff3b7078d57a49212f6663d03d698,https://review.opendev.org/169981,Refactor test code to reduce duplication,"Refactor test code to reduce duplication  As part of review 163730 a helper method was identified as being duplicated.  This patch moves the code to a common location, and updates the users of it to use the new version.  There's no functionality change in this patch, just a refactoring.  Change-Id: I4a49099c6b8ff3b7078d57a49212f6663d03d698",objective,,,,,,
openstack%2Fnova~master~Iffdaf7d75ef2131c9d9fc7aa075c95b5569902c2,https://review.opendev.org/160899,Refactored test in linux_net to pass with random PYTHONHASHSEED,Refactored test in linux_net to pass with random PYTHONHASHSEED  Previous implementation wraps dns list into set. With random PYTHONHASHSEED set elements iteration order wasn't guaranteed.  Change-Id: Iffdaf7d75ef2131c9d9fc7aa075c95b5569902c2 Partial-Bug: #1348818,testing,,,,,,
openstack%2Fnova~master~Iffdaf7d75ef2131c9d9fc7aa075c95b5569902c2,https://review.opendev.org/160899,Refactored test in linux_net to pass with random PYTHONHASHSEED,Refactored test in linux_net to pass with random PYTHONHASHSEED  Previous implementation wraps dns list into set. With random PYTHONHASHSEED set elements iteration order wasn't guaranteed.  Change-Id: Iffdaf7d75ef2131c9d9fc7aa075c95b5569902c2 Partial-Bug: #1348818,objective,,,,,,
openstack%2Fnova~master~Id80632ea1c32910d751901c19c98ee76b52eda55,https://review.opendev.org/160901,Refactored test in test_neutron_driver to pass with random PYTHONHASHSEED,refactored test in test_neutron_driver to pass with random PYTHONHASHSEED  changed argument comparrison in mox.Stub from concrete list to mox.SameElementsAs.  Change-Id: Id80632ea1c32910d751901c19c98ee76b52eda55,testing,,,,,,
openstack%2Fnova~master~Id80632ea1c32910d751901c19c98ee76b52eda55,https://review.opendev.org/160901,Refactored test in test_neutron_driver to pass with random PYTHONHASHSEED,refactored test in test_neutron_driver to pass with random PYTHONHASHSEED  changed argument comparrison in mox.Stub from concrete list to mox.SameElementsAs.  Change-Id: Id80632ea1c32910d751901c19c98ee76b52eda55,objective,,,,,,
openstack%2Ffuel-ostf~master~I9a057b2bf62652e36ec5e166f7b32946f0e13dfd,https://review.opendev.org/168053,Murano OSTF tests refactoring,"Murano OSTF tests refactoring  In 6.1 MOS Murano will not have packages by default. This patch adds skipping to tests, if user have no requested package in Murano.  Also this patch adds test, which imports package and test Murano engine. This is nessesary to be sure that Murano forks correctly in MOS.  Closes=Bug: #1436914  Change-Id: I9a057b2bf62652e36ec5e166f7b32946f0e13dfd",testing,,,,,,
openstack%2Ffuel-ostf~master~I9a057b2bf62652e36ec5e166f7b32946f0e13dfd,https://review.opendev.org/168053,Murano OSTF tests refactoring,"Murano OSTF tests refactoring  In 6.1 MOS Murano will not have packages by default. This patch adds skipping to tests, if user have no requested package in Murano.  Also this patch adds test, which imports package and test Murano engine. This is nessesary to be sure that Murano forks correctly in MOS.  Closes=Bug: #1436914  Change-Id: I9a057b2bf62652e36ec5e166f7b32946f0e13dfd",objective,,,,,,
openstack%2Fpython-mistralclient~master~I4c85d227c171d4b819dd288a00c7fb32258f11ba,https://review.opendev.org/166781,Fix failing after refactoring CLI test for execution,"Fix failing after refactoring CLI test for execution  After refactoring tests need to wait a little bit more time before execution will be in 'SUCCESS' state, that's why it was needed to add extra method that will check execution state and wait for 'Success'.  Change-Id: I4c85d227c171d4b819dd288a00c7fb32258f11ba Closes-Bug: #1435263",testing,,,,,,
openstack%2Fpython-mistralclient~master~I4c85d227c171d4b819dd288a00c7fb32258f11ba,https://review.opendev.org/166781,Fix failing after refactoring CLI test for execution,"Fix failing after refactoring CLI test for execution  After refactoring tests need to wait a little bit more time before execution will be in 'SUCCESS' state, that's why it was needed to add extra method that will check execution state and wait for 'Success'.  Change-Id: I4c85d227c171d4b819dd288a00c7fb32258f11ba Closes-Bug: #1435263",objective,,,,,,
openstack%2Fpython-mistralclient~master~I4c85d227c171d4b819dd288a00c7fb32258f11ba,https://review.opendev.org/166781,Fix failing after refactoring CLI test for execution,"Fix failing after refactoring CLI test for execution  After refactoring tests need to wait a little bit more time before execution will be in 'SUCCESS' state, that's why it was needed to add extra method that will check execution state and wait for 'Success'.  Change-Id: I4c85d227c171d4b819dd288a00c7fb32258f11ba Closes-Bug: #1435263",quality,,,,,,
x%2Fswift3~master~I3d0bd909751167de864ad0acc4cb9e7d93b4f2fc,https://review.opendev.org/164069,Refactor Functional Test Cases,"Refactor Functional Test Cases  To simplify the setup code, a base class ""Swift3FanctionalTestCase"" expeced to keep common procedures there is added to __init__.py.  Change-Id: I3d0bd909751167de864ad0acc4cb9e7d93b4f2fc",testing,,,,,,
x%2Fswift3~master~I3d0bd909751167de864ad0acc4cb9e7d93b4f2fc,https://review.opendev.org/164069,Refactor Functional Test Cases,"Refactor Functional Test Cases  To simplify the setup code, a base class ""Swift3FanctionalTestCase"" expeced to keep common procedures there is added to __init__.py.  Change-Id: I3d0bd909751167de864ad0acc4cb9e7d93b4f2fc",quality,,,,,,
x%2Fswift3~master~I3d0bd909751167de864ad0acc4cb9e7d93b4f2fc,https://review.opendev.org/164069,Refactor Functional Test Cases,"Refactor Functional Test Cases  To simplify the setup code, a base class ""Swift3FanctionalTestCase"" expeced to keep common procedures there is added to __init__.py.  Change-Id: I3d0bd909751167de864ad0acc4cb9e7d93b4f2fc",objective,,,,,,
openstack%2Fbarbican~master~I60fbc1b1839e44ac648266f0e970ac507dcd523b,https://review.opendev.org/162795,Split out and refactored more secret tests,Split out and refactored more secret tests  This is a continuation of the refactor effort of test resources. Also removed invalid bit test due to it being an impossible scenario. This should increase readability and remove a reliance on magic mock.  Change-Id: I60fbc1b1839e44ac648266f0e970ac507dcd523b,testing,,,,,,
openstack%2Fbarbican~master~I60fbc1b1839e44ac648266f0e970ac507dcd523b,https://review.opendev.org/162795,Split out and refactored more secret tests,Split out and refactored more secret tests  This is a continuation of the refactor effort of test resources. Also removed invalid bit test due to it being an impossible scenario. This should increase readability and remove a reliance on magic mock.  Change-Id: I60fbc1b1839e44ac648266f0e970ac507dcd523b,quality,,,,,,
openstack%2Fbarbican~master~I60fbc1b1839e44ac648266f0e970ac507dcd523b,https://review.opendev.org/162795,Split out and refactored more secret tests,Split out and refactored more secret tests  This is a continuation of the refactor effort of test resources. Also removed invalid bit test due to it being an impossible scenario. This should increase readability and remove a reliance on magic mock.  Change-Id: I60fbc1b1839e44ac648266f0e970ac507dcd523b,objective,,,,,,
openstack%2Fnova~master~I06749f5f6e2ce9bf28c378a022f862fe2db3fcb5,https://review.opendev.org/161463,Refactor _regex_instance_filter for testing,Refactor _regex_instance_filter for testing  _regex_instance_filter was determing which regex operation to use based on the database connection config.  This led to writing tests that modified the connection config to be different than the one which created the engine.  This was mostly harmless but now that we're looking to add the ability to get different engines based on that config value this can lead to confusion and errors.  There was a test class intended to test this behavior but only a few of the tests in there actually did.  The class has renamed more appropriately and tests which did not belong were moved to other test classes.  Change-Id: I06749f5f6e2ce9bf28c378a022f862fe2db3fcb5,testing,,,,,,
openstack%2Fnova~master~I06749f5f6e2ce9bf28c378a022f862fe2db3fcb5,https://review.opendev.org/161463,Refactor _regex_instance_filter for testing,Refactor _regex_instance_filter for testing  _regex_instance_filter was determing which regex operation to use based on the database connection config.  This led to writing tests that modified the connection config to be different than the one which created the engine.  This was mostly harmless but now that we're looking to add the ability to get different engines based on that config value this can lead to confusion and errors.  There was a test class intended to test this behavior but only a few of the tests in there actually did.  The class has renamed more appropriately and tests which did not belong were moved to other test classes.  Change-Id: I06749f5f6e2ce9bf28c378a022f862fe2db3fcb5,objective,,,,,,
openstack%2Fnova~master~I06749f5f6e2ce9bf28c378a022f862fe2db3fcb5,https://review.opendev.org/161463,Refactor _regex_instance_filter for testing,Refactor _regex_instance_filter for testing  _regex_instance_filter was determing which regex operation to use based on the database connection config.  This led to writing tests that modified the connection config to be different than the one which created the engine.  This was mostly harmless but now that we're looking to add the ability to get different engines based on that config value this can lead to confusion and errors.  There was a test class intended to test this behavior but only a few of the tests in there actually did.  The class has renamed more appropriately and tests which did not belong were moved to other test classes.  Change-Id: I06749f5f6e2ce9bf28c378a022f862fe2db3fcb5,quality,,,,,,
openstack%2Fkeystone~master~I8c7e503f822a83bf825a6d0b38444d103fca5c40,https://review.opendev.org/162758,Refactor: move initiator test to cadf specific section,"Refactor: move initiator test to cadf specific section  the initiator tests are only applicable to cadf notifications, so move them into that test suite.  Change-Id: I8c7e503f822a83bf825a6d0b38444d103fca5c40",testing,,,,,,
openstack%2Fkeystone~master~I8c7e503f822a83bf825a6d0b38444d103fca5c40,https://review.opendev.org/162758,Refactor: move initiator test to cadf specific section,"Refactor: move initiator test to cadf specific section  the initiator tests are only applicable to cadf notifications, so move them into that test suite.  Change-Id: I8c7e503f822a83bf825a6d0b38444d103fca5c40",objective,,,,,,
openstack%2Fkeystone~master~Iac3c54aa4bc015f6018e630395d1403238a6ff59,https://review.opendev.org/162756,Refactor: create a common base for notification tests,Refactor: create a common base for notification tests  this should allow other test classes to mixin the base test and take advantage of the mocked notifications.  Change-Id: Iac3c54aa4bc015f6018e630395d1403238a6ff59,testing,,,,,,
openstack%2Fkeystone~master~Iac3c54aa4bc015f6018e630395d1403238a6ff59,https://review.opendev.org/162756,Refactor: create a common base for notification tests,Refactor: create a common base for notification tests  this should allow other test classes to mixin the base test and take advantage of the mocked notifications.  Change-Id: Iac3c54aa4bc015f6018e630395d1403238a6ff59,quality,,,,,,
openstack%2Fkeystone~master~Iac3c54aa4bc015f6018e630395d1403238a6ff59,https://review.opendev.org/162756,Refactor: create a common base for notification tests,Refactor: create a common base for notification tests  this should allow other test classes to mixin the base test and take advantage of the mocked notifications.  Change-Id: Iac3c54aa4bc015f6018e630395d1403238a6ff59,objective,,,,,,
openstack%2Fkeystone~master~If6c33feb7e48dd7548bd7325400a0ae9ac817d24,https://review.opendev.org/162686,Refactoring: use BaseTestCase instead of TestCase,Refactoring: use BaseTestCase instead of TestCase  The majority of setup from TestCase isn't used by these subclasses. This means that the extra CPU work per test is wasted.  Change-Id: If6c33feb7e48dd7548bd7325400a0ae9ac817d24,testing,,,,,,
openstack%2Fkeystone~master~If6c33feb7e48dd7548bd7325400a0ae9ac817d24,https://review.opendev.org/162686,Refactoring: use BaseTestCase instead of TestCase,Refactoring: use BaseTestCase instead of TestCase  The majority of setup from TestCase isn't used by these subclasses. This means that the extra CPU work per test is wasted.  Change-Id: If6c33feb7e48dd7548bd7325400a0ae9ac817d24,quality,,,,,,
openstack%2Fkeystone~master~If6c33feb7e48dd7548bd7325400a0ae9ac817d24,https://review.opendev.org/162686,Refactoring: use BaseTestCase instead of TestCase,Refactoring: use BaseTestCase instead of TestCase  The majority of setup from TestCase isn't used by these subclasses. This means that the extra CPU work per test is wasted.  Change-Id: If6c33feb7e48dd7548bd7325400a0ae9ac817d24,objective,,,,,,
openstack%2Fheat~master~Icdecb1f16290038f20471991a5f998de2c0a27ea,https://review.opendev.org/159057,Integration scenario test refactoring,Integration scenario test refactoring  - Added new base class for scenario tests with common parameters initialization in the setUpClass - Added short description for every test - Scenario tests structure has become more similar  Change-Id: Icdecb1f16290038f20471991a5f998de2c0a27ea,testing,,,,,,
openstack%2Fheat~master~Icdecb1f16290038f20471991a5f998de2c0a27ea,https://review.opendev.org/159057,Integration scenario test refactoring,Integration scenario test refactoring  - Added new base class for scenario tests with common parameters initialization in the setUpClass - Added short description for every test - Scenario tests structure has become more similar  Change-Id: Icdecb1f16290038f20471991a5f998de2c0a27ea,quality,,,,,,
openstack%2Fheat~master~Icdecb1f16290038f20471991a5f998de2c0a27ea,https://review.opendev.org/159057,Integration scenario test refactoring,Integration scenario test refactoring  - Added new base class for scenario tests with common parameters initialization in the setUpClass - Added short description for every test - Scenario tests structure has become more similar  Change-Id: Icdecb1f16290038f20471991a5f998de2c0a27ea,objective,,,,,,
openstack%2Fpython-barbicanclient~master~Ibdf25b4d4c229e417e428420bacb9419f8e4c5fc,https://review.opendev.org/162320,Refactor test modules,Refactor test modules  Renamed test directory to tests to be consistent with other OpenStack client projects.  Renamed some modules to match the pattern of test_<name of module under test>.py  Change-Id: Ibdf25b4d4c229e417e428420bacb9419f8e4c5fc,testing,,,,,,
openstack%2Fpython-barbicanclient~master~Ibdf25b4d4c229e417e428420bacb9419f8e4c5fc,https://review.opendev.org/162320,Refactor test modules,Refactor test modules  Renamed test directory to tests to be consistent with other OpenStack client projects.  Renamed some modules to match the pattern of test_<name of module under test>.py  Change-Id: Ibdf25b4d4c229e417e428420bacb9419f8e4c5fc,objective,,,,,,
openstack%2Fbarbican~master~I458703fbfd1563ce11ca71eb14d45bd30e8af9e6,https://review.opendev.org/162028,Starting refactor of test_resources,"Starting refactor of test_resources  Starting to split out tests for the version and secrets controller into their own test modules. For each test that I'm splitting out, the goal is to remove as many mocks as possible from the equation and clean up the individual tests a bit.  Change-Id: I458703fbfd1563ce11ca71eb14d45bd30e8af9e6",testing,,,,,,
openstack%2Fbarbican~master~I458703fbfd1563ce11ca71eb14d45bd30e8af9e6,https://review.opendev.org/162028,Starting refactor of test_resources,"Starting refactor of test_resources  Starting to split out tests for the version and secrets controller into their own test modules. For each test that I'm splitting out, the goal is to remove as many mocks as possible from the equation and clean up the individual tests a bit.  Change-Id: I458703fbfd1563ce11ca71eb14d45bd30e8af9e6",objective,,,,,,
openstack%2Fcue~master~I27091bf13934864e89cb6dc8bbdb55296b2a67c7,https://review.opendev.org/159292,Refactor api,Refactor api  -renaming v1.py to cluster.py -moving cluster.py to v1 module -adding v1 controller to support querying version v1 -required some changes in api tests for refactoring -adding test cases for root and v1 controller  Change-Id: I27091bf13934864e89cb6dc8bbdb55296b2a67c7,testing,,,,,,
openstack%2Fcue~master~I27091bf13934864e89cb6dc8bbdb55296b2a67c7,https://review.opendev.org/159292,Refactor api,Refactor api  -renaming v1.py to cluster.py -moving cluster.py to v1 module -adding v1 controller to support querying version v1 -required some changes in api tests for refactoring -adding test cases for root and v1 controller  Change-Id: I27091bf13934864e89cb6dc8bbdb55296b2a67c7,objective,,,,,,
openstack%2Fcue~master~I27091bf13934864e89cb6dc8bbdb55296b2a67c7,https://review.opendev.org/159292,Refactor api,Refactor api  -renaming v1.py to cluster.py -moving cluster.py to v1 module -adding v1 controller to support querying version v1 -required some changes in api tests for refactoring -adding test cases for root and v1 controller  Change-Id: I27091bf13934864e89cb6dc8bbdb55296b2a67c7,integration,,,,,,
openstack%2Fbandit~master~I55da22f59a140eaa27f97ad28c3ac18e2e65e555,https://review.opendev.org/161005,Refactor functional tests to clarify scoring,"Refactor functional tests to clarify scoring.  Explicitly state how many ""info"", ""warn"", and ""error"" results are expected in each functional test.  Make each test a single call to a helper method, which reduces copy-pasted code.  Change-Id: I55da22f59a140eaa27f97ad28c3ac18e2e65e555",testing,,,,,,
openstack%2Fbandit~master~I55da22f59a140eaa27f97ad28c3ac18e2e65e555,https://review.opendev.org/161005,Refactor functional tests to clarify scoring,"Refactor functional tests to clarify scoring.  Explicitly state how many ""info"", ""warn"", and ""error"" results are expected in each functional test.  Make each test a single call to a helper method, which reduces copy-pasted code.  Change-Id: I55da22f59a140eaa27f97ad28c3ac18e2e65e555",quality,,,,,,
openstack%2Fbandit~master~I55da22f59a140eaa27f97ad28c3ac18e2e65e555,https://review.opendev.org/161005,Refactor functional tests to clarify scoring,"Refactor functional tests to clarify scoring.  Explicitly state how many ""info"", ""warn"", and ""error"" results are expected in each functional test.  Make each test a single call to a helper method, which reduces copy-pasted code.  Change-Id: I55da22f59a140eaa27f97ad28c3ac18e2e65e555",objective,,,,,,
openstack%2Fbandit~master~I39549f05fdec238ad37376f9791af81929eb3a26,https://review.opendev.org/161024,Clean up test property decorators after refactor,Clean up test property decorators after refactor  This change removes several decorator functions that are deprecated due to a refactor.  These functions are no longer used within the Bandit code base: $ grep -r checks_ * core/test_properties.py:        logger.debug('checks_decorator function executed') core/test_properties.py:def checks_functions(func): core/test_properties.py:def checks_calls(func): core/test_properties.py:def checks_imports(func): core/test_properties.py:def checks_strings(func): core/test_properties.py:def checks_exec(func):  It also make a minor tweak to correct debug output.  Change-Id: I39549f05fdec238ad37376f9791af81929eb3a26,testing,,,,,,
openstack%2Fbandit~master~I39549f05fdec238ad37376f9791af81929eb3a26,https://review.opendev.org/161024,Clean up test property decorators after refactor,Clean up test property decorators after refactor  This change removes several decorator functions that are deprecated due to a refactor.  These functions are no longer used within the Bandit code base: $ grep -r checks_ * core/test_properties.py:        logger.debug('checks_decorator function executed') core/test_properties.py:def checks_functions(func): core/test_properties.py:def checks_calls(func): core/test_properties.py:def checks_imports(func): core/test_properties.py:def checks_strings(func): core/test_properties.py:def checks_exec(func):  It also make a minor tweak to correct debug output.  Change-Id: I39549f05fdec238ad37376f9791af81929eb3a26,quality,,,,,,
openstack%2Fbandit~master~I39549f05fdec238ad37376f9791af81929eb3a26,https://review.opendev.org/161024,Clean up test property decorators after refactor,Clean up test property decorators after refactor  This change removes several decorator functions that are deprecated due to a refactor.  These functions are no longer used within the Bandit code base: $ grep -r checks_ * core/test_properties.py:        logger.debug('checks_decorator function executed') core/test_properties.py:def checks_functions(func): core/test_properties.py:def checks_calls(func): core/test_properties.py:def checks_imports(func): core/test_properties.py:def checks_strings(func): core/test_properties.py:def checks_exec(func):  It also make a minor tweak to correct debug output.  Change-Id: I39549f05fdec238ad37376f9791af81929eb3a26,objective,,,,,,
openstack%2Fbandit~master~I552c443fa434f25617f4fd281a0d78fb7a532e42,https://review.opendev.org/160166,Refactored AST processing,"Refactored AST processing  AST now Parses by statement. Added StatementBuffer class to manage statement processing. Fixed a bug with multi-line numbering, moved to statement object. Updated sql injection test to implement statement context knowledge POC. Added node_visitor unit tests Completed test_node_visitor StatementBuffer coverage  Change-Id: I552c443fa434f25617f4fd281a0d78fb7a532e42",testing,,,,,,
openstack%2Fbandit~master~I552c443fa434f25617f4fd281a0d78fb7a532e42,https://review.opendev.org/160166,Refactored AST processing,"Refactored AST processing  AST now Parses by statement. Added StatementBuffer class to manage statement processing. Fixed a bug with multi-line numbering, moved to statement object. Updated sql injection test to implement statement context knowledge POC. Added node_visitor unit tests Completed test_node_visitor StatementBuffer coverage  Change-Id: I552c443fa434f25617f4fd281a0d78fb7a532e42",quality,,,,,,
openstack%2Fbandit~master~I552c443fa434f25617f4fd281a0d78fb7a532e42,https://review.opendev.org/160166,Refactored AST processing,"Refactored AST processing  AST now Parses by statement. Added StatementBuffer class to manage statement processing. Fixed a bug with multi-line numbering, moved to statement object. Updated sql injection test to implement statement context knowledge POC. Added node_visitor unit tests Completed test_node_visitor StatementBuffer coverage  Change-Id: I552c443fa434f25617f4fd281a0d78fb7a532e42",objective,,,,,,
openstack%2Fheat~master~I3147e2f76a2564daa4dffc902875617ca3dc7968,https://review.opendev.org/159439,Refactor tests for migrations in heat,Refactor tests for migrations in heat  test_walk_version test in HeatMigrationCheckers has checked that the version of oslo.db should be more than 0.4. We have oslo.db >= 1.4.0 in our project requirements. So this redundant check in the test has been removed.  Change-Id: I3147e2f76a2564daa4dffc902875617ca3dc7968,testing,,,,,,
openstack%2Fheat~master~I3147e2f76a2564daa4dffc902875617ca3dc7968,https://review.opendev.org/159439,Refactor tests for migrations in heat,Refactor tests for migrations in heat  test_walk_version test in HeatMigrationCheckers has checked that the version of oslo.db should be more than 0.4. We have oslo.db >= 1.4.0 in our project requirements. So this redundant check in the test has been removed.  Change-Id: I3147e2f76a2564daa4dffc902875617ca3dc7968,quality,,,,,,
openstack%2Fheat~master~I3147e2f76a2564daa4dffc902875617ca3dc7968,https://review.opendev.org/159439,Refactor tests for migrations in heat,Refactor tests for migrations in heat  test_walk_version test in HeatMigrationCheckers has checked that the version of oslo.db should be more than 0.4. We have oslo.db >= 1.4.0 in our project requirements. So this redundant check in the test has been removed.  Change-Id: I3147e2f76a2564daa4dffc902875617ca3dc7968,objective,,,,,,
openstack%2Foslo.cache~master~Iaf196d2d93225afa54e324fb830761049059926e,https://review.opendev.org/718223,Refactoring functional tests based on standard usages,Refactoring functional tests based on standard usages  Refactoring the functional tests by using the standard usages [1] and best pratices available in the oslo.cache documentation.  The main goal of these changes is to help us to test oslo.cache in the way that it's used in the real life.  It reduce the complexity to test new backends by using the corresponding configuration.  These changes allow to test a new backend by: - passing the right environment variables with the related backend to test; - adding the corresponding zuul job that will dedicated to test this backend. - adding the right server backend to bindep  [1] https://docs.openstack.org/oslo.cache/latest/user/usage.html  Change-Id: Iaf196d2d93225afa54e324fb830761049059926e,testing,,,,,,
openstack%2Foslo.cache~master~Iaf196d2d93225afa54e324fb830761049059926e,https://review.opendev.org/718223,Refactoring functional tests based on standard usages,Refactoring functional tests based on standard usages  Refactoring the functional tests by using the standard usages [1] and best pratices available in the oslo.cache documentation.  The main goal of these changes is to help us to test oslo.cache in the way that it's used in the real life.  It reduce the complexity to test new backends by using the corresponding configuration.  These changes allow to test a new backend by: - passing the right environment variables with the related backend to test; - adding the corresponding zuul job that will dedicated to test this backend. - adding the right server backend to bindep  [1] https://docs.openstack.org/oslo.cache/latest/user/usage.html  Change-Id: Iaf196d2d93225afa54e324fb830761049059926e,quality,,,,,,
openstack%2Foslo.cache~master~Iaf196d2d93225afa54e324fb830761049059926e,https://review.opendev.org/718223,Refactoring functional tests based on standard usages,Refactoring functional tests based on standard usages  Refactoring the functional tests by using the standard usages [1] and best pratices available in the oslo.cache documentation.  The main goal of these changes is to help us to test oslo.cache in the way that it's used in the real life.  It reduce the complexity to test new backends by using the corresponding configuration.  These changes allow to test a new backend by: - passing the right environment variables with the related backend to test; - adding the corresponding zuul job that will dedicated to test this backend. - adding the right server backend to bindep  [1] https://docs.openstack.org/oslo.cache/latest/user/usage.html  Change-Id: Iaf196d2d93225afa54e324fb830761049059926e,objective,,,,,,
openstack%2Fkeystone~master~Ifd67a9d2879e3cc2ac24cb0536ecbd613ee85049,https://review.opendev.org/147551,Refactor filter and sensitivity tests in prepartion for LDAP support,"Refactor filter tests in prepartion for LDAP support  Some aspects of the tests aren't suitable for an LDAP backend, so make them more generic - without reducing test coverage.  Partially implements: blueprint ldap-filtering  Change-Id: Ifd67a9d2879e3cc2ac24cb0536ecbd613ee85049",testing,,,,,,
openstack%2Fkeystone~master~Ifd67a9d2879e3cc2ac24cb0536ecbd613ee85049,https://review.opendev.org/147551,Refactor filter and sensitivity tests in prepartion for LDAP support,"Refactor filter tests in prepartion for LDAP support  Some aspects of the tests aren't suitable for an LDAP backend, so make them more generic - without reducing test coverage.  Partially implements: blueprint ldap-filtering  Change-Id: Ifd67a9d2879e3cc2ac24cb0536ecbd613ee85049",quality,,,,,,
openstack%2Fkeystone~master~Ifd67a9d2879e3cc2ac24cb0536ecbd613ee85049,https://review.opendev.org/147551,Refactor filter and sensitivity tests in prepartion for LDAP support,"Refactor filter tests in prepartion for LDAP support  Some aspects of the tests aren't suitable for an LDAP backend, so make them more generic - without reducing test coverage.  Partially implements: blueprint ldap-filtering  Change-Id: Ifd67a9d2879e3cc2ac24cb0536ecbd613ee85049",objective,,,,,,
openstack%2Fpuppet-ceph~master~I8e05c25588bb8b72d184e26f228c1ff9d28390a6,https://review.opendev.org/156827,Refactor the pool tests to only test pool,Refactor the pool tests to only test pool  The mon creation and teardown already get tested and should not get retested here.  Change-Id: I8e05c25588bb8b72d184e26f228c1ff9d28390a6,testing,,,,,,
openstack%2Fpuppet-ceph~master~I8e05c25588bb8b72d184e26f228c1ff9d28390a6,https://review.opendev.org/156827,Refactor the pool tests to only test pool,Refactor the pool tests to only test pool  The mon creation and teardown already get tested and should not get retested here.  Change-Id: I8e05c25588bb8b72d184e26f228c1ff9d28390a6,objective,,,,,,
openstack%2Fswift~master~I8393a2ebc0d04051cae48cc3c49580f70818dbf2,https://review.opendev.org/155895,more probe test refactoring,"more probe test refactoring  * move get_to_final_state into ProbeTest * get rid of kill_servers  (this is all going someplace, i promise)  Change-Id: I8393a2ebc0d04051cae48cc3c49580f70818dbf2",testing,,,,,,
openstack%2Fswift~master~I8393a2ebc0d04051cae48cc3c49580f70818dbf2,https://review.opendev.org/155895,more probe test refactoring,"more probe test refactoring  * move get_to_final_state into ProbeTest * get rid of kill_servers  (this is all going someplace, i promise)  Change-Id: I8393a2ebc0d04051cae48cc3c49580f70818dbf2",objective,,,,,,
openstack%2Fnetworking-l2gw~master~Ib21139d6850a947f12e43517d1c79ddf78a4495d,https://review.opendev.org/155667,Refactored unit test cases to improve coverage,"Refactored unit test cases to improve coverage  The patch set handles additional exception in agent/ovsdb/connection.py The patch set also contains minor fixes in unit test cases to prevent printing of warnings/errors in the output while running unit test cases. Also, includes additional test cases to improve the coverage with respect to [1].  1. https://review.openstack.org/#/c/154806  Change-Id: Ib21139d6850a947f12e43517d1c79ddf78a4495d",testing,,,,,,
openstack%2Fnetworking-l2gw~master~Ib21139d6850a947f12e43517d1c79ddf78a4495d,https://review.opendev.org/155667,Refactored unit test cases to improve coverage,"Refactored unit test cases to improve coverage  The patch set handles additional exception in agent/ovsdb/connection.py The patch set also contains minor fixes in unit test cases to prevent printing of warnings/errors in the output while running unit test cases. Also, includes additional test cases to improve the coverage with respect to [1].  1. https://review.openstack.org/#/c/154806  Change-Id: Ib21139d6850a947f12e43517d1c79ddf78a4495d",objective,,,,,,
openstack%2Fceilometer~master~I269a10a5db3dcb43ae83e385bb6ae4468b0a9810,https://review.opendev.org/153903,Refactor unit test code for disk pollsters,Refactor unit test code for disk pollsters  There are four test methods in tests/compute/pollsters/test_diskio.py which look very similar except the cache name are different.  This patch adds a class atrribute named CACHE_KEY to reduce the four methods to one.  Change-Id: I269a10a5db3dcb43ae83e385bb6ae4468b0a9810,testing,,,,,,
openstack%2Fceilometer~master~I269a10a5db3dcb43ae83e385bb6ae4468b0a9810,https://review.opendev.org/153903,Refactor unit test code for disk pollsters,Refactor unit test code for disk pollsters  There are four test methods in tests/compute/pollsters/test_diskio.py which look very similar except the cache name are different.  This patch adds a class atrribute named CACHE_KEY to reduce the four methods to one.  Change-Id: I269a10a5db3dcb43ae83e385bb6ae4468b0a9810,objective,,,,,,
openstack%2Fceilometer~master~I269a10a5db3dcb43ae83e385bb6ae4468b0a9810,https://review.opendev.org/153903,Refactor unit test code for disk pollsters,Refactor unit test code for disk pollsters  There are four test methods in tests/compute/pollsters/test_diskio.py which look very similar except the cache name are different.  This patch adds a class atrribute named CACHE_KEY to reduce the four methods to one.  Change-Id: I269a10a5db3dcb43ae83e385bb6ae4468b0a9810,quality,,,,,,
openstack%2Fdevstack~master~Ib2ad5b21630ac82a3d7ffc7b088600b2168f1ecd,https://review.opendev.org/151803,Refactor lib/neutron rootwrap conf for reuse,Refactor lib/neutron rootwrap conf for reuse  This change separates out the creation and permision setting for the /etc/neutron so that it can be reused by functional test setup in rootwrap deployment.  Change-Id: Ib2ad5b21630ac82a3d7ffc7b088600b2168f1ecd,testing,,,,,,
openstack%2Fdevstack~master~Ib2ad5b21630ac82a3d7ffc7b088600b2168f1ecd,https://review.opendev.org/151803,Refactor lib/neutron rootwrap conf for reuse,Refactor lib/neutron rootwrap conf for reuse  This change separates out the creation and permision setting for the /etc/neutron so that it can be reused by functional test setup in rootwrap deployment.  Change-Id: Ib2ad5b21630ac82a3d7ffc7b088600b2168f1ecd,quality,,,,,,
openstack%2Fdevstack~master~Ib2ad5b21630ac82a3d7ffc7b088600b2168f1ecd,https://review.opendev.org/151803,Refactor lib/neutron rootwrap conf for reuse,Refactor lib/neutron rootwrap conf for reuse  This change separates out the creation and permision setting for the /etc/neutron so that it can be reused by functional test setup in rootwrap deployment.  Change-Id: Ib2ad5b21630ac82a3d7ffc7b088600b2168f1ecd,objective,,,,,,
openstack%2Fsahara~master~I5e3ce1c9b61d4e2043a15702cbcc9225f9924d44,https://review.opendev.org/145960,Refactoring swift binary retrievers to allow context auth,"Refactoring swift binary retrievers to allow context auth  This change is needed to fix an issue with using proxy domains and downloading job binaries through the "".../data"" endpoint. A new function is added to retrieve binaries from swift using the context credentials. The raw data retrievers for swift have been refactored to allow a more modular approach.  Changes * adding an option to the raw binary dispatch routine to allow   requesting of context authentication * adding a new swift client method to create a connection with an auth   token * adding a new binary retriever function to use the context auth token * refactoring the internal swift retrievers module to be more modular * adding tests for all internal swift retrievers * adding a new test suite for binary dispatch  Change-Id: I5e3ce1c9b61d4e2043a15702cbcc9225f9924d44 Closes-Bug: 1384889",testing,,,,,,
openstack%2Fsahara~master~I5e3ce1c9b61d4e2043a15702cbcc9225f9924d44,https://review.opendev.org/145960,Refactoring swift binary retrievers to allow context auth,"Refactoring swift binary retrievers to allow context auth  This change is needed to fix an issue with using proxy domains and downloading job binaries through the "".../data"" endpoint. A new function is added to retrieve binaries from swift using the context credentials. The raw data retrievers for swift have been refactored to allow a more modular approach.  Changes * adding an option to the raw binary dispatch routine to allow   requesting of context authentication * adding a new swift client method to create a connection with an auth   token * adding a new binary retriever function to use the context auth token * refactoring the internal swift retrievers module to be more modular * adding tests for all internal swift retrievers * adding a new test suite for binary dispatch  Change-Id: I5e3ce1c9b61d4e2043a15702cbcc9225f9924d44 Closes-Bug: 1384889",quality,,,,,,
openstack%2Fsahara~master~I5e3ce1c9b61d4e2043a15702cbcc9225f9924d44,https://review.opendev.org/145960,Refactoring swift binary retrievers to allow context auth,"Refactoring swift binary retrievers to allow context auth  This change is needed to fix an issue with using proxy domains and downloading job binaries through the "".../data"" endpoint. A new function is added to retrieve binaries from swift using the context credentials. The raw data retrievers for swift have been refactored to allow a more modular approach.  Changes * adding an option to the raw binary dispatch routine to allow   requesting of context authentication * adding a new swift client method to create a connection with an auth   token * adding a new binary retriever function to use the context auth token * refactoring the internal swift retrievers module to be more modular * adding tests for all internal swift retrievers * adding a new test suite for binary dispatch  Change-Id: I5e3ce1c9b61d4e2043a15702cbcc9225f9924d44 Closes-Bug: 1384889",objective,,,,,,
openstack%2Foslo.messaging~master~I59300464af001c343efcd4f3f33d34c972da2b87,https://review.opendev.org/144954,zmq: Refactor test case shared code,zmq: Refactor test case shared code  A number of the ZMQ test cases shared the same setUp method; refactor and introduce a base test case class to share this code across all appropriate ZMQ test cases.  Change-Id: I59300464af001c343efcd4f3f33d34c972da2b87,testing,,,,,,
openstack%2Foslo.messaging~master~I59300464af001c343efcd4f3f33d34c972da2b87,https://review.opendev.org/144954,zmq: Refactor test case shared code,zmq: Refactor test case shared code  A number of the ZMQ test cases shared the same setUp method; refactor and introduce a base test case class to share this code across all appropriate ZMQ test cases.  Change-Id: I59300464af001c343efcd4f3f33d34c972da2b87,quality,,,,,,
openstack%2Foslo.messaging~master~I59300464af001c343efcd4f3f33d34c972da2b87,https://review.opendev.org/144954,zmq: Refactor test case shared code,zmq: Refactor test case shared code  A number of the ZMQ test cases shared the same setUp method; refactor and introduce a base test case class to share this code across all appropriate ZMQ test cases.  Change-Id: I59300464af001c343efcd4f3f33d34c972da2b87,objective,,,,,,
openstack%2Fsahara~master~Ia500beb21412c535b153bfadc54cd0a4d1269262,https://review.opendev.org/150266,"Refactoring datasource, job and job_binary name validations","Refactoring datasource, job and job_binary name validations  This change adds the ability to have leading numerals in the names of data sources, jobs, and job binaries. It also separates the name validation of user keypairs to be inline with nova's validation rules.  Changes * refactoring validate_name_format to allow leading numeral * adding validate_keypair_name_format * adding tests for keypair name validation * fixing tests for new name rules * removing outdated test from test_cluster_create_v_keypair_type  Change-Id: Ia500beb21412c535b153bfadc54cd0a4d1269262 Closes-Bug: 1376784",testing,,,,,,
openstack%2Fsahara~master~Ia500beb21412c535b153bfadc54cd0a4d1269262,https://review.opendev.org/150266,"Refactoring datasource, job and job_binary name validations","Refactoring datasource, job and job_binary name validations  This change adds the ability to have leading numerals in the names of data sources, jobs, and job binaries. It also separates the name validation of user keypairs to be inline with nova's validation rules.  Changes * refactoring validate_name_format to allow leading numeral * adding validate_keypair_name_format * adding tests for keypair name validation * fixing tests for new name rules * removing outdated test from test_cluster_create_v_keypair_type  Change-Id: Ia500beb21412c535b153bfadc54cd0a4d1269262 Closes-Bug: 1376784",quality,,,,,,
openstack%2Fsahara~master~Ia500beb21412c535b153bfadc54cd0a4d1269262,https://review.opendev.org/150266,"Refactoring datasource, job and job_binary name validations","Refactoring datasource, job and job_binary name validations  This change adds the ability to have leading numerals in the names of data sources, jobs, and job binaries. It also separates the name validation of user keypairs to be inline with nova's validation rules.  Changes * refactoring validate_name_format to allow leading numeral * adding validate_keypair_name_format * adding tests for keypair name validation * fixing tests for new name rules * removing outdated test from test_cluster_create_v_keypair_type  Change-Id: Ia500beb21412c535b153bfadc54cd0a4d1269262 Closes-Bug: 1376784",objective,,,,,,
x%2Fcompass-specs~master~I19c61d85ae8d1667fe841621af6abad2d3c7015d,https://review.opendev.org/137497,Initial commit for progress calculator test refactoring,Initial commit for progress calculator test refactoring  Change-Id: I19c61d85ae8d1667fe841621af6abad2d3c7015d,testing,,,,,,
x%2Fcompass-specs~master~I19c61d85ae8d1667fe841621af6abad2d3c7015d,https://review.opendev.org/137497,Initial commit for progress calculator test refactoring,Initial commit for progress calculator test refactoring  Change-Id: I19c61d85ae8d1667fe841621af6abad2d3c7015d,objective,,,,,,
openstack%2Fmurano~master~Iaf7e0f0843ca9561a667d553d8926cf74c6bca9f,https://review.opendev.org/148910,Refactor db migration tests,"Refactor db migration tests  Common oslo.db code contains a base test classes for migration testing, so we can use it in Murano.  Change-Id: Iaf7e0f0843ca9561a667d553d8926cf74c6bca9f",testing,,,,,,
openstack%2Fmurano~master~Iaf7e0f0843ca9561a667d553d8926cf74c6bca9f,https://review.opendev.org/148910,Refactor db migration tests,"Refactor db migration tests  Common oslo.db code contains a base test classes for migration testing, so we can use it in Murano.  Change-Id: Iaf7e0f0843ca9561a667d553d8926cf74c6bca9f",integration,,,,,,
openstack%2Fmurano~master~Iaf7e0f0843ca9561a667d553d8926cf74c6bca9f,https://review.opendev.org/148910,Refactor db migration tests,"Refactor db migration tests  Common oslo.db code contains a base test classes for migration testing, so we can use it in Murano.  Change-Id: Iaf7e0f0843ca9561a667d553d8926cf74c6bca9f",quality,,,,,,
openstack%2Fmurano~master~Iaf7e0f0843ca9561a667d553d8926cf74c6bca9f,https://review.opendev.org/148910,Refactor db migration tests,"Refactor db migration tests  Common oslo.db code contains a base test classes for migration testing, so we can use it in Murano.  Change-Id: Iaf7e0f0843ca9561a667d553d8926cf74c6bca9f",objective,,,,,,
openstack%2Fmonasca-notification~master~I213d815965761736eb3680b5e14206ba7bef7e90,https://review.opendev.org/147664,Refactored notification engine types,Refactored notification engine types  Added more test coverage for email notifications.  Moved notification methods from notification_processor to new types directory.  types/interface.py now automatically records statsd information for configured types.  Configuration for a type is now optional.  Uncofigured types are not able to send notifications.  Notifications that come across for unconfigured types generate a warning.  Email notification type now explicity exits when unable to connect to an SMTP server.  Change-Id: I213d815965761736eb3680b5e14206ba7bef7e90,testing,,,,,,
openstack%2Fmonasca-notification~master~I213d815965761736eb3680b5e14206ba7bef7e90,https://review.opendev.org/147664,Refactored notification engine types,Refactored notification engine types  Added more test coverage for email notifications.  Moved notification methods from notification_processor to new types directory.  types/interface.py now automatically records statsd information for configured types.  Configuration for a type is now optional.  Uncofigured types are not able to send notifications.  Notifications that come across for unconfigured types generate a warning.  Email notification type now explicity exits when unable to connect to an SMTP server.  Change-Id: I213d815965761736eb3680b5e14206ba7bef7e90,objective,,,,,,
openstack%2Fmanila~master~I6ab297b21f301530a624e8ea0064a46f0123ec51,https://review.opendev.org/146829,Refactor tempest test 'test_create_share_with_size_bigger_than_quota',"Refactor tempest test 'test_create_share_with_size_bigger_than_quota'  Test 'test_create_share_with_size_bigger_than_quota' verifies that we fail when try create share that exceeds gigabytes quota. But this tests creates isolated creds that are indeed redundant. It contains creation of tenant, user, network, subnet and router. Existing approach takes up to 8 seconds.  Make test 'test_create_share_with_size_bigger_than_quota' use common client, that will perform only two actions - get quotas and share creation request. New approach takes about 1 second.  Change-Id: I6ab297b21f301530a624e8ea0064a46f0123ec51",testing,,,,,,
openstack%2Fmanila~master~I6ab297b21f301530a624e8ea0064a46f0123ec51,https://review.opendev.org/146829,Refactor tempest test 'test_create_share_with_size_bigger_than_quota',"Refactor tempest test 'test_create_share_with_size_bigger_than_quota'  Test 'test_create_share_with_size_bigger_than_quota' verifies that we fail when try create share that exceeds gigabytes quota. But this tests creates isolated creds that are indeed redundant. It contains creation of tenant, user, network, subnet and router. Existing approach takes up to 8 seconds.  Make test 'test_create_share_with_size_bigger_than_quota' use common client, that will perform only two actions - get quotas and share creation request. New approach takes about 1 second.  Change-Id: I6ab297b21f301530a624e8ea0064a46f0123ec51",objective,,,,,,
openstack%2Fmanila~master~I6ab297b21f301530a624e8ea0064a46f0123ec51,https://review.opendev.org/146829,Refactor tempest test 'test_create_share_with_size_bigger_than_quota',"Refactor tempest test 'test_create_share_with_size_bigger_than_quota'  Test 'test_create_share_with_size_bigger_than_quota' verifies that we fail when try create share that exceeds gigabytes quota. But this tests creates isolated creds that are indeed redundant. It contains creation of tenant, user, network, subnet and router. Existing approach takes up to 8 seconds.  Make test 'test_create_share_with_size_bigger_than_quota' use common client, that will perform only two actions - get quotas and share creation request. New approach takes about 1 second.  Change-Id: I6ab297b21f301530a624e8ea0064a46f0123ec51",quality,,,,,,
openstack%2Fironic-inspector~master~I4de50e666298aedcbeddcac27fe2d1ac74472cbb,https://review.opendev.org/146475,Refactor stable API to be /v1/introspection/<UUID>,Refactor stable API to be /v1/introspection/<UUID>  Also: * Stop doing bulk-processing of discovery requests   Seems like nobody is actually using it and it complicates testing. * Rename discover.discover -> introspect * Fix one missing retry_on_conflict (found during test refactor) * Stop setting unused /extra/discovery_timestamp * Refactor tests * Keep old API around of compatibility  Change-Id: I4de50e666298aedcbeddcac27fe2d1ac74472cbb Implements: blueprint v1-api-reform,testing,,,,,,
openstack%2Fironic-inspector~master~I4de50e666298aedcbeddcac27fe2d1ac74472cbb,https://review.opendev.org/146475,Refactor stable API to be /v1/introspection/<UUID>,Refactor stable API to be /v1/introspection/<UUID>  Also: * Stop doing bulk-processing of discovery requests   Seems like nobody is actually using it and it complicates testing. * Rename discover.discover -> introspect * Fix one missing retry_on_conflict (found during test refactor) * Stop setting unused /extra/discovery_timestamp * Refactor tests * Keep old API around of compatibility  Change-Id: I4de50e666298aedcbeddcac27fe2d1ac74472cbb Implements: blueprint v1-api-reform,quality,,,,,,
openstack%2Fironic-inspector~master~I4de50e666298aedcbeddcac27fe2d1ac74472cbb,https://review.opendev.org/146475,Refactor stable API to be /v1/introspection/<UUID>,Refactor stable API to be /v1/introspection/<UUID>  Also: * Stop doing bulk-processing of discovery requests   Seems like nobody is actually using it and it complicates testing. * Rename discover.discover -> introspect * Fix one missing retry_on_conflict (found during test refactor) * Stop setting unused /extra/discovery_timestamp * Refactor tests * Keep old API around of compatibility  Change-Id: I4de50e666298aedcbeddcac27fe2d1ac74472cbb Implements: blueprint v1-api-reform,objective,,,,,,
openstack%2Fironic-inspector~master~I4de50e666298aedcbeddcac27fe2d1ac74472cbb,https://review.opendev.org/146475,Refactor stable API to be /v1/introspection/<UUID>,Refactor stable API to be /v1/introspection/<UUID>  Also: * Stop doing bulk-processing of discovery requests   Seems like nobody is actually using it and it complicates testing. * Rename discover.discover -> introspect * Fix one missing retry_on_conflict (found during test refactor) * Stop setting unused /extra/discovery_timestamp * Refactor tests * Keep old API around of compatibility  Change-Id: I4de50e666298aedcbeddcac27fe2d1ac74472cbb Implements: blueprint v1-api-reform,integration,,,,,,
openstack%2Fsahara~master~I1bf2831c0534498be3f9365d307607c46676658f,https://review.opendev.org/144441,Refactor db migration tests,"Refactor db migration tests  Common oslo.db code contains a base test classes for migration testing, so we can use it in Sahara.  Change-Id: I1bf2831c0534498be3f9365d307607c46676658f",testing,,,,,,
openstack%2Fsahara~master~I1bf2831c0534498be3f9365d307607c46676658f,https://review.opendev.org/144441,Refactor db migration tests,"Refactor db migration tests  Common oslo.db code contains a base test classes for migration testing, so we can use it in Sahara.  Change-Id: I1bf2831c0534498be3f9365d307607c46676658f",integration,,,,,,
openstack%2Fsahara~master~I1bf2831c0534498be3f9365d307607c46676658f,https://review.opendev.org/144441,Refactor db migration tests,"Refactor db migration tests  Common oslo.db code contains a base test classes for migration testing, so we can use it in Sahara.  Change-Id: I1bf2831c0534498be3f9365d307607c46676658f",quality,,,,,,
openstack%2Fsahara~master~I1bf2831c0534498be3f9365d307607c46676658f,https://review.opendev.org/144441,Refactor db migration tests,"Refactor db migration tests  Common oslo.db code contains a base test classes for migration testing, so we can use it in Sahara.  Change-Id: I1bf2831c0534498be3f9365d307607c46676658f",objective,,,,,,
openstack%2Fcue~master~Ibbeaada7c24aa3e1e9c4cf1abaf60b3521a683f1,https://review.opendev.org/142978,Refactoring API - Cue Objects - DB modules,Refactoring DB transaction component  * ensure autonomous DB transaction when creating a new cluster. * move DB read/write access calls from DB models to DB API. * update DB unit tests to test model composition (DB API tests   will be added as separate commit.  Change-Id: Ibbeaada7c24aa3e1e9c4cf1abaf60b3521a683f1,integration,,,,,,
openstack%2Fcue~master~Ibbeaada7c24aa3e1e9c4cf1abaf60b3521a683f1,https://review.opendev.org/142978,Refactoring API - Cue Objects - DB modules,Refactoring DB transaction component  * ensure autonomous DB transaction when creating a new cluster. * move DB read/write access calls from DB models to DB API. * update DB unit tests to test model composition (DB API tests   will be added as separate commit.  Change-Id: Ibbeaada7c24aa3e1e9c4cf1abaf60b3521a683f1,objective,,,,,,
openstack%2Fironic~master~I07497228cafab73df12253a5e652069a0a9918cb,https://review.opendev.org/139217,Refactor async helper methods in conductor/manager.py,"Refactor async helper methods in conductor/manager.py  This patch performs multiple refactorings of conductor/manager.py: - re-arrange a few class methods without changes - move some async helper methods out of the ConductorManager class:     _do_node_deploy, _do_node_teardown,     _provisioning_error_handler, _power_state_error_handler - move _do_sync_power_state out of the main class.   However, this required returning the count instead of simply updating   self.power_state_sync_count, so a few test changes were required.  Change-Id: I07497228cafab73df12253a5e652069a0a9918cb",quality,,,,,,
openstack%2Fironic~master~I07497228cafab73df12253a5e652069a0a9918cb,https://review.opendev.org/139217,Refactor async helper methods in conductor/manager.py,"Refactor async helper methods in conductor/manager.py  This patch performs multiple refactorings of conductor/manager.py: - re-arrange a few class methods without changes - move some async helper methods out of the ConductorManager class:     _do_node_deploy, _do_node_teardown,     _provisioning_error_handler, _power_state_error_handler - move _do_sync_power_state out of the main class.   However, this required returning the count instead of simply updating   self.power_state_sync_count, so a few test changes were required.  Change-Id: I07497228cafab73df12253a5e652069a0a9918cb",objective,,,,,,
openstack%2Fmagnum~master~Idc88795908441d987d9bb63292daccae523f7cbf,https://review.opendev.org/144959,Add test and refactoring on bay_create,"Add test and refactor bay_create on rpc handler  This contains temporary implementation of updating master_address, refactor rpc handler and some tests.  Change-Id: Idc88795908441d987d9bb63292daccae523f7cbf",testing,,,,,,
openstack%2Fmagnum~master~Idc88795908441d987d9bb63292daccae523f7cbf,https://review.opendev.org/144959,Add test and refactoring on bay_create,"Add test and refactor bay_create on rpc handler  This contains temporary implementation of updating master_address, refactor rpc handler and some tests.  Change-Id: Idc88795908441d987d9bb63292daccae523f7cbf",objective,,,,,,
openstack%2Fneutron-specs~master~I15576e46ab34bf95ec8e0fc8066baad78460ceef,https://review.opendev.org/140165,Refactor test against template,"Refactor test against template  test_titles originated in nova-specs.  The version in nova-specs has received several improvements that would be worth bringing over.  This started when I was writing a spec and the test code wouldn't let me add any additional sections on top of the required ones.  Here's a list of key differences in the new version:  * Instead of hard coding the list of required sections, dynamically   discover the sections by reading the template.  * Ensure all sections from the template are present, but allow   additional sections to be included.  * Include the code for ensuring lines are wrapped, but disable it for   now since it doesn't pass.  * Make sure the spec doesn't have \r in it.  * Make sure the spec doesn't have trailing whitespace.  Change-Id: I15576e46ab34bf95ec8e0fc8066baad78460ceef",testing,,,,,,
openstack%2Fneutron-specs~master~I15576e46ab34bf95ec8e0fc8066baad78460ceef,https://review.opendev.org/140165,Refactor test against template,"Refactor test against template  test_titles originated in nova-specs.  The version in nova-specs has received several improvements that would be worth bringing over.  This started when I was writing a spec and the test code wouldn't let me add any additional sections on top of the required ones.  Here's a list of key differences in the new version:  * Instead of hard coding the list of required sections, dynamically   discover the sections by reading the template.  * Ensure all sections from the template are present, but allow   additional sections to be included.  * Include the code for ensuring lines are wrapped, but disable it for   now since it doesn't pass.  * Make sure the spec doesn't have \r in it.  * Make sure the spec doesn't have trailing whitespace.  Change-Id: I15576e46ab34bf95ec8e0fc8066baad78460ceef",quality,,,,,,
openstack%2Fneutron-specs~master~I15576e46ab34bf95ec8e0fc8066baad78460ceef,https://review.opendev.org/140165,Refactor test against template,"Refactor test against template  test_titles originated in nova-specs.  The version in nova-specs has received several improvements that would be worth bringing over.  This started when I was writing a spec and the test code wouldn't let me add any additional sections on top of the required ones.  Here's a list of key differences in the new version:  * Instead of hard coding the list of required sections, dynamically   discover the sections by reading the template.  * Ensure all sections from the template are present, but allow   additional sections to be included.  * Include the code for ensuring lines are wrapped, but disable it for   now since it doesn't pass.  * Make sure the spec doesn't have \r in it.  * Make sure the spec doesn't have trailing whitespace.  Change-Id: I15576e46ab34bf95ec8e0fc8066baad78460ceef",objective,,,,,,
openstack%2Fceilometer~master~Iaedee8d6be6b58147413295b39d8d8b152caa39a,https://review.opendev.org/101134,Refactor kwapi unit test,"Refactor kwapi unit test  ceilometer/tests/energy/test_kwapi.py has very similar test cases, this patch refactors those unit test code.  Change-Id: Iaedee8d6be6b58147413295b39d8d8b152caa39a",testing,,,,,,
openstack%2Fceilometer~master~Iaedee8d6be6b58147413295b39d8d8b152caa39a,https://review.opendev.org/101134,Refactor kwapi unit test,"Refactor kwapi unit test  ceilometer/tests/energy/test_kwapi.py has very similar test cases, this patch refactors those unit test code.  Change-Id: Iaedee8d6be6b58147413295b39d8d8b152caa39a",quality,,,,,,
openstack%2Fceilometer~master~Iaedee8d6be6b58147413295b39d8d8b152caa39a,https://review.opendev.org/101134,Refactor kwapi unit test,"Refactor kwapi unit test  ceilometer/tests/energy/test_kwapi.py has very similar test cases, this patch refactors those unit test code.  Change-Id: Iaedee8d6be6b58147413295b39d8d8b152caa39a",objective,,,,,,
x%2Fswift3~master~I3f5d0d9bae021513d63b0ca35f015241873e3fd5,https://review.opendev.org/139941,Refactor test_s3_acl,Refactor test_s3_acl  This patch introduces generate_s3acl_environ() function for refactoring of test_s3_acl. It registers necessary verbs against to both a bucket and an object which keep ACL information for testing.  It achieves really good portability to make s3_acl testing environment for other test cases so that What we have to do for s3_acl testing is just calling generate_s3acl_environ() before testing.  Change-Id: I3f5d0d9bae021513d63b0ca35f015241873e3fd5,testing,,,,,,
x%2Fswift3~master~I3f5d0d9bae021513d63b0ca35f015241873e3fd5,https://review.opendev.org/139941,Refactor test_s3_acl,Refactor test_s3_acl  This patch introduces generate_s3acl_environ() function for refactoring of test_s3_acl. It registers necessary verbs against to both a bucket and an object which keep ACL information for testing.  It achieves really good portability to make s3_acl testing environment for other test cases so that What we have to do for s3_acl testing is just calling generate_s3acl_environ() before testing.  Change-Id: I3f5d0d9bae021513d63b0ca35f015241873e3fd5,quality,,,,,,
x%2Fswift3~master~I3f5d0d9bae021513d63b0ca35f015241873e3fd5,https://review.opendev.org/139941,Refactor test_s3_acl,Refactor test_s3_acl  This patch introduces generate_s3acl_environ() function for refactoring of test_s3_acl. It registers necessary verbs against to both a bucket and an object which keep ACL information for testing.  It achieves really good portability to make s3_acl testing environment for other test cases so that What we have to do for s3_acl testing is just calling generate_s3acl_environ() before testing.  Change-Id: I3f5d0d9bae021513d63b0ca35f015241873e3fd5,objective,,,,,,
openstack%2Fmistral~master~I04390a0b305e970aa609db27fa0c091657132fa0,https://review.opendev.org/139003,Refactor policies tests,Refactor timeout policy test  Change-Id: I04390a0b305e970aa609db27fa0c091657132fa0,testing,,,,,,
openstack%2Fmistral~master~I04390a0b305e970aa609db27fa0c091657132fa0,https://review.opendev.org/139003,Refactor policies tests,Refactor timeout policy test  Change-Id: I04390a0b305e970aa609db27fa0c091657132fa0,objective,,,,,,
openstack%2Fcinder~master~I9b067a8322a676c4c95d5045cb2e78979be9ba5b,https://review.opendev.org/131865,Refactoring to allow addition of NetApp FibreChannel drivers,"Refactoring to allow addition of FibreChannel drivers  NetApp's five Cinder drivers have been in continuous development for nearly 3 years, and it is now necessary to do some housecleaning.  This commit splits long files that contain multiple classes, normalizes the class hierarchies to enable subclassing different driver classes (ISCSIDriver, FibreChannelDriver), and renames classes.  It also begins the process of moving unit test files into a matching hierarchy in the ""tests"" tree.  Implements blueprint netapp-cinder-driver-refactoring-phase-1 Change-Id: I9b067a8322a676c4c95d5045cb2e78979be9ba5b",testing,,,,,,
openstack%2Fcinder~master~I9b067a8322a676c4c95d5045cb2e78979be9ba5b,https://review.opendev.org/131865,Refactoring to allow addition of NetApp FibreChannel drivers,"Refactoring to allow addition of FibreChannel drivers  NetApp's five Cinder drivers have been in continuous development for nearly 3 years, and it is now necessary to do some housecleaning.  This commit splits long files that contain multiple classes, normalizes the class hierarchies to enable subclassing different driver classes (ISCSIDriver, FibreChannelDriver), and renames classes.  It also begins the process of moving unit test files into a matching hierarchy in the ""tests"" tree.  Implements blueprint netapp-cinder-driver-refactoring-phase-1 Change-Id: I9b067a8322a676c4c95d5045cb2e78979be9ba5b",quality,,,,,,
openstack%2Fcinder~master~I9b067a8322a676c4c95d5045cb2e78979be9ba5b,https://review.opendev.org/131865,Refactoring to allow addition of NetApp FibreChannel drivers,"Refactoring to allow addition of FibreChannel drivers  NetApp's five Cinder drivers have been in continuous development for nearly 3 years, and it is now necessary to do some housecleaning.  This commit splits long files that contain multiple classes, normalizes the class hierarchies to enable subclassing different driver classes (ISCSIDriver, FibreChannelDriver), and renames classes.  It also begins the process of moving unit test files into a matching hierarchy in the ""tests"" tree.  Implements blueprint netapp-cinder-driver-refactoring-phase-1 Change-Id: I9b067a8322a676c4c95d5045cb2e78979be9ba5b",objective,,,,,,
openstack%2Fironic~master~I645b48cc99bf7a64e796f63d11b7daf4fef227a2,https://review.opendev.org/137775,Ilo tests refactoring,"Ilo tests refactoring  IloValidateParametersTestCase tests create node in test functions, this change moves it to setUp. Based on commit I81c5deaa4c578c29c32788bd248f9db7166975e3.  Change-Id: I645b48cc99bf7a64e796f63d11b7daf4fef227a2",testing,,,,,,
openstack%2Fironic~master~I645b48cc99bf7a64e796f63d11b7daf4fef227a2,https://review.opendev.org/137775,Ilo tests refactoring,"Ilo tests refactoring  IloValidateParametersTestCase tests create node in test functions, this change moves it to setUp. Based on commit I81c5deaa4c578c29c32788bd248f9db7166975e3.  Change-Id: I645b48cc99bf7a64e796f63d11b7daf4fef227a2",objective,,,,,,
openstack%2Fpython-ceilometerclient~master~I4891a3e7d13f924ba0a1f7c57e87cd092ed8f9ff,https://review.opendev.org/134100,Refactor tests/test_shell.py,Refactor tests/test_shell.py  Remove unnecessary help test for keystone shell test.  Change-Id: I4891a3e7d13f924ba0a1f7c57e87cd092ed8f9ff Closes-Bug: #1391965,testing,,,,,,
openstack%2Fpython-ceilometerclient~master~I4891a3e7d13f924ba0a1f7c57e87cd092ed8f9ff,https://review.opendev.org/134100,Refactor tests/test_shell.py,Refactor tests/test_shell.py  Remove unnecessary help test for keystone shell test.  Change-Id: I4891a3e7d13f924ba0a1f7c57e87cd092ed8f9ff Closes-Bug: #1391965,objective,,,,,,
openstack%2Fnova~master~I8373203db5f20fc81c47fea2d7fe5f67eadc98b4,https://review.opendev.org/130957,resource-tracker: Begin refactor unit tests,"resource-tracker: Begin refactor unit tests  The current unit tests for the resource tracker are in /nova/tests/compute/test_resource_tracker.py, and they are virtually impossible to work with, due to a number of things:   * They rely on a real conductor service being started during    each test method  * They rely on database state since they are not NoDBTestCase-derived  * They use random nested dicts all over the place for fixtures, instead    of nova.objects where appropriate, making the unit tests very    difficult to alter along with changes to ""objectify"" the resource    tracker.  This patch is the start of a refactoring effort that removes the database and conductor service calls and replaces them with mocks and derives the unit test cases from nova.test.NoDBTestCase. This first patch simply tests the logic of a single important method of the resource tracker: update_available_resource(). The test methods test the various code branches that can occur if the compute node has active instances running on it, no instances running on it, migrations running on it, and more.  This patch introduces a new test file called test_tracker.py. When all code paths in the resource tracker have been tested in test_tracker.py, I will delete the original test_resource_tracker.py and rename test_tracker.py to test_resource_tracker.py.  Change-Id: I8373203db5f20fc81c47fea2d7fe5f67eadc98b4 blueprint: make-resource-tracker-use-objects",testing,,,,,,
openstack%2Fnova~master~I8373203db5f20fc81c47fea2d7fe5f67eadc98b4,https://review.opendev.org/130957,resource-tracker: Begin refactor unit tests,"resource-tracker: Begin refactor unit tests  The current unit tests for the resource tracker are in /nova/tests/compute/test_resource_tracker.py, and they are virtually impossible to work with, due to a number of things:   * They rely on a real conductor service being started during    each test method  * They rely on database state since they are not NoDBTestCase-derived  * They use random nested dicts all over the place for fixtures, instead    of nova.objects where appropriate, making the unit tests very    difficult to alter along with changes to ""objectify"" the resource    tracker.  This patch is the start of a refactoring effort that removes the database and conductor service calls and replaces them with mocks and derives the unit test cases from nova.test.NoDBTestCase. This first patch simply tests the logic of a single important method of the resource tracker: update_available_resource(). The test methods test the various code branches that can occur if the compute node has active instances running on it, no instances running on it, migrations running on it, and more.  This patch introduces a new test file called test_tracker.py. When all code paths in the resource tracker have been tested in test_tracker.py, I will delete the original test_resource_tracker.py and rename test_tracker.py to test_resource_tracker.py.  Change-Id: I8373203db5f20fc81c47fea2d7fe5f67eadc98b4 blueprint: make-resource-tracker-use-objects",quality,,,,,,
openstack%2Fnova~master~I8373203db5f20fc81c47fea2d7fe5f67eadc98b4,https://review.opendev.org/130957,resource-tracker: Begin refactor unit tests,"resource-tracker: Begin refactor unit tests  The current unit tests for the resource tracker are in /nova/tests/compute/test_resource_tracker.py, and they are virtually impossible to work with, due to a number of things:   * They rely on a real conductor service being started during    each test method  * They rely on database state since they are not NoDBTestCase-derived  * They use random nested dicts all over the place for fixtures, instead    of nova.objects where appropriate, making the unit tests very    difficult to alter along with changes to ""objectify"" the resource    tracker.  This patch is the start of a refactoring effort that removes the database and conductor service calls and replaces them with mocks and derives the unit test cases from nova.test.NoDBTestCase. This first patch simply tests the logic of a single important method of the resource tracker: update_available_resource(). The test methods test the various code branches that can occur if the compute node has active instances running on it, no instances running on it, migrations running on it, and more.  This patch introduces a new test file called test_tracker.py. When all code paths in the resource tracker have been tested in test_tracker.py, I will delete the original test_resource_tracker.py and rename test_tracker.py to test_resource_tracker.py.  Change-Id: I8373203db5f20fc81c47fea2d7fe5f67eadc98b4 blueprint: make-resource-tracker-use-objects",objective,,,,,,
openstack%2Fsahara-dashboard~master~I9c40bfded3a73bfd9dc36cec6dede821186a585b,https://review.opendev.org/109622,Refactoring UI tests,Refactoring UI tests  Added teadDown method to cluster test and fixed method of delete job executions  Change-Id: I9c40bfded3a73bfd9dc36cec6dede821186a585b,testing,,,,,,
x%2Fcloudroast~master~Ic99c8f06930c7b13fd94f12be12ab0367488b23d,https://review.opendev.org/131891,Code refactoring and adding ssh test,Code refactoring and adding ssh test  Classes L2HostroutesGatewayMixin and Instance are refactored to a common module so other scenario tests can use them in the future.  ssh connectivity test between 'origin' and 'destination' instances is added to L2HostroutesGatewayTest.  Change-Id: Ic99c8f06930c7b13fd94f12be12ab0367488b23d,testing,,,,,,
x%2Fcloudroast~master~Ic99c8f06930c7b13fd94f12be12ab0367488b23d,https://review.opendev.org/131891,Code refactoring and adding ssh test,Code refactoring and adding ssh test  Classes L2HostroutesGatewayMixin and Instance are refactored to a common module so other scenario tests can use them in the future.  ssh connectivity test between 'origin' and 'destination' instances is added to L2HostroutesGatewayTest.  Change-Id: Ic99c8f06930c7b13fd94f12be12ab0367488b23d,objective,,,,,,
openstack%2Fpython-mistralclient~master~I95193ad89d7db44c100b93cec7bf0c1d3db23209,https://review.opendev.org/131512,Refactor CLI tests,Refactor CLI tests  - tearDown logic was updated. Now we collect all test items and then delete only them.  Closes-Bug: #1386804  Change-Id: I95193ad89d7db44c100b93cec7bf0c1d3db23209,testing,,,,,,
openstack%2Fpython-mistralclient~master~I95193ad89d7db44c100b93cec7bf0c1d3db23209,https://review.opendev.org/131512,Refactor CLI tests,Refactor CLI tests  - tearDown logic was updated. Now we collect all test items and then delete only them.  Closes-Bug: #1386804  Change-Id: I95193ad89d7db44c100b93cec7bf0c1d3db23209,objective,,,,,,
opendev%2Fsystem-config~master~I3f128a449756fd6988f3810863cd1d49c476b0dd,https://review.opendev.org/124632,refactor of hideci for readability and modularity,"refactor of hideci for readability and modularity  This is a refactors the hideci code into much smaller functions, making the whole thing a bit more readable for fixing this going forward. This was done in order to add a couple of new features. The smaller functions should also make this code much easier to review.  After the refactor we now do a top down parsing off all comments in a review, classifying them as 'is_ci' and 'is_trusted_ci' so that we can more easily compute the results we want going forward.  In the process a few additional features were added.  1) CI results are only shown for the latest patch set, even if no CI system has reported on it. This is accomplished via ci_latest_patchset.  2) If CI system is in merge conflict, that's displayed in the results box.  3) Test results records are lifted in total to the test results display panel, and each set of test results includes the date that we got it from. This means that for patches that get 'rechecked' a lot, you'll see the whole history of test results on current patch. You will also be able to quickly realize that the current test results are older than the last recheck comment.  The UX for part 3 is different, and may need tweaking going forward, however the merge of results from different runs was creating a lot of confusion to reviewers, so this errors on the side of more clarity.  Because of the largely inconvenient workflow for development (the fact that you basically need to copy / paste function definitions into chrome dev console) this isn't broken up as smaller patches. This should, hopefully, make future patches much easier on this code though.  Change-Id: I3f128a449756fd6988f3810863cd1d49c476b0dd",testing,,,,,,
opendev%2Fsystem-config~master~I3f128a449756fd6988f3810863cd1d49c476b0dd,https://review.opendev.org/124632,refactor of hideci for readability and modularity,"refactor of hideci for readability and modularity  This is a refactors the hideci code into much smaller functions, making the whole thing a bit more readable for fixing this going forward. This was done in order to add a couple of new features. The smaller functions should also make this code much easier to review.  After the refactor we now do a top down parsing off all comments in a review, classifying them as 'is_ci' and 'is_trusted_ci' so that we can more easily compute the results we want going forward.  In the process a few additional features were added.  1) CI results are only shown for the latest patch set, even if no CI system has reported on it. This is accomplished via ci_latest_patchset.  2) If CI system is in merge conflict, that's displayed in the results box.  3) Test results records are lifted in total to the test results display panel, and each set of test results includes the date that we got it from. This means that for patches that get 'rechecked' a lot, you'll see the whole history of test results on current patch. You will also be able to quickly realize that the current test results are older than the last recheck comment.  The UX for part 3 is different, and may need tweaking going forward, however the merge of results from different runs was creating a lot of confusion to reviewers, so this errors on the side of more clarity.  Because of the largely inconvenient workflow for development (the fact that you basically need to copy / paste function definitions into chrome dev console) this isn't broken up as smaller patches. This should, hopefully, make future patches much easier on this code though.  Change-Id: I3f128a449756fd6988f3810863cd1d49c476b0dd",objective,,,,,,
opendev%2Fsystem-config~master~I3f128a449756fd6988f3810863cd1d49c476b0dd,https://review.opendev.org/124632,refactor of hideci for readability and modularity,"refactor of hideci for readability and modularity  This is a refactors the hideci code into much smaller functions, making the whole thing a bit more readable for fixing this going forward. This was done in order to add a couple of new features. The smaller functions should also make this code much easier to review.  After the refactor we now do a top down parsing off all comments in a review, classifying them as 'is_ci' and 'is_trusted_ci' so that we can more easily compute the results we want going forward.  In the process a few additional features were added.  1) CI results are only shown for the latest patch set, even if no CI system has reported on it. This is accomplished via ci_latest_patchset.  2) If CI system is in merge conflict, that's displayed in the results box.  3) Test results records are lifted in total to the test results display panel, and each set of test results includes the date that we got it from. This means that for patches that get 'rechecked' a lot, you'll see the whole history of test results on current patch. You will also be able to quickly realize that the current test results are older than the last recheck comment.  The UX for part 3 is different, and may need tweaking going forward, however the merge of results from different runs was creating a lot of confusion to reviewers, so this errors on the side of more clarity.  Because of the largely inconvenient workflow for development (the fact that you basically need to copy / paste function definitions into chrome dev console) this isn't broken up as smaller patches. This should, hopefully, make future patches much easier on this code though.  Change-Id: I3f128a449756fd6988f3810863cd1d49c476b0dd",quality,,,,,,
opendev%2Fsystem-config~master~I3f128a449756fd6988f3810863cd1d49c476b0dd,https://review.opendev.org/124632,refactor of hideci for readability and modularity,"refactor of hideci for readability and modularity  This is a refactors the hideci code into much smaller functions, making the whole thing a bit more readable for fixing this going forward. This was done in order to add a couple of new features. The smaller functions should also make this code much easier to review.  After the refactor we now do a top down parsing off all comments in a review, classifying them as 'is_ci' and 'is_trusted_ci' so that we can more easily compute the results we want going forward.  In the process a few additional features were added.  1) CI results are only shown for the latest patch set, even if no CI system has reported on it. This is accomplished via ci_latest_patchset.  2) If CI system is in merge conflict, that's displayed in the results box.  3) Test results records are lifted in total to the test results display panel, and each set of test results includes the date that we got it from. This means that for patches that get 'rechecked' a lot, you'll see the whole history of test results on current patch. You will also be able to quickly realize that the current test results are older than the last recheck comment.  The UX for part 3 is different, and may need tweaking going forward, however the merge of results from different runs was creating a lot of confusion to reviewers, so this errors on the side of more clarity.  Because of the largely inconvenient workflow for development (the fact that you basically need to copy / paste function definitions into chrome dev console) this isn't broken up as smaller patches. This should, hopefully, make future patches much easier on this code though.  Change-Id: I3f128a449756fd6988f3810863cd1d49c476b0dd",objective,,,,,,
openstack%2Fnova~master~I93399e2af0d230fac9a7f1eb308adfa15e0a84f8,https://review.opendev.org/129798,Separate and refactor RAM filter unit tests,Separate and refactor RAM filter unit tests  The Aggregate RAM filter unit tests were accessing the database to create Aggregate records. This patch moves all the RAM filter unit tests out of test_host_filters.py into their own test file and updates the unit tests to remove any database accesses entirely.  Change-Id: I93399e2af0d230fac9a7f1eb308adfa15e0a84f8,testing,,,,,,
openstack%2Fnova~master~I93399e2af0d230fac9a7f1eb308adfa15e0a84f8,https://review.opendev.org/129798,Separate and refactor RAM filter unit tests,Separate and refactor RAM filter unit tests  The Aggregate RAM filter unit tests were accessing the database to create Aggregate records. This patch moves all the RAM filter unit tests out of test_host_filters.py into their own test file and updates the unit tests to remove any database accesses entirely.  Change-Id: I93399e2af0d230fac9a7f1eb308adfa15e0a84f8,integration,,,,,,
openstack%2Fnova~master~I93399e2af0d230fac9a7f1eb308adfa15e0a84f8,https://review.opendev.org/129798,Separate and refactor RAM filter unit tests,Separate and refactor RAM filter unit tests  The Aggregate RAM filter unit tests were accessing the database to create Aggregate records. This patch moves all the RAM filter unit tests out of test_host_filters.py into their own test file and updates the unit tests to remove any database accesses entirely.  Change-Id: I93399e2af0d230fac9a7f1eb308adfa15e0a84f8,objective,,,,,,
openstack%2Fnova~master~I93399e2af0d230fac9a7f1eb308adfa15e0a84f8,https://review.opendev.org/129798,Separate and refactor RAM filter unit tests,Separate and refactor RAM filter unit tests  The Aggregate RAM filter unit tests were accessing the database to create Aggregate records. This patch moves all the RAM filter unit tests out of test_host_filters.py into their own test file and updates the unit tests to remove any database accesses entirely.  Change-Id: I93399e2af0d230fac9a7f1eb308adfa15e0a84f8,quality,,,,,,
openstack%2Fpython-barbicanclient~master~I9d07cb50143c1f5cafea48318018a205f745999f,https://review.opendev.org/127862,Refactored Client to use Keystone Sessions,"Refactored Client to use Keystone Sessions  This CR changes the Client to use Keystone Sessions exclusively. All authentication that was previously available in barbicanclient is removed so that we can defer all authentication to keystoneclient.  Unit tests for the client module have been refactored to test the new functionality.  The README file has been updated to give an example of how to authenticate using Sessions.  The Client will now give priority to an endpoint that is passed in over endpoints found in the service catalog, which closes bug #1276002.  This is helpful for development, where you might be running an instance of Barbican locally that uses a Keystone instance for authentication that does not have the Barbican service in its catalog.  DocImpact Implements: blueprint use-keystone-sessions Closes-Bug: #1276002  Change-Id: I9d07cb50143c1f5cafea48318018a205f745999f",testing,,,,,,
openstack%2Fpython-barbicanclient~master~I9d07cb50143c1f5cafea48318018a205f745999f,https://review.opendev.org/127862,Refactored Client to use Keystone Sessions,"Refactored Client to use Keystone Sessions  This CR changes the Client to use Keystone Sessions exclusively. All authentication that was previously available in barbicanclient is removed so that we can defer all authentication to keystoneclient.  Unit tests for the client module have been refactored to test the new functionality.  The README file has been updated to give an example of how to authenticate using Sessions.  The Client will now give priority to an endpoint that is passed in over endpoints found in the service catalog, which closes bug #1276002.  This is helpful for development, where you might be running an instance of Barbican locally that uses a Keystone instance for authentication that does not have the Barbican service in its catalog.  DocImpact Implements: blueprint use-keystone-sessions Closes-Bug: #1276002  Change-Id: I9d07cb50143c1f5cafea48318018a205f745999f",quality,,,,,,
openstack%2Fpython-barbicanclient~master~I9d07cb50143c1f5cafea48318018a205f745999f,https://review.opendev.org/127862,Refactored Client to use Keystone Sessions,"Refactored Client to use Keystone Sessions  This CR changes the Client to use Keystone Sessions exclusively. All authentication that was previously available in barbicanclient is removed so that we can defer all authentication to keystoneclient.  Unit tests for the client module have been refactored to test the new functionality.  The README file has been updated to give an example of how to authenticate using Sessions.  The Client will now give priority to an endpoint that is passed in over endpoints found in the service catalog, which closes bug #1276002.  This is helpful for development, where you might be running an instance of Barbican locally that uses a Keystone instance for authentication that does not have the Barbican service in its catalog.  DocImpact Implements: blueprint use-keystone-sessions Closes-Bug: #1276002  Change-Id: I9d07cb50143c1f5cafea48318018a205f745999f",objective,,,,,,
openstack%2Ffuel-ostf~master~I5ca9c25ed2e04eca09c8632a6e2757706990b2f9,https://review.opendev.org/126840,Small refactoring for Sahara platform test,"Small refactoring for Sahara platform test  * Method ""_test_image"" was renamed into ""check_image""   because we check image but not test  * Steps to list node group templates and cluster templates were removed   because sanity tests have these checks  * Some messages were corrected  * Sahara platform test was renamed  Change-Id: I5ca9c25ed2e04eca09c8632a6e2757706990b2f9",testing,,,,,,
openstack%2Ffuel-ostf~master~I5ca9c25ed2e04eca09c8632a6e2757706990b2f9,https://review.opendev.org/126840,Small refactoring for Sahara platform test,"Small refactoring for Sahara platform test  * Method ""_test_image"" was renamed into ""check_image""   because we check image but not test  * Steps to list node group templates and cluster templates were removed   because sanity tests have these checks  * Some messages were corrected  * Sahara platform test was renamed  Change-Id: I5ca9c25ed2e04eca09c8632a6e2757706990b2f9",quality,,,,,,
openstack%2Ffuel-ostf~master~I5ca9c25ed2e04eca09c8632a6e2757706990b2f9,https://review.opendev.org/126840,Small refactoring for Sahara platform test,"Small refactoring for Sahara platform test  * Method ""_test_image"" was renamed into ""check_image""   because we check image but not test  * Steps to list node group templates and cluster templates were removed   because sanity tests have these checks  * Some messages were corrected  * Sahara platform test was renamed  Change-Id: I5ca9c25ed2e04eca09c8632a6e2757706990b2f9",objective,,,,,,
openstack%2Fnova~master~I7ba202adeb7d65f1e04c36e8db647565c1fcaeb2,https://review.opendev.org/120674,Refactor of test case of floating_ips,"Refactor of test case of floating_ips  This patch is prepare for porting floating_ips to v2.1, and make v2.1 and v2 share same test cases.  Change-Id: I7ba202adeb7d65f1e04c36e8db647565c1fcaeb2",testing,,,,,,
openstack%2Fnova~master~I7ba202adeb7d65f1e04c36e8db647565c1fcaeb2,https://review.opendev.org/120674,Refactor of test case of floating_ips,"Refactor of test case of floating_ips  This patch is prepare for porting floating_ips to v2.1, and make v2.1 and v2 share same test cases.  Change-Id: I7ba202adeb7d65f1e04c36e8db647565c1fcaeb2",objective,,,,,,
x%2Ftuskar~master~Ibd900f571bad8133cc35a94c1e57c7ba2382fbeb,https://review.opendev.org/125660,Refactor the Tuskar storage tests,"Refactor the Tuskar storage tests  This test refactor generalises the test cases in a way that they can be configured to run against multiple storage backents or different configurations such as sqlite, MySQL and PostgreSQL.  Change-Id: Ibd900f571bad8133cc35a94c1e57c7ba2382fbeb",testing,,,,,,
x%2Ftuskar~master~Ibd900f571bad8133cc35a94c1e57c7ba2382fbeb,https://review.opendev.org/125660,Refactor the Tuskar storage tests,"Refactor the Tuskar storage tests  This test refactor generalises the test cases in a way that they can be configured to run against multiple storage backents or different configurations such as sqlite, MySQL and PostgreSQL.  Change-Id: Ibd900f571bad8133cc35a94c1e57c7ba2382fbeb",objective,,,,,,
openstack%2Fneutron~master~Iedb6ba35d637dda5ae9f553d0c7ffcb7c526f3c6,https://review.opendev.org/121277,Finish small unit test refactor of API v2 tests,Finish small unit test refactor of API v2 tests  Leverage a utility function for all of the tests that create something in the API and expect a failure.  Change-Id: Iedb6ba35d637dda5ae9f553d0c7ffcb7c526f3c6,testing,,,,,,
openstack%2Fneutron~master~Iedb6ba35d637dda5ae9f553d0c7ffcb7c526f3c6,https://review.opendev.org/121277,Finish small unit test refactor of API v2 tests,Finish small unit test refactor of API v2 tests  Leverage a utility function for all of the tests that create something in the API and expect a failure.  Change-Id: Iedb6ba35d637dda5ae9f553d0c7ffcb7c526f3c6,objective,,,,,,
openstack%2Fhorizon~master~Ie196e02926bd0a38277eee93c3c2063337ff2b25,https://review.opendev.org/119350,Refactor test code to reduce duplication,Refactor test code to reduce duplication  Change-Id: Ie196e02926bd0a38277eee93c3c2063337ff2b25 Closes-bug: 1365959,testing,,,,,,
openstack%2Fhorizon~master~Ie196e02926bd0a38277eee93c3c2063337ff2b25,https://review.opendev.org/119350,Refactor test code to reduce duplication,Refactor test code to reduce duplication  Change-Id: Ie196e02926bd0a38277eee93c3c2063337ff2b25 Closes-bug: 1365959,quality,,,,,,
openstack%2Ftempest~master~I4b965fceeec7c9cd1857375053e148d85f5f5bca,https://review.opendev.org/116875,Refactor ways of creating anonymous test user,"Refactor ways of creating anonymous test user  Some Swift tests require random user creation to test ACL features or prepare special data by reseller admin's requests, but that occurs code duplication. Especially, assigning role id code was too lengthy.  This commit aggregates common codes and remove unused clean-up statements.  Change-Id: I4b965fceeec7c9cd1857375053e148d85f5f5bca",testing,,,,,,
openstack%2Ftempest~master~I4b965fceeec7c9cd1857375053e148d85f5f5bca,https://review.opendev.org/116875,Refactor ways of creating anonymous test user,"Refactor ways of creating anonymous test user  Some Swift tests require random user creation to test ACL features or prepare special data by reseller admin's requests, but that occurs code duplication. Especially, assigning role id code was too lengthy.  This commit aggregates common codes and remove unused clean-up statements.  Change-Id: I4b965fceeec7c9cd1857375053e148d85f5f5bca",quality,,,,,,
openstack%2Ftempest~master~I4b965fceeec7c9cd1857375053e148d85f5f5bca,https://review.opendev.org/116875,Refactor ways of creating anonymous test user,"Refactor ways of creating anonymous test user  Some Swift tests require random user creation to test ACL features or prepare special data by reseller admin's requests, but that occurs code duplication. Especially, assigning role id code was too lengthy.  This commit aggregates common codes and remove unused clean-up statements.  Change-Id: I4b965fceeec7c9cd1857375053e148d85f5f5bca",objective,,,,,,
openstack%2Fsahara~master~I38fd1c470d608c3de9d8c140228d7c9666523b23,https://review.opendev.org/118465,Refactoring DataSources to use proxy user,Refactoring DataSources to use proxy user  Changes * adding constants for trust id and domain name to swift_helper * refactoring oozie edp workflows to use proxy configs when necessary * adding tests to exercise proxy domain usage in workflows * removing credentials requirement for DataSource models when using   proxy domain * pruning duplicate MapReduce test * adding tests for DataSource creation without credentials  Partial-implements: blueprint edp-swift-trust-authentication Change-Id: I38fd1c470d608c3de9d8c140228d7c9666523b23,testing,,,,,,
openstack%2Fsahara~master~I38fd1c470d608c3de9d8c140228d7c9666523b23,https://review.opendev.org/118465,Refactoring DataSources to use proxy user,Refactoring DataSources to use proxy user  Changes * adding constants for trust id and domain name to swift_helper * refactoring oozie edp workflows to use proxy configs when necessary * adding tests to exercise proxy domain usage in workflows * removing credentials requirement for DataSource models when using   proxy domain * pruning duplicate MapReduce test * adding tests for DataSource creation without credentials  Partial-implements: blueprint edp-swift-trust-authentication Change-Id: I38fd1c470d608c3de9d8c140228d7c9666523b23,objective,,,,,,
openstack%2Fsahara~master~I38fd1c470d608c3de9d8c140228d7c9666523b23,https://review.opendev.org/118465,Refactoring DataSources to use proxy user,Refactoring DataSources to use proxy user  Changes * adding constants for trust id and domain name to swift_helper * refactoring oozie edp workflows to use proxy configs when necessary * adding tests to exercise proxy domain usage in workflows * removing credentials requirement for DataSource models when using   proxy domain * pruning duplicate MapReduce test * adding tests for DataSource creation without credentials  Partial-implements: blueprint edp-swift-trust-authentication Change-Id: I38fd1c470d608c3de9d8c140228d7c9666523b23,quality,,,,,,
openstack%2Fnova~master~I8fb46b5a3ef4bb89a6084df955d82821216ebb40,https://review.opendev.org/98322,VMware: spawn refactor image fetch/cache,"VMware: spawn refactor - image handling  From examining the exist vmops spawn() coder, as-yet unmerged patches undergoing review that impacts it, as well as anticipating additional changes proposed in blueprints, it is apparent that the high branching factor is a result of inefficient attempts to address various permutations of the following:  - different types image to spawn with (sparse, flat, iso,   streamOptimized, ova, ...) - different ways to obtain the image (http download, datastore copy,   direct use, ...) - different ways to prepare the downloaded image bits into a usable   image in the image cache (replace -flat.vmdk extent, convert from   sparse, pick from imported VM, ...) - different ways to employed the image that has made available (fully   copy, as base of COW disk, direct use, ...)  This patch attempts to tease apart into three main areas of responsibilites:  - ImageHandler classes : for obtaining bits of various kinds of images - ImageProcessor classes : for processing the bits into a usable form to                            be cached in the iamge cache - Image user callbacks : for dealing with using a prepared/cached image                          in a VM in various ways.  The hope is that this will allow for more self-contained additions/changes to behaviors in these areas, as well as more avenues to test different aspects of the spawn operation in isolation.  TODO: Try to break this further into a few smaller patches, add a couple more tests.  partial blueprint vmware-spawn-refactor  Change-Id: I8fb46b5a3ef4bb89a6084df955d82821216ebb40",testing,,,,,,
openstack%2Fnova~master~I8fb46b5a3ef4bb89a6084df955d82821216ebb40,https://review.opendev.org/98322,VMware: spawn refactor image fetch/cache,"VMware: spawn refactor - image handling  From examining the exist vmops spawn() coder, as-yet unmerged patches undergoing review that impacts it, as well as anticipating additional changes proposed in blueprints, it is apparent that the high branching factor is a result of inefficient attempts to address various permutations of the following:  - different types image to spawn with (sparse, flat, iso,   streamOptimized, ova, ...) - different ways to obtain the image (http download, datastore copy,   direct use, ...) - different ways to prepare the downloaded image bits into a usable   image in the image cache (replace -flat.vmdk extent, convert from   sparse, pick from imported VM, ...) - different ways to employed the image that has made available (fully   copy, as base of COW disk, direct use, ...)  This patch attempts to tease apart into three main areas of responsibilites:  - ImageHandler classes : for obtaining bits of various kinds of images - ImageProcessor classes : for processing the bits into a usable form to                            be cached in the iamge cache - Image user callbacks : for dealing with using a prepared/cached image                          in a VM in various ways.  The hope is that this will allow for more self-contained additions/changes to behaviors in these areas, as well as more avenues to test different aspects of the spawn operation in isolation.  TODO: Try to break this further into a few smaller patches, add a couple more tests.  partial blueprint vmware-spawn-refactor  Change-Id: I8fb46b5a3ef4bb89a6084df955d82821216ebb40",quality,,,,,,
openstack%2Fnova~master~I8fb46b5a3ef4bb89a6084df955d82821216ebb40,https://review.opendev.org/98322,VMware: spawn refactor image fetch/cache,"VMware: spawn refactor - image handling  From examining the exist vmops spawn() coder, as-yet unmerged patches undergoing review that impacts it, as well as anticipating additional changes proposed in blueprints, it is apparent that the high branching factor is a result of inefficient attempts to address various permutations of the following:  - different types image to spawn with (sparse, flat, iso,   streamOptimized, ova, ...) - different ways to obtain the image (http download, datastore copy,   direct use, ...) - different ways to prepare the downloaded image bits into a usable   image in the image cache (replace -flat.vmdk extent, convert from   sparse, pick from imported VM, ...) - different ways to employed the image that has made available (fully   copy, as base of COW disk, direct use, ...)  This patch attempts to tease apart into three main areas of responsibilites:  - ImageHandler classes : for obtaining bits of various kinds of images - ImageProcessor classes : for processing the bits into a usable form to                            be cached in the iamge cache - Image user callbacks : for dealing with using a prepared/cached image                          in a VM in various ways.  The hope is that this will allow for more self-contained additions/changes to behaviors in these areas, as well as more avenues to test different aspects of the spawn operation in isolation.  TODO: Try to break this further into a few smaller patches, add a couple more tests.  partial blueprint vmware-spawn-refactor  Change-Id: I8fb46b5a3ef4bb89a6084df955d82821216ebb40",objective,,,,,,
openstack%2Fnova~master~Iea7b0c0c2c920108ef055681319d8a2d996e14b3,https://review.opendev.org/117187,Refactor admin_action plugin and test cases,Refactor admin_action plugin and test cases  add expected_attrs=None when calling  self.compute_api.get() add expected_attrs=None when setup mock in test case.  this patches is aimed to share v2.1 patches and v2 test cases. a test cases porting patch will be followed.  Partially implements blueprint v2-on-v3-api Change-Id: Iea7b0c0c2c920108ef055681319d8a2d996e14b3,testing,,,,,,
openstack%2Fnova~master~Iea7b0c0c2c920108ef055681319d8a2d996e14b3,https://review.opendev.org/117187,Refactor admin_action plugin and test cases,Refactor admin_action plugin and test cases  add expected_attrs=None when calling  self.compute_api.get() add expected_attrs=None when setup mock in test case.  this patches is aimed to share v2.1 patches and v2 test cases. a test cases porting patch will be followed.  Partially implements blueprint v2-on-v3-api Change-Id: Iea7b0c0c2c920108ef055681319d8a2d996e14b3,integration,,,,,,
openstack%2Fnova~master~Iea7b0c0c2c920108ef055681319d8a2d996e14b3,https://review.opendev.org/117187,Refactor admin_action plugin and test cases,Refactor admin_action plugin and test cases  add expected_attrs=None when calling  self.compute_api.get() add expected_attrs=None when setup mock in test case.  this patches is aimed to share v2.1 patches and v2 test cases. a test cases porting patch will be followed.  Partially implements blueprint v2-on-v3-api Change-Id: Iea7b0c0c2c920108ef055681319d8a2d996e14b3,objective,,,,,,
openstack%2Fheat~master~I9633a4b4eb0dc2403053ad9da6f34801604dbdce,https://review.opendev.org/107362,Unittests: Refactor Volume resources tests,"Unittests: Refactor Volume resources tests  Changes include: - use native HOT template with native Cinder resources for Cinder   resources tests - split tests in two test cases, one for AWS, another for native   resources - added base test case with most common boilerplate mocking  Change-Id: I9633a4b4eb0dc2403053ad9da6f34801604dbdce",testing,,,,,,
openstack%2Fheat~master~I9633a4b4eb0dc2403053ad9da6f34801604dbdce,https://review.opendev.org/107362,Unittests: Refactor Volume resources tests,"Unittests: Refactor Volume resources tests  Changes include: - use native HOT template with native Cinder resources for Cinder   resources tests - split tests in two test cases, one for AWS, another for native   resources - added base test case with most common boilerplate mocking  Change-Id: I9633a4b4eb0dc2403053ad9da6f34801604dbdce",objective,,,,,,
openstack%2Fneutron~master~Ifb7a742b64139f3a5d9b88c3c6261b1b890946f9,https://review.opendev.org/114691,Minor refactoring of auto_schedule_routers,"Minor refactoring of auto_schedule_routers  The method has bloated out of proportion, so bring it back in line in a way that we can do more targeted fixes.  This is done in preparation of fix for DB lock timeout errors observed while dealing with DVR routers.  Test coverage is already provided, even though it should be adjusted to reflect the new structure being introduced.  Partial-bug: #1356121  Change-Id: Ifb7a742b64139f3a5d9b88c3c6261b1b890946f9",testing,,,,,,
openstack%2Fneutron~master~Ifb7a742b64139f3a5d9b88c3c6261b1b890946f9,https://review.opendev.org/114691,Minor refactoring of auto_schedule_routers,"Minor refactoring of auto_schedule_routers  The method has bloated out of proportion, so bring it back in line in a way that we can do more targeted fixes.  This is done in preparation of fix for DB lock timeout errors observed while dealing with DVR routers.  Test coverage is already provided, even though it should be adjusted to reflect the new structure being introduced.  Partial-bug: #1356121  Change-Id: Ifb7a742b64139f3a5d9b88c3c6261b1b890946f9",objective,,,,,,
openstack%2Fneutron~master~Ifb7a742b64139f3a5d9b88c3c6261b1b890946f9,https://review.opendev.org/114691,Minor refactoring of auto_schedule_routers,"Minor refactoring of auto_schedule_routers  The method has bloated out of proportion, so bring it back in line in a way that we can do more targeted fixes.  This is done in preparation of fix for DB lock timeout errors observed while dealing with DVR routers.  Test coverage is already provided, even though it should be adjusted to reflect the new structure being introduced.  Partial-bug: #1356121  Change-Id: Ifb7a742b64139f3a5d9b88c3c6261b1b890946f9",quality,,,,,,
openstack%2Fglance~master~I683c35face8d5b7056ef7fedcd75deb63dbbf8e2,https://review.opendev.org/106776,Refactoring Glance logging lowering levels,Refactoring Glance logging lowering levels  This change fixes translations to be using correct translation functions. Contains few log level drops for too high logging levels.  This PS does not address logging changes for modules under glance/store/ due to the new repo request. After stores are moved to their own repo new PS will be submitted for those.  This PS does not touch the test code.  Separate PS will be submitted for log lever raises withing codebase as requested during the spec review.  Related to bp refactoring-glance-logging  Change-Id: I683c35face8d5b7056ef7fedcd75deb63dbbf8e2,testing,,,,,,
openstack%2Fglance~master~I683c35face8d5b7056ef7fedcd75deb63dbbf8e2,https://review.opendev.org/106776,Refactoring Glance logging lowering levels,Refactoring Glance logging lowering levels  This change fixes translations to be using correct translation functions. Contains few log level drops for too high logging levels.  This PS does not address logging changes for modules under glance/store/ due to the new repo request. After stores are moved to their own repo new PS will be submitted for those.  This PS does not touch the test code.  Separate PS will be submitted for log lever raises withing codebase as requested during the spec review.  Related to bp refactoring-glance-logging  Change-Id: I683c35face8d5b7056ef7fedcd75deb63dbbf8e2,objective,,,,,,
openstack%2Fmanila~master~I9579ecd538e29d478dbc12adc7dcc33fc668b397,https://review.opendev.org/107323,Refactor test framework,"Refactor test framework  Manila's test framework is pretty old and requires update.  Changes: - usage of nose replaced with testr - now all the tests a thread safe - added new options for run_tests.sh, such as --concurrency, --debug, etc... - new '--concurrency' option for run_tests.sh defaults to 1, examples:     ./run_tests.sh  # will run in 1 thread     ./run_tests.sh --concurrency 2  # will run tests in 2 threads - added tools/colorizer.py for colorizing output of testrun with run_tests.sh - tests running with tox use as much threads as cores available by default - Added 'Database' class to manila.test module, for more conveniant db testing - updated policy file 'manila/tests/policy.json' to allow share-network actions - removed nose-related requirements - added new requirements for testrepository, subunit  With merge of this change all old installed virtual environments becomes incompatible and should be removed with ""rm -rf .tox .venv"" before testrun.  Implements blueprint testr-with-unittests  Change-Id: I9579ecd538e29d478dbc12adc7dcc33fc668b397",testing,,,,,,
openstack%2Fmanila~master~I9579ecd538e29d478dbc12adc7dcc33fc668b397,https://review.opendev.org/107323,Refactor test framework,"Refactor test framework  Manila's test framework is pretty old and requires update.  Changes: - usage of nose replaced with testr - now all the tests a thread safe - added new options for run_tests.sh, such as --concurrency, --debug, etc... - new '--concurrency' option for run_tests.sh defaults to 1, examples:     ./run_tests.sh  # will run in 1 thread     ./run_tests.sh --concurrency 2  # will run tests in 2 threads - added tools/colorizer.py for colorizing output of testrun with run_tests.sh - tests running with tox use as much threads as cores available by default - Added 'Database' class to manila.test module, for more conveniant db testing - updated policy file 'manila/tests/policy.json' to allow share-network actions - removed nose-related requirements - added new requirements for testrepository, subunit  With merge of this change all old installed virtual environments becomes incompatible and should be removed with ""rm -rf .tox .venv"" before testrun.  Implements blueprint testr-with-unittests  Change-Id: I9579ecd538e29d478dbc12adc7dcc33fc668b397",quality,,,,,,
openstack%2Fmanila~master~I9579ecd538e29d478dbc12adc7dcc33fc668b397,https://review.opendev.org/107323,Refactor test framework,"Refactor test framework  Manila's test framework is pretty old and requires update.  Changes: - usage of nose replaced with testr - now all the tests a thread safe - added new options for run_tests.sh, such as --concurrency, --debug, etc... - new '--concurrency' option for run_tests.sh defaults to 1, examples:     ./run_tests.sh  # will run in 1 thread     ./run_tests.sh --concurrency 2  # will run tests in 2 threads - added tools/colorizer.py for colorizing output of testrun with run_tests.sh - tests running with tox use as much threads as cores available by default - Added 'Database' class to manila.test module, for more conveniant db testing - updated policy file 'manila/tests/policy.json' to allow share-network actions - removed nose-related requirements - added new requirements for testrepository, subunit  With merge of this change all old installed virtual environments becomes incompatible and should be removed with ""rm -rf .tox .venv"" before testrun.  Implements blueprint testr-with-unittests  Change-Id: I9579ecd538e29d478dbc12adc7dcc33fc668b397",integration,,,,,,
openstack%2Fmanila~master~I9579ecd538e29d478dbc12adc7dcc33fc668b397,https://review.opendev.org/107323,Refactor test framework,"Refactor test framework  Manila's test framework is pretty old and requires update.  Changes: - usage of nose replaced with testr - now all the tests a thread safe - added new options for run_tests.sh, such as --concurrency, --debug, etc... - new '--concurrency' option for run_tests.sh defaults to 1, examples:     ./run_tests.sh  # will run in 1 thread     ./run_tests.sh --concurrency 2  # will run tests in 2 threads - added tools/colorizer.py for colorizing output of testrun with run_tests.sh - tests running with tox use as much threads as cores available by default - Added 'Database' class to manila.test module, for more conveniant db testing - updated policy file 'manila/tests/policy.json' to allow share-network actions - removed nose-related requirements - added new requirements for testrepository, subunit  With merge of this change all old installed virtual environments becomes incompatible and should be removed with ""rm -rf .tox .venv"" before testrun.  Implements blueprint testr-with-unittests  Change-Id: I9579ecd538e29d478dbc12adc7dcc33fc668b397",objective,,,,,,
openstack%2Fsolum~master~Ibd9374524541c49d20625d58db1c005351d79c8f,https://review.opendev.org/104637,Refactoring build-app and unittest-app,"WIP. Refactoring build-app and unittest-app  Created app-common Replaced with tlog function with TLOG Added elapsed function, replaced print_end_timestamp Replaced get_image_id with app_glance_id Replaced run_timed_command with PRUN Removed use of EXIT_STATUS Replaced argument -z tests with $# test Prepended docker unittest with PRUN Removed commented code and other cleanup  Change-Id: Ibd9374524541c49d20625d58db1c005351d79c8f",testing,,,,,,
openstack%2Fsolum~master~Ibd9374524541c49d20625d58db1c005351d79c8f,https://review.opendev.org/104637,Refactoring build-app and unittest-app,"WIP. Refactoring build-app and unittest-app  Created app-common Replaced with tlog function with TLOG Added elapsed function, replaced print_end_timestamp Replaced get_image_id with app_glance_id Replaced run_timed_command with PRUN Removed use of EXIT_STATUS Replaced argument -z tests with $# test Prepended docker unittest with PRUN Removed commented code and other cleanup  Change-Id: Ibd9374524541c49d20625d58db1c005351d79c8f",objective,,,,,,
openstack%2Fcongress~master~I25ab083d359a4bd85c93356e5261d31061a7e9aa,https://review.opendev.org/105882,Refactor congress eventlet server code,"Refactor congress eventlet server code  This patch removes the current wsgi-server in place of the one that keystone uses which is basically identical to the one that was already in congress. The only reason I switched it out for the keystone one is just so copying the keystone integration out of keystone to congress would be easier. In addition, this patch adds mutiworker support so can use multiple processes to run our api server (though currently we just default that to 1). This patch also includes test cases for the eventlet server.  Change-Id: I25ab083d359a4bd85c93356e5261d31061a7e9aa Closes-bug: 1339880",testing,,,,,,
openstack%2Fcongress~master~I25ab083d359a4bd85c93356e5261d31061a7e9aa,https://review.opendev.org/105882,Refactor congress eventlet server code,"Refactor congress eventlet server code  This patch removes the current wsgi-server in place of the one that keystone uses which is basically identical to the one that was already in congress. The only reason I switched it out for the keystone one is just so copying the keystone integration out of keystone to congress would be easier. In addition, this patch adds mutiworker support so can use multiple processes to run our api server (though currently we just default that to 1). This patch also includes test cases for the eventlet server.  Change-Id: I25ab083d359a4bd85c93356e5261d31061a7e9aa Closes-bug: 1339880",quality,,,,,,
openstack%2Fcongress~master~I25ab083d359a4bd85c93356e5261d31061a7e9aa,https://review.opendev.org/105882,Refactor congress eventlet server code,"Refactor congress eventlet server code  This patch removes the current wsgi-server in place of the one that keystone uses which is basically identical to the one that was already in congress. The only reason I switched it out for the keystone one is just so copying the keystone integration out of keystone to congress would be easier. In addition, this patch adds mutiworker support so can use multiple processes to run our api server (though currently we just default that to 1). This patch also includes test cases for the eventlet server.  Change-Id: I25ab083d359a4bd85c93356e5261d31061a7e9aa Closes-bug: 1339880",objective,,,,,,
openstack%2Fmurano~master~Ifab8460d3a188c6e05edd682a302e2a8a6dd0425,https://review.opendev.org/104199,Code refactoring and improvements for MuranoPL testing mini-framework,Code refactoring and improvements for MuranoPL testing mini-framework  * Stack-traces of caught exceptions are no longer printed in Python 2.6 * No more warning on Exception.message being deprecated * Loaded YAML files are cached instead of being re-read for each test    greatly increasing performance without side effects because class-loader    is still new on each test * object_model helper objects can be used as a test method arguments * Path to core library classes was relative to the test. That prevented grouping    tests into sub-folders * Preserve original stack-trace for Python exceptions thrown by the engine * Ability to delete (clear) traces (produced by calls to trace(...) in MuranoPL code) * Code refactoring  Change-Id: Ifab8460d3a188c6e05edd682a302e2a8a6dd0425,testing,,,,,,
openstack%2Fmurano~master~Ifab8460d3a188c6e05edd682a302e2a8a6dd0425,https://review.opendev.org/104199,Code refactoring and improvements for MuranoPL testing mini-framework,Code refactoring and improvements for MuranoPL testing mini-framework  * Stack-traces of caught exceptions are no longer printed in Python 2.6 * No more warning on Exception.message being deprecated * Loaded YAML files are cached instead of being re-read for each test    greatly increasing performance without side effects because class-loader    is still new on each test * object_model helper objects can be used as a test method arguments * Path to core library classes was relative to the test. That prevented grouping    tests into sub-folders * Preserve original stack-trace for Python exceptions thrown by the engine * Ability to delete (clear) traces (produced by calls to trace(...) in MuranoPL code) * Code refactoring  Change-Id: Ifab8460d3a188c6e05edd682a302e2a8a6dd0425,quality,,,,,,
openstack%2Fmurano~master~Ifab8460d3a188c6e05edd682a302e2a8a6dd0425,https://review.opendev.org/104199,Code refactoring and improvements for MuranoPL testing mini-framework,Code refactoring and improvements for MuranoPL testing mini-framework  * Stack-traces of caught exceptions are no longer printed in Python 2.6 * No more warning on Exception.message being deprecated * Loaded YAML files are cached instead of being re-read for each test    greatly increasing performance without side effects because class-loader    is still new on each test * object_model helper objects can be used as a test method arguments * Path to core library classes was relative to the test. That prevented grouping    tests into sub-folders * Preserve original stack-trace for Python exceptions thrown by the engine * Ability to delete (clear) traces (produced by calls to trace(...) in MuranoPL code) * Code refactoring  Change-Id: Ifab8460d3a188c6e05edd682a302e2a8a6dd0425,objective,,,,,,
jjb%2Fjenkins-job-builder~master~Ia8d16e74e8a1097a013512fb624f032b1d085d17,https://review.opendev.org/97848,refactor cmd processor to make it slightly easier to test,refactor cmd processor to make it slightly easier to test  * make logger global * create methods for setting up of parser and jjb configuration.  Change-Id: Ia8d16e74e8a1097a013512fb624f032b1d085d17,testing,,,,,,
jjb%2Fjenkins-job-builder~master~Ia8d16e74e8a1097a013512fb624f032b1d085d17,https://review.opendev.org/97848,refactor cmd processor to make it slightly easier to test,refactor cmd processor to make it slightly easier to test  * make logger global * create methods for setting up of parser and jjb configuration.  Change-Id: Ia8d16e74e8a1097a013512fb624f032b1d085d17,quality,,,,,,
jjb%2Fjenkins-job-builder~master~Ia8d16e74e8a1097a013512fb624f032b1d085d17,https://review.opendev.org/97848,refactor cmd processor to make it slightly easier to test,refactor cmd processor to make it slightly easier to test  * make logger global * create methods for setting up of parser and jjb configuration.  Change-Id: Ia8d16e74e8a1097a013512fb624f032b1d085d17,objective,,,,,,
openstack%2Fmurano-dashboard~master~I62ca73c3473116ca1e01d7b69bed15f953c4f117,https://review.opendev.org/100499,Refactor WebUI tests,Make WebUI tests refactoring  A bunch of tests for creation/deletion apps from app-incubator were remowed because every changes in ui forms in app-incubator leads to failure in murano-ci jobs. To avoid this intersection with changes in other repository these tests were removed. Lately will be created test application which will be used in such tests.  Change-Id: I62ca73c3473116ca1e01d7b69bed15f953c4f117,testing,,,,,,
openstack%2Fmurano-dashboard~master~I62ca73c3473116ca1e01d7b69bed15f953c4f117,https://review.opendev.org/100499,Refactor WebUI tests,Make WebUI tests refactoring  A bunch of tests for creation/deletion apps from app-incubator were remowed because every changes in ui forms in app-incubator leads to failure in murano-ci jobs. To avoid this intersection with changes in other repository these tests were removed. Lately will be created test application which will be used in such tests.  Change-Id: I62ca73c3473116ca1e01d7b69bed15f953c4f117,objective,,,,,,
openstack%2Fmurano-dashboard~master~I62ca73c3473116ca1e01d7b69bed15f953c4f117,https://review.opendev.org/100499,Refactor WebUI tests,Make WebUI tests refactoring  A bunch of tests for creation/deletion apps from app-incubator were remowed because every changes in ui forms in app-incubator leads to failure in murano-ci jobs. To avoid this intersection with changes in other repository these tests were removed. Lately will be created test application which will be used in such tests.  Change-Id: I62ca73c3473116ca1e01d7b69bed15f953c4f117,objective,,,,,,
openstack%2Fbashate~master~I4e2a30a82501b6ec29d06b49ccba63418cc39fa0,https://review.opendev.org/102097,Refactor in BashateRun class,"Refactor in BashateRun class  Grab the module level functions that seemed to belong under the 'runtime logic' category and tuck them into a BashateRun class that should encapsulate the options and checks that are used in doing a bashate run against a set of files. Primarily, this makes it easier to unit test the bashate logic, but also opens up some API possibilities.  Leaving the 'check_*' functions at module level, as they have a relatively simple contract they need to fulfill for the time being.  Change-Id: I4e2a30a82501b6ec29d06b49ccba63418cc39fa0",testing,,,,,,
openstack%2Fbashate~master~I4e2a30a82501b6ec29d06b49ccba63418cc39fa0,https://review.opendev.org/102097,Refactor in BashateRun class,"Refactor in BashateRun class  Grab the module level functions that seemed to belong under the 'runtime logic' category and tuck them into a BashateRun class that should encapsulate the options and checks that are used in doing a bashate run against a set of files. Primarily, this makes it easier to unit test the bashate logic, but also opens up some API possibilities.  Leaving the 'check_*' functions at module level, as they have a relatively simple contract they need to fulfill for the time being.  Change-Id: I4e2a30a82501b6ec29d06b49ccba63418cc39fa0",quality,,,,,,
openstack%2Fbashate~master~I4e2a30a82501b6ec29d06b49ccba63418cc39fa0,https://review.opendev.org/102097,Refactor in BashateRun class,"Refactor in BashateRun class  Grab the module level functions that seemed to belong under the 'runtime logic' category and tuck them into a BashateRun class that should encapsulate the options and checks that are used in doing a bashate run against a set of files. Primarily, this makes it easier to unit test the bashate logic, but also opens up some API possibilities.  Leaving the 'check_*' functions at module level, as they have a relatively simple contract they need to fulfill for the time being.  Change-Id: I4e2a30a82501b6ec29d06b49ccba63418cc39fa0",objective,,,,,,
openstack%2Fosprofiler~master~I86112eb0b6f0f01222a4f84985edd74a1881e89a,https://review.opendev.org/102233,Refactor WSGI.middleware and imporve test coverage,"Refactor WSGI.middleware and imporve test coverage  *) Move all logic related to secure transport of trace info to osprofiler/utils.py *) Add to methods singed_pack, signed_unpack that hides all complexity of packing data, generating hmac, and validating hmac data. *) Cover osprofiler/utils.py by separated tests *) Remove mess from WSGI middleware and add_trace_id_header *) Simplify web tests *) Disable possibility to setup empty hmac keys, cause of security reasons  Change-Id: I86112eb0b6f0f01222a4f84985edd74a1881e89a",testing,,,,,,
openstack%2Fosprofiler~master~I86112eb0b6f0f01222a4f84985edd74a1881e89a,https://review.opendev.org/102233,Refactor WSGI.middleware and imporve test coverage,"Refactor WSGI.middleware and imporve test coverage  *) Move all logic related to secure transport of trace info to osprofiler/utils.py *) Add to methods singed_pack, signed_unpack that hides all complexity of packing data, generating hmac, and validating hmac data. *) Cover osprofiler/utils.py by separated tests *) Remove mess from WSGI middleware and add_trace_id_header *) Simplify web tests *) Disable possibility to setup empty hmac keys, cause of security reasons  Change-Id: I86112eb0b6f0f01222a4f84985edd74a1881e89a",quality,,,,,,
openstack%2Fosprofiler~master~I86112eb0b6f0f01222a4f84985edd74a1881e89a,https://review.opendev.org/102233,Refactor WSGI.middleware and imporve test coverage,"Refactor WSGI.middleware and imporve test coverage  *) Move all logic related to secure transport of trace info to osprofiler/utils.py *) Add to methods singed_pack, signed_unpack that hides all complexity of packing data, generating hmac, and validating hmac data. *) Cover osprofiler/utils.py by separated tests *) Remove mess from WSGI middleware and add_trace_id_header *) Simplify web tests *) Disable possibility to setup empty hmac keys, cause of security reasons  Change-Id: I86112eb0b6f0f01222a4f84985edd74a1881e89a",objective,,,,,,
openstack%2Fceilometer~master~I9910c25fffb971addec9cec33b624e3b8387f310,https://review.opendev.org/95613,Refactor tests to remove direct access to test DBManagers,Refactor tests to remove direct access to test DBManagers  This is needed to enable running tests without the need to specify DBManager explicitly. One will only have to provide an URL for tests to use.  Related to blueprint sql-unit-tests-on-real-backend  Change-Id: I9910c25fffb971addec9cec33b624e3b8387f310,testing,,,,,,
openstack%2Fceilometer~master~I9910c25fffb971addec9cec33b624e3b8387f310,https://review.opendev.org/95613,Refactor tests to remove direct access to test DBManagers,Refactor tests to remove direct access to test DBManagers  This is needed to enable running tests without the need to specify DBManager explicitly. One will only have to provide an URL for tests to use.  Related to blueprint sql-unit-tests-on-real-backend  Change-Id: I9910c25fffb971addec9cec33b624e3b8387f310,integration,,,,,,
openstack%2Fceilometer~master~I9910c25fffb971addec9cec33b624e3b8387f310,https://review.opendev.org/95613,Refactor tests to remove direct access to test DBManagers,Refactor tests to remove direct access to test DBManagers  This is needed to enable running tests without the need to specify DBManager explicitly. One will only have to provide an URL for tests to use.  Related to blueprint sql-unit-tests-on-real-backend  Change-Id: I9910c25fffb971addec9cec33b624e3b8387f310,objective,,,,,,
openstack%2Fnova~master~Ia137f1ea4b9fa43741cdd7d610831da8e5474d62,https://review.opendev.org/92691,VMware: spawn refactor - phase 1 - test for spawn,VMware: spawn refactor - phase 1 - test for spawn  Adding a test case for spawn to ensure all the correct methods are called  partial blueprint vmware-spawn-refactor  Change-Id: Ia137f1ea4b9fa43741cdd7d610831da8e5474d62,testing,,,,,,
openstack%2Fnova~master~Ia137f1ea4b9fa43741cdd7d610831da8e5474d62,https://review.opendev.org/92691,VMware: spawn refactor - phase 1 - test for spawn,VMware: spawn refactor - phase 1 - test for spawn  Adding a test case for spawn to ensure all the correct methods are called  partial blueprint vmware-spawn-refactor  Change-Id: Ia137f1ea4b9fa43741cdd7d610831da8e5474d62,objective,,,,,,
openstack%2Fnova~master~I7c9d677e7b589b525e2c6ebc43ef81a64a57511d,https://review.opendev.org/94811,xenapi: refactor detach volume,"xenapi: refactor detach volume  Share more code between detach and detach_all, and make it easier to read. At the same time, improve the test coverage.  Change-Id: I7c9d677e7b589b525e2c6ebc43ef81a64a57511d",testing,,,,,,
openstack%2Fnova~master~I7c9d677e7b589b525e2c6ebc43ef81a64a57511d,https://review.opendev.org/94811,xenapi: refactor detach volume,"xenapi: refactor detach volume  Share more code between detach and detach_all, and make it easier to read. At the same time, improve the test coverage.  Change-Id: I7c9d677e7b589b525e2c6ebc43ef81a64a57511d",quality,,,,,,
openstack%2Fnova~master~I7c9d677e7b589b525e2c6ebc43ef81a64a57511d,https://review.opendev.org/94811,xenapi: refactor detach volume,"xenapi: refactor detach volume  Share more code between detach and detach_all, and make it easier to read. At the same time, improve the test coverage.  Change-Id: I7c9d677e7b589b525e2c6ebc43ef81a64a57511d",objective,,,,,,
openstack%2Fnova~master~I2a9b1c6b5a1f41272e26c20de134a2a8b71c88f3,https://review.opendev.org/96296,Refactor test_rescue_unrescue into compute api/manager unit tests,"Refactor test_rescue_unrescue into compute api/manager unit tests  As part of converting the rescue/unrescue compute API flows to using objects, i.e. dot notation for accessing attributes on the instance object and updating the database via instance.save() rather than compute_api.update, we want to move some of the integration-style tests found in test_compute.py to test_compute_api.py and test_compute_mgr.py.  This is to help with the conversion so we don't have to use exotic stubs in the cells API flows to make integration tests work.  This change is mainly concerned with moving test_rescue_unrescue out of test_compute.py and into the api/manager specific test modules and then later changes will build on top of the new tests.  Part of blueprint compute-manager-objects-juno  Change-Id: I2a9b1c6b5a1f41272e26c20de134a2a8b71c88f3",testing,,,,,,
openstack%2Fnova~master~I2a9b1c6b5a1f41272e26c20de134a2a8b71c88f3,https://review.opendev.org/96296,Refactor test_rescue_unrescue into compute api/manager unit tests,"Refactor test_rescue_unrescue into compute api/manager unit tests  As part of converting the rescue/unrescue compute API flows to using objects, i.e. dot notation for accessing attributes on the instance object and updating the database via instance.save() rather than compute_api.update, we want to move some of the integration-style tests found in test_compute.py to test_compute_api.py and test_compute_mgr.py.  This is to help with the conversion so we don't have to use exotic stubs in the cells API flows to make integration tests work.  This change is mainly concerned with moving test_rescue_unrescue out of test_compute.py and into the api/manager specific test modules and then later changes will build on top of the new tests.  Part of blueprint compute-manager-objects-juno  Change-Id: I2a9b1c6b5a1f41272e26c20de134a2a8b71c88f3",objective,,,,,,
openstack%2Fnova~master~I2a9b1c6b5a1f41272e26c20de134a2a8b71c88f3,https://review.opendev.org/96296,Refactor test_rescue_unrescue into compute api/manager unit tests,"Refactor test_rescue_unrescue into compute api/manager unit tests  As part of converting the rescue/unrescue compute API flows to using objects, i.e. dot notation for accessing attributes on the instance object and updating the database via instance.save() rather than compute_api.update, we want to move some of the integration-style tests found in test_compute.py to test_compute_api.py and test_compute_mgr.py.  This is to help with the conversion so we don't have to use exotic stubs in the cells API flows to make integration tests work.  This change is mainly concerned with moving test_rescue_unrescue out of test_compute.py and into the api/manager specific test modules and then later changes will build on top of the new tests.  Part of blueprint compute-manager-objects-juno  Change-Id: I2a9b1c6b5a1f41272e26c20de134a2a8b71c88f3",quality,,,,,,
openstack%2Fpython-solumclient~master~I9df09ecffbdccadfca074dd4c47a1980ea08b431,https://review.opendev.org/95688,Refactor the plan/app commands to respect the CrudManager Design,Refactor the plan/app commands to respect the CrudManager Design  Add update method to the CrudManager More robust test around the solum app create method  Change-Id: I9df09ecffbdccadfca074dd4c47a1980ea08b431,testing,,,,,,
openstack%2Fpython-solumclient~master~I9df09ecffbdccadfca074dd4c47a1980ea08b431,https://review.opendev.org/95688,Refactor the plan/app commands to respect the CrudManager Design,Refactor the plan/app commands to respect the CrudManager Design  Add update method to the CrudManager More robust test around the solum app create method  Change-Id: I9df09ecffbdccadfca074dd4c47a1980ea08b431,objective,,,,,,
openstack%2Fkeystone~master~I64752702cc8a328463df15591e3f4c082266ef6d,https://review.opendev.org/92813,Refactor test_auth trust related tests,"Refactor test_auth trust related tests  The tests in the AuthWithTrust fixture had many dependencies on global variables that were not necessarily used; for instance, every time the setUp function is called, there was a new trust created. This was ran even for classes that don't need the creation of this initial valid trust.  This commit gets rid of this behaviour, thus making the test less dependent on the fixture's state (class variables) in favor of a more on-demand approach to getting trusts and tokens.  Change-Id: I64752702cc8a328463df15591e3f4c082266ef6d",testing,,,,,,
openstack%2Fkeystone~master~I64752702cc8a328463df15591e3f4c082266ef6d,https://review.opendev.org/92813,Refactor test_auth trust related tests,"Refactor test_auth trust related tests  The tests in the AuthWithTrust fixture had many dependencies on global variables that were not necessarily used; for instance, every time the setUp function is called, there was a new trust created. This was ran even for classes that don't need the creation of this initial valid trust.  This commit gets rid of this behaviour, thus making the test less dependent on the fixture's state (class variables) in favor of a more on-demand approach to getting trusts and tokens.  Change-Id: I64752702cc8a328463df15591e3f4c082266ef6d",quality,,,,,,
openstack%2Fkeystone~master~I64752702cc8a328463df15591e3f4c082266ef6d,https://review.opendev.org/92813,Refactor test_auth trust related tests,"Refactor test_auth trust related tests  The tests in the AuthWithTrust fixture had many dependencies on global variables that were not necessarily used; for instance, every time the setUp function is called, there was a new trust created. This was ran even for classes that don't need the creation of this initial valid trust.  This commit gets rid of this behaviour, thus making the test less dependent on the fixture's state (class variables) in favor of a more on-demand approach to getting trusts and tokens.  Change-Id: I64752702cc8a328463df15591e3f4c082266ef6d",objective,,,,,,
openstack%2Ftempest~master~I0cef7697e36a0ecd29c2540a5c283d322b2c62b7,https://review.opendev.org/91896,Refactor _find_caller into a public test finder utility,"Refactor _find_caller into a public test finder utility  This moves the _find_caller utility method from rest_client into it's own public utility so that we can use it elsewhere in Tempest, like to uniquely identify which test case fails in a TimeoutException.  This is useful to uniquely fingerprint timeout failures with elastic-recheck which is not always possible right now because we don't have multi-line query support with elastic-recheck.  Unit tests are added but note that setUpClass can't be tested due to pep8 check T105.  Related-Bug: #1315201  Change-Id: I0cef7697e36a0ecd29c2540a5c283d322b2c62b7",testing,,,,,,
openstack%2Ftempest~master~I0cef7697e36a0ecd29c2540a5c283d322b2c62b7,https://review.opendev.org/91896,Refactor _find_caller into a public test finder utility,"Refactor _find_caller into a public test finder utility  This moves the _find_caller utility method from rest_client into it's own public utility so that we can use it elsewhere in Tempest, like to uniquely identify which test case fails in a TimeoutException.  This is useful to uniquely fingerprint timeout failures with elastic-recheck which is not always possible right now because we don't have multi-line query support with elastic-recheck.  Unit tests are added but note that setUpClass can't be tested due to pep8 check T105.  Related-Bug: #1315201  Change-Id: I0cef7697e36a0ecd29c2540a5c283d322b2c62b7",objective,,,,,,
openstack%2Ftempest~master~I0cef7697e36a0ecd29c2540a5c283d322b2c62b7,https://review.opendev.org/91896,Refactor _find_caller into a public test finder utility,"Refactor _find_caller into a public test finder utility  This moves the _find_caller utility method from rest_client into it's own public utility so that we can use it elsewhere in Tempest, like to uniquely identify which test case fails in a TimeoutException.  This is useful to uniquely fingerprint timeout failures with elastic-recheck which is not always possible right now because we don't have multi-line query support with elastic-recheck.  Unit tests are added but note that setUpClass can't be tested due to pep8 check T105.  Related-Bug: #1315201  Change-Id: I0cef7697e36a0ecd29c2540a5c283d322b2c62b7",quality,,,,,,
openstack%2Fkeystone~master~Icdcbf77944187bc9b2b390420862f700baa179c9,https://review.opendev.org/81660,Refactor notifications,Refactor notifications  I'm replacing the implementation of notifications with the blinker library. In order to do this properly I wanted to have a more defined interface and less coupling in the tests. Test should be unaware of the implementation of the thing they are testing so that the implementation can be changed later.  Change-Id: Icdcbf77944187bc9b2b390420862f700baa179c9,testing,,,,,,
openstack%2Fkeystone~master~Icdcbf77944187bc9b2b390420862f700baa179c9,https://review.opendev.org/81660,Refactor notifications,Refactor notifications  I'm replacing the implementation of notifications with the blinker library. In order to do this properly I wanted to have a more defined interface and less coupling in the tests. Test should be unaware of the implementation of the thing they are testing so that the implementation can be changed later.  Change-Id: Icdcbf77944187bc9b2b390420862f700baa179c9,quality,,,,,,
openstack%2Fkeystone~master~Icdcbf77944187bc9b2b390420862f700baa179c9,https://review.opendev.org/81660,Refactor notifications,Refactor notifications  I'm replacing the implementation of notifications with the blinker library. In order to do this properly I wanted to have a more defined interface and less coupling in the tests. Test should be unaware of the implementation of the thing they are testing so that the implementation can be changed later.  Change-Id: Icdcbf77944187bc9b2b390420862f700baa179c9,objective,,,,,,
openstack%2Fkeystone~master~I0a2390412de6304b7436e6723cb2d411dd53421d,https://review.opendev.org/88399,Refactor test_password_hashed to the backend testers,"Refactor test_password_hashed to the backend testers  The test_password_hashed method was defined in test_backend.IdentityTests. This is a bad place for it because not all backends do password hashing (for example, the LDAP backend doesn't), and it was also implemented in a way where it called a private method of the backend, which the SQL backend implemented differently (it requires an SQLAlchemy session).  The test_password_hashed method is moved into the KVS backend test class, since the current implementation is specific to the KVS backend.  Change-Id: I0a2390412de6304b7436e6723cb2d411dd53421d",testing,,,,,,
openstack%2Fkeystone~master~I0a2390412de6304b7436e6723cb2d411dd53421d,https://review.opendev.org/88399,Refactor test_password_hashed to the backend testers,"Refactor test_password_hashed to the backend testers  The test_password_hashed method was defined in test_backend.IdentityTests. This is a bad place for it because not all backends do password hashing (for example, the LDAP backend doesn't), and it was also implemented in a way where it called a private method of the backend, which the SQL backend implemented differently (it requires an SQLAlchemy session).  The test_password_hashed method is moved into the KVS backend test class, since the current implementation is specific to the KVS backend.  Change-Id: I0a2390412de6304b7436e6723cb2d411dd53421d",integration,,,,,,
openstack%2Fkeystone~master~I0a2390412de6304b7436e6723cb2d411dd53421d,https://review.opendev.org/88399,Refactor test_password_hashed to the backend testers,"Refactor test_password_hashed to the backend testers  The test_password_hashed method was defined in test_backend.IdentityTests. This is a bad place for it because not all backends do password hashing (for example, the LDAP backend doesn't), and it was also implemented in a way where it called a private method of the backend, which the SQL backend implemented differently (it requires an SQLAlchemy session).  The test_password_hashed method is moved into the KVS backend test class, since the current implementation is specific to the KVS backend.  Change-Id: I0a2390412de6304b7436e6723cb2d411dd53421d",quality,,,,,,
openstack%2Fkeystone~master~I0a2390412de6304b7436e6723cb2d411dd53421d,https://review.opendev.org/88399,Refactor test_password_hashed to the backend testers,"Refactor test_password_hashed to the backend testers  The test_password_hashed method was defined in test_backend.IdentityTests. This is a bad place for it because not all backends do password hashing (for example, the LDAP backend doesn't), and it was also implemented in a way where it called a private method of the backend, which the SQL backend implemented differently (it requires an SQLAlchemy session).  The test_password_hashed method is moved into the KVS backend test class, since the current implementation is specific to the KVS backend.  Change-Id: I0a2390412de6304b7436e6723cb2d411dd53421d",objective,,,,,,
openstack%2Ftempest~master~I0c1cb52d92f609781ee21dd3f7d52ceef85e0766,https://review.opendev.org/82828,orchestration API refactor test_list_resources,"orchestration API refactor test_list_resources  Rework test_list_resources so we do a more explicit test of the resource list which is returned - we expect exactly one resource, so using assertIn is less explicit than assertEqual.  Refactoring the code which reads and validates the resource list will enable other tests to more easily reuse the resource-listing code.  Change-Id: I0c1cb52d92f609781ee21dd3f7d52ceef85e0766",testing,,,,,,
openstack%2Ftempest~master~I0c1cb52d92f609781ee21dd3f7d52ceef85e0766,https://review.opendev.org/82828,orchestration API refactor test_list_resources,"orchestration API refactor test_list_resources  Rework test_list_resources so we do a more explicit test of the resource list which is returned - we expect exactly one resource, so using assertIn is less explicit than assertEqual.  Refactoring the code which reads and validates the resource list will enable other tests to more easily reuse the resource-listing code.  Change-Id: I0c1cb52d92f609781ee21dd3f7d52ceef85e0766",integration,,,,,,
openstack%2Ftempest~master~I0c1cb52d92f609781ee21dd3f7d52ceef85e0766,https://review.opendev.org/82828,orchestration API refactor test_list_resources,"orchestration API refactor test_list_resources  Rework test_list_resources so we do a more explicit test of the resource list which is returned - we expect exactly one resource, so using assertIn is less explicit than assertEqual.  Refactoring the code which reads and validates the resource list will enable other tests to more easily reuse the resource-listing code.  Change-Id: I0c1cb52d92f609781ee21dd3f7d52ceef85e0766",quality,,,,,,
openstack%2Ftempest~master~I0c1cb52d92f609781ee21dd3f7d52ceef85e0766,https://review.opendev.org/82828,orchestration API refactor test_list_resources,"orchestration API refactor test_list_resources  Rework test_list_resources so we do a more explicit test of the resource list which is returned - we expect exactly one resource, so using assertIn is less explicit than assertEqual.  Refactoring the code which reads and validates the resource list will enable other tests to more easily reuse the resource-listing code.  Change-Id: I0c1cb52d92f609781ee21dd3f7d52ceef85e0766",objective,,,,,,
openstack%2Fnova~master~I6d903979290b7d027c8dc66d2da712e1e1961a00,https://review.opendev.org/85567,Refactor unit tests for image service CRUD,"Refactor unit tests for image service CRUD  Refactors the image service unit tests of the create() method to be unit tests and not functional tests. There is no need to test whether an image ID that is specified in the payload to the glance image service is preserved; the unit and functional tests in the glanceclient package do that, and besides, all this was testing was the behavior of the fake glance client, which is pointless. There was also a test that created an image and then tested the show method would raise InstanceNotFound if not passing in the same instance name that was just created. This test was removed, as ImageNotFound is already thoroughly tested in the show() unit tests.  Missing in the existing unit tests was a test of failure conditions resulting in error codes returned from the glanceclient.create() call, and this patch adds a unit test that stresses the failure paths.  These new unit tests use mocks and assert that all code paths in the create(), update() and delete() methods are fully tested.  Change-Id: I6d903979290b7d027c8dc66d2da712e1e1961a00 Related-bug: #1293938",testing,,,,,,
openstack%2Fnova~master~I6d903979290b7d027c8dc66d2da712e1e1961a00,https://review.opendev.org/85567,Refactor unit tests for image service CRUD,"Refactor unit tests for image service CRUD  Refactors the image service unit tests of the create() method to be unit tests and not functional tests. There is no need to test whether an image ID that is specified in the payload to the glance image service is preserved; the unit and functional tests in the glanceclient package do that, and besides, all this was testing was the behavior of the fake glance client, which is pointless. There was also a test that created an image and then tested the show method would raise InstanceNotFound if not passing in the same instance name that was just created. This test was removed, as ImageNotFound is already thoroughly tested in the show() unit tests.  Missing in the existing unit tests was a test of failure conditions resulting in error codes returned from the glanceclient.create() call, and this patch adds a unit test that stresses the failure paths.  These new unit tests use mocks and assert that all code paths in the create(), update() and delete() methods are fully tested.  Change-Id: I6d903979290b7d027c8dc66d2da712e1e1961a00 Related-bug: #1293938",quality,,,,,,
openstack%2Fnova~master~I6d903979290b7d027c8dc66d2da712e1e1961a00,https://review.opendev.org/85567,Refactor unit tests for image service CRUD,"Refactor unit tests for image service CRUD  Refactors the image service unit tests of the create() method to be unit tests and not functional tests. There is no need to test whether an image ID that is specified in the payload to the glance image service is preserved; the unit and functional tests in the glanceclient package do that, and besides, all this was testing was the behavior of the fake glance client, which is pointless. There was also a test that created an image and then tested the show method would raise InstanceNotFound if not passing in the same instance name that was just created. This test was removed, as ImageNotFound is already thoroughly tested in the show() unit tests.  Missing in the existing unit tests was a test of failure conditions resulting in error codes returned from the glanceclient.create() call, and this patch adds a unit test that stresses the failure paths.  These new unit tests use mocks and assert that all code paths in the create(), update() and delete() methods are fully tested.  Change-Id: I6d903979290b7d027c8dc66d2da712e1e1961a00 Related-bug: #1293938",objective,,,,,,
openstack%2Fceilometer~master~I7cbaa084df4a69c453347a45d884e8e808ac697d,https://review.opendev.org/72980,Refactored fake connection URL classes,Refactored fake connection URL classes  Changed the way how DB tests are run to make them coope with concurrent databases. FakeUrl -> DbManager. DbManager becomes a context manager that is able to create a separate DB for each test and perform a cleanup action if needed (delete database)  This is a preparational work for adding new database backends.  Related to blueprint sql-unit-tests-on-real-backend  Change-Id: I7cbaa084df4a69c453347a45d884e8e808ac697d,testing,,,,,,
openstack%2Fceilometer~master~I7cbaa084df4a69c453347a45d884e8e808ac697d,https://review.opendev.org/72980,Refactored fake connection URL classes,Refactored fake connection URL classes  Changed the way how DB tests are run to make them coope with concurrent databases. FakeUrl -> DbManager. DbManager becomes a context manager that is able to create a separate DB for each test and perform a cleanup action if needed (delete database)  This is a preparational work for adding new database backends.  Related to blueprint sql-unit-tests-on-real-backend  Change-Id: I7cbaa084df4a69c453347a45d884e8e808ac697d,integration,,,,,,
openstack%2Fceilometer~master~I7cbaa084df4a69c453347a45d884e8e808ac697d,https://review.opendev.org/72980,Refactored fake connection URL classes,Refactored fake connection URL classes  Changed the way how DB tests are run to make them coope with concurrent databases. FakeUrl -> DbManager. DbManager becomes a context manager that is able to create a separate DB for each test and perform a cleanup action if needed (delete database)  This is a preparational work for adding new database backends.  Related to blueprint sql-unit-tests-on-real-backend  Change-Id: I7cbaa084df4a69c453347a45d884e8e808ac697d,objective,,,,,,
openstack%2Fceilometer~master~Id5ae4fd0edfa868aaf6a57bd2e5f212b51b722e1,https://review.opendev.org/77230,Refactored the way how testscenarios tests are run,Refactored the way how testscenarios tests are run  Instead of using custom loader we now use a base class from testscenarios. This allows us to retain compatibility with unittest test runner and run a single test if needed.  Change-Id: Id5ae4fd0edfa868aaf6a57bd2e5f212b51b722e1,testing,,,,,,
openstack%2Fceilometer~master~Id5ae4fd0edfa868aaf6a57bd2e5f212b51b722e1,https://review.opendev.org/77230,Refactored the way how testscenarios tests are run,Refactored the way how testscenarios tests are run  Instead of using custom loader we now use a base class from testscenarios. This allows us to retain compatibility with unittest test runner and run a single test if needed.  Change-Id: Id5ae4fd0edfa868aaf6a57bd2e5f212b51b722e1,objective,,,,,,
openstack%2Fnova~master~I94897ff54a36a1af4258ba4a3c88b45c079f4bb5,https://review.opendev.org/81578,Refactors unit tests of image service detail(),"Refactors unit tests of image service detail()  We do not need to have ""unit"" tests that test the things like pagination work with the glanceclient.images.detail() call. glanceclient and glance have unit tests for that. What the unit tests for the glance image service detail() method in Nova need is to test only the code boundary that exists within the detail() method -- i.e. verify that the calls to the glanceclient and other helper methods are made with the right parameters.  This patch pulls the various unit tests out of the TestGlanceImageService test class and into their own test class that uses mocks and verifies each code path within the detail() method.  Next up is the create, update and delete methods of the GlanceImageService class. The final piece is to rework the download unit tests (which aren't unit tests but more functional tests that take around a second each to run :(  Change-Id: I94897ff54a36a1af4258ba4a3c88b45c079f4bb5 Related-bug: #1293938",testing,,,,,,
openstack%2Fnova~master~I94897ff54a36a1af4258ba4a3c88b45c079f4bb5,https://review.opendev.org/81578,Refactors unit tests of image service detail(),"Refactors unit tests of image service detail()  We do not need to have ""unit"" tests that test the things like pagination work with the glanceclient.images.detail() call. glanceclient and glance have unit tests for that. What the unit tests for the glance image service detail() method in Nova need is to test only the code boundary that exists within the detail() method -- i.e. verify that the calls to the glanceclient and other helper methods are made with the right parameters.  This patch pulls the various unit tests out of the TestGlanceImageService test class and into their own test class that uses mocks and verifies each code path within the detail() method.  Next up is the create, update and delete methods of the GlanceImageService class. The final piece is to rework the download unit tests (which aren't unit tests but more functional tests that take around a second each to run :(  Change-Id: I94897ff54a36a1af4258ba4a3c88b45c079f4bb5 Related-bug: #1293938",objective,,,,,,
openstack%2Fnova~master~I94897ff54a36a1af4258ba4a3c88b45c079f4bb5,https://review.opendev.org/81578,Refactors unit tests of image service detail(),"Refactors unit tests of image service detail()  We do not need to have ""unit"" tests that test the things like pagination work with the glanceclient.images.detail() call. glanceclient and glance have unit tests for that. What the unit tests for the glance image service detail() method in Nova need is to test only the code boundary that exists within the detail() method -- i.e. verify that the calls to the glanceclient and other helper methods are made with the right parameters.  This patch pulls the various unit tests out of the TestGlanceImageService test class and into their own test class that uses mocks and verifies each code path within the detail() method.  Next up is the create, update and delete methods of the GlanceImageService class. The final piece is to rework the download unit tests (which aren't unit tests but more functional tests that take around a second each to run :(  Change-Id: I94897ff54a36a1af4258ba4a3c88b45c079f4bb5 Related-bug: #1293938",quality,,,,,,
openstack%2Fsahara-image-elements~master~I5be5413e978acae26454a1a98825649f7d6498cd,https://review.opendev.org/75912,Refactoring of diskimage-create script,Refactoring of diskimage-create script  The script is divided into blocks corresponding version of installed plugin.  Added options for specifying image type and hadoop version. By using option you can choose image that you want to test instead of creating them all.  Change-Id: I5be5413e978acae26454a1a98825649f7d6498cd,integration,,,,,,
openstack%2Fsahara-image-elements~master~I5be5413e978acae26454a1a98825649f7d6498cd,https://review.opendev.org/75912,Refactoring of diskimage-create script,Refactoring of diskimage-create script  The script is divided into blocks corresponding version of installed plugin.  Added options for specifying image type and hadoop version. By using option you can choose image that you want to test instead of creating them all.  Change-Id: I5be5413e978acae26454a1a98825649f7d6498cd,objective,,,,,,
openstack%2Fzaqar~master~I04d342e2ce8bfd4fa0829935deb9b2753dd5af32,https://review.opendev.org/76040,test(wsgi): Refactor tests in preparation for API v1.1,"test(wsgi): Refactor tests in preparation for API v1.1  The tests were refactored into an inheritance model so that we can share as much of the testing code as possible between v1.0 and v1.1.  As a part of this process, test class names were normalized.  Change-Id: I04d342e2ce8bfd4fa0829935deb9b2753dd5af32 Partially-Implements: blueprint api-v1.1",testing,,,,,,
openstack%2Fzaqar~master~I04d342e2ce8bfd4fa0829935deb9b2753dd5af32,https://review.opendev.org/76040,test(wsgi): Refactor tests in preparation for API v1.1,"test(wsgi): Refactor tests in preparation for API v1.1  The tests were refactored into an inheritance model so that we can share as much of the testing code as possible between v1.0 and v1.1.  As a part of this process, test class names were normalized.  Change-Id: I04d342e2ce8bfd4fa0829935deb9b2753dd5af32 Partially-Implements: blueprint api-v1.1",quality,,,,,,
openstack%2Fzaqar~master~I04d342e2ce8bfd4fa0829935deb9b2753dd5af32,https://review.opendev.org/76040,test(wsgi): Refactor tests in preparation for API v1.1,"test(wsgi): Refactor tests in preparation for API v1.1  The tests were refactored into an inheritance model so that we can share as much of the testing code as possible between v1.0 and v1.1.  As a part of this process, test class names were normalized.  Change-Id: I04d342e2ce8bfd4fa0829935deb9b2753dd5af32 Partially-Implements: blueprint api-v1.1",objective,,,,,,
openstack%2Fglance~master~If4f508129f0b44d63fe77ed1251c0e0737e7e897,https://review.opendev.org/76449,Refactor UUID test,"Refactor UUID test  Oslo is removing uuidutils during the icehouse cycle. We had removed uuidutils.generate_uuid() in https://review.openstack.org/#/c/60643/ It seems the UUID test was not executed, for example, there is no method called generate_uuid() in common/utils, the Jekins still passed. This patch move the testcase and remove the test method for generate_uuid.  Change-Id: If4f508129f0b44d63fe77ed1251c0e0737e7e897 Partial-Bug: #1253497",testing,,,,,,
openstack%2Fglance~master~If4f508129f0b44d63fe77ed1251c0e0737e7e897,https://review.opendev.org/76449,Refactor UUID test,"Refactor UUID test  Oslo is removing uuidutils during the icehouse cycle. We had removed uuidutils.generate_uuid() in https://review.openstack.org/#/c/60643/ It seems the UUID test was not executed, for example, there is no method called generate_uuid() in common/utils, the Jekins still passed. This patch move the testcase and remove the test method for generate_uuid.  Change-Id: If4f508129f0b44d63fe77ed1251c0e0737e7e897 Partial-Bug: #1253497",objective,,,,,,
openstack%2Fsolum~master~I3586b12893b8d7d53dccd5220077d61a18066449,https://review.opendev.org/73554,Refactor test of 'operation' object,Refactor test of 'operation' object  The method 'utils.create_models_from_data' should have been used to avoid duplications of code  Change-Id: I3586b12893b8d7d53dccd5220077d61a18066449,testing,,,,,,
openstack%2Fsolum~master~I3586b12893b8d7d53dccd5220077d61a18066449,https://review.opendev.org/73554,Refactor test of 'operation' object,Refactor test of 'operation' object  The method 'utils.create_models_from_data' should have been used to avoid duplications of code  Change-Id: I3586b12893b8d7d53dccd5220077d61a18066449,quality,,,,,,
openstack%2Fsolum~master~I3586b12893b8d7d53dccd5220077d61a18066449,https://review.opendev.org/73554,Refactor test of 'operation' object,Refactor test of 'operation' object  The method 'utils.create_models_from_data' should have been used to avoid duplications of code  Change-Id: I3586b12893b8d7d53dccd5220077d61a18066449,objective,,,,,,
openstack%2Fsolum~master~I068f427694cd7710e99dfd7a06bf136de91a2e04,https://review.opendev.org/73320,Refactor test of 'service' object,Refactor test of 'service' object by using 'utils.create_models_from_data'  The method create_models_from_data should have been used to avoid duplications of code  Change-Id: I068f427694cd7710e99dfd7a06bf136de91a2e04,testing,,,,,,
openstack%2Fsolum~master~I068f427694cd7710e99dfd7a06bf136de91a2e04,https://review.opendev.org/73320,Refactor test of 'service' object,Refactor test of 'service' object by using 'utils.create_models_from_data'  The method create_models_from_data should have been used to avoid duplications of code  Change-Id: I068f427694cd7710e99dfd7a06bf136de91a2e04,quality,,,,,,
openstack%2Fsolum~master~I068f427694cd7710e99dfd7a06bf136de91a2e04,https://review.opendev.org/73320,Refactor test of 'service' object,Refactor test of 'service' object by using 'utils.create_models_from_data'  The method create_models_from_data should have been used to avoid duplications of code  Change-Id: I068f427694cd7710e99dfd7a06bf136de91a2e04,objective,,,,,,
openstack%2Fmistral~master~I1899ce2562a34ebafa20c5735bdf4f0c80dd0175,https://review.opendev.org/69079,Fixing and refactoring authentication,"Fixing and refactoring authtication  * Moved pecan configuration to oslo config * Refactored functional base test * Got rig of thread local related code in mistral/context.py * Added new exception ApplicationContextNotFoundException * Fixed example configuration file * Made minor cosmetic changes (blank lines, naming)  Change-Id: I1899ce2562a34ebafa20c5735bdf4f0c80dd0175",testing,,,,,,
openstack%2Fmistral~master~I1899ce2562a34ebafa20c5735bdf4f0c80dd0175,https://review.opendev.org/69079,Fixing and refactoring authentication,"Fixing and refactoring authtication  * Moved pecan configuration to oslo config * Refactored functional base test * Got rig of thread local related code in mistral/context.py * Added new exception ApplicationContextNotFoundException * Fixed example configuration file * Made minor cosmetic changes (blank lines, naming)  Change-Id: I1899ce2562a34ebafa20c5735bdf4f0c80dd0175",objective,,,,,,
openstack%2Fmistral~master~I1899ce2562a34ebafa20c5735bdf4f0c80dd0175,https://review.opendev.org/69079,Fixing and refactoring authentication,"Fixing and refactoring authtication  * Moved pecan configuration to oslo config * Refactored functional base test * Got rig of thread local related code in mistral/context.py * Added new exception ApplicationContextNotFoundException * Fixed example configuration file * Made minor cosmetic changes (blank lines, naming)  Change-Id: I1899ce2562a34ebafa20c5735bdf4f0c80dd0175",quality,,,,,,
openstack%2Fheat~master~I014d7b95c64287e1fd04a0ba69fce0de554a9a08,https://review.opendev.org/67783,Refactor heat gate testing contrib support,"Refactor add contrib into heat gate testing  The existing code is running twice, one for heat, one for contrib via adding two commands in tox.  This is breaking tox single run. For example:    tox -e py27 -- heat.tests.test_software_config  Except heat.tests.test_software_config is executed, all test cases in contrib will be executed.  The patch added contrib in discover list, which can make sure both contrib in heat gate testing and does not break single test run.  Change-Id: I014d7b95c64287e1fd04a0ba69fce0de554a9a08",testing,,,,,,
openstack%2Fheat~master~I014d7b95c64287e1fd04a0ba69fce0de554a9a08,https://review.opendev.org/67783,Refactor heat gate testing contrib support,"Refactor add contrib into heat gate testing  The existing code is running twice, one for heat, one for contrib via adding two commands in tox.  This is breaking tox single run. For example:    tox -e py27 -- heat.tests.test_software_config  Except heat.tests.test_software_config is executed, all test cases in contrib will be executed.  The patch added contrib in discover list, which can make sure both contrib in heat gate testing and does not break single test run.  Change-Id: I014d7b95c64287e1fd04a0ba69fce0de554a9a08",objective,,,,,,
openstack%2Fheat~master~I014d7b95c64287e1fd04a0ba69fce0de554a9a08,https://review.opendev.org/67783,Refactor heat gate testing contrib support,"Refactor add contrib into heat gate testing  The existing code is running twice, one for heat, one for contrib via adding two commands in tox.  This is breaking tox single run. For example:    tox -e py27 -- heat.tests.test_software_config  Except heat.tests.test_software_config is executed, all test cases in contrib will be executed.  The patch added contrib in discover list, which can make sure both contrib in heat gate testing and does not break single test run.  Change-Id: I014d7b95c64287e1fd04a0ba69fce0de554a9a08",quality,,,,,,
openstack%2Fkeystone~master~I6028a2cfa0e9e2e16acc99b5a0a027cd6cc42ada,https://review.opendev.org/66445,Refactor context trust_id check to wsgi.Application base class,"Refactor context trust_id check to wsgi.Application base class  Move the ec2 controller check for a trust_id in the token specified in the request context, renaming it to match the existing convention in the controller base classes.  This function can be used by both v2 and v3 controllers hence putting it into the common Application base class.  Test coverage for this is provided via existing tests in test_keystoneclient_sql.py  Change-Id: I6028a2cfa0e9e2e16acc99b5a0a027cd6cc42ada Partial-Bug: #1259584",testing,,,,,,
openstack%2Fkeystone~master~I6028a2cfa0e9e2e16acc99b5a0a027cd6cc42ada,https://review.opendev.org/66445,Refactor context trust_id check to wsgi.Application base class,"Refactor context trust_id check to wsgi.Application base class  Move the ec2 controller check for a trust_id in the token specified in the request context, renaming it to match the existing convention in the controller base classes.  This function can be used by both v2 and v3 controllers hence putting it into the common Application base class.  Test coverage for this is provided via existing tests in test_keystoneclient_sql.py  Change-Id: I6028a2cfa0e9e2e16acc99b5a0a027cd6cc42ada Partial-Bug: #1259584",objective,,,,,,
openstack%2Frally~master~Icdd97d3242a43d276f51ae2681969ffae747040b,https://review.opendev.org/67275,Refactor unit tests for dummy engine,Refactor unit tests for dummy engine  This patch removes a duplicate test from TestDummyDeployEngine and also renames/reorders several test methods to make the code more consistent.  Blueprint unit-tests-refactoring  Change-Id: Icdd97d3242a43d276f51ae2681969ffae747040b,testing,,,,,,
openstack%2Frally~master~Icdd97d3242a43d276f51ae2681969ffae747040b,https://review.opendev.org/67275,Refactor unit tests for dummy engine,Refactor unit tests for dummy engine  This patch removes a duplicate test from TestDummyDeployEngine and also renames/reorders several test methods to make the code more consistent.  Blueprint unit-tests-refactoring  Change-Id: Icdd97d3242a43d276f51ae2681969ffae747040b,quality,,,,,,
openstack%2Frally~master~Icdd97d3242a43d276f51ae2681969ffae747040b,https://review.opendev.org/67275,Refactor unit tests for dummy engine,Refactor unit tests for dummy engine  This patch removes a duplicate test from TestDummyDeployEngine and also renames/reorders several test methods to make the code more consistent.  Blueprint unit-tests-refactoring  Change-Id: Icdd97d3242a43d276f51ae2681969ffae747040b,objective,,,,,,
opendev%2Felastic-recheck~master~If9d6a7e72dd8d9338f2dd3283cf9a761488122de,https://review.opendev.org/66401,refactor bot to be based on argparse,"refactor bot to be based on argparse  this makes the bot based on argparse, and provides a tox job that makes running the bot in test mode a little more sane. It also provides for a new '-n' nocomment item so you can run the bot and not be worried that it will report to gerrit with findings.  Change-Id: If9d6a7e72dd8d9338f2dd3283cf9a761488122de",testing,,,,,,
opendev%2Felastic-recheck~master~If9d6a7e72dd8d9338f2dd3283cf9a761488122de,https://review.opendev.org/66401,refactor bot to be based on argparse,"refactor bot to be based on argparse  this makes the bot based on argparse, and provides a tox job that makes running the bot in test mode a little more sane. It also provides for a new '-n' nocomment item so you can run the bot and not be worried that it will report to gerrit with findings.  Change-Id: If9d6a7e72dd8d9338f2dd3283cf9a761488122de",quality,,,,,,
opendev%2Felastic-recheck~master~If9d6a7e72dd8d9338f2dd3283cf9a761488122de,https://review.opendev.org/66401,refactor bot to be based on argparse,"refactor bot to be based on argparse  this makes the bot based on argparse, and provides a tox job that makes running the bot in test mode a little more sane. It also provides for a new '-n' nocomment item so you can run the bot and not be worried that it will report to gerrit with findings.  Change-Id: If9d6a7e72dd8d9338f2dd3283cf9a761488122de",objective,,,,,,
openstack%2Fmistral~master~I15fbbb7f9d5e453c17625423eeb1bf841a19db18,https://review.opendev.org/65702,Step 1 refactoring Mistral engines,Step 1 refactoring Mistral engines   * Action definition was combined in actions module  * workflow from single engine was deleted  * task from single engine was deleted  * unit test 'test_workflow' was deleted due to deleting workflow   Next step will be extracting and combining common parts  of scalable and single engine.  Change-Id: I15fbbb7f9d5e453c17625423eeb1bf841a19db18,testing,,,,,,
openstack%2Fmistral~master~I15fbbb7f9d5e453c17625423eeb1bf841a19db18,https://review.opendev.org/65702,Step 1 refactoring Mistral engines,Step 1 refactoring Mistral engines   * Action definition was combined in actions module  * workflow from single engine was deleted  * task from single engine was deleted  * unit test 'test_workflow' was deleted due to deleting workflow   Next step will be extracting and combining common parts  of scalable and single engine.  Change-Id: I15fbbb7f9d5e453c17625423eeb1bf841a19db18,quality,,,,,,
openstack%2Fmistral~master~I15fbbb7f9d5e453c17625423eeb1bf841a19db18,https://review.opendev.org/65702,Step 1 refactoring Mistral engines,Step 1 refactoring Mistral engines   * Action definition was combined in actions module  * workflow from single engine was deleted  * task from single engine was deleted  * unit test 'test_workflow' was deleted due to deleting workflow   Next step will be extracting and combining common parts  of scalable and single engine.  Change-Id: I15fbbb7f9d5e453c17625423eeb1bf841a19db18,objective,,,,,,
x%2Fcloudroast~master~Ie0bbffebd655a5be3093d447633b7e3886c0904d,https://review.opendev.org/58831,Refactor Images API v2.0 Tenant Permissions Test,"Refactor Images API v2.0 Tenant Permisions Test  Test and fixtures refactoring:  - refactored the test to account for changes made on the fixtures, behaviors, config and image model  - used non admin users for the implementation of the tests  - added new test steps to improve implementation  - added admin user access data, behavior and images client in the fixtures,    to distinguish between privileges of a normal user, an alternate user (both non admin) and the admin user.  Change-Id: Ie0bbffebd655a5be3093d447633b7e3886c0904d",testing,,,,,,
x%2Fcloudroast~master~Ie0bbffebd655a5be3093d447633b7e3886c0904d,https://review.opendev.org/58831,Refactor Images API v2.0 Tenant Permissions Test,"Refactor Images API v2.0 Tenant Permisions Test  Test and fixtures refactoring:  - refactored the test to account for changes made on the fixtures, behaviors, config and image model  - used non admin users for the implementation of the tests  - added new test steps to improve implementation  - added admin user access data, behavior and images client in the fixtures,    to distinguish between privileges of a normal user, an alternate user (both non admin) and the admin user.  Change-Id: Ie0bbffebd655a5be3093d447633b7e3886c0904d",integration,,,,,,
x%2Fcloudroast~master~Ie0bbffebd655a5be3093d447633b7e3886c0904d,https://review.opendev.org/58831,Refactor Images API v2.0 Tenant Permissions Test,"Refactor Images API v2.0 Tenant Permisions Test  Test and fixtures refactoring:  - refactored the test to account for changes made on the fixtures, behaviors, config and image model  - used non admin users for the implementation of the tests  - added new test steps to improve implementation  - added admin user access data, behavior and images client in the fixtures,    to distinguish between privileges of a normal user, an alternate user (both non admin) and the admin user.  Change-Id: Ie0bbffebd655a5be3093d447633b7e3886c0904d",objective,,,,,,
openstack%2Ftaskflow~master~Ic0704534391abdd566bf2d87adabef43a9c88cfb,https://review.opendev.org/63067,Refactor engine internals,Refactor engine internals WIP  TODO: - test multithreading - fix eventlet execution (it hangs now)  What's done: - single GraphAction   - with parallel revert!   - using executor - TaskAction's method split - parallel task executor used for parallel engine - other minor c00l stufff  Change-Id: Ic0704534391abdd566bf2d87adabef43a9c88cfb,testing,,,,,,
openstack%2Ftaskflow~master~Ic0704534391abdd566bf2d87adabef43a9c88cfb,https://review.opendev.org/63067,Refactor engine internals,Refactor engine internals WIP  TODO: - test multithreading - fix eventlet execution (it hangs now)  What's done: - single GraphAction   - with parallel revert!   - using executor - TaskAction's method split - parallel task executor used for parallel engine - other minor c00l stufff  Change-Id: Ic0704534391abdd566bf2d87adabef43a9c88cfb,integration,,,,,,
openstack%2Ftaskflow~master~Ic0704534391abdd566bf2d87adabef43a9c88cfb,https://review.opendev.org/63067,Refactor engine internals,Refactor engine internals WIP  TODO: - test multithreading - fix eventlet execution (it hangs now)  What's done: - single GraphAction   - with parallel revert!   - using executor - TaskAction's method split - parallel task executor used for parallel engine - other minor c00l stufff  Change-Id: Ic0704534391abdd566bf2d87adabef43a9c88cfb,quality,,,,,,
openstack%2Ftaskflow~master~Ic0704534391abdd566bf2d87adabef43a9c88cfb,https://review.opendev.org/63067,Refactor engine internals,Refactor engine internals WIP  TODO: - test multithreading - fix eventlet execution (it hangs now)  What's done: - single GraphAction   - with parallel revert!   - using executor - TaskAction's method split - parallel task executor used for parallel engine - other minor c00l stufff  Change-Id: Ic0704534391abdd566bf2d87adabef43a9c88cfb,objective,,,,,,
x%2Fcloudroast~master~I9eb4731aa4f76068d7e58a4046d5c1459d7c1547,https://review.opendev.org/57327,Blockstorage test refactor and buildout,Blockstorage test refactor and buildout  * Fixes and expands blockstorage test fixtures * Adds working auth integration. * Adds blockstorage data driven test dataset list generator class. * Adds volume type dataset list generator. * Adds volume and snapshot datadriven smoketests. * Updates os-volume_attachments api integration to reflect upstream   changes. * Updates compute volume integration tests to reflact upstream changes.  Change-Id: I9eb4731aa4f76068d7e58a4046d5c1459d7c1547,testing,,,,,,
x%2Fcloudroast~master~I9eb4731aa4f76068d7e58a4046d5c1459d7c1547,https://review.opendev.org/57327,Blockstorage test refactor and buildout,Blockstorage test refactor and buildout  * Fixes and expands blockstorage test fixtures * Adds working auth integration. * Adds blockstorage data driven test dataset list generator class. * Adds volume type dataset list generator. * Adds volume and snapshot datadriven smoketests. * Updates os-volume_attachments api integration to reflect upstream   changes. * Updates compute volume integration tests to reflact upstream changes.  Change-Id: I9eb4731aa4f76068d7e58a4046d5c1459d7c1547,objective,,,,,,
x%2Fcloudroast~master~I9eb4731aa4f76068d7e58a4046d5c1459d7c1547,https://review.opendev.org/57327,Blockstorage test refactor and buildout,Blockstorage test refactor and buildout  * Fixes and expands blockstorage test fixtures * Adds working auth integration. * Adds blockstorage data driven test dataset list generator class. * Adds volume type dataset list generator. * Adds volume and snapshot datadriven smoketests. * Updates os-volume_attachments api integration to reflect upstream   changes. * Updates compute volume integration tests to reflact upstream changes.  Change-Id: I9eb4731aa4f76068d7e58a4046d5c1459d7c1547,quality,,,,,,
x%2Fcloudcafe~master~Id7cfc6cc73e5f7cb25e579996903efce35d0c67a,https://review.opendev.org/60812,Refactor Images API v2.0 client,Refactor Images API v2.0 client  Refactors 'store_image_file' method signator:   - added content type as a new parameter in order to test for     upload of image file with a different (from the default 'application/octet-stream')     content type.  Change-Id: Id7cfc6cc73e5f7cb25e579996903efce35d0c67a,testing,,,,,,
x%2Fcloudcafe~master~Id7cfc6cc73e5f7cb25e579996903efce35d0c67a,https://review.opendev.org/60812,Refactor Images API v2.0 client,Refactor Images API v2.0 client  Refactors 'store_image_file' method signator:   - added content type as a new parameter in order to test for     upload of image file with a different (from the default 'application/octet-stream')     content type.  Change-Id: Id7cfc6cc73e5f7cb25e579996903efce35d0c67a,integration,,,,,,
x%2Fcloudcafe~master~Id7cfc6cc73e5f7cb25e579996903efce35d0c67a,https://review.opendev.org/60812,Refactor Images API v2.0 client,Refactor Images API v2.0 client  Refactors 'store_image_file' method signator:   - added content type as a new parameter in order to test for     upload of image file with a different (from the default 'application/octet-stream')     content type.  Change-Id: Id7cfc6cc73e5f7cb25e579996903efce35d0c67a,objective,,,,,,
openstack%2Fnova~master~I51906bec6ba5d6af71997df277bb368cff81b3b3,https://review.opendev.org/50635,baremetal: volume driver refactoring and tests,baremetal: volume driver refactoring and tests  Refactor the LibVirtVolumeDriver to test each step of attaching and detaching a volume. And add tests.  Change-Id: I51906bec6ba5d6af71997df277bb368cff81b3b3,testing,,,,,,
openstack%2Fnova~master~I51906bec6ba5d6af71997df277bb368cff81b3b3,https://review.opendev.org/50635,baremetal: volume driver refactoring and tests,baremetal: volume driver refactoring and tests  Refactor the LibVirtVolumeDriver to test each step of attaching and detaching a volume. And add tests.  Change-Id: I51906bec6ba5d6af71997df277bb368cff81b3b3,integration,,,,,,
openstack%2Fnova~master~I51906bec6ba5d6af71997df277bb368cff81b3b3,https://review.opendev.org/50635,baremetal: volume driver refactoring and tests,baremetal: volume driver refactoring and tests  Refactor the LibVirtVolumeDriver to test each step of attaching and detaching a volume. And add tests.  Change-Id: I51906bec6ba5d6af71997df277bb368cff81b3b3,objective,,,,,,
openstack%2Fglance~master~I828eea570d358d98520c7201454c03ba174a35ad,https://review.opendev.org/60740,Refactor StorageQuotaFull test cases in test_quota,"Refactor StorageQuotaFull test cases in test_quota  There were two test cases in test_quota that shared the same name, but did almost the same thing. After a bit of digging, it looked like most of the test cases did the almost same thing, so I refactored the common bits and fixed the test case name duplication.  Change-Id: I828eea570d358d98520c7201454c03ba174a35ad Partial-Bug: #1259036",testing,,,,,,
openstack%2Fglance~master~I828eea570d358d98520c7201454c03ba174a35ad,https://review.opendev.org/60740,Refactor StorageQuotaFull test cases in test_quota,"Refactor StorageQuotaFull test cases in test_quota  There were two test cases in test_quota that shared the same name, but did almost the same thing. After a bit of digging, it looked like most of the test cases did the almost same thing, so I refactored the common bits and fixed the test case name duplication.  Change-Id: I828eea570d358d98520c7201454c03ba174a35ad Partial-Bug: #1259036",quality,,,,,,
openstack%2Fglance~master~I828eea570d358d98520c7201454c03ba174a35ad,https://review.opendev.org/60740,Refactor StorageQuotaFull test cases in test_quota,"Refactor StorageQuotaFull test cases in test_quota  There were two test cases in test_quota that shared the same name, but did almost the same thing. After a bit of digging, it looked like most of the test cases did the almost same thing, so I refactored the common bits and fixed the test case name duplication.  Change-Id: I828eea570d358d98520c7201454c03ba174a35ad Partial-Bug: #1259036",objective,,,,,,
openstack%2Fkeystone~master~Icadb4927bcf03ca7e79fef1507e419a4932f32a9,https://review.opendev.org/57979,refactor test_catalog,"refactor test_catalog  - Tests for ""missing"" attributes are actually testing with null values,   not missing keys. - Not being able to explicitly provide alternative URLs resulting in   hacky workarounds that can be avoiding by simply exposing kwargs with   reasonable defaults - Several tests redundantly asserted the expected response status, which   is already handled by the test framework  Change-Id: Icadb4927bcf03ca7e79fef1507e419a4932f32a9 Related-Bug: 1250765",testing,,,,,,
openstack%2Fkeystone~master~Icadb4927bcf03ca7e79fef1507e419a4932f32a9,https://review.opendev.org/57979,refactor test_catalog,"refactor test_catalog  - Tests for ""missing"" attributes are actually testing with null values,   not missing keys. - Not being able to explicitly provide alternative URLs resulting in   hacky workarounds that can be avoiding by simply exposing kwargs with   reasonable defaults - Several tests redundantly asserted the expected response status, which   is already handled by the test framework  Change-Id: Icadb4927bcf03ca7e79fef1507e419a4932f32a9 Related-Bug: 1250765",quality,,,,,,
openstack%2Fkeystone~master~Icadb4927bcf03ca7e79fef1507e419a4932f32a9,https://review.opendev.org/57979,refactor test_catalog,"refactor test_catalog  - Tests for ""missing"" attributes are actually testing with null values,   not missing keys. - Not being able to explicitly provide alternative URLs resulting in   hacky workarounds that can be avoiding by simply exposing kwargs with   reasonable defaults - Several tests redundantly asserted the expected response status, which   is already handled by the test framework  Change-Id: Icadb4927bcf03ca7e79fef1507e419a4932f32a9 Related-Bug: 1250765",objective,,,,,,
openstack%2Fkeystone~master~Ib28ec3b5dd96f662ce0cd90c650434b24c63ad6c,https://review.opendev.org/49062,Refactor assertEqualXML into a testtools matcher,Refactor assertEqualXML into a testtool matcher  Not all tests inheriting from TestCase will need to check XML equality. Moving this functionality to a matcher leaves it up to the test class to decided whether or not it needs it.  Change-Id: Ib28ec3b5dd96f662ce0cd90c650434b24c63ad6c Related-Bug: #1226466,testing,,,,,,
openstack%2Fkeystone~master~Ib28ec3b5dd96f662ce0cd90c650434b24c63ad6c,https://review.opendev.org/49062,Refactor assertEqualXML into a testtools matcher,Refactor assertEqualXML into a testtool matcher  Not all tests inheriting from TestCase will need to check XML equality. Moving this functionality to a matcher leaves it up to the test class to decided whether or not it needs it.  Change-Id: Ib28ec3b5dd96f662ce0cd90c650434b24c63ad6c Related-Bug: #1226466,quality,,,,,,
openstack%2Fkeystone~master~Ib28ec3b5dd96f662ce0cd90c650434b24c63ad6c,https://review.opendev.org/49062,Refactor assertEqualXML into a testtools matcher,Refactor assertEqualXML into a testtool matcher  Not all tests inheriting from TestCase will need to check XML equality. Moving this functionality to a matcher leaves it up to the test class to decided whether or not it needs it.  Change-Id: Ib28ec3b5dd96f662ce0cd90c650434b24c63ad6c Related-Bug: #1226466,objective,,,,,,
openstack%2Fgrenade~master~I3312732b8c344ce8844a82282a032e383e07e07c,https://review.opendev.org/57744,Refactor new options into a new config file.,"Refactor new options into a new config file.  From now on all releases configurations will be available, which will make easier to test more than two versions upgrade (meaning test upgrades like g->h->i). Note that grizzly files will not be necessary since we don't test folsom->grizzly  Change-Id: I3312732b8c344ce8844a82282a032e383e07e07c",testing,,,,,,
openstack%2Fgrenade~master~I3312732b8c344ce8844a82282a032e383e07e07c,https://review.opendev.org/57744,Refactor new options into a new config file.,"Refactor new options into a new config file.  From now on all releases configurations will be available, which will make easier to test more than two versions upgrade (meaning test upgrades like g->h->i). Note that grizzly files will not be necessary since we don't test folsom->grizzly  Change-Id: I3312732b8c344ce8844a82282a032e383e07e07c",objective,,,,,,
openstack%2Ffuel-ostf~3.2-fixes~Ib57df38dd8bafb3e828db3abb5ce4a34fe7b5f71,https://review.opendev.org/59000,"Fix server deletion issues, add test refactoring","Fix server deletion issues, add test refactoring  Meged with changes from 3.2-fixes  Change-Id: Ib57df38dd8bafb3e828db3abb5ce4a34fe7b5f71",testing,,,,,,
openstack%2Ffuel-ostf~3.2-fixes~Ib57df38dd8bafb3e828db3abb5ce4a34fe7b5f71,https://review.opendev.org/59000,"Fix server deletion issues, add test refactoring","Fix server deletion issues, add test refactoring  Meged with changes from 3.2-fixes  Change-Id: Ib57df38dd8bafb3e828db3abb5ce4a34fe7b5f71",quality,,,,,,
openstack%2Ffuel-ostf~3.2-fixes~Ib57df38dd8bafb3e828db3abb5ce4a34fe7b5f71,https://review.opendev.org/59000,"Fix server deletion issues, add test refactoring","Fix server deletion issues, add test refactoring  Meged with changes from 3.2-fixes  Change-Id: Ib57df38dd8bafb3e828db3abb5ce4a34fe7b5f71",objective,,,,,,
openstack%2Ffuel-ostf~master~Ib57df38dd8bafb3e828db3abb5ce4a34fe7b5f71,https://review.opendev.org/57282,"Fix server deletion issues, add test refactoring","Fix server deletion issues, add test refactoring  Change-Id: Ib57df38dd8bafb3e828db3abb5ce4a34fe7b5f71",testing,,,,,,
openstack%2Ffuel-ostf~master~Ib57df38dd8bafb3e828db3abb5ce4a34fe7b5f71,https://review.opendev.org/57282,"Fix server deletion issues, add test refactoring","Fix server deletion issues, add test refactoring  Change-Id: Ib57df38dd8bafb3e828db3abb5ce4a34fe7b5f71",quality,,,,,,
openstack%2Ffuel-ostf~master~Ib57df38dd8bafb3e828db3abb5ce4a34fe7b5f71,https://review.opendev.org/57282,"Fix server deletion issues, add test refactoring","Fix server deletion issues, add test refactoring  Change-Id: Ib57df38dd8bafb3e828db3abb5ce4a34fe7b5f71",objective,,,,,,
openstack%2Ffuel-ostf~master~I94ef205ee6d90426929746573c836f4de7cc7b24,https://review.opendev.org/55159,Discovering refactoring,Discovering refactoring  Discovering logic has been changed in order to perform some optimisation. Now discovering process takes place at the time of ostf-server startup and it loads to db all existing tests. Also some data from db (test set and corresponding to them tests data) is cached to provide fast access to this test repository in future. Further discovering for particualar cluster is done by adding to database some information that links needed test sets and tests with cluster. Linking process uses data from cache so discovering takes less time to be performed.  Change-Id: Ib8ce2c109a216e1e704d2050baaca71f3ad367ad  Discovering refactoring / non major fixes and tests refactoring  For TestRun class from models relationship for test sets via association_proxy() function was established. It is need because of some cleaning actions that are performed in standalone TestRun methods by nose plugin which consume data that is stored in test sets objects. Unit tests (except those for REST controllers) were updated. Some additional non-major refactoring was performed.  Change-Id: I94ef205ee6d90426929746573c836f4de7cc7b24,testing,,,,,,
openstack%2Ffuel-ostf~master~I94ef205ee6d90426929746573c836f4de7cc7b24,https://review.opendev.org/55159,Discovering refactoring,Discovering refactoring  Discovering logic has been changed in order to perform some optimisation. Now discovering process takes place at the time of ostf-server startup and it loads to db all existing tests. Also some data from db (test set and corresponding to them tests data) is cached to provide fast access to this test repository in future. Further discovering for particualar cluster is done by adding to database some information that links needed test sets and tests with cluster. Linking process uses data from cache so discovering takes less time to be performed.  Change-Id: Ib8ce2c109a216e1e704d2050baaca71f3ad367ad  Discovering refactoring / non major fixes and tests refactoring  For TestRun class from models relationship for test sets via association_proxy() function was established. It is need because of some cleaning actions that are performed in standalone TestRun methods by nose plugin which consume data that is stored in test sets objects. Unit tests (except those for REST controllers) were updated. Some additional non-major refactoring was performed.  Change-Id: I94ef205ee6d90426929746573c836f4de7cc7b24,integration,,,,,,
openstack%2Ffuel-ostf~master~I94ef205ee6d90426929746573c836f4de7cc7b24,https://review.opendev.org/55159,Discovering refactoring,Discovering refactoring  Discovering logic has been changed in order to perform some optimisation. Now discovering process takes place at the time of ostf-server startup and it loads to db all existing tests. Also some data from db (test set and corresponding to them tests data) is cached to provide fast access to this test repository in future. Further discovering for particualar cluster is done by adding to database some information that links needed test sets and tests with cluster. Linking process uses data from cache so discovering takes less time to be performed.  Change-Id: Ib8ce2c109a216e1e704d2050baaca71f3ad367ad  Discovering refactoring / non major fixes and tests refactoring  For TestRun class from models relationship for test sets via association_proxy() function was established. It is need because of some cleaning actions that are performed in standalone TestRun methods by nose plugin which consume data that is stored in test sets objects. Unit tests (except those for REST controllers) were updated. Some additional non-major refactoring was performed.  Change-Id: I94ef205ee6d90426929746573c836f4de7cc7b24,objective,,,,,,
openstack%2Ffuel-ostf~master~I94ef205ee6d90426929746573c836f4de7cc7b24,https://review.opendev.org/55159,Discovering refactoring,Discovering refactoring  Discovering logic has been changed in order to perform some optimisation. Now discovering process takes place at the time of ostf-server startup and it loads to db all existing tests. Also some data from db (test set and corresponding to them tests data) is cached to provide fast access to this test repository in future. Further discovering for particualar cluster is done by adding to database some information that links needed test sets and tests with cluster. Linking process uses data from cache so discovering takes less time to be performed.  Change-Id: Ib8ce2c109a216e1e704d2050baaca71f3ad367ad  Discovering refactoring / non major fixes and tests refactoring  For TestRun class from models relationship for test sets via association_proxy() function was established. It is need because of some cleaning actions that are performed in standalone TestRun methods by nose plugin which consume data that is stored in test sets objects. Unit tests (except those for REST controllers) were updated. Some additional non-major refactoring was performed.  Change-Id: I94ef205ee6d90426929746573c836f4de7cc7b24,quality,,,,,,
openstack%2Ftempest~master~I70aeda46ab9f44a6726b7e1f256ef511a2f84218,https://review.opendev.org/53053,Refactor duplicate isolated creds code,Refactor duplicate isolated creds code  The code to set the isolated credentials and the client manager for the compute and volume base test classes was duplicated. The duplicated code has been moved to tempest.test.BaseTestCase.  Closes-Bug: #1177411 Change-Id: I70aeda46ab9f44a6726b7e1f256ef511a2f84218,testing,,,,,,
openstack%2Ftempest~master~I70aeda46ab9f44a6726b7e1f256ef511a2f84218,https://review.opendev.org/53053,Refactor duplicate isolated creds code,Refactor duplicate isolated creds code  The code to set the isolated credentials and the client manager for the compute and volume base test classes was duplicated. The duplicated code has been moved to tempest.test.BaseTestCase.  Closes-Bug: #1177411 Change-Id: I70aeda46ab9f44a6726b7e1f256ef511a2f84218,quality,,,,,,
openstack%2Ftempest~master~I70aeda46ab9f44a6726b7e1f256ef511a2f84218,https://review.opendev.org/53053,Refactor duplicate isolated creds code,Refactor duplicate isolated creds code  The code to set the isolated credentials and the client manager for the compute and volume base test classes was duplicated. The duplicated code has been moved to tempest.test.BaseTestCase.  Closes-Bug: #1177411 Change-Id: I70aeda46ab9f44a6726b7e1f256ef511a2f84218,objective,,,,,,
openstack%2Ffuel-web~master~I8344a08bc7323cfb6ebc2c5f0dc113cc74fc62ef,https://review.opendev.org/52165,"Use static IP address instead of dhcp for admin network * pass netcfg/choose_interface parameter for Ubuntu and Centos\RedHat * pass to orchestrator static ip instead of dhcp for admin network * fix ip order for admin ips, it was broken for deployment   and provisioning assigned other ip addresses * small stylistic refactoring of network manager * fix test for capacity which some times fails","Use static IP address instead of dhcp for admin network * pass netcfg/choose_interface parameter for Ubuntu and Centos\RedHat * pass to orchestrator static ip instead of dhcp for admin network * fix ip order for admin ips, it was broken for deployment   and provisioning assigned other ip addresses * small stylistic refactoring of network manager * fix test for capacity which some times fails  Change-Id: I8344a08bc7323cfb6ebc2c5f0dc113cc74fc62ef",quality,,,,,,
openstack%2Ffuel-web~master~I8344a08bc7323cfb6ebc2c5f0dc113cc74fc62ef,https://review.opendev.org/52165,"Use static IP address instead of dhcp for admin network * pass netcfg/choose_interface parameter for Ubuntu and Centos\RedHat * pass to orchestrator static ip instead of dhcp for admin network * fix ip order for admin ips, it was broken for deployment   and provisioning assigned other ip addresses * small stylistic refactoring of network manager * fix test for capacity which some times fails","Use static IP address instead of dhcp for admin network * pass netcfg/choose_interface parameter for Ubuntu and Centos\RedHat * pass to orchestrator static ip instead of dhcp for admin network * fix ip order for admin ips, it was broken for deployment   and provisioning assigned other ip addresses * small stylistic refactoring of network manager * fix test for capacity which some times fails  Change-Id: I8344a08bc7323cfb6ebc2c5f0dc113cc74fc62ef",objective,,,,,,
openstack%2Ffuel-astute~master~Id3e0131819c33a96409578f05b3808765d6c0d08,https://review.opendev.org/51449,Refactoring of log preparation initial ubuntu progress bar * small refactoring * add support log progress for multiple OSes * create separate file for exceptions * fix indentations * remove pending test,Refactoring of log preparation initial ubuntu progress bar * small refactoring * add support log progress for multiple OSes * create separate file for exceptions * fix indentations * remove pending test  Tested by hand for centos/ubuntu in simple mode. More tests will be in next patches.  Change-Id: Id3e0131819c33a96409578f05b3808765d6c0d08,testing,,,,,,
openstack%2Ffuel-astute~master~Id3e0131819c33a96409578f05b3808765d6c0d08,https://review.opendev.org/51449,Refactoring of log preparation initial ubuntu progress bar * small refactoring * add support log progress for multiple OSes * create separate file for exceptions * fix indentations * remove pending test,Refactoring of log preparation initial ubuntu progress bar * small refactoring * add support log progress for multiple OSes * create separate file for exceptions * fix indentations * remove pending test  Tested by hand for centos/ubuntu in simple mode. More tests will be in next patches.  Change-Id: Id3e0131819c33a96409578f05b3808765d6c0d08,quality,,,,,,
openstack%2Ffuel-astute~master~Id3e0131819c33a96409578f05b3808765d6c0d08,https://review.opendev.org/51449,Refactoring of log preparation initial ubuntu progress bar * small refactoring * add support log progress for multiple OSes * create separate file for exceptions * fix indentations * remove pending test,Refactoring of log preparation initial ubuntu progress bar * small refactoring * add support log progress for multiple OSes * create separate file for exceptions * fix indentations * remove pending test  Tested by hand for centos/ubuntu in simple mode. More tests will be in next patches.  Change-Id: Id3e0131819c33a96409578f05b3808765d6c0d08,objective,,,,,,
openstack%2Ffuel-ostf~master~Ie9acfc6b57c4c3d2d1e5a7480929328fb193bf2c,https://review.opendev.org/50304,Field 'deployment_tags' for tests and test_sets alongside with migration to support these changes were added. To fabfile task that performs creation of new alembic migration was added. Additional refactoring and non-major fixes.,"Field 'deployment_tags' for tests and test_sets alongside with migration to support these changes were added. To fabfile task that performs creation of new alembic migration was added. Additional refactoring and non-major fixes.  cluster_id field was added for test_sets (migration script was supplied). Logic of discovering test_sets and tests was moved to controllers (test-set controller). Nose plugin was refactored. Tests was not be supplied for new features.  Test discovering in controllers. Models description and discovery logic changing  New pure init revision for alembic (other have been deleted). Some non-major refactoring to other files  All system was refactored in order to support new logic of discovering test_sets and tests in ostf runtime  Non-major fix in fabfile. For unit tests logic that controlls data writing to db from tests has been added. Test for nose_discovery have been supplied  Some non-major fixes to nose_discovery plugin. Unit tests for nose_discovery have been finished  deployments_types_tests were added for the purpose of testing new discovery behaviour and with intesions to keep logic defined with dummy_tests. Unit tests for nose discovery have been fixed.  New fake empty tests were added just to keep logic defined in dummy_tests  Unit tests for wsgi_controllers have been fixed  unit tests for wsgi controllers have been finished  Some fixes to wsgi contorollers (now test_set controller returns non first result from query but all; test controller return all tests with no test_run id present within it). Nose discovery function was fixed: now it searches for test_sets for given cluster id without checking data in db (in this case sqlalchemy merge should prevent from making dublicates). Some methods in nose_storage_plugin were fixed for the sake of supporting new behaviour of get_description function (with new addition value returning - deployment_tags). Attemptings to rewrite functional tests were made thus TestingAdapterClient was modified. Some other non-major fixes were added.  New changes to nose_discovery func (checking out of cluster's redeploying, implementing is not finished). Some changed to controllers (mostly to returning value). Nose discovery tests were changed in order to implement future changes. Proper processing of debug_tests path was added to wsgi_utils.  Some fixes to discovery logic and different tests  BaseTestingAdapter was simplified. Several functional tests have been fixed.  For Test class new element 'disabled' for statuses enumerate was added. New initial_migration was added (since models were modified). Functional tests were fixed to support new logic.  Smth strange with wsgi_utils.  Test for redeployed cluster were added to test_wsgi_controllers.py. multinode_deployment_tests were fixed.  Change-Id: Ie9acfc6b57c4c3d2d1e5a7480929328fb193bf2c",testing,,,,,,
openstack%2Ffuel-ostf~master~Ie9acfc6b57c4c3d2d1e5a7480929328fb193bf2c,https://review.opendev.org/50304,Field 'deployment_tags' for tests and test_sets alongside with migration to support these changes were added. To fabfile task that performs creation of new alembic migration was added. Additional refactoring and non-major fixes.,"Field 'deployment_tags' for tests and test_sets alongside with migration to support these changes were added. To fabfile task that performs creation of new alembic migration was added. Additional refactoring and non-major fixes.  cluster_id field was added for test_sets (migration script was supplied). Logic of discovering test_sets and tests was moved to controllers (test-set controller). Nose plugin was refactored. Tests was not be supplied for new features.  Test discovering in controllers. Models description and discovery logic changing  New pure init revision for alembic (other have been deleted). Some non-major refactoring to other files  All system was refactored in order to support new logic of discovering test_sets and tests in ostf runtime  Non-major fix in fabfile. For unit tests logic that controlls data writing to db from tests has been added. Test for nose_discovery have been supplied  Some non-major fixes to nose_discovery plugin. Unit tests for nose_discovery have been finished  deployments_types_tests were added for the purpose of testing new discovery behaviour and with intesions to keep logic defined with dummy_tests. Unit tests for nose discovery have been fixed.  New fake empty tests were added just to keep logic defined in dummy_tests  Unit tests for wsgi_controllers have been fixed  unit tests for wsgi controllers have been finished  Some fixes to wsgi contorollers (now test_set controller returns non first result from query but all; test controller return all tests with no test_run id present within it). Nose discovery function was fixed: now it searches for test_sets for given cluster id without checking data in db (in this case sqlalchemy merge should prevent from making dublicates). Some methods in nose_storage_plugin were fixed for the sake of supporting new behaviour of get_description function (with new addition value returning - deployment_tags). Attemptings to rewrite functional tests were made thus TestingAdapterClient was modified. Some other non-major fixes were added.  New changes to nose_discovery func (checking out of cluster's redeploying, implementing is not finished). Some changed to controllers (mostly to returning value). Nose discovery tests were changed in order to implement future changes. Proper processing of debug_tests path was added to wsgi_utils.  Some fixes to discovery logic and different tests  BaseTestingAdapter was simplified. Several functional tests have been fixed.  For Test class new element 'disabled' for statuses enumerate was added. New initial_migration was added (since models were modified). Functional tests were fixed to support new logic.  Smth strange with wsgi_utils.  Test for redeployed cluster were added to test_wsgi_controllers.py. multinode_deployment_tests were fixed.  Change-Id: Ie9acfc6b57c4c3d2d1e5a7480929328fb193bf2c",objective,,,,,,
openstack%2Fnova~master~Ie54fface139e4ad042b9a748c7409c3698875413,https://review.opendev.org/48205,Refactor test cases related to instance object,"Refactor test cases related to instance oject  After the blueprint unified-object-model, all of the instance should be represtend by an instance object but not a db instance dict.  But for some test cases, they were still using db instance dict, we should change those test cases to use instance object.  The fix include three parts: 1) Add a new stub method fake_fault_obj in nova/tests/fake_instance.py to help convert a dict fault to an object fault. 2) Add a new stub method fake_instance_obj in nova/tests/fake_instance.py to help convert a dict instance to an object instance. 3) Make sure all test cases related to ""fault"" and ""instance"" passed.  Fix bug 1230125 Fix part of bug 1212915  Change-Id: Ie54fface139e4ad042b9a748c7409c3698875413",testing,,,,,,
openstack%2Fnova~master~Ie54fface139e4ad042b9a748c7409c3698875413,https://review.opendev.org/48205,Refactor test cases related to instance object,"Refactor test cases related to instance oject  After the blueprint unified-object-model, all of the instance should be represtend by an instance object but not a db instance dict.  But for some test cases, they were still using db instance dict, we should change those test cases to use instance object.  The fix include three parts: 1) Add a new stub method fake_fault_obj in nova/tests/fake_instance.py to help convert a dict fault to an object fault. 2) Add a new stub method fake_instance_obj in nova/tests/fake_instance.py to help convert a dict instance to an object instance. 3) Make sure all test cases related to ""fault"" and ""instance"" passed.  Fix bug 1230125 Fix part of bug 1212915  Change-Id: Ie54fface139e4ad042b9a748c7409c3698875413",quality,,,,,,
openstack%2Fnova~master~Ie54fface139e4ad042b9a748c7409c3698875413,https://review.opendev.org/48205,Refactor test cases related to instance object,"Refactor test cases related to instance oject  After the blueprint unified-object-model, all of the instance should be represtend by an instance object but not a db instance dict.  But for some test cases, they were still using db instance dict, we should change those test cases to use instance object.  The fix include three parts: 1) Add a new stub method fake_fault_obj in nova/tests/fake_instance.py to help convert a dict fault to an object fault. 2) Add a new stub method fake_instance_obj in nova/tests/fake_instance.py to help convert a dict instance to an object instance. 3) Make sure all test cases related to ""fault"" and ""instance"" passed.  Fix bug 1230125 Fix part of bug 1212915  Change-Id: Ie54fface139e4ad042b9a748c7409c3698875413",integration,,,,,,
openstack%2Fnova~master~Ie54fface139e4ad042b9a748c7409c3698875413,https://review.opendev.org/48205,Refactor test cases related to instance object,"Refactor test cases related to instance oject  After the blueprint unified-object-model, all of the instance should be represtend by an instance object but not a db instance dict.  But for some test cases, they were still using db instance dict, we should change those test cases to use instance object.  The fix include three parts: 1) Add a new stub method fake_fault_obj in nova/tests/fake_instance.py to help convert a dict fault to an object fault. 2) Add a new stub method fake_instance_obj in nova/tests/fake_instance.py to help convert a dict instance to an object instance. 3) Make sure all test cases related to ""fault"" and ""instance"" passed.  Fix bug 1230125 Fix part of bug 1212915  Change-Id: Ie54fface139e4ad042b9a748c7409c3698875413",objective,,,,,,
openstack%2Fsahara~master~I157e8aaf8a6542a79dd336650c978d096d40000b,https://review.opendev.org/43925,Integration test refactoring,Integration test refactoring  * Test for Haddop configs was changed; * Helper script for Hadoop config testing was changed; * File base.py was changed.  Change-Id: I157e8aaf8a6542a79dd336650c978d096d40000b,testing,,,,,,
openstack%2Fsahara~master~I157e8aaf8a6542a79dd336650c978d096d40000b,https://review.opendev.org/43925,Integration test refactoring,Integration test refactoring  * Test for Haddop configs was changed; * Helper script for Hadoop config testing was changed; * File base.py was changed.  Change-Id: I157e8aaf8a6542a79dd336650c978d096d40000b,objective,,,,,,
openstack%2Fsahara~master~I157e8aaf8a6542a79dd336650c978d096d40000b,https://review.opendev.org/43925,Integration test refactoring,Integration test refactoring  * Test for Haddop configs was changed; * Helper script for Hadoop config testing was changed; * File base.py was changed.  Change-Id: I157e8aaf8a6542a79dd336650c978d096d40000b,quality,,,,,,
x%2Fcloudroast~master~I8a4fd4dd52e99f5a1cdfe42c4bc33ca8a9adb8f8,https://review.opendev.org/47918,Subject: refactor container smoke test,Subject: refactor container smoke test  * changed assertion messages * moved container and object creation to the setupClass * added a tearDownClass  Change-Id: I8a4fd4dd52e99f5a1cdfe42c4bc33ca8a9adb8f8,testing,,,,,,
x%2Fcloudroast~master~I8a4fd4dd52e99f5a1cdfe42c4bc33ca8a9adb8f8,https://review.opendev.org/47918,Subject: refactor container smoke test,Subject: refactor container smoke test  * changed assertion messages * moved container and object creation to the setupClass * added a tearDownClass  Change-Id: I8a4fd4dd52e99f5a1cdfe42c4bc33ca8a9adb8f8,objective,,,,,,
openstack%2Fceilometer~master~I502aebbab51c51970ddb68641dab89944ce810d4,https://review.opendev.org/46175,refactor db2 get_meter_statistics method to support mongodb and db2,refactor db2 get_meter_statistics method to support mongodb and db2  db2 driver for get_meter_statistics method did not work against mongodb which caused many test cases being skipped. This patch set will fix that problem also made sure that all statistics functions are supported by db2 driver against db2 and mongodb database  Change-Id: I502aebbab51c51970ddb68641dab89944ce810d4,testing,,,,,,
openstack%2Fceilometer~master~I502aebbab51c51970ddb68641dab89944ce810d4,https://review.opendev.org/46175,refactor db2 get_meter_statistics method to support mongodb and db2,refactor db2 get_meter_statistics method to support mongodb and db2  db2 driver for get_meter_statistics method did not work against mongodb which caused many test cases being skipped. This patch set will fix that problem also made sure that all statistics functions are supported by db2 driver against db2 and mongodb database  Change-Id: I502aebbab51c51970ddb68641dab89944ce810d4,objective,,,,,,
openstack%2Fceilometer~master~I502aebbab51c51970ddb68641dab89944ce810d4,https://review.opendev.org/46175,refactor db2 get_meter_statistics method to support mongodb and db2,refactor db2 get_meter_statistics method to support mongodb and db2  db2 driver for get_meter_statistics method did not work against mongodb which caused many test cases being skipped. This patch set will fix that problem also made sure that all statistics functions are supported by db2 driver against db2 and mongodb database  Change-Id: I502aebbab51c51970ddb68641dab89944ce810d4,integration,,,,,,
openstack%2Frally~master~Ibcef9637b17d181dd4cff5656d510de24a600a1c,https://review.opendev.org/45941,Slight refactoring of the testcase for Tester.run(),Slight refactoring of the Tester.run() method  This is a slight refactoring of the test case for the utils.Tester.run() method which removes code duplicate and adds one extra assertion (the method is a really central one for Rally and should be carefully tested).  Blueprint test-engine  Change-Id: Ibcef9637b17d181dd4cff5656d510de24a600a1c,testing,,,,,,
openstack%2Frally~master~Ibcef9637b17d181dd4cff5656d510de24a600a1c,https://review.opendev.org/45941,Slight refactoring of the testcase for Tester.run(),Slight refactoring of the Tester.run() method  This is a slight refactoring of the test case for the utils.Tester.run() method which removes code duplicate and adds one extra assertion (the method is a really central one for Rally and should be carefully tested).  Blueprint test-engine  Change-Id: Ibcef9637b17d181dd4cff5656d510de24a600a1c,objective,,,,,,
openstack%2Frally~master~Ibcef9637b17d181dd4cff5656d510de24a600a1c,https://review.opendev.org/45941,Slight refactoring of the testcase for Tester.run(),Slight refactoring of the Tester.run() method  This is a slight refactoring of the test case for the utils.Tester.run() method which removes code duplicate and adds one extra assertion (the method is a really central one for Rally and should be carefully tested).  Blueprint test-engine  Change-Id: Ibcef9637b17d181dd4cff5656d510de24a600a1c,quality,,,,,,
openstack%2Fcinder~master~I7ff2cc1e0d058b7a3d9e55644769ec74075f962f,https://review.opendev.org/41730,Refactor huawei Dorado array iSCSI driver,"Refactor huawei Dorado array iSCSI driver  This is the second patch, changes as follows: 1.Add ISCSIDriver for Dorado arrays. The ISCSIDriver inherit from T. 1.Add a common class DoradoCommon for both FC and iSCSI drivers. The common class inherit from T common for they have many common functions. 2.Add unit test for Dorado drivers.  Change-Id: I7ff2cc1e0d058b7a3d9e55644769ec74075f962f",testing,,,,,,
openstack%2Fcinder~master~I7ff2cc1e0d058b7a3d9e55644769ec74075f962f,https://review.opendev.org/41730,Refactor huawei Dorado array iSCSI driver,"Refactor huawei Dorado array iSCSI driver  This is the second patch, changes as follows: 1.Add ISCSIDriver for Dorado arrays. The ISCSIDriver inherit from T. 1.Add a common class DoradoCommon for both FC and iSCSI drivers. The common class inherit from T common for they have many common functions. 2.Add unit test for Dorado drivers.  Change-Id: I7ff2cc1e0d058b7a3d9e55644769ec74075f962f",quality,,,,,,
openstack%2Fcinder~master~I7ff2cc1e0d058b7a3d9e55644769ec74075f962f,https://review.opendev.org/41730,Refactor huawei Dorado array iSCSI driver,"Refactor huawei Dorado array iSCSI driver  This is the second patch, changes as follows: 1.Add ISCSIDriver for Dorado arrays. The ISCSIDriver inherit from T. 1.Add a common class DoradoCommon for both FC and iSCSI drivers. The common class inherit from T common for they have many common functions. 2.Add unit test for Dorado drivers.  Change-Id: I7ff2cc1e0d058b7a3d9e55644769ec74075f962f",objective,,,,,,
openstack%2Fzaqar~master~Ife236abf867b678beb72ea3a26a06d895ed8ad4b,https://review.opendev.org/43388,Refactor System Tests,"Refactor System Tests  This patch, 1. Renames 'System Tests' to 'Functional Tests'. 2. Reduces LOC by using ddt. 3. Removes test dependencies & the numbering convention used earlier. 4. Re-organizes the test suite structure.  blueprint refactor-system-tests  Change-Id: Ife236abf867b678beb72ea3a26a06d895ed8ad4b",testing,,,,,,
openstack%2Fzaqar~master~Ife236abf867b678beb72ea3a26a06d895ed8ad4b,https://review.opendev.org/43388,Refactor System Tests,"Refactor System Tests  This patch, 1. Renames 'System Tests' to 'Functional Tests'. 2. Reduces LOC by using ddt. 3. Removes test dependencies & the numbering convention used earlier. 4. Re-organizes the test suite structure.  blueprint refactor-system-tests  Change-Id: Ife236abf867b678beb72ea3a26a06d895ed8ad4b",quality,,,,,,
openstack%2Fzaqar~master~Ife236abf867b678beb72ea3a26a06d895ed8ad4b,https://review.opendev.org/43388,Refactor System Tests,"Refactor System Tests  This patch, 1. Renames 'System Tests' to 'Functional Tests'. 2. Reduces LOC by using ddt. 3. Removes test dependencies & the numbering convention used earlier. 4. Re-organizes the test suite structure.  blueprint refactor-system-tests  Change-Id: Ife236abf867b678beb72ea3a26a06d895ed8ad4b",objective,,,,,,
x%2Fpython-tuskarclient~master~I25e2d1df6b68c5d3cbd5cd1de5cf3c2df5828d4e,https://review.opendev.org/42833,Adds tests for client module and refactors,Adds tests for client module and refactors  Refactors client/get_client() function into separate client/_get_client_with_token() and client/_get_client_with_credentials().  Refactors some dict manipulation from test into tests/utils.  Raises ValueError in client/get_client() when kwargs do not meet requirements.  Adds tests for client/_get_client_with_token() Adds tests for client._get_client_with_credentials() Adds tests for client/_get_token_and_endpoint() Adds tests for client/get_client() Adds test for client/Client()  Change-Id: I25e2d1df6b68c5d3cbd5cd1de5cf3c2df5828d4e,testing,,,,,,
x%2Fpython-tuskarclient~master~I25e2d1df6b68c5d3cbd5cd1de5cf3c2df5828d4e,https://review.opendev.org/42833,Adds tests for client module and refactors,Adds tests for client module and refactors  Refactors client/get_client() function into separate client/_get_client_with_token() and client/_get_client_with_credentials().  Refactors some dict manipulation from test into tests/utils.  Raises ValueError in client/get_client() when kwargs do not meet requirements.  Adds tests for client/_get_client_with_token() Adds tests for client._get_client_with_credentials() Adds tests for client/_get_token_and_endpoint() Adds tests for client/get_client() Adds test for client/Client()  Change-Id: I25e2d1df6b68c5d3cbd5cd1de5cf3c2df5828d4e,quality,,,,,,
x%2Fpython-tuskarclient~master~I25e2d1df6b68c5d3cbd5cd1de5cf3c2df5828d4e,https://review.opendev.org/42833,Adds tests for client module and refactors,Adds tests for client module and refactors  Refactors client/get_client() function into separate client/_get_client_with_token() and client/_get_client_with_credentials().  Refactors some dict manipulation from test into tests/utils.  Raises ValueError in client/get_client() when kwargs do not meet requirements.  Adds tests for client/_get_client_with_token() Adds tests for client._get_client_with_credentials() Adds tests for client/_get_token_and_endpoint() Adds tests for client/get_client() Adds test for client/Client()  Change-Id: I25e2d1df6b68c5d3cbd5cd1de5cf3c2df5828d4e,objective,,,,,,
openstack%2Fceilometer~master~I94955ca1cead3f7c7e04b57b9ce1313324e4a349,https://review.opendev.org/43071,Refactored storage tests to use testscenarios,Refactored storage tests to use testscenarios  This refactore storage tests to use testscenarios  The test_impl_* files now have only test related the a particular backend.  All common tests are in test_impl_scenarios.py (previously named base.py)  Parts of blueprint db-tests-with-scenarios  Change-Id: I94955ca1cead3f7c7e04b57b9ce1313324e4a349,testing,,,,,,
openstack%2Fceilometer~master~I94955ca1cead3f7c7e04b57b9ce1313324e4a349,https://review.opendev.org/43071,Refactored storage tests to use testscenarios,Refactored storage tests to use testscenarios  This refactore storage tests to use testscenarios  The test_impl_* files now have only test related the a particular backend.  All common tests are in test_impl_scenarios.py (previously named base.py)  Parts of blueprint db-tests-with-scenarios  Change-Id: I94955ca1cead3f7c7e04b57b9ce1313324e4a349,quality,,,,,,
openstack%2Fceilometer~master~I94955ca1cead3f7c7e04b57b9ce1313324e4a349,https://review.opendev.org/43071,Refactored storage tests to use testscenarios,Refactored storage tests to use testscenarios  This refactore storage tests to use testscenarios  The test_impl_* files now have only test related the a particular backend.  All common tests are in test_impl_scenarios.py (previously named base.py)  Parts of blueprint db-tests-with-scenarios  Change-Id: I94955ca1cead3f7c7e04b57b9ce1313324e4a349,objective,,,,,,
openstack%2Fnova~master~Ic7d7b513c3bc19ac1962c0a8489b55e9685fb7c0,https://review.opendev.org/38608,Refactor integrated tests to support V2 and V3 API testing,Refactor integrated tests  Refactors the integrated test classes so they can be used for both V2 and V3 API testing. No actual V3 testing is added in this changeset  Partially implements v3-api-unittests Partially implements v3-api-specification  Change-Id: Ic7d7b513c3bc19ac1962c0a8489b55e9685fb7c0,testing,,,,,,
openstack%2Fnova~master~Ic7d7b513c3bc19ac1962c0a8489b55e9685fb7c0,https://review.opendev.org/38608,Refactor integrated tests to support V2 and V3 API testing,Refactor integrated tests  Refactors the integrated test classes so they can be used for both V2 and V3 API testing. No actual V3 testing is added in this changeset  Partially implements v3-api-unittests Partially implements v3-api-specification  Change-Id: Ic7d7b513c3bc19ac1962c0a8489b55e9685fb7c0,integration,,,,,,
openstack%2Fnova~master~Ic7d7b513c3bc19ac1962c0a8489b55e9685fb7c0,https://review.opendev.org/38608,Refactor integrated tests to support V2 and V3 API testing,Refactor integrated tests  Refactors the integrated test classes so they can be used for both V2 and V3 API testing. No actual V3 testing is added in this changeset  Partially implements v3-api-unittests Partially implements v3-api-specification  Change-Id: Ic7d7b513c3bc19ac1962c0a8489b55e9685fb7c0,objective,,,,,,
openstack%2Fheat~master~I5053c53a3eebf5f43cddfb96ee63a1f4f8615e76,https://review.opendev.org/38094,Refactor the code in heat/tests/test_volume.py,Refactor the code in heat/tests/test_volume.py  The test code in heat/tests/test_volume.py has lots of duplicated code and logic. Extract them into common method and reuse the methods.  Change-Id: I5053c53a3eebf5f43cddfb96ee63a1f4f8615e76,testing,,,,,,
openstack%2Fheat~master~I5053c53a3eebf5f43cddfb96ee63a1f4f8615e76,https://review.opendev.org/38094,Refactor the code in heat/tests/test_volume.py,Refactor the code in heat/tests/test_volume.py  The test code in heat/tests/test_volume.py has lots of duplicated code and logic. Extract them into common method and reuse the methods.  Change-Id: I5053c53a3eebf5f43cddfb96ee63a1f4f8615e76,quality,,,,,,
openstack%2Fheat~master~I5053c53a3eebf5f43cddfb96ee63a1f4f8615e76,https://review.opendev.org/38094,Refactor the code in heat/tests/test_volume.py,Refactor the code in heat/tests/test_volume.py  The test code in heat/tests/test_volume.py has lots of duplicated code and logic. Extract them into common method and reuse the methods.  Change-Id: I5053c53a3eebf5f43cddfb96ee63a1f4f8615e76,objective,,,,,,
openstack%2Fneutron~master~I3a52423bb5813547345677dc49abfea6563dd6cd,https://review.opendev.org/35807,Refactor unit tests for NEC Plugin,"Refactor unit tests for NEC Plugin  blueprint nec-plugin-test-coverage  This commit refactors the base class of unit tests for NEC Plugin to make writing new tests easier.  Add fake OFC Manager and change unit tests which use OFC Manager mock to using this fake.  With this fake, we don't need to set return_value and side_effect to the mock instance of OFC Manager in each test case. This fake keeps all resources on OFC, and returns existence of resources properly.  This fake is attached to OFC Manager mock instance by setting all side_effects.  We can also set it to raise an exception.  Make NEC Plugin configurable in each test case.  Now we can configure NEC Plugin by setting string in class value ""_nec_ini"" which will be written into a temporal file and loaded by NEC plugin.  Move setup for callbacks into NecPluginV2TestCase() so that other unit tests can use callbacks.  Change-Id: I3a52423bb5813547345677dc49abfea6563dd6cd",testing,,,,,,
openstack%2Fneutron~master~I3a52423bb5813547345677dc49abfea6563dd6cd,https://review.opendev.org/35807,Refactor unit tests for NEC Plugin,"Refactor unit tests for NEC Plugin  blueprint nec-plugin-test-coverage  This commit refactors the base class of unit tests for NEC Plugin to make writing new tests easier.  Add fake OFC Manager and change unit tests which use OFC Manager mock to using this fake.  With this fake, we don't need to set return_value and side_effect to the mock instance of OFC Manager in each test case. This fake keeps all resources on OFC, and returns existence of resources properly.  This fake is attached to OFC Manager mock instance by setting all side_effects.  We can also set it to raise an exception.  Make NEC Plugin configurable in each test case.  Now we can configure NEC Plugin by setting string in class value ""_nec_ini"" which will be written into a temporal file and loaded by NEC plugin.  Move setup for callbacks into NecPluginV2TestCase() so that other unit tests can use callbacks.  Change-Id: I3a52423bb5813547345677dc49abfea6563dd6cd",quality,,,,,,
openstack%2Fneutron~master~I3a52423bb5813547345677dc49abfea6563dd6cd,https://review.opendev.org/35807,Refactor unit tests for NEC Plugin,"Refactor unit tests for NEC Plugin  blueprint nec-plugin-test-coverage  This commit refactors the base class of unit tests for NEC Plugin to make writing new tests easier.  Add fake OFC Manager and change unit tests which use OFC Manager mock to using this fake.  With this fake, we don't need to set return_value and side_effect to the mock instance of OFC Manager in each test case. This fake keeps all resources on OFC, and returns existence of resources properly.  This fake is attached to OFC Manager mock instance by setting all side_effects.  We can also set it to raise an exception.  Make NEC Plugin configurable in each test case.  Now we can configure NEC Plugin by setting string in class value ""_nec_ini"" which will be written into a temporal file and loaded by NEC plugin.  Move setup for callbacks into NecPluginV2TestCase() so that other unit tests can use callbacks.  Change-Id: I3a52423bb5813547345677dc49abfea6563dd6cd",objective,,,,,,
openstack%2Fglance~master~Id4d68ccb223205f27bed0c1e9d3072b51310b979,https://review.opendev.org/33387,Refactor unsupported default store testing,Refactor unsupported default store testing  This change improves coverage while saving ~10 seconds per test run.  Part of bp:faster-better-stronger-functional-tests  Change-Id: Id4d68ccb223205f27bed0c1e9d3072b51310b979,testing,,,,,,
openstack%2Fglance~master~Id4d68ccb223205f27bed0c1e9d3072b51310b979,https://review.opendev.org/33387,Refactor unsupported default store testing,Refactor unsupported default store testing  This change improves coverage while saving ~10 seconds per test run.  Part of bp:faster-better-stronger-functional-tests  Change-Id: Id4d68ccb223205f27bed0c1e9d3072b51310b979,quality,,,,,,
openstack%2Fglance~master~Id4d68ccb223205f27bed0c1e9d3072b51310b979,https://review.opendev.org/33387,Refactor unsupported default store testing,Refactor unsupported default store testing  This change improves coverage while saving ~10 seconds per test run.  Part of bp:faster-better-stronger-functional-tests  Change-Id: Id4d68ccb223205f27bed0c1e9d3072b51310b979,objective,,,,,,
openstack%2Fnova~master~Ia4fdfdd3da58dcf6a04f96de7df7672bfc1200c5,https://review.opendev.org/31929,Refactored tests for instance_actions_*,Refactored tests for instance_actions_*  Moved tests to separate test case Improved test assertions Added tests to cover exceptions in db.api  blueprint db-api-tests  Change-Id: Ia4fdfdd3da58dcf6a04f96de7df7672bfc1200c5,testing,,,,,,
openstack%2Fnova~master~Ia4fdfdd3da58dcf6a04f96de7df7672bfc1200c5,https://review.opendev.org/31929,Refactored tests for instance_actions_*,Refactored tests for instance_actions_*  Moved tests to separate test case Improved test assertions Added tests to cover exceptions in db.api  blueprint db-api-tests  Change-Id: Ia4fdfdd3da58dcf6a04f96de7df7672bfc1200c5,objective,,,,,,
openstack%2Fnova~master~Id0ac41520bd6b4161f9ad4c72dfb702592733975,https://review.opendev.org/31928,Refactored tests for instance_fault_*,Refactored tests for instance_fault_*  Moved tests to separate test case Improved test assertions  blueprint db-api-tests  Change-Id: Id0ac41520bd6b4161f9ad4c72dfb702592733975,testing,,,,,,
openstack%2Fnova~master~Id0ac41520bd6b4161f9ad4c72dfb702592733975,https://review.opendev.org/31928,Refactored tests for instance_fault_*,Refactored tests for instance_fault_*  Moved tests to separate test case Improved test assertions  blueprint db-api-tests  Change-Id: Id0ac41520bd6b4161f9ad4c72dfb702592733975,objective,,,,,,
openstack%2Fpbr~master~I3d28f5771e38b819f98a9af06aeb06529be7b302,https://review.opendev.org/31037,Refactor hooks file.,Refactor hooks file.  It was long and rambly. It's also in need of unittesting. So split it into some classes so that we can test the inputs and outputs more sensibly.  Change-Id: I3d28f5771e38b819f98a9af06aeb06529be7b302,testing,,,,,,
openstack%2Fpbr~master~I3d28f5771e38b819f98a9af06aeb06529be7b302,https://review.opendev.org/31037,Refactor hooks file.,Refactor hooks file.  It was long and rambly. It's also in need of unittesting. So split it into some classes so that we can test the inputs and outputs more sensibly.  Change-Id: I3d28f5771e38b819f98a9af06aeb06529be7b302,quality,,,,,,
openstack%2Fpbr~master~I3d28f5771e38b819f98a9af06aeb06529be7b302,https://review.opendev.org/31037,Refactor hooks file.,Refactor hooks file.  It was long and rambly. It's also in need of unittesting. So split it into some classes so that we can test the inputs and outputs more sensibly.  Change-Id: I3d28f5771e38b819f98a9af06aeb06529be7b302,objective,,,,,,
stackforge%2Fpuppet-openstack~master~I4a7b49d95957675be82c3b77958ae9d0c47eb4fa,https://review.opendev.org/28999,refactor of cinder manifests,refactor of cinder manifests  This commit refactors the cinder manifests to make them more consistent with other manifests:  * removed default value for keystone_password * removed the prefix cinder_ from class parameters (it is redundant) * set package_ensure defaults to present * removed extra package_ensure parameter * changed $iscsi_enabled to $volume_driver (this change is being done in anticipation of needing additional volume drivers) * add test coverage * simple updates to .gitignore  It also delete the openstack::cinder class b/c I could not seem to declare ::cinder while it existed.  Change-Id: I4a7b49d95957675be82c3b77958ae9d0c47eb4fa,testing,,,,,,
stackforge%2Fpuppet-openstack~master~I4a7b49d95957675be82c3b77958ae9d0c47eb4fa,https://review.opendev.org/28999,refactor of cinder manifests,refactor of cinder manifests  This commit refactors the cinder manifests to make them more consistent with other manifests:  * removed default value for keystone_password * removed the prefix cinder_ from class parameters (it is redundant) * set package_ensure defaults to present * removed extra package_ensure parameter * changed $iscsi_enabled to $volume_driver (this change is being done in anticipation of needing additional volume drivers) * add test coverage * simple updates to .gitignore  It also delete the openstack::cinder class b/c I could not seem to declare ::cinder while it existed.  Change-Id: I4a7b49d95957675be82c3b77958ae9d0c47eb4fa,quality,,,,,,
stackforge%2Fpuppet-openstack~master~I4a7b49d95957675be82c3b77958ae9d0c47eb4fa,https://review.opendev.org/28999,refactor of cinder manifests,refactor of cinder manifests  This commit refactors the cinder manifests to make them more consistent with other manifests:  * removed default value for keystone_password * removed the prefix cinder_ from class parameters (it is redundant) * set package_ensure defaults to present * removed extra package_ensure parameter * changed $iscsi_enabled to $volume_driver (this change is being done in anticipation of needing additional volume drivers) * add test coverage * simple updates to .gitignore  It also delete the openstack::cinder class b/c I could not seem to declare ::cinder while it existed.  Change-Id: I4a7b49d95957675be82c3b77958ae9d0c47eb4fa,objective,,,,,,
x%2Fcloudroast~master~Ia816bf632cc97612848f1a245bb7b40cd0ac8e1d,https://review.opendev.org/28691,Refactored admin flavors test,Refactored admin flavors test  * Removed original admin flavor test class * Added test_delete_flavor module * Fixed pep8 issues in existing code * Modified tests to use auto-generated ids  Change-Id: Ia816bf632cc97612848f1a245bb7b40cd0ac8e1d,testing,,,,,,
x%2Fcloudroast~master~Ia816bf632cc97612848f1a245bb7b40cd0ac8e1d,https://review.opendev.org/28691,Refactored admin flavors test,Refactored admin flavors test  * Removed original admin flavor test class * Added test_delete_flavor module * Fixed pep8 issues in existing code * Modified tests to use auto-generated ids  Change-Id: Ia816bf632cc97612848f1a245bb7b40cd0ac8e1d,objective,,,,,,
openstack%2Fzaqar~master~Iad2e4f728aa4826d99bec2c599e2947a87eb5945,https://review.opendev.org/28475,refactor: Hoist helpers.expect into package namespace,"refactor: Hoist helpers.expect into package namespace  It's silly to have to import a package's submodule directly, since in this case that only introduces another module name that the developer has to keep track of, just to gain access to a solitary function. This patch hoists marconi.tests.util.helpers.expect into marocni.tests.util so that it can be referenced more naturally by the test author.  Accordingly, the Hacking.rst guide has been updated to allow this sort of thing (with some discretion).  Implements: blueprint grizzly-debt Change-Id: Iad2e4f728aa4826d99bec2c599e2947a87eb5945",testing,,,,,,
openstack%2Fzaqar~master~Iad2e4f728aa4826d99bec2c599e2947a87eb5945,https://review.opendev.org/28475,refactor: Hoist helpers.expect into package namespace,"refactor: Hoist helpers.expect into package namespace  It's silly to have to import a package's submodule directly, since in this case that only introduces another module name that the developer has to keep track of, just to gain access to a solitary function. This patch hoists marconi.tests.util.helpers.expect into marocni.tests.util so that it can be referenced more naturally by the test author.  Accordingly, the Hacking.rst guide has been updated to allow this sort of thing (with some discretion).  Implements: blueprint grizzly-debt Change-Id: Iad2e4f728aa4826d99bec2c599e2947a87eb5945",quality,,,,,,
openstack%2Fzaqar~master~Iad2e4f728aa4826d99bec2c599e2947a87eb5945,https://review.opendev.org/28475,refactor: Hoist helpers.expect into package namespace,"refactor: Hoist helpers.expect into package namespace  It's silly to have to import a package's submodule directly, since in this case that only introduces another module name that the developer has to keep track of, just to gain access to a solitary function. This patch hoists marconi.tests.util.helpers.expect into marocni.tests.util so that it can be referenced more naturally by the test author.  Accordingly, the Hacking.rst guide has been updated to allow this sort of thing (with some discretion).  Implements: blueprint grizzly-debt Change-Id: Iad2e4f728aa4826d99bec2c599e2947a87eb5945",objective,,,,,,
stackforge%2Fpuppet-openstack_dev_env~master~If944160dfcc6b68b56f4f688d9d6dea314bf0c5a,https://review.opendev.org/26689,This code refactors the openstack test script,This code refactors the openstack test script  This script was updated so that I could test swift as well as cherry-pick commits from openstack's gerrit git repo.  it adds conditionally logic for when the repo is swift (to build out the swift test env which includes a puppetmaster)  it also adds a test_mode=puppet_swift which runs the basic swift smoke tests.  it also adds code so that I can run the gerrit cherry-pick command to test patches from gerrit that are being reviewed.  Change-Id: If944160dfcc6b68b56f4f688d9d6dea314bf0c5a,testing,,,,,,
stackforge%2Fpuppet-openstack_dev_env~master~If944160dfcc6b68b56f4f688d9d6dea314bf0c5a,https://review.opendev.org/26689,This code refactors the openstack test script,This code refactors the openstack test script  This script was updated so that I could test swift as well as cherry-pick commits from openstack's gerrit git repo.  it adds conditionally logic for when the repo is swift (to build out the swift test env which includes a puppetmaster)  it also adds a test_mode=puppet_swift which runs the basic swift smoke tests.  it also adds code so that I can run the gerrit cherry-pick command to test patches from gerrit that are being reviewed.  Change-Id: If944160dfcc6b68b56f4f688d9d6dea314bf0c5a,quality,,,,,,
stackforge%2Fpuppet-openstack_dev_env~master~If944160dfcc6b68b56f4f688d9d6dea314bf0c5a,https://review.opendev.org/26689,This code refactors the openstack test script,This code refactors the openstack test script  This script was updated so that I could test swift as well as cherry-pick commits from openstack's gerrit git repo.  it adds conditionally logic for when the repo is swift (to build out the swift test env which includes a puppetmaster)  it also adds a test_mode=puppet_swift which runs the basic swift smoke tests.  it also adds code so that I can run the gerrit cherry-pick command to test patches from gerrit that are being reviewed.  Change-Id: If944160dfcc6b68b56f4f688d9d6dea314bf0c5a,objective,,,,,,
openstack%2Fceilometer~master~I5e2ae2a2628de0d1e105c9d525c510fd356295d4,https://review.opendev.org/25154,Refactor DB tests,"Refactor DB tests  This is a big change but a necessary one. It moves all the database connection stuff, even for test purpose, in ceilometer.storage.impl_<backend> rather than redeclaring stuff inside the tests.db module. That means less code and the possibility to run the API test against various database backends for free.  Change-Id: I5e2ae2a2628de0d1e105c9d525c510fd356295d4 Signed-off-by: Julien Danjou <julien@danjou.info>",testing,,,,,,
openstack%2Fceilometer~master~I5e2ae2a2628de0d1e105c9d525c510fd356295d4,https://review.opendev.org/25154,Refactor DB tests,"Refactor DB tests  This is a big change but a necessary one. It moves all the database connection stuff, even for test purpose, in ceilometer.storage.impl_<backend> rather than redeclaring stuff inside the tests.db module. That means less code and the possibility to run the API test against various database backends for free.  Change-Id: I5e2ae2a2628de0d1e105c9d525c510fd356295d4 Signed-off-by: Julien Danjou <julien@danjou.info>",quality,,,,,,
openstack%2Fceilometer~master~I5e2ae2a2628de0d1e105c9d525c510fd356295d4,https://review.opendev.org/25154,Refactor DB tests,"Refactor DB tests  This is a big change but a necessary one. It moves all the database connection stuff, even for test purpose, in ceilometer.storage.impl_<backend> rather than redeclaring stuff inside the tests.db module. That means less code and the possibility to run the API test against various database backends for free.  Change-Id: I5e2ae2a2628de0d1e105c9d525c510fd356295d4 Signed-off-by: Julien Danjou <julien@danjou.info>",objective,,,,,,
openstack%2Fceilometer~master~I5e2ae2a2628de0d1e105c9d525c510fd356295d4,https://review.opendev.org/25154,Refactor DB tests,"Refactor DB tests  This is a big change but a necessary one. It moves all the database connection stuff, even for test purpose, in ceilometer.storage.impl_<backend> rather than redeclaring stuff inside the tests.db module. That means less code and the possibility to run the API test against various database backends for free.  Change-Id: I5e2ae2a2628de0d1e105c9d525c510fd356295d4 Signed-off-by: Julien Danjou <julien@danjou.info>",integration,,,,,,
openstack%2Fpython-troveclient~master~I7a965a498ab4607de145359697b7d5d976aaa4ff,https://review.opendev.org/24266,Refactored client code and test to consume XML,Refactored client code and test to consume XML  Change-Id: I7a965a498ab4607de145359697b7d5d976aaa4ff Fixes: bug #1154300,testing,,,,,,
openstack%2Fpython-troveclient~master~I7a965a498ab4607de145359697b7d5d976aaa4ff,https://review.opendev.org/24266,Refactored client code and test to consume XML,Refactored client code and test to consume XML  Change-Id: I7a965a498ab4607de145359697b7d5d976aaa4ff Fixes: bug #1154300,objective,,,,,,
openstack%2Fglance~master~I917cfefe266a98f6c63613ac071af2dd676d67a1,https://review.opendev.org/21362,Refactor data migration tests,Refactor data migration tests  This commit adds a more general framework for testing data transitions at any db migration. Based on the test migration framework in nova.  This commit also updates the 2 existing individual migration tests to use the new framework.  Change-Id: I917cfefe266a98f6c63613ac071af2dd676d67a1,testing,,,,,,
openstack%2Fglance~master~I917cfefe266a98f6c63613ac071af2dd676d67a1,https://review.opendev.org/21362,Refactor data migration tests,Refactor data migration tests  This commit adds a more general framework for testing data transitions at any db migration. Based on the test migration framework in nova.  This commit also updates the 2 existing individual migration tests to use the new framework.  Change-Id: I917cfefe266a98f6c63613ac071af2dd676d67a1,quality,,,,,,
openstack%2Fglance~master~I917cfefe266a98f6c63613ac071af2dd676d67a1,https://review.opendev.org/21362,Refactor data migration tests,Refactor data migration tests  This commit adds a more general framework for testing data transitions at any db migration. Based on the test migration framework in nova.  This commit also updates the 2 existing individual migration tests to use the new framework.  Change-Id: I917cfefe266a98f6c63613ac071af2dd676d67a1,objective,,,,,,
openstack%2Fglance~master~I917cfefe266a98f6c63613ac071af2dd676d67a1,https://review.opendev.org/21362,Refactor data migration tests,Refactor data migration tests  This commit adds a more general framework for testing data transitions at any db migration. Based on the test migration framework in nova.  This commit also updates the 2 existing individual migration tests to use the new framework.  Change-Id: I917cfefe266a98f6c63613ac071af2dd676d67a1,integration,,,,,,
openstack%2Fheat~master~I04e773a743ec210e90394e50d2bb70c70664e80e,https://review.opendev.org/21149,Refactor loguserdata.py so it can be tested.,Refactor loguserdata.py so it can be tested.  - Use distutils.version.LooseVersion for cloud-init version check - Fix bug 1100287 by setting the following modes:   - 0600 /var/log/heat-provision.log   - 0700 /var/lib/heat   - 0700 /var/lib/cloud/data/cfn-userdata (was 0111!) - Full test coverage except for where __name__ == '__main__' - File size has gone from 1218 bytes to 1636. If necessary we could reduce size in the future by using short names  This works for me when launching a template. At least if there are any regressions they can have a test written for the fix. Change-Id: I04e773a743ec210e90394e50d2bb70c70664e80e,testing,,,,,,
openstack%2Fheat~master~I04e773a743ec210e90394e50d2bb70c70664e80e,https://review.opendev.org/21149,Refactor loguserdata.py so it can be tested.,Refactor loguserdata.py so it can be tested.  - Use distutils.version.LooseVersion for cloud-init version check - Fix bug 1100287 by setting the following modes:   - 0600 /var/log/heat-provision.log   - 0700 /var/lib/heat   - 0700 /var/lib/cloud/data/cfn-userdata (was 0111!) - Full test coverage except for where __name__ == '__main__' - File size has gone from 1218 bytes to 1636. If necessary we could reduce size in the future by using short names  This works for me when launching a template. At least if there are any regressions they can have a test written for the fix. Change-Id: I04e773a743ec210e90394e50d2bb70c70664e80e,quality,,,,,,
openstack%2Fheat~master~I04e773a743ec210e90394e50d2bb70c70664e80e,https://review.opendev.org/21149,Refactor loguserdata.py so it can be tested.,Refactor loguserdata.py so it can be tested.  - Use distutils.version.LooseVersion for cloud-init version check - Fix bug 1100287 by setting the following modes:   - 0600 /var/log/heat-provision.log   - 0700 /var/lib/heat   - 0700 /var/lib/cloud/data/cfn-userdata (was 0111!) - Full test coverage except for where __name__ == '__main__' - File size has gone from 1218 bytes to 1636. If necessary we could reduce size in the future by using short names  This works for me when launching a template. At least if there are any regressions they can have a test written for the fix. Change-Id: I04e773a743ec210e90394e50d2bb70c70664e80e,objective,,,,,,
openstack%2Fnova~master~I645e69fcc7088674f063f619b2acbbee94d7ba61,https://review.opendev.org/20160,Refactor code for setting up libvirt disk mappings,"Refactor code for setting up libvirt disk mappings  Currently the libvirt disk bus is fixed at the time the driver is started. The get_guest_storage_config and _create_image methods thus use some variables initialized in the libvirt driver constructor to determine disk bus / dev name mappings.  It will shortly become possible to configure a different disk bus per instance, which invalidates the current assumptions in the code. A further complication is that the _create_image and get_guest_storage_config methods needs to duplicate each others logic for determining disk mapping.  To simplify the current code and make it more make flexible introduce a new get_guest_disk_mapping method. This method is responsible for examining the instance type and block device info dicts and figuring out the complete list of disks that will be attached to the guest & their optimal disk bus + dev name values. This info is returned in a dict and then passed to _create_image and get_guest_storage_config  Thus the logic for determining disk dev names is now isolated in one single place.  Many, many test cases are added to try to thoroughly validate the disk mapping code, since there are a huge set of possible configurations the user may request, making it easy to break the code accidentally.  Blueprint: libvirt-custom-hardware Change-Id: I645e69fcc7088674f063f619b2acbbee94d7ba61 Signed-off-by: Daniel P. Berrange <berrange@redhat.com>",testing,,,,,,
openstack%2Fnova~master~I645e69fcc7088674f063f619b2acbbee94d7ba61,https://review.opendev.org/20160,Refactor code for setting up libvirt disk mappings,"Refactor code for setting up libvirt disk mappings  Currently the libvirt disk bus is fixed at the time the driver is started. The get_guest_storage_config and _create_image methods thus use some variables initialized in the libvirt driver constructor to determine disk bus / dev name mappings.  It will shortly become possible to configure a different disk bus per instance, which invalidates the current assumptions in the code. A further complication is that the _create_image and get_guest_storage_config methods needs to duplicate each others logic for determining disk mapping.  To simplify the current code and make it more make flexible introduce a new get_guest_disk_mapping method. This method is responsible for examining the instance type and block device info dicts and figuring out the complete list of disks that will be attached to the guest & their optimal disk bus + dev name values. This info is returned in a dict and then passed to _create_image and get_guest_storage_config  Thus the logic for determining disk dev names is now isolated in one single place.  Many, many test cases are added to try to thoroughly validate the disk mapping code, since there are a huge set of possible configurations the user may request, making it easy to break the code accidentally.  Blueprint: libvirt-custom-hardware Change-Id: I645e69fcc7088674f063f619b2acbbee94d7ba61 Signed-off-by: Daniel P. Berrange <berrange@redhat.com>",quality,,,,,,
openstack%2Fnova~master~I645e69fcc7088674f063f619b2acbbee94d7ba61,https://review.opendev.org/20160,Refactor code for setting up libvirt disk mappings,"Refactor code for setting up libvirt disk mappings  Currently the libvirt disk bus is fixed at the time the driver is started. The get_guest_storage_config and _create_image methods thus use some variables initialized in the libvirt driver constructor to determine disk bus / dev name mappings.  It will shortly become possible to configure a different disk bus per instance, which invalidates the current assumptions in the code. A further complication is that the _create_image and get_guest_storage_config methods needs to duplicate each others logic for determining disk mapping.  To simplify the current code and make it more make flexible introduce a new get_guest_disk_mapping method. This method is responsible for examining the instance type and block device info dicts and figuring out the complete list of disks that will be attached to the guest & their optimal disk bus + dev name values. This info is returned in a dict and then passed to _create_image and get_guest_storage_config  Thus the logic for determining disk dev names is now isolated in one single place.  Many, many test cases are added to try to thoroughly validate the disk mapping code, since there are a huge set of possible configurations the user may request, making it easy to break the code accidentally.  Blueprint: libvirt-custom-hardware Change-Id: I645e69fcc7088674f063f619b2acbbee94d7ba61 Signed-off-by: Daniel P. Berrange <berrange@redhat.com>",objective,,,,,,
openstack%2Ftempest~master~I4af98ccf53c666ba38630fc3e79a2b3811ede595,https://review.opendev.org/19454,Refactor compute image tests,Refactor compute image tests  Several test cases are combined to use a single server instance instead of creating dozens of servers.  Bug: #1010980  Change-Id: I4af98ccf53c666ba38630fc3e79a2b3811ede595,testing,,,,,,
openstack%2Ftempest~master~I4af98ccf53c666ba38630fc3e79a2b3811ede595,https://review.opendev.org/19454,Refactor compute image tests,Refactor compute image tests  Several test cases are combined to use a single server instance instead of creating dozens of servers.  Bug: #1010980  Change-Id: I4af98ccf53c666ba38630fc3e79a2b3811ede595,quality,,,,,,
openstack%2Ftempest~master~I4af98ccf53c666ba38630fc3e79a2b3811ede595,https://review.opendev.org/19454,Refactor compute image tests,Refactor compute image tests  Several test cases are combined to use a single server instance instead of creating dozens of servers.  Bug: #1010980  Change-Id: I4af98ccf53c666ba38630fc3e79a2b3811ede595,objective,,,,,,
openstack%2Fnova~master~Ie5a17ec7fada26a9df5ba8a29ed0dadeb02516e8,https://review.opendev.org/14963,refactor: extract method: connect_volume,"refactor: extract method: connect_volume  Related to blueprint xenapi-volume-drivers  Extract connect_volume call from attach_volume, and a test for attach_volume.  Change-Id: Ie5a17ec7fada26a9df5ba8a29ed0dadeb02516e8",integration,,,,,,
openstack%2Fnova~master~Ie5a17ec7fada26a9df5ba8a29ed0dadeb02516e8,https://review.opendev.org/14963,refactor: extract method: connect_volume,"refactor: extract method: connect_volume  Related to blueprint xenapi-volume-drivers  Extract connect_volume call from attach_volume, and a test for attach_volume.  Change-Id: Ie5a17ec7fada26a9df5ba8a29ed0dadeb02516e8",objective,,,,,,
openstack%2Fnova~master~Ib0b856376417f140dc9ed114913f47a8a790b8a2,https://review.opendev.org/15525,Refactor resource tracker claims and test logic.,Refactor resource tracker claims and test logic.  In preparation for adding resize support to resource tracker:  * Claim class has been factored out of resource tracker. * Broke out claim testing logic for easier re-use  This patch is pre-work to ease adding resize claims to resource tracker:  bug 1065267  Change-Id: Ib0b856376417f140dc9ed114913f47a8a790b8a2,testing,,,,,,
openstack%2Fnova~master~Ib0b856376417f140dc9ed114913f47a8a790b8a2,https://review.opendev.org/15525,Refactor resource tracker claims and test logic.,Refactor resource tracker claims and test logic.  In preparation for adding resize support to resource tracker:  * Claim class has been factored out of resource tracker. * Broke out claim testing logic for easier re-use  This patch is pre-work to ease adding resize claims to resource tracker:  bug 1065267  Change-Id: Ib0b856376417f140dc9ed114913f47a8a790b8a2,quality,,,,,,
openstack%2Fnova~master~Ib0b856376417f140dc9ed114913f47a8a790b8a2,https://review.opendev.org/15525,Refactor resource tracker claims and test logic.,Refactor resource tracker claims and test logic.  In preparation for adding resize support to resource tracker:  * Claim class has been factored out of resource tracker. * Broke out claim testing logic for easier re-use  This patch is pre-work to ease adding resize claims to resource tracker:  bug 1065267  Change-Id: Ib0b856376417f140dc9ed114913f47a8a790b8a2,objective,,,,,,
openstack%2Ftempest~master~I0b38cf045520d93031c7916dae2479daf69d0411,https://review.opendev.org/14066,Refactor list servers negative test and fix remaining gate bugs,"Refactor list servers negative test and fix remaining gate bugs  test_list_servers_negative had so many issues with it, it's hard to list them here... but at least the following has been fixed:  * No longer will the test flatly delete all instances the tenant   and alt tenant have during every test method run (!!) * Fixtures -- 2 active and 1 deleted server -- are created in the   class' setUpClass() method instead of having test methods   constantly re-launch instances -- this reduces the test time   down about 3 minutes * Removed all non-negative tests * Removed all tests that were skipped due to bugs that have been * Skip the XML create_service() test for Identity Admin tests   because of the upstream Keystone bug 1061738  This patch also includes patches for bug fixes that Sean Gallagher contributed but needed to be rebased into this one in order to get the full gate to pass.  Change-Id: I0b38cf045520d93031c7916dae2479daf69d0411 fixes: LP bug #1059802 fixes: LP bug #1060373 fixes: LP bug #1061740 fixes: LP bug #1061167",testing,,,,,,
openstack%2Ftempest~master~I0b38cf045520d93031c7916dae2479daf69d0411,https://review.opendev.org/14066,Refactor list servers negative test and fix remaining gate bugs,"Refactor list servers negative test and fix remaining gate bugs  test_list_servers_negative had so many issues with it, it's hard to list them here... but at least the following has been fixed:  * No longer will the test flatly delete all instances the tenant   and alt tenant have during every test method run (!!) * Fixtures -- 2 active and 1 deleted server -- are created in the   class' setUpClass() method instead of having test methods   constantly re-launch instances -- this reduces the test time   down about 3 minutes * Removed all non-negative tests * Removed all tests that were skipped due to bugs that have been * Skip the XML create_service() test for Identity Admin tests   because of the upstream Keystone bug 1061738  This patch also includes patches for bug fixes that Sean Gallagher contributed but needed to be rebased into this one in order to get the full gate to pass.  Change-Id: I0b38cf045520d93031c7916dae2479daf69d0411 fixes: LP bug #1059802 fixes: LP bug #1060373 fixes: LP bug #1061740 fixes: LP bug #1061167",objective,,,,,,
openstack%2Ftempest~master~I0b38cf045520d93031c7916dae2479daf69d0411,https://review.opendev.org/14066,Refactor list servers negative test and fix remaining gate bugs,"Refactor list servers negative test and fix remaining gate bugs  test_list_servers_negative had so many issues with it, it's hard to list them here... but at least the following has been fixed:  * No longer will the test flatly delete all instances the tenant   and alt tenant have during every test method run (!!) * Fixtures -- 2 active and 1 deleted server -- are created in the   class' setUpClass() method instead of having test methods   constantly re-launch instances -- this reduces the test time   down about 3 minutes * Removed all non-negative tests * Removed all tests that were skipped due to bugs that have been * Skip the XML create_service() test for Identity Admin tests   because of the upstream Keystone bug 1061738  This patch also includes patches for bug fixes that Sean Gallagher contributed but needed to be rebased into this one in order to get the full gate to pass.  Change-Id: I0b38cf045520d93031c7916dae2479daf69d0411 fixes: LP bug #1059802 fixes: LP bug #1060373 fixes: LP bug #1061740 fixes: LP bug #1061167",quality,,,,,,
openstack%2Ftempest~master~I0b38cf045520d93031c7916dae2479daf69d0411,https://review.opendev.org/14066,Refactor list servers negative test and fix remaining gate bugs,"Refactor list servers negative test and fix remaining gate bugs  test_list_servers_negative had so many issues with it, it's hard to list them here... but at least the following has been fixed:  * No longer will the test flatly delete all instances the tenant   and alt tenant have during every test method run (!!) * Fixtures -- 2 active and 1 deleted server -- are created in the   class' setUpClass() method instead of having test methods   constantly re-launch instances -- this reduces the test time   down about 3 minutes * Removed all non-negative tests * Removed all tests that were skipped due to bugs that have been * Skip the XML create_service() test for Identity Admin tests   because of the upstream Keystone bug 1061738  This patch also includes patches for bug fixes that Sean Gallagher contributed but needed to be rebased into this one in order to get the full gate to pass.  Change-Id: I0b38cf045520d93031c7916dae2479daf69d0411 fixes: LP bug #1059802 fixes: LP bug #1060373 fixes: LP bug #1061740 fixes: LP bug #1061167",objective,,,,,,
zuul%2Fzuul~master~I336ac289af6ebd23567ac54b359c9f38af7f2ac7,https://review.opendev.org/12277,Refactor change queue.,"Refactor change queue.  Move most of the change queue logic into the model.  This should be a little cleaner, and it should be easier to follow what happens when a build is complete.  Run launch jobs over the whole queue. Collapse addChange into the base manager.  Makes reading the logic around adding a change simpler.  Several hooks are provided for the dependent manager subclass to extend the method around dependent changes.  Move onbuildcompleted and reporting methods to base class.  Simplifies the code path when a build is completed.  Move to a more generalized model where updates are applied to changes as received, then search for changes ready to be reported, then search for jobs that need to be launched.  Also,  * test check queue functionality  * assert all queues are empty at ends of tests  * move formatting methods to pipeline/queue classes  * add queue-only mode notification to status screen  Change-Id: I336ac289af6ebd23567ac54b359c9f38af7f2ac7 Reviewed-on: https://review.openstack.org/12277 Reviewed-by: Clark Boylan <clark.boylan@gmail.com> Approved: James E. Blair <corvus@inaugust.com> Tested-by: Jenkins",testing,,,,,,
zuul%2Fzuul~master~I336ac289af6ebd23567ac54b359c9f38af7f2ac7,https://review.opendev.org/12277,Refactor change queue.,"Refactor change queue.  Move most of the change queue logic into the model.  This should be a little cleaner, and it should be easier to follow what happens when a build is complete.  Run launch jobs over the whole queue. Collapse addChange into the base manager.  Makes reading the logic around adding a change simpler.  Several hooks are provided for the dependent manager subclass to extend the method around dependent changes.  Move onbuildcompleted and reporting methods to base class.  Simplifies the code path when a build is completed.  Move to a more generalized model where updates are applied to changes as received, then search for changes ready to be reported, then search for jobs that need to be launched.  Also,  * test check queue functionality  * assert all queues are empty at ends of tests  * move formatting methods to pipeline/queue classes  * add queue-only mode notification to status screen  Change-Id: I336ac289af6ebd23567ac54b359c9f38af7f2ac7 Reviewed-on: https://review.openstack.org/12277 Reviewed-by: Clark Boylan <clark.boylan@gmail.com> Approved: James E. Blair <corvus@inaugust.com> Tested-by: Jenkins",quality,,,,,,
zuul%2Fzuul~master~I336ac289af6ebd23567ac54b359c9f38af7f2ac7,https://review.opendev.org/12277,Refactor change queue.,"Refactor change queue.  Move most of the change queue logic into the model.  This should be a little cleaner, and it should be easier to follow what happens when a build is complete.  Run launch jobs over the whole queue. Collapse addChange into the base manager.  Makes reading the logic around adding a change simpler.  Several hooks are provided for the dependent manager subclass to extend the method around dependent changes.  Move onbuildcompleted and reporting methods to base class.  Simplifies the code path when a build is completed.  Move to a more generalized model where updates are applied to changes as received, then search for changes ready to be reported, then search for jobs that need to be launched.  Also,  * test check queue functionality  * assert all queues are empty at ends of tests  * move formatting methods to pipeline/queue classes  * add queue-only mode notification to status screen  Change-Id: I336ac289af6ebd23567ac54b359c9f38af7f2ac7 Reviewed-on: https://review.openstack.org/12277 Reviewed-by: Clark Boylan <clark.boylan@gmail.com> Approved: James E. Blair <corvus@inaugust.com> Tested-by: Jenkins",objective,,,,,,
openstack%2Fnova~milestone-proposed~Ie075d44165996fc4f744a49ddbdfd7c49a0c862e,https://review.opendev.org/11533,Refactor ComputeCapabilitiesFilter test cases,"Refactor ComputeCapabilitiesFilter test cases  With so much duplicated code in the test cases, it's really very difficult to figure out what each of the cases are testing. DRY the tests up to make them much more clear.  Change-Id: Ie075d44165996fc4f744a49ddbdfd7c49a0c862e (cherry picked from commit a2e9c717736f031f60033ff26138bf2fa302ce60)",testing,,,,,,
openstack%2Fnova~milestone-proposed~Ie075d44165996fc4f744a49ddbdfd7c49a0c862e,https://review.opendev.org/11533,Refactor ComputeCapabilitiesFilter test cases,"Refactor ComputeCapabilitiesFilter test cases  With so much duplicated code in the test cases, it's really very difficult to figure out what each of the cases are testing. DRY the tests up to make them much more clear.  Change-Id: Ie075d44165996fc4f744a49ddbdfd7c49a0c862e (cherry picked from commit a2e9c717736f031f60033ff26138bf2fa302ce60)",quality,,,,,,
openstack%2Fnova~milestone-proposed~Ie075d44165996fc4f744a49ddbdfd7c49a0c862e,https://review.opendev.org/11533,Refactor ComputeCapabilitiesFilter test cases,"Refactor ComputeCapabilitiesFilter test cases  With so much duplicated code in the test cases, it's really very difficult to figure out what each of the cases are testing. DRY the tests up to make them much more clear.  Change-Id: Ie075d44165996fc4f744a49ddbdfd7c49a0c862e (cherry picked from commit a2e9c717736f031f60033ff26138bf2fa302ce60)",objective,,,,,,
openstack%2Fnova~master~Ie075d44165996fc4f744a49ddbdfd7c49a0c862e,https://review.opendev.org/11458,Refactor ComputeCapabilitiesFilter test cases,"Refactor ComputeCapabilitiesFilter test cases  With so much duplicated code in the test cases, it's really very difficult to figure out what each of the cases are testing. DRY the tests up to make them much more clear.  Change-Id: Ie075d44165996fc4f744a49ddbdfd7c49a0c862e",testing,,,,,,
openstack%2Fnova~master~Ie075d44165996fc4f744a49ddbdfd7c49a0c862e,https://review.opendev.org/11458,Refactor ComputeCapabilitiesFilter test cases,"Refactor ComputeCapabilitiesFilter test cases  With so much duplicated code in the test cases, it's really very difficult to figure out what each of the cases are testing. DRY the tests up to make them much more clear.  Change-Id: Ie075d44165996fc4f744a49ddbdfd7c49a0c862e",quality,,,,,,
openstack%2Fnova~master~Ie075d44165996fc4f744a49ddbdfd7c49a0c862e,https://review.opendev.org/11458,Refactor ComputeCapabilitiesFilter test cases,"Refactor ComputeCapabilitiesFilter test cases  With so much duplicated code in the test cases, it's really very difficult to figure out what each of the cases are testing. DRY the tests up to make them much more clear.  Change-Id: Ie075d44165996fc4f744a49ddbdfd7c49a0c862e",objective,,,,,,
openstack%2Fpython-glanceclient~master~Ibc7fef9e2a5b24bd001d183d377901f302d650a9,https://review.opendev.org/11042,Refactor HTTP-related exceptions,Refactor HTTP-related exceptions  * Refactor helper function that builds the map of http status codes   to local http exceptions - now we don't have to explicitly list   every single exception name * Add several exceptions to represent http status codes that were not   previously represented * Improve consistency of exceptions naming by prepending 'HTTP' to   necessary exception names * Use HTTPException instead of ClientException * Deprecate old http exceptions (those that aren't prefixed with HTTP) * Deprecate ClientException * Deprecate unused NoTokenLookupException and EndpointNotFound * Add test module to spot-check the from_response helper  Change-Id: Ibc7fef9e2a5b24bd001d183d377901f302d650a9,testing,,,,,,
openstack%2Fpython-glanceclient~master~Ibc7fef9e2a5b24bd001d183d377901f302d650a9,https://review.opendev.org/11042,Refactor HTTP-related exceptions,Refactor HTTP-related exceptions  * Refactor helper function that builds the map of http status codes   to local http exceptions - now we don't have to explicitly list   every single exception name * Add several exceptions to represent http status codes that were not   previously represented * Improve consistency of exceptions naming by prepending 'HTTP' to   necessary exception names * Use HTTPException instead of ClientException * Deprecate old http exceptions (those that aren't prefixed with HTTP) * Deprecate ClientException * Deprecate unused NoTokenLookupException and EndpointNotFound * Add test module to spot-check the from_response helper  Change-Id: Ibc7fef9e2a5b24bd001d183d377901f302d650a9,quality,,,,,,
openstack%2Fpython-glanceclient~master~Ibc7fef9e2a5b24bd001d183d377901f302d650a9,https://review.opendev.org/11042,Refactor HTTP-related exceptions,Refactor HTTP-related exceptions  * Refactor helper function that builds the map of http status codes   to local http exceptions - now we don't have to explicitly list   every single exception name * Add several exceptions to represent http status codes that were not   previously represented * Improve consistency of exceptions naming by prepending 'HTTP' to   necessary exception names * Use HTTPException instead of ClientException * Deprecate old http exceptions (those that aren't prefixed with HTTP) * Deprecate ClientException * Deprecate unused NoTokenLookupException and EndpointNotFound * Add test module to spot-check the from_response helper  Change-Id: Ibc7fef9e2a5b24bd001d183d377901f302d650a9,objective,,,,,,
openstack%2Fnova~master~I400616081e1e547b9ca2e0be622889d3a399a5bf,https://review.opendev.org/10339,Refactor glance image service code,"Refactor glance image service code  Fixes bug 1029397  This adds better retry support, making sure that if we need to retry requests to glance, we cycle through all hosts before potentially attemping the hosts that failed.  The old random selection could cause immediate retrying of the same host that failed.  This also adds logging of the host:port that failed and fixes a bug in the retry test, which didn't actually successfully test retrying.  Tests for new code added.  Change-Id: I400616081e1e547b9ca2e0be622889d3a399a5bf",testing,,,,,,
openstack%2Fnova~master~I400616081e1e547b9ca2e0be622889d3a399a5bf,https://review.opendev.org/10339,Refactor glance image service code,"Refactor glance image service code  Fixes bug 1029397  This adds better retry support, making sure that if we need to retry requests to glance, we cycle through all hosts before potentially attemping the hosts that failed.  The old random selection could cause immediate retrying of the same host that failed.  This also adds logging of the host:port that failed and fixes a bug in the retry test, which didn't actually successfully test retrying.  Tests for new code added.  Change-Id: I400616081e1e547b9ca2e0be622889d3a399a5bf",quality,,,,,,
openstack%2Fnova~master~I400616081e1e547b9ca2e0be622889d3a399a5bf,https://review.opendev.org/10339,Refactor glance image service code,"Refactor glance image service code  Fixes bug 1029397  This adds better retry support, making sure that if we need to retry requests to glance, we cycle through all hosts before potentially attemping the hosts that failed.  The old random selection could cause immediate retrying of the same host that failed.  This also adds logging of the host:port that failed and fixes a bug in the retry test, which didn't actually successfully test retrying.  Tests for new code added.  Change-Id: I400616081e1e547b9ca2e0be622889d3a399a5bf",objective,,,,,,
openstack%2Fneutron~master~I31c5c51a3f7fa4b7cb068b7b93692411956e62ac,https://review.opendev.org/10037,Refactor the test cases so that all the test cases are under one test class.,Refactor the test cases so that all the test cases are under one test class.  Change-Id: I31c5c51a3f7fa4b7cb068b7b93692411956e62ac,testing,,,,,,
openstack%2Fneutron~master~I31c5c51a3f7fa4b7cb068b7b93692411956e62ac,https://review.opendev.org/10037,Refactor the test cases so that all the test cases are under one test class.,Refactor the test cases so that all the test cases are under one test class.  Change-Id: I31c5c51a3f7fa4b7cb068b7b93692411956e62ac,quality,,,,,,
openstack%2Fneutron~master~I31c5c51a3f7fa4b7cb068b7b93692411956e62ac,https://review.opendev.org/10037,Refactor the test cases so that all the test cases are under one test class.,Refactor the test cases so that all the test cases are under one test class.  Change-Id: I31c5c51a3f7fa4b7cb068b7b93692411956e62ac,objective,,,,,,
openstack%2Fglance~master~Ic08914cfa8135d73a4aae6724a6561bc337b91fb,https://review.opendev.org/9036,Refactor pagination db functional tests,Refactor pagination db functional tests  The pagination-related functional tests are overly complex and aren't adding a lot of value. This rewrites them in a more straightforward way by incorporating them into the main test class.  Related to bp refactor-db-layer  Change-Id: Ic08914cfa8135d73a4aae6724a6561bc337b91fb,testing,,,,,,
openstack%2Fglance~master~Ic08914cfa8135d73a4aae6724a6561bc337b91fb,https://review.opendev.org/9036,Refactor pagination db functional tests,Refactor pagination db functional tests  The pagination-related functional tests are overly complex and aren't adding a lot of value. This rewrites them in a more straightforward way by incorporating them into the main test class.  Related to bp refactor-db-layer  Change-Id: Ic08914cfa8135d73a4aae6724a6561bc337b91fb,quality,,,,,,
openstack%2Fglance~master~Ic08914cfa8135d73a4aae6724a6561bc337b91fb,https://review.opendev.org/9036,Refactor pagination db functional tests,Refactor pagination db functional tests  The pagination-related functional tests are overly complex and aren't adding a lot of value. This rewrites them in a more straightforward way by incorporating them into the main test class.  Related to bp refactor-db-layer  Change-Id: Ic08914cfa8135d73a4aae6724a6561bc337b91fb,objective,,,,,,
openstack%2Fglance~master~Ic08914cfa8135d73a4aae6724a6561bc337b91fb,https://review.opendev.org/9036,Refactor pagination db functional tests,Refactor pagination db functional tests  The pagination-related functional tests are overly complex and aren't adding a lot of value. This rewrites them in a more straightforward way by incorporating them into the main test class.  Related to bp refactor-db-layer  Change-Id: Ic08914cfa8135d73a4aae6724a6561bc337b91fb,integration,,,,,,
openstack%2Ftempest~master~I3ea4c44a8c194d7ae2833b5443df7678924bcd5d,https://review.opendev.org/8812,Refactor Tempest to be parallel-test friendly,"Refactor Tempest to be parallel-test friendly  * Allows a tenant/user to be created by the base test   class, allowing isolation of the tests * Moves identity admin stuff into appropriate directly * Puts _multiprocess_shared_ into base compute test class  Change-Id: I3ea4c44a8c194d7ae2833b5443df7678924bcd5d",testing,,,,,,
openstack%2Ftempest~master~I3ea4c44a8c194d7ae2833b5443df7678924bcd5d,https://review.opendev.org/8812,Refactor Tempest to be parallel-test friendly,"Refactor Tempest to be parallel-test friendly  * Allows a tenant/user to be created by the base test   class, allowing isolation of the tests * Moves identity admin stuff into appropriate directly * Puts _multiprocess_shared_ into base compute test class  Change-Id: I3ea4c44a8c194d7ae2833b5443df7678924bcd5d",objective,,,,,,
openstack%2Fkeystone~master~I7de592e7dd4518038436b9a9fdaab559b00a0537,https://review.opendev.org/6875,Refactor 404's into managers & drivers (bug 968519),"Refactor 404's into drivers (bug 968519)  The goal is to move the responsibility of reference checks away from controllers and into their underlying drivers, which can handle the task with equal or greater efficiency.  - Tenant references from create_user/update_user are NOT tested   due to inconsistencies between backends - Additional test coverage improvements  Change-Id: I7de592e7dd4518038436b9a9fdaab559b00a0537",testing,,,,,,
openstack%2Fkeystone~master~I7de592e7dd4518038436b9a9fdaab559b00a0537,https://review.opendev.org/6875,Refactor 404's into managers & drivers (bug 968519),"Refactor 404's into drivers (bug 968519)  The goal is to move the responsibility of reference checks away from controllers and into their underlying drivers, which can handle the task with equal or greater efficiency.  - Tenant references from create_user/update_user are NOT tested   due to inconsistencies between backends - Additional test coverage improvements  Change-Id: I7de592e7dd4518038436b9a9fdaab559b00a0537",quality,,,,,,
openstack%2Fkeystone~master~I7de592e7dd4518038436b9a9fdaab559b00a0537,https://review.opendev.org/6875,Refactor 404's into managers & drivers (bug 968519),"Refactor 404's into drivers (bug 968519)  The goal is to move the responsibility of reference checks away from controllers and into their underlying drivers, which can handle the task with equal or greater efficiency.  - Tenant references from create_user/update_user are NOT tested   due to inconsistencies between backends - Additional test coverage improvements  Change-Id: I7de592e7dd4518038436b9a9fdaab559b00a0537",objective,,,,,,
openstack%2Fhorizon~master~Ica33765660d0ed80f22c71bc96f122c3fc8b80cc,https://review.opendev.org/8894,JavaScript Refactor.,JavaScript Refactor.  Cleans up Horizon's JavaScript to make it properly modular and well-organized.  Adds unit tests written in QUnit for some of the JS modules as a starting point for the JS test framework. You can visit /qunit/ with DEBUG=True in your settings to access the JS test runner.  Fixes bug 961509.  Change-Id: Ica33765660d0ed80f22c71bc96f122c3fc8b80cc,testing,,,,,,
openstack%2Fhorizon~master~Ica33765660d0ed80f22c71bc96f122c3fc8b80cc,https://review.opendev.org/8894,JavaScript Refactor.,JavaScript Refactor.  Cleans up Horizon's JavaScript to make it properly modular and well-organized.  Adds unit tests written in QUnit for some of the JS modules as a starting point for the JS test framework. You can visit /qunit/ with DEBUG=True in your settings to access the JS test runner.  Fixes bug 961509.  Change-Id: Ica33765660d0ed80f22c71bc96f122c3fc8b80cc,quality,,,,,,
openstack%2Fhorizon~master~Ica33765660d0ed80f22c71bc96f122c3fc8b80cc,https://review.opendev.org/8894,JavaScript Refactor.,JavaScript Refactor.  Cleans up Horizon's JavaScript to make it properly modular and well-organized.  Adds unit tests written in QUnit for some of the JS modules as a starting point for the JS test framework. You can visit /qunit/ with DEBUG=True in your settings to access the JS test runner.  Fixes bug 961509.  Change-Id: Ica33765660d0ed80f22c71bc96f122c3fc8b80cc,objective,,,,,,
openstack%2Ftempest~master~Ia5d539771920728424bd73db3532f7670077e44d,https://review.opendev.org/5894,Refactor configuration setup and document config,Refactor configuration setup and document config  * Adds documentation to the sample config file/template * Adds some log output for making diagnosing config issues easier * Rework the authorization test config option names * Remove obselete release_name config options * Remove ssh_timeout unused option  Change-Id: Ia5d539771920728424bd73db3532f7670077e44d,testing,,,,,,
openstack%2Ftempest~master~Ia5d539771920728424bd73db3532f7670077e44d,https://review.opendev.org/5894,Refactor configuration setup and document config,Refactor configuration setup and document config  * Adds documentation to the sample config file/template * Adds some log output for making diagnosing config issues easier * Rework the authorization test config option names * Remove obselete release_name config options * Remove ssh_timeout unused option  Change-Id: Ia5d539771920728424bd73db3532f7670077e44d,quality,,,,,,
openstack%2Ftempest~master~Ia5d539771920728424bd73db3532f7670077e44d,https://review.opendev.org/5894,Refactor configuration setup and document config,Refactor configuration setup and document config  * Adds documentation to the sample config file/template * Adds some log output for making diagnosing config issues easier * Rework the authorization test config option names * Remove obselete release_name config options * Remove ssh_timeout unused option  Change-Id: Ia5d539771920728424bd73db3532f7670077e44d,objective,,,,,,
openstack%2Fhorizon~master~I5526ccf5b38708885ea2d1f06b0d3483c58c4dad,https://review.opendev.org/4094,Refactored test suite.,"Refactored test suite.    * Moves all tests to use a single set of central test data and     Adds a nifty manager for it.     Implements blueprint unified-test-data.    * Cleans up API code and API tests so that we're not testing     code that has no custom logic, or wrapping objects unnecessarily.     Implements blueprint api-simplification.    * Adds lots of docs on testing. It's a good step towards     blueprint improve-dev-documentation.    * Improves API exception handling for duplicate objects and containers.     Fixes bug 930816.  Change-Id: I5526ccf5b38708885ea2d1f06b0d3483c58c4dad",testing,,,,,,
openstack%2Fhorizon~master~I5526ccf5b38708885ea2d1f06b0d3483c58c4dad,https://review.opendev.org/4094,Refactored test suite.,"Refactored test suite.    * Moves all tests to use a single set of central test data and     Adds a nifty manager for it.     Implements blueprint unified-test-data.    * Cleans up API code and API tests so that we're not testing     code that has no custom logic, or wrapping objects unnecessarily.     Implements blueprint api-simplification.    * Adds lots of docs on testing. It's a good step towards     blueprint improve-dev-documentation.    * Improves API exception handling for duplicate objects and containers.     Fixes bug 930816.  Change-Id: I5526ccf5b38708885ea2d1f06b0d3483c58c4dad",objective,,,,,,
openstack%2Fhorizon~master~I5526ccf5b38708885ea2d1f06b0d3483c58c4dad,https://review.opendev.org/4094,Refactored test suite.,"Refactored test suite.    * Moves all tests to use a single set of central test data and     Adds a nifty manager for it.     Implements blueprint unified-test-data.    * Cleans up API code and API tests so that we're not testing     code that has no custom logic, or wrapping objects unnecessarily.     Implements blueprint api-simplification.    * Adds lots of docs on testing. It's a good step towards     blueprint improve-dev-documentation.    * Improves API exception handling for duplicate objects and containers.     Fixes bug 930816.  Change-Id: I5526ccf5b38708885ea2d1f06b0d3483c58c4dad",quality,,,,,,
openstack%2Fnova~master~I964abb767d619afbd90da549b267d8a9d7c31fc1,https://review.opendev.org/3263,Refactor test_scheduler into unit tests,"Refactor test_scheduler into unit tests  Also adds a service_is_up test for utils/service_is_up, which used to be in the scheduler.  Change-Id: I964abb767d619afbd90da549b267d8a9d7c31fc1",testing,,,,,,
openstack%2Fnova~master~I964abb767d619afbd90da549b267d8a9d7c31fc1,https://review.opendev.org/3263,Refactor test_scheduler into unit tests,"Refactor test_scheduler into unit tests  Also adds a service_is_up test for utils/service_is_up, which used to be in the scheduler.  Change-Id: I964abb767d619afbd90da549b267d8a9d7c31fc1",objective,,,,,,
openstack%2Fkeystone~master~Ife3e95974ab63c1c3a5999fd1ac558a3ef77e5ff,https://review.opendev.org/2674,Refactor models and backends,Refactor models and backends  Blueprints:   bp keystone-refactor-backend   bp refactor-keystone-models  This is a combination of 9 commits. Originals here: github.com/ziadsawalha/keystone/commits/models  Move token calls in service.py to managers.token - removed direct backend calls from service.py to token backend - implementing blueprint keystone-refactor-backend  Refactor: move tenant calls to managers.tenant - Not all calls removed yet  Implement models.Service in backends - Adding functionality needed to models.Role - Using models.Service in sqlalchemy.service - additional serialization changes and tests.  Implement models.service - remove logic.types.service:Service class  Implement user.manager - remove direct backend calls to api.USER from service.py  Remove user_get_update from backend API - No idea why that is there. It seems to be a   duplicate of plain get.  Backend updates - Document some user APIs - Update user.check_password to take user ID and password only - Implement more user.manager calls in service.py - remove user.delete_ternant_user call (probably existed when   we had the concept of users under tenants  Completed moving api.USER to user_manager in service.py - Completed remove of api.USER - Additional backend API documentation  Removed logic.types.service - Completed moving to models.Service(s) - Added basic test module for models.Services - pep8/pylint cleanup  Change-Id: Ife3e95974ab63c1c3a5999fd1ac558a3ef77e5ff,testing,,,,,,
openstack%2Fkeystone~master~Ife3e95974ab63c1c3a5999fd1ac558a3ef77e5ff,https://review.opendev.org/2674,Refactor models and backends,Refactor models and backends  Blueprints:   bp keystone-refactor-backend   bp refactor-keystone-models  This is a combination of 9 commits. Originals here: github.com/ziadsawalha/keystone/commits/models  Move token calls in service.py to managers.token - removed direct backend calls from service.py to token backend - implementing blueprint keystone-refactor-backend  Refactor: move tenant calls to managers.tenant - Not all calls removed yet  Implement models.Service in backends - Adding functionality needed to models.Role - Using models.Service in sqlalchemy.service - additional serialization changes and tests.  Implement models.service - remove logic.types.service:Service class  Implement user.manager - remove direct backend calls to api.USER from service.py  Remove user_get_update from backend API - No idea why that is there. It seems to be a   duplicate of plain get.  Backend updates - Document some user APIs - Update user.check_password to take user ID and password only - Implement more user.manager calls in service.py - remove user.delete_ternant_user call (probably existed when   we had the concept of users under tenants  Completed moving api.USER to user_manager in service.py - Completed remove of api.USER - Additional backend API documentation  Removed logic.types.service - Completed moving to models.Service(s) - Added basic test module for models.Services - pep8/pylint cleanup  Change-Id: Ife3e95974ab63c1c3a5999fd1ac558a3ef77e5ff,quality,,,,,,
openstack%2Fkeystone~master~Ife3e95974ab63c1c3a5999fd1ac558a3ef77e5ff,https://review.opendev.org/2674,Refactor models and backends,Refactor models and backends  Blueprints:   bp keystone-refactor-backend   bp refactor-keystone-models  This is a combination of 9 commits. Originals here: github.com/ziadsawalha/keystone/commits/models  Move token calls in service.py to managers.token - removed direct backend calls from service.py to token backend - implementing blueprint keystone-refactor-backend  Refactor: move tenant calls to managers.tenant - Not all calls removed yet  Implement models.Service in backends - Adding functionality needed to models.Role - Using models.Service in sqlalchemy.service - additional serialization changes and tests.  Implement models.service - remove logic.types.service:Service class  Implement user.manager - remove direct backend calls to api.USER from service.py  Remove user_get_update from backend API - No idea why that is there. It seems to be a   duplicate of plain get.  Backend updates - Document some user APIs - Update user.check_password to take user ID and password only - Implement more user.manager calls in service.py - remove user.delete_ternant_user call (probably existed when   we had the concept of users under tenants  Completed moving api.USER to user_manager in service.py - Completed remove of api.USER - Additional backend API documentation  Removed logic.types.service - Completed moving to models.Service(s) - Added basic test module for models.Services - pep8/pylint cleanup  Change-Id: Ife3e95974ab63c1c3a5999fd1ac558a3ef77e5ff,quality,,,,,,
openstack%2Fkeystone~master~Ife3e95974ab63c1c3a5999fd1ac558a3ef77e5ff,https://review.opendev.org/2674,Refactor models and backends,Refactor models and backends  Blueprints:   bp keystone-refactor-backend   bp refactor-keystone-models  This is a combination of 9 commits. Originals here: github.com/ziadsawalha/keystone/commits/models  Move token calls in service.py to managers.token - removed direct backend calls from service.py to token backend - implementing blueprint keystone-refactor-backend  Refactor: move tenant calls to managers.tenant - Not all calls removed yet  Implement models.Service in backends - Adding functionality needed to models.Role - Using models.Service in sqlalchemy.service - additional serialization changes and tests.  Implement models.service - remove logic.types.service:Service class  Implement user.manager - remove direct backend calls to api.USER from service.py  Remove user_get_update from backend API - No idea why that is there. It seems to be a   duplicate of plain get.  Backend updates - Document some user APIs - Update user.check_password to take user ID and password only - Implement more user.manager calls in service.py - remove user.delete_ternant_user call (probably existed when   we had the concept of users under tenants  Completed moving api.USER to user_manager in service.py - Completed remove of api.USER - Additional backend API documentation  Removed logic.types.service - Completed moving to models.Service(s) - Added basic test module for models.Services - pep8/pylint cleanup  Change-Id: Ife3e95974ab63c1c3a5999fd1ac558a3ef77e5ff,objective,,,,,,
openstack%2Fkeystone~master~I3505740466abac0fbb35c822858c70a234893798,https://review.opendev.org/2504,Testing Refactor - this is a squash of 6 commits - original commits are vailable for cherry-picking here:   https://github.com/ziadsawalha/keystone/commits/tests,"Remove test dependency on sampledata - added fixtures in FunctionalTestCase class - updated tests to use created fixtures - only kept boot-strap creations in KeystoneTestCase  This has significantly slowed down tests, but this will allow us to start refactoring tests to not go through HTTP and not require a running server (where not needed).  Tests don't use http  Update to Tenant serialization  - Correctly handle description as an optional attribute   of tenant - added tests that fail where blank description was coming   back as 'None' string. - added fixes to handle None correctly (check for None   before calling str(value)  Separated out test suites  - Unit, Functional, and Client (HTTP) suites can be run separately - -O flag in run_tests now accepts UnitTests and ClientTests as options - run_tests will run all suites (but end up executing less tests   overall since Unit tests run once and client tests run twice; for   HTTP and HTTPS/SSL tests  Fixed 'setup.py test' not running  Change-Id: I3505740466abac0fbb35c822858c70a234893798",testing,,,,,,
openstack%2Fkeystone~master~I3505740466abac0fbb35c822858c70a234893798,https://review.opendev.org/2504,Testing Refactor - this is a squash of 6 commits - original commits are vailable for cherry-picking here:   https://github.com/ziadsawalha/keystone/commits/tests,"Remove test dependency on sampledata - added fixtures in FunctionalTestCase class - updated tests to use created fixtures - only kept boot-strap creations in KeystoneTestCase  This has significantly slowed down tests, but this will allow us to start refactoring tests to not go through HTTP and not require a running server (where not needed).  Tests don't use http  Update to Tenant serialization  - Correctly handle description as an optional attribute   of tenant - added tests that fail where blank description was coming   back as 'None' string. - added fixes to handle None correctly (check for None   before calling str(value)  Separated out test suites  - Unit, Functional, and Client (HTTP) suites can be run separately - -O flag in run_tests now accepts UnitTests and ClientTests as options - run_tests will run all suites (but end up executing less tests   overall since Unit tests run once and client tests run twice; for   HTTP and HTTPS/SSL tests  Fixed 'setup.py test' not running  Change-Id: I3505740466abac0fbb35c822858c70a234893798",quality,,,,,,
openstack%2Fkeystone~master~I3505740466abac0fbb35c822858c70a234893798,https://review.opendev.org/2504,Testing Refactor - this is a squash of 6 commits - original commits are vailable for cherry-picking here:   https://github.com/ziadsawalha/keystone/commits/tests,"Remove test dependency on sampledata - added fixtures in FunctionalTestCase class - updated tests to use created fixtures - only kept boot-strap creations in KeystoneTestCase  This has significantly slowed down tests, but this will allow us to start refactoring tests to not go through HTTP and not require a running server (where not needed).  Tests don't use http  Update to Tenant serialization  - Correctly handle description as an optional attribute   of tenant - added tests that fail where blank description was coming   back as 'None' string. - added fixes to handle None correctly (check for None   before calling str(value)  Separated out test suites  - Unit, Functional, and Client (HTTP) suites can be run separately - -O flag in run_tests now accepts UnitTests and ClientTests as options - run_tests will run all suites (but end up executing less tests   overall since Unit tests run once and client tests run twice; for   HTTP and HTTPS/SSL tests  Fixed 'setup.py test' not running  Change-Id: I3505740466abac0fbb35c822858c70a234893798",objective,,,,,,
openstack%2Fkeystone~master~Ie4e2a9aae9578c3657c0459381d1618d30b8ca32,https://review.opendev.org/2063,Refactor: move initialization code to class,"Refactor: move initialization code to class  - Each script (keystone, keystone-admin, keystone-auth) had a copy   of the initialization code that handled options, arguments, and   starting the paste apps. The code was also duplicated in the   test SetUp code. This code has now been consolidated in one   class. - Created the keystone.Server class that has start/stop   methods to manage keystone servers. It also handles initializing   options and arguments. - This provides one point of entry into keystone where we can   now start refactoring logging and backend code.  Change-Id: Ie4e2a9aae9578c3657c0459381d1618d30b8ca32",testing,,,,,,
openstack%2Fkeystone~master~Ie4e2a9aae9578c3657c0459381d1618d30b8ca32,https://review.opendev.org/2063,Refactor: move initialization code to class,"Refactor: move initialization code to class  - Each script (keystone, keystone-admin, keystone-auth) had a copy   of the initialization code that handled options, arguments, and   starting the paste apps. The code was also duplicated in the   test SetUp code. This code has now been consolidated in one   class. - Created the keystone.Server class that has start/stop   methods to manage keystone servers. It also handles initializing   options and arguments. - This provides one point of entry into keystone where we can   now start refactoring logging and backend code.  Change-Id: Ie4e2a9aae9578c3657c0459381d1618d30b8ca32",quality,,,,,,
openstack%2Fkeystone~master~Ie4e2a9aae9578c3657c0459381d1618d30b8ca32,https://review.opendev.org/2063,Refactor: move initialization code to class,"Refactor: move initialization code to class  - Each script (keystone, keystone-admin, keystone-auth) had a copy   of the initialization code that handled options, arguments, and   starting the paste apps. The code was also duplicated in the   test SetUp code. This code has now been consolidated in one   class. - Created the keystone.Server class that has start/stop   methods to manage keystone servers. It also handles initializing   options and arguments. - This provides one point of entry into keystone where we can   now start refactoring logging and backend code.  Change-Id: Ie4e2a9aae9578c3657c0459381d1618d30b8ca32",objective,,,,,,
openstack%2Fnova~master~I034404892018e99987f80789d7f7e406ff31658c,https://review.opendev.org/1324,Refactoring/cleanup of some view builders.,"Refactoring/cleanup of some view builders.  I have re-worked the ""addresses"", ""flavors"", ""images"", and ""servers"" view builders to share logic which was previously duplicated across many ViewBuilder classes. Also, I have re-worked the ViewBuilder class in general to persist longer (meaning that a new ViewBuilder is not created for every request but rather a single ViewBuilder is created and deals with each request as needed.)  During the re-factor I found an issue with test_servers.py where links were not containing the project_id like they should. This was fixed and tests were updated.  Overall we had good test coverage so not many tests had to be updated during the refactor.  Change-Id: I034404892018e99987f80789d7f7e406ff31658c",testing,,,,,,
openstack%2Fnova~master~I034404892018e99987f80789d7f7e406ff31658c,https://review.opendev.org/1324,Refactoring/cleanup of some view builders.,"Refactoring/cleanup of some view builders.  I have re-worked the ""addresses"", ""flavors"", ""images"", and ""servers"" view builders to share logic which was previously duplicated across many ViewBuilder classes. Also, I have re-worked the ViewBuilder class in general to persist longer (meaning that a new ViewBuilder is not created for every request but rather a single ViewBuilder is created and deals with each request as needed.)  During the re-factor I found an issue with test_servers.py where links were not containing the project_id like they should. This was fixed and tests were updated.  Overall we had good test coverage so not many tests had to be updated during the refactor.  Change-Id: I034404892018e99987f80789d7f7e406ff31658c",quality,,,,,,
openstack%2Fnova~master~I034404892018e99987f80789d7f7e406ff31658c,https://review.opendev.org/1324,Refactoring/cleanup of some view builders.,"Refactoring/cleanup of some view builders.  I have re-worked the ""addresses"", ""flavors"", ""images"", and ""servers"" view builders to share logic which was previously duplicated across many ViewBuilder classes. Also, I have re-worked the ViewBuilder class in general to persist longer (meaning that a new ViewBuilder is not created for every request but rather a single ViewBuilder is created and deals with each request as needed.)  During the re-factor I found an issue with test_servers.py where links were not containing the project_id like they should. This was fixed and tests were updated.  Overall we had good test coverage so not many tests had to be updated during the refactor.  Change-Id: I034404892018e99987f80789d7f7e406ff31658c",objective,,,,,,
openstack%2Fglance~master~I76e95ffeeabc079b48b5ce2aeb6520cbdbf6d1e1,https://review.opendev.org/1201,More cache refactoring - Management Middleware,"More cache refactoring - Management Middleware  Fixes LP Bug#883236 - Cache management needs refactoring  Refactors cache management middleware by simplifying the middleware to image cache calls. The middleware now only contains calls for retrieving records of which images are cached, queueing an image to be cached, deleting a single cached image, and deleting all cached images. I removed the special calls for reaping invalid or stalled images, as that is handled by the cache cleaner utility...  Adds functional test case with caching and cache management middleware enabled.  Made a slight change to the way the functional test creates a config file: now it adds the configuration files used to start servers to $TEST_DIR/etc/$SERVER.conf so that test runner can see the config files that caused failures for tests.  TODO: Add test case for queue, then run prefetcher, then check image is cached... TODO: Add docs for cache management API TODO: Make bin/glance gracefully handle cache not existing  Change-Id: I76e95ffeeabc079b48b5ce2aeb6520cbdbf6d1e1",testing,,,,,,
openstack%2Fglance~master~I76e95ffeeabc079b48b5ce2aeb6520cbdbf6d1e1,https://review.opendev.org/1201,More cache refactoring - Management Middleware,"More cache refactoring - Management Middleware  Fixes LP Bug#883236 - Cache management needs refactoring  Refactors cache management middleware by simplifying the middleware to image cache calls. The middleware now only contains calls for retrieving records of which images are cached, queueing an image to be cached, deleting a single cached image, and deleting all cached images. I removed the special calls for reaping invalid or stalled images, as that is handled by the cache cleaner utility...  Adds functional test case with caching and cache management middleware enabled.  Made a slight change to the way the functional test creates a config file: now it adds the configuration files used to start servers to $TEST_DIR/etc/$SERVER.conf so that test runner can see the config files that caused failures for tests.  TODO: Add test case for queue, then run prefetcher, then check image is cached... TODO: Add docs for cache management API TODO: Make bin/glance gracefully handle cache not existing  Change-Id: I76e95ffeeabc079b48b5ce2aeb6520cbdbf6d1e1",quality,,,,,,
openstack%2Fglance~master~I76e95ffeeabc079b48b5ce2aeb6520cbdbf6d1e1,https://review.opendev.org/1201,More cache refactoring - Management Middleware,"More cache refactoring - Management Middleware  Fixes LP Bug#883236 - Cache management needs refactoring  Refactors cache management middleware by simplifying the middleware to image cache calls. The middleware now only contains calls for retrieving records of which images are cached, queueing an image to be cached, deleting a single cached image, and deleting all cached images. I removed the special calls for reaping invalid or stalled images, as that is handled by the cache cleaner utility...  Adds functional test case with caching and cache management middleware enabled.  Made a slight change to the way the functional test creates a config file: now it adds the configuration files used to start servers to $TEST_DIR/etc/$SERVER.conf so that test runner can see the config files that caused failures for tests.  TODO: Add test case for queue, then run prefetcher, then check image is cached... TODO: Add docs for cache management API TODO: Make bin/glance gracefully handle cache not existing  Change-Id: I76e95ffeeabc079b48b5ce2aeb6520cbdbf6d1e1",objective,,,,,,
openstack%2Fkeystone~master~I50802419ec82d98f4cb56e93c163158d3326c5c9,https://review.opendev.org/763,Refactor and unit test json auth parsing,"Refactor and unit test json auth parsing  There's a bunch of code copied-and-pasted between the json parsers in the two auth types. Refactor the code out into a base class.  First, though, unit test the code to ensure no regressions.  Change-Id: I50802419ec82d98f4cb56e93c163158d3326c5c9",testing,,,,,,
openstack%2Fkeystone~master~I50802419ec82d98f4cb56e93c163158d3326c5c9,https://review.opendev.org/763,Refactor and unit test json auth parsing,"Refactor and unit test json auth parsing  There's a bunch of code copied-and-pasted between the json parsers in the two auth types. Refactor the code out into a base class.  First, though, unit test the code to ensure no regressions.  Change-Id: I50802419ec82d98f4cb56e93c163158d3326c5c9",quality,,,,,,
openstack%2Fkeystone~master~I50802419ec82d98f4cb56e93c163158d3326c5c9,https://review.opendev.org/763,Refactor and unit test json auth parsing,"Refactor and unit test json auth parsing  There's a bunch of code copied-and-pasted between the json parsers in the two auth types. Refactor the code out into a base class.  First, though, unit test the code to ensure no regressions.  Change-Id: I50802419ec82d98f4cb56e93c163158d3326c5c9",objective,,,,,,
openstack%2Fpython-tripleoclient~stable%2Ftrain~Ie28dabaf07ed36adb3e8f07ca8c141f93a9d79cc,https://review.opendev.org/710698,Refactor image upload command,"Refactor image upload command  In preparation for supporting deploys on a glance-less undercloud, this change refactors the upload command to move all glance interacting logic into a glance adapter class. This will allow the adapter abstraction to be used for an 'upload' adapter which only copies files on the local disk.  This change also does the following: - moves repeated update-or-upload logic to an adapter method, reducing   the complexity of take_action - cleans up the mock usage to consistently use the   patch decorator - the current approach may be causing unit test   failures in some environments - removes the GlanceV1 implementation, since the V1 API was removed in   Newton(!) this support is just a maintenance burden  Change-Id: Ie28dabaf07ed36adb3e8f07ca8c141f93a9d79cc Blueprint: nova-less-deploy (cherry picked from commit c88da0a63233abd839e87b52adfd546df0a74c06)",testing,,,,,,
openstack%2Fpython-tripleoclient~stable%2Ftrain~Ie28dabaf07ed36adb3e8f07ca8c141f93a9d79cc,https://review.opendev.org/710698,Refactor image upload command,"Refactor image upload command  In preparation for supporting deploys on a glance-less undercloud, this change refactors the upload command to move all glance interacting logic into a glance adapter class. This will allow the adapter abstraction to be used for an 'upload' adapter which only copies files on the local disk.  This change also does the following: - moves repeated update-or-upload logic to an adapter method, reducing   the complexity of take_action - cleans up the mock usage to consistently use the   patch decorator - the current approach may be causing unit test   failures in some environments - removes the GlanceV1 implementation, since the V1 API was removed in   Newton(!) this support is just a maintenance burden  Change-Id: Ie28dabaf07ed36adb3e8f07ca8c141f93a9d79cc Blueprint: nova-less-deploy (cherry picked from commit c88da0a63233abd839e87b52adfd546df0a74c06)",quality,,,,,,
openstack%2Fpython-tripleoclient~stable%2Ftrain~Ie28dabaf07ed36adb3e8f07ca8c141f93a9d79cc,https://review.opendev.org/710698,Refactor image upload command,"Refactor image upload command  In preparation for supporting deploys on a glance-less undercloud, this change refactors the upload command to move all glance interacting logic into a glance adapter class. This will allow the adapter abstraction to be used for an 'upload' adapter which only copies files on the local disk.  This change also does the following: - moves repeated update-or-upload logic to an adapter method, reducing   the complexity of take_action - cleans up the mock usage to consistently use the   patch decorator - the current approach may be causing unit test   failures in some environments - removes the GlanceV1 implementation, since the V1 API was removed in   Newton(!) this support is just a maintenance burden  Change-Id: Ie28dabaf07ed36adb3e8f07ca8c141f93a9d79cc Blueprint: nova-less-deploy (cherry picked from commit c88da0a63233abd839e87b52adfd546df0a74c06)",objective,,,,,,
zuul%2Fzuul~master~I1e32ebb57b27bce898b074e419299a1803853608,https://review.opendev.org/709834,Refactor branch protection test infrastructure,Refactor branch protection test infrastructure  Branch protection rules are not just about required status so refactor it in the test framework so we can extend them in the future.  Change-Id: I1e32ebb57b27bce898b074e419299a1803853608,testing,,,,,,
zuul%2Fzuul~master~I1e32ebb57b27bce898b074e419299a1803853608,https://review.opendev.org/709834,Refactor branch protection test infrastructure,Refactor branch protection test infrastructure  Branch protection rules are not just about required status so refactor it in the test framework so we can extend them in the future.  Change-Id: I1e32ebb57b27bce898b074e419299a1803853608,quality,,,,,,
zuul%2Fzuul~master~I1e32ebb57b27bce898b074e419299a1803853608,https://review.opendev.org/709834,Refactor branch protection test infrastructure,Refactor branch protection test infrastructure  Branch protection rules are not just about required status so refactor it in the test framework so we can extend them in the future.  Change-Id: I1e32ebb57b27bce898b074e419299a1803853608,objective,,,,,,
airship%2Fairshipctl~master~I324954a1216f2204ff3977c05eb9bd087cd87795,https://review.opendev.org/706630,[#42] Refactor flag operations to be uniform,Refactor flag operations to be uniform  This also increases unit test coverage  Change-Id: I324954a1216f2204ff3977c05eb9bd087cd87795,testing,,,,,,
airship%2Fairshipctl~master~I324954a1216f2204ff3977c05eb9bd087cd87795,https://review.opendev.org/706630,[#42] Refactor flag operations to be uniform,Refactor flag operations to be uniform  This also increases unit test coverage  Change-Id: I324954a1216f2204ff3977c05eb9bd087cd87795,objective,,,,,,
openstack%2Fheat~master~I7835211c4420f9da44eb2ae2f1d0e1e4b868efc4,https://review.opendev.org/541918,Refactor test_conditions functional test,Refactor test_conditions functional test  Use the list_resources() method of the test base class.  Change-Id: I7835211c4420f9da44eb2ae2f1d0e1e4b868efc4,testing,,,,,,
openstack%2Fheat~master~I7835211c4420f9da44eb2ae2f1d0e1e4b868efc4,https://review.opendev.org/541918,Refactor test_conditions functional test,Refactor test_conditions functional test  Use the list_resources() method of the test base class.  Change-Id: I7835211c4420f9da44eb2ae2f1d0e1e4b868efc4,quality,,,,,,
openstack%2Fheat~master~I7835211c4420f9da44eb2ae2f1d0e1e4b868efc4,https://review.opendev.org/541918,Refactor test_conditions functional test,Refactor test_conditions functional test  Use the list_resources() method of the test base class.  Change-Id: I7835211c4420f9da44eb2ae2f1d0e1e4b868efc4,objective,,,,,,
openstack%2Fpython-tripleoclient~master~Ie28dabaf07ed36adb3e8f07ca8c141f93a9d79cc,https://review.opendev.org/693959,Refactor image upload command,"Refactor image upload command  In preparation for supporting deploys on a glance-less undercloud, this change refactors the upload command to mqove all glance interacting logic into a glance adapter class. This will allow the adapter abstraction to be used for an 'upload' adapter which only copies files on the local disk.  This change also does the following: - moves repeated update-or-upload logic to an adapter method, reducing   the complexity of take_action - cleans up the mock usage to consistently use the   patch decorator - the current approach may be causing unit test   failures in some environments - removes the GlanceV1 implementation, since the V1 API was removed in   Newton(!) this support is just a maintenance burden  Change-Id: Ie28dabaf07ed36adb3e8f07ca8c141f93a9d79cc Blueprint: nova-less-deploy",testing,,,,,,
openstack%2Fpython-tripleoclient~master~Ie28dabaf07ed36adb3e8f07ca8c141f93a9d79cc,https://review.opendev.org/693959,Refactor image upload command,"Refactor image upload command  In preparation for supporting deploys on a glance-less undercloud, this change refactors the upload command to mqove all glance interacting logic into a glance adapter class. This will allow the adapter abstraction to be used for an 'upload' adapter which only copies files on the local disk.  This change also does the following: - moves repeated update-or-upload logic to an adapter method, reducing   the complexity of take_action - cleans up the mock usage to consistently use the   patch decorator - the current approach may be causing unit test   failures in some environments - removes the GlanceV1 implementation, since the V1 API was removed in   Newton(!) this support is just a maintenance burden  Change-Id: Ie28dabaf07ed36adb3e8f07ca8c141f93a9d79cc Blueprint: nova-less-deploy",quality,,,,,,
openstack%2Fpython-tripleoclient~master~Ie28dabaf07ed36adb3e8f07ca8c141f93a9d79cc,https://review.opendev.org/693959,Refactor image upload command,"Refactor image upload command  In preparation for supporting deploys on a glance-less undercloud, this change refactors the upload command to mqove all glance interacting logic into a glance adapter class. This will allow the adapter abstraction to be used for an 'upload' adapter which only copies files on the local disk.  This change also does the following: - moves repeated update-or-upload logic to an adapter method, reducing   the complexity of take_action - cleans up the mock usage to consistently use the   patch decorator - the current approach may be causing unit test   failures in some environments - removes the GlanceV1 implementation, since the V1 API was removed in   Newton(!) this support is just a maintenance burden  Change-Id: Ie28dabaf07ed36adb3e8f07ca8c141f93a9d79cc Blueprint: nova-less-deploy",objective,,,,,,
openstack%2Ftempest~master~Ib5ebbc6d5538a6179eca27c203faee6805af0093,https://review.opendev.org/702493,Refactor methods to be used by other tests,Refactor methods to be used by other tests  These methods are useful for a new snapshot test so moving them into manager to be reused.  Change-Id: Ib5ebbc6d5538a6179eca27c203faee6805af0093,testing,,,,,,
openstack%2Ftempest~master~Ib5ebbc6d5538a6179eca27c203faee6805af0093,https://review.opendev.org/702493,Refactor methods to be used by other tests,Refactor methods to be used by other tests  These methods are useful for a new snapshot test so moving them into manager to be reused.  Change-Id: Ib5ebbc6d5538a6179eca27c203faee6805af0093,quality,,,,,,
openstack%2Ftempest~master~Ib5ebbc6d5538a6179eca27c203faee6805af0093,https://review.opendev.org/702493,Refactor methods to be used by other tests,Refactor methods to be used by other tests  These methods are useful for a new snapshot test so moving them into manager to be reused.  Change-Id: Ib5ebbc6d5538a6179eca27c203faee6805af0093,objective,,,,,,
recordsansible%2Fara~master~I1745f0cf22f802aba5bf7f3d120a6b03ac88a1dd,https://review.opendev.org/704437,Refactor basic integration jobs for Ansible versions,Refactor basic integration jobs for Ansible versions  The latest supported version of Ansible (currently 2.9) is used in integration test jobs unless specified otherwise.  The basic integration test jobs ensure that we have coverage for all currently supported versions of Ansible as well as devel to let us know if there are any upcoming breaking changes.  Change-Id: I1745f0cf22f802aba5bf7f3d120a6b03ac88a1dd,testing,,,,,,
recordsansible%2Fara~master~I1745f0cf22f802aba5bf7f3d120a6b03ac88a1dd,https://review.opendev.org/704437,Refactor basic integration jobs for Ansible versions,Refactor basic integration jobs for Ansible versions  The latest supported version of Ansible (currently 2.9) is used in integration test jobs unless specified otherwise.  The basic integration test jobs ensure that we have coverage for all currently supported versions of Ansible as well as devel to let us know if there are any upcoming breaking changes.  Change-Id: I1745f0cf22f802aba5bf7f3d120a6b03ac88a1dd,integration,,,,,,
recordsansible%2Fara~master~I1745f0cf22f802aba5bf7f3d120a6b03ac88a1dd,https://review.opendev.org/704437,Refactor basic integration jobs for Ansible versions,Refactor basic integration jobs for Ansible versions  The latest supported version of Ansible (currently 2.9) is used in integration test jobs unless specified otherwise.  The basic integration test jobs ensure that we have coverage for all currently supported versions of Ansible as well as devel to let us know if there are any upcoming breaking changes.  Change-Id: I1745f0cf22f802aba5bf7f3d120a6b03ac88a1dd,objective,,,,,,
recordsansible%2Fara~master~I1745f0cf22f802aba5bf7f3d120a6b03ac88a1dd,https://review.opendev.org/704437,Refactor basic integration jobs for Ansible versions,Refactor basic integration jobs for Ansible versions  The latest supported version of Ansible (currently 2.9) is used in integration test jobs unless specified otherwise.  The basic integration test jobs ensure that we have coverage for all currently supported versions of Ansible as well as devel to let us know if there are any upcoming breaking changes.  Change-Id: I1745f0cf22f802aba5bf7f3d120a6b03ac88a1dd,integration,,,,,,
recordsansible%2Fara~master~I5851b4364fd567799e92feda5c41b34e5a22dc49,https://review.opendev.org/704412,Refactor and improve distributed sqlite integration test coverage,"Refactor and improve distributed sqlite integration test coverage  This removes the job ""ansible-role-ara-api-fedora-distributed-sqlite"" and replaces it by ""ara-api-distributed-sqlite"".  The job tests the support for the distributed sqlite database backend Fedora and Ubuntu simultaneously, allowing for the addition of CentOS8 in the future.  Change-Id: I5851b4364fd567799e92feda5c41b34e5a22dc49",testing,,,,,,
recordsansible%2Fara~master~I5851b4364fd567799e92feda5c41b34e5a22dc49,https://review.opendev.org/704412,Refactor and improve distributed sqlite integration test coverage,"Refactor and improve distributed sqlite integration test coverage  This removes the job ""ansible-role-ara-api-fedora-distributed-sqlite"" and replaces it by ""ara-api-distributed-sqlite"".  The job tests the support for the distributed sqlite database backend Fedora and Ubuntu simultaneously, allowing for the addition of CentOS8 in the future.  Change-Id: I5851b4364fd567799e92feda5c41b34e5a22dc49",integration,,,,,,
recordsansible%2Fara~master~I5851b4364fd567799e92feda5c41b34e5a22dc49,https://review.opendev.org/704412,Refactor and improve distributed sqlite integration test coverage,"Refactor and improve distributed sqlite integration test coverage  This removes the job ""ansible-role-ara-api-fedora-distributed-sqlite"" and replaces it by ""ara-api-distributed-sqlite"".  The job tests the support for the distributed sqlite database backend Fedora and Ubuntu simultaneously, allowing for the addition of CentOS8 in the future.  Change-Id: I5851b4364fd567799e92feda5c41b34e5a22dc49",objective,,,,,,
recordsansible%2Fara~master~I2ffa6b7e1d97359e3924a7faf842340e6eb39bbe,https://review.opendev.org/704389,Refactor and improve PostgreSQL integration test coverage,"Refactor and improve PostgreSQL integration test coverage  This removes the job ""ansible-role-ara-api-ubuntu-postgresql"" and replaces it by ""ara-api-postgresql"".  The job is designed to have a single database server with multiple API servers on different Linux distributions in order to get test coverage for Ubuntu, Fedora and soon, CentOS8.  Change-Id: I2ffa6b7e1d97359e3924a7faf842340e6eb39bbe",testing,,,,,,
recordsansible%2Fara~master~I2ffa6b7e1d97359e3924a7faf842340e6eb39bbe,https://review.opendev.org/704389,Refactor and improve PostgreSQL integration test coverage,"Refactor and improve PostgreSQL integration test coverage  This removes the job ""ansible-role-ara-api-ubuntu-postgresql"" and replaces it by ""ara-api-postgresql"".  The job is designed to have a single database server with multiple API servers on different Linux distributions in order to get test coverage for Ubuntu, Fedora and soon, CentOS8.  Change-Id: I2ffa6b7e1d97359e3924a7faf842340e6eb39bbe",integration,,,,,,
recordsansible%2Fara~master~I2ffa6b7e1d97359e3924a7faf842340e6eb39bbe,https://review.opendev.org/704389,Refactor and improve PostgreSQL integration test coverage,"Refactor and improve PostgreSQL integration test coverage  This removes the job ""ansible-role-ara-api-ubuntu-postgresql"" and replaces it by ""ara-api-postgresql"".  The job is designed to have a single database server with multiple API servers on different Linux distributions in order to get test coverage for Ubuntu, Fedora and soon, CentOS8.  Change-Id: I2ffa6b7e1d97359e3924a7faf842340e6eb39bbe",objective,,,,,,
recordsansible%2Fara~master~Ia4916938039cf5566b1e71e4518b9c5e958ca872,https://review.opendev.org/704386,Refactor and improve MySQL integration test coverage,"Refactor and improve MySQL integration test coverage  This removes the job ""ansible-role-ara-api-ubuntu-mysql"" and replaces it by ""ara-api-mysql"".  The job is designed to have a single database server with multiple API servers on different Linux distributions in order to get test coverage for Ubuntu, Fedora and soon, CentOS8.  Change-Id: Ia4916938039cf5566b1e71e4518b9c5e958ca872",testing,,,,,,
recordsansible%2Fara~master~Ia4916938039cf5566b1e71e4518b9c5e958ca872,https://review.opendev.org/704386,Refactor and improve MySQL integration test coverage,"Refactor and improve MySQL integration test coverage  This removes the job ""ansible-role-ara-api-ubuntu-mysql"" and replaces it by ""ara-api-mysql"".  The job is designed to have a single database server with multiple API servers on different Linux distributions in order to get test coverage for Ubuntu, Fedora and soon, CentOS8.  Change-Id: Ia4916938039cf5566b1e71e4518b9c5e958ca872",integration,,,,,,
recordsansible%2Fara~master~Ia4916938039cf5566b1e71e4518b9c5e958ca872,https://review.opendev.org/704386,Refactor and improve MySQL integration test coverage,"Refactor and improve MySQL integration test coverage  This removes the job ""ansible-role-ara-api-ubuntu-mysql"" and replaces it by ""ara-api-mysql"".  The job is designed to have a single database server with multiple API servers on different Linux distributions in order to get test coverage for Ubuntu, Fedora and soon, CentOS8.  Change-Id: Ia4916938039cf5566b1e71e4518b9c5e958ca872",objective,,,,,,
openstack%2Fkuryr-kubernetes~master~Iefc758ac22e1688ca9d017d5a4c1d32c4cf0583a,https://review.opendev.org/698022,Refactor of os_vif_util module.,"Refactor of os_vif_util module.  Besides refactor itself, there was several issues resolved, like appropriate data handling - because macvlan driver is still using neutron client, we have to deal with dict data and openstacksdk objects at the same time in couple of helper methods in os_vif_util module.  Furthermore, helper method for creating port object for test purposes was moved to fake module, since it is also utilized in test for os vif utils.  Change-Id: Iefc758ac22e1688ca9d017d5a4c1d32c4cf0583a Implements: blueprint switch-to-openstacksdk",testing,,,,,,
openstack%2Fkuryr-kubernetes~master~Iefc758ac22e1688ca9d017d5a4c1d32c4cf0583a,https://review.opendev.org/698022,Refactor of os_vif_util module.,"Refactor of os_vif_util module.  Besides refactor itself, there was several issues resolved, like appropriate data handling - because macvlan driver is still using neutron client, we have to deal with dict data and openstacksdk objects at the same time in couple of helper methods in os_vif_util module.  Furthermore, helper method for creating port object for test purposes was moved to fake module, since it is also utilized in test for os vif utils.  Change-Id: Iefc758ac22e1688ca9d017d5a4c1d32c4cf0583a Implements: blueprint switch-to-openstacksdk",quality,,,,,,
openstack%2Fkuryr-kubernetes~master~Iefc758ac22e1688ca9d017d5a4c1d32c4cf0583a,https://review.opendev.org/698022,Refactor of os_vif_util module.,"Refactor of os_vif_util module.  Besides refactor itself, there was several issues resolved, like appropriate data handling - because macvlan driver is still using neutron client, we have to deal with dict data and openstacksdk objects at the same time in couple of helper methods in os_vif_util module.  Furthermore, helper method for creating port object for test purposes was moved to fake module, since it is also utilized in test for os vif utils.  Change-Id: Iefc758ac22e1688ca9d017d5a4c1d32c4cf0583a Implements: blueprint switch-to-openstacksdk",objective,,,,,,
starlingx%2Fconfig~master~I3f1c730459cc3e08ba9ce98e28afa1ec8260db16,https://review.opendev.org/702537,Refactor unit test API example to use unit test mixins,"Refactor unit test API example to use unit test mixins  The test_pv file is being used as a reference when writing new API unit tests, and has been refactored to use the mixin classes that other unit tests utilize.  This should allow other API configurations and permutations to be more easily testable.  Change-Id: I3f1c730459cc3e08ba9ce98e28afa1ec8260db16 Story: 2007082 Task: 38112 Signed-off-by: Al Bailey <Al.Bailey@windriver.com>",testing,,,,,,
starlingx%2Fconfig~master~I3f1c730459cc3e08ba9ce98e28afa1ec8260db16,https://review.opendev.org/702537,Refactor unit test API example to use unit test mixins,"Refactor unit test API example to use unit test mixins  The test_pv file is being used as a reference when writing new API unit tests, and has been refactored to use the mixin classes that other unit tests utilize.  This should allow other API configurations and permutations to be more easily testable.  Change-Id: I3f1c730459cc3e08ba9ce98e28afa1ec8260db16 Story: 2007082 Task: 38112 Signed-off-by: Al Bailey <Al.Bailey@windriver.com>",quality,,,,,,
starlingx%2Fconfig~master~I3f1c730459cc3e08ba9ce98e28afa1ec8260db16,https://review.opendev.org/702537,Refactor unit test API example to use unit test mixins,"Refactor unit test API example to use unit test mixins  The test_pv file is being used as a reference when writing new API unit tests, and has been refactored to use the mixin classes that other unit tests utilize.  This should allow other API configurations and permutations to be more easily testable.  Change-Id: I3f1c730459cc3e08ba9ce98e28afa1ec8260db16 Story: 2007082 Task: 38112 Signed-off-by: Al Bailey <Al.Bailey@windriver.com>",objective,,,,,,
starlingx%2Fconfig~master~I3f1c730459cc3e08ba9ce98e28afa1ec8260db16,https://review.opendev.org/702537,Refactor unit test API example to use unit test mixins,"Refactor unit test API example to use unit test mixins  The test_pv file is being used as a reference when writing new API unit tests, and has been refactored to use the mixin classes that other unit tests utilize.  This should allow other API configurations and permutations to be more easily testable.  Change-Id: I3f1c730459cc3e08ba9ce98e28afa1ec8260db16 Story: 2007082 Task: 38112 Signed-off-by: Al Bailey <Al.Bailey@windriver.com>",integration,,,,,,
openstack%2Foslo.config~master~I54ba989768d074a5f24897299c85bd35fa1cbd1a,https://review.opendev.org/451933,Refactor unit tests for CLI usage,"Refactor unit tests for CLI usage  Prior to this change, CLI usage was hardcoded into the config opt fixture used for all tests. That CLI usage described two required positional arguments that were not actually part of the argument parser (FOO and BAR), but were instead just made up to have a valid-looking usage description.  The trouble is that you can't then extend that argument parser with additional real arguments, and then test the configuration of those arguments by inspecting the *real* usage and --help output from argparse. For example, a unit test could not assert whether argparse was configured correctly by oslo.config, because there's simply no way to know when the usage was just statically set to the arbitrary values of ""FOO BAR.""  This patch moves that specific unit test coverage (overriding usage with something arbitrary) into a dedicated unit test, while removing the arbitrary usage from all other unit tests. Instead, those unit tests now make assertions against the argparser's real configuration, hence options like --config-dir and --config-file now appear in those tests, because those options are included in every instance of cfg.ConfigOpts().  Change-Id: I54ba989768d074a5f24897299c85bd35fa1cbd1a",testing,,,,,,
openstack%2Foslo.config~master~I54ba989768d074a5f24897299c85bd35fa1cbd1a,https://review.opendev.org/451933,Refactor unit tests for CLI usage,"Refactor unit tests for CLI usage  Prior to this change, CLI usage was hardcoded into the config opt fixture used for all tests. That CLI usage described two required positional arguments that were not actually part of the argument parser (FOO and BAR), but were instead just made up to have a valid-looking usage description.  The trouble is that you can't then extend that argument parser with additional real arguments, and then test the configuration of those arguments by inspecting the *real* usage and --help output from argparse. For example, a unit test could not assert whether argparse was configured correctly by oslo.config, because there's simply no way to know when the usage was just statically set to the arbitrary values of ""FOO BAR.""  This patch moves that specific unit test coverage (overriding usage with something arbitrary) into a dedicated unit test, while removing the arbitrary usage from all other unit tests. Instead, those unit tests now make assertions against the argparser's real configuration, hence options like --config-dir and --config-file now appear in those tests, because those options are included in every instance of cfg.ConfigOpts().  Change-Id: I54ba989768d074a5f24897299c85bd35fa1cbd1a",quality,,,,,,
openstack%2Foslo.config~master~I54ba989768d074a5f24897299c85bd35fa1cbd1a,https://review.opendev.org/451933,Refactor unit tests for CLI usage,"Refactor unit tests for CLI usage  Prior to this change, CLI usage was hardcoded into the config opt fixture used for all tests. That CLI usage described two required positional arguments that were not actually part of the argument parser (FOO and BAR), but were instead just made up to have a valid-looking usage description.  The trouble is that you can't then extend that argument parser with additional real arguments, and then test the configuration of those arguments by inspecting the *real* usage and --help output from argparse. For example, a unit test could not assert whether argparse was configured correctly by oslo.config, because there's simply no way to know when the usage was just statically set to the arbitrary values of ""FOO BAR.""  This patch moves that specific unit test coverage (overriding usage with something arbitrary) into a dedicated unit test, while removing the arbitrary usage from all other unit tests. Instead, those unit tests now make assertions against the argparser's real configuration, hence options like --config-dir and --config-file now appear in those tests, because those options are included in every instance of cfg.ConfigOpts().  Change-Id: I54ba989768d074a5f24897299c85bd35fa1cbd1a",objective,,,,,,
openstack%2Fcyborg~master~I79379f55f3ea0690c58a7835d1e8c31117245626,https://review.opendev.org/696393,Refactor _gen_resource_inventory,"Refactor _gen_resource_inventory  This refactors _gen_resource_inventory as suggested in [1], simplifying by removing unused fields which duplicated defaults that are set by placement itself.  This patch introduces the previously absent test suite for conductor manager.  [1] I0aac84a1fc6b00b5523927bee27f7491daecd786  Change-Id: I79379f55f3ea0690c58a7835d1e8c31117245626",testing,,,,,,
openstack%2Fcyborg~master~I79379f55f3ea0690c58a7835d1e8c31117245626,https://review.opendev.org/696393,Refactor _gen_resource_inventory,"Refactor _gen_resource_inventory  This refactors _gen_resource_inventory as suggested in [1], simplifying by removing unused fields which duplicated defaults that are set by placement itself.  This patch introduces the previously absent test suite for conductor manager.  [1] I0aac84a1fc6b00b5523927bee27f7491daecd786  Change-Id: I79379f55f3ea0690c58a7835d1e8c31117245626",quality,,,,,,
openstack%2Fcyborg~master~I79379f55f3ea0690c58a7835d1e8c31117245626,https://review.opendev.org/696393,Refactor _gen_resource_inventory,"Refactor _gen_resource_inventory  This refactors _gen_resource_inventory as suggested in [1], simplifying by removing unused fields which duplicated defaults that are set by placement itself.  This patch introduces the previously absent test suite for conductor manager.  [1] I0aac84a1fc6b00b5523927bee27f7491daecd786  Change-Id: I79379f55f3ea0690c58a7835d1e8c31117245626",objective,,,,,,
starlingx%2Fmetal~r%2Fstx.3.0~Ic224a9c33e0283a611725b33c90009132cab3382,https://review.opendev.org/698311,Refactor BMC provisioning in Maintenance,"Refactor BMC provisioning in Maintenance  The current mechanism used to preserve the learned bmc protocol in the filesystem on the active controller is problematic over swact.  This update removes the file storage method in favor of preserving the learned protocol in the system inventory database as a key/value pair at the host level in already existing mtce_info database field.  The specified or learned bmc access protocol is then shared with the hardware monitor through inter-daemon maintenance messaging.  This update refactors bmc provisioning to accommodate bmc protocol selection at the host rather than system level. Towards that this update removes system level bmc_access_method selection in favor of host level selection through bm_type. A bm_type of 'bmc' specifies that the bmc access protocol for that host be learned. This has the effect of making it the same as what is delivered today but without support for changing it as the system level.  A system inventory update will be delivered shortly that enables bmc access protocol selection at the host level. That update allows the customer to specify the bmc access protocol at the host level to be either dynamic (aka learned) or to only use 'redfish' or 'ipmi'. That system inventory update delivers that information to maintenance through bm_type via bmc provisioning. Until that update is delivered bm_type always comes in as 'bmc' which get interpreted as 'dynamic' to maintain existing configuration.  The following additional issues were also fixed in this update.  1. The nodeTimers module defaults the 'ring' member of timers that are    not running to false but should be true.  2. Added a pingUtil_restart function to facilitate quicker sensor    monitoring following provisioning changes and bmc access failures.  3. Enhanced the hardware monitor sensor grouping filter to accommodate    non-standard Redfish readout labelling so that more sensors fall    into the existing canned groups ; leads to more monitored sensors.  4. Added a 'http security mode' to hardware monitor messaging. This    defaults to https as that is all that is supported by the Redfish    implementation today. This field can be used to specify non-secure    'http' mode in the future when that gets implemented.  5. Ensure the hardware monitor performs a bmc password re-fetch on every    provisioning change.  Test Plan:  PASS: Verify bmc access protocol store/fetched from the database (mtce_info) PASS: Verify inventory push from mtcAgent to hwmond over mtcAgent restart PASS: Verify inventory push from mtcAgent to hwmond over hwmon restart PASS: Verify bmc provisioning of ipmi and redfish servers PASS: Verify learned bmc protocol persists over process restart and swact PASS: Verify process startup with protocol already learned  Hardware Monitor:  PASS: Verify bmc_type=ipmi handling ; protocol forced to ipmi ; (re)prov PASS: Verify bmc_type=redfish handling ; protocol forced to redfish ; (re)prov PASS: Verify bmc_type=dynamic handling ; protocol is learned then persisted PASS: Verify sensor model delete and relearn over ip address change PASS: Verify sensor model delete and relearn over bm_type change change PASS: Verify sensor model not relearned username change PASS: Verify bm pw is re-fetched over any (re)provisioning change PASS: Verify bmc re-provisioning soak (test-bmc-reprovisioning.sh 50 loops) PASS: Verify protocol change handling, file cleanup, model recreation PASS: Verify End-2-End behavior for bm_type change from redfish to ipmi PASS: Verify End-2-End behavior for bm_type change from ipmi to redfish PASS: Verify End-2-End behavior for bm_type change from redfish to dynamic PASS: Verify End-2-End behavior for bm_type change from ipmi to dynamic PASS: Verify End-2-End behavior for bm_type change from dynamic to ipmi PASS: Verify End-2-End behavior for bm_type change from dynamic to redfish PASS: Verify sensor model creation waits for server power to be on PASS: Verify sensor relearn by provisioning change during model creation. (soak)  Regression:  PASS: Verify host power off and on. PASS: Verify BMC access alarm handling (assert and clear) PASS: Verify mtcAgent and hwmond logs add value PASS: Verify no core dumps / seg faults. PASS: Verify no mtcAgent and hwmond memory leak. PASS: Verify delete of BMC provisioned host PASS: Verify sensor monitoring, alarming, degrade and then clear cycle PASS: Verify static analysis report of changed modules. PASS: Verify host level bm_type=bmc functions as would dynamic selection PASS: Verify batch provisioning and deprovisioning (7 nodes) PASS: Verify batch provisioning to different protocol (5 nodes) PASS: Verify handling of flaky Redfish responses  PASS: Verify System Install  Change-Id: Ic224a9c33e0283a611725b33c90009132cab3382 Closes-Bug: #1853471 Signed-off-by: Eric MacDonald <eric.macdonald@windriver.com> (cherry picked from commit c4b8171ddd2670d9bcc11e6c8f7e2f2bfcdc024e)",testing,,,,,,
starlingx%2Fmetal~r%2Fstx.3.0~Ic224a9c33e0283a611725b33c90009132cab3382,https://review.opendev.org/698311,Refactor BMC provisioning in Maintenance,"Refactor BMC provisioning in Maintenance  The current mechanism used to preserve the learned bmc protocol in the filesystem on the active controller is problematic over swact.  This update removes the file storage method in favor of preserving the learned protocol in the system inventory database as a key/value pair at the host level in already existing mtce_info database field.  The specified or learned bmc access protocol is then shared with the hardware monitor through inter-daemon maintenance messaging.  This update refactors bmc provisioning to accommodate bmc protocol selection at the host rather than system level. Towards that this update removes system level bmc_access_method selection in favor of host level selection through bm_type. A bm_type of 'bmc' specifies that the bmc access protocol for that host be learned. This has the effect of making it the same as what is delivered today but without support for changing it as the system level.  A system inventory update will be delivered shortly that enables bmc access protocol selection at the host level. That update allows the customer to specify the bmc access protocol at the host level to be either dynamic (aka learned) or to only use 'redfish' or 'ipmi'. That system inventory update delivers that information to maintenance through bm_type via bmc provisioning. Until that update is delivered bm_type always comes in as 'bmc' which get interpreted as 'dynamic' to maintain existing configuration.  The following additional issues were also fixed in this update.  1. The nodeTimers module defaults the 'ring' member of timers that are    not running to false but should be true.  2. Added a pingUtil_restart function to facilitate quicker sensor    monitoring following provisioning changes and bmc access failures.  3. Enhanced the hardware monitor sensor grouping filter to accommodate    non-standard Redfish readout labelling so that more sensors fall    into the existing canned groups ; leads to more monitored sensors.  4. Added a 'http security mode' to hardware monitor messaging. This    defaults to https as that is all that is supported by the Redfish    implementation today. This field can be used to specify non-secure    'http' mode in the future when that gets implemented.  5. Ensure the hardware monitor performs a bmc password re-fetch on every    provisioning change.  Test Plan:  PASS: Verify bmc access protocol store/fetched from the database (mtce_info) PASS: Verify inventory push from mtcAgent to hwmond over mtcAgent restart PASS: Verify inventory push from mtcAgent to hwmond over hwmon restart PASS: Verify bmc provisioning of ipmi and redfish servers PASS: Verify learned bmc protocol persists over process restart and swact PASS: Verify process startup with protocol already learned  Hardware Monitor:  PASS: Verify bmc_type=ipmi handling ; protocol forced to ipmi ; (re)prov PASS: Verify bmc_type=redfish handling ; protocol forced to redfish ; (re)prov PASS: Verify bmc_type=dynamic handling ; protocol is learned then persisted PASS: Verify sensor model delete and relearn over ip address change PASS: Verify sensor model delete and relearn over bm_type change change PASS: Verify sensor model not relearned username change PASS: Verify bm pw is re-fetched over any (re)provisioning change PASS: Verify bmc re-provisioning soak (test-bmc-reprovisioning.sh 50 loops) PASS: Verify protocol change handling, file cleanup, model recreation PASS: Verify End-2-End behavior for bm_type change from redfish to ipmi PASS: Verify End-2-End behavior for bm_type change from ipmi to redfish PASS: Verify End-2-End behavior for bm_type change from redfish to dynamic PASS: Verify End-2-End behavior for bm_type change from ipmi to dynamic PASS: Verify End-2-End behavior for bm_type change from dynamic to ipmi PASS: Verify End-2-End behavior for bm_type change from dynamic to redfish PASS: Verify sensor model creation waits for server power to be on PASS: Verify sensor relearn by provisioning change during model creation. (soak)  Regression:  PASS: Verify host power off and on. PASS: Verify BMC access alarm handling (assert and clear) PASS: Verify mtcAgent and hwmond logs add value PASS: Verify no core dumps / seg faults. PASS: Verify no mtcAgent and hwmond memory leak. PASS: Verify delete of BMC provisioned host PASS: Verify sensor monitoring, alarming, degrade and then clear cycle PASS: Verify static analysis report of changed modules. PASS: Verify host level bm_type=bmc functions as would dynamic selection PASS: Verify batch provisioning and deprovisioning (7 nodes) PASS: Verify batch provisioning to different protocol (5 nodes) PASS: Verify handling of flaky Redfish responses  PASS: Verify System Install  Change-Id: Ic224a9c33e0283a611725b33c90009132cab3382 Closes-Bug: #1853471 Signed-off-by: Eric MacDonald <eric.macdonald@windriver.com> (cherry picked from commit c4b8171ddd2670d9bcc11e6c8f7e2f2bfcdc024e)",quality,,,,,,
starlingx%2Fmetal~r%2Fstx.3.0~Ic224a9c33e0283a611725b33c90009132cab3382,https://review.opendev.org/698311,Refactor BMC provisioning in Maintenance,"Refactor BMC provisioning in Maintenance  The current mechanism used to preserve the learned bmc protocol in the filesystem on the active controller is problematic over swact.  This update removes the file storage method in favor of preserving the learned protocol in the system inventory database as a key/value pair at the host level in already existing mtce_info database field.  The specified or learned bmc access protocol is then shared with the hardware monitor through inter-daemon maintenance messaging.  This update refactors bmc provisioning to accommodate bmc protocol selection at the host rather than system level. Towards that this update removes system level bmc_access_method selection in favor of host level selection through bm_type. A bm_type of 'bmc' specifies that the bmc access protocol for that host be learned. This has the effect of making it the same as what is delivered today but without support for changing it as the system level.  A system inventory update will be delivered shortly that enables bmc access protocol selection at the host level. That update allows the customer to specify the bmc access protocol at the host level to be either dynamic (aka learned) or to only use 'redfish' or 'ipmi'. That system inventory update delivers that information to maintenance through bm_type via bmc provisioning. Until that update is delivered bm_type always comes in as 'bmc' which get interpreted as 'dynamic' to maintain existing configuration.  The following additional issues were also fixed in this update.  1. The nodeTimers module defaults the 'ring' member of timers that are    not running to false but should be true.  2. Added a pingUtil_restart function to facilitate quicker sensor    monitoring following provisioning changes and bmc access failures.  3. Enhanced the hardware monitor sensor grouping filter to accommodate    non-standard Redfish readout labelling so that more sensors fall    into the existing canned groups ; leads to more monitored sensors.  4. Added a 'http security mode' to hardware monitor messaging. This    defaults to https as that is all that is supported by the Redfish    implementation today. This field can be used to specify non-secure    'http' mode in the future when that gets implemented.  5. Ensure the hardware monitor performs a bmc password re-fetch on every    provisioning change.  Test Plan:  PASS: Verify bmc access protocol store/fetched from the database (mtce_info) PASS: Verify inventory push from mtcAgent to hwmond over mtcAgent restart PASS: Verify inventory push from mtcAgent to hwmond over hwmon restart PASS: Verify bmc provisioning of ipmi and redfish servers PASS: Verify learned bmc protocol persists over process restart and swact PASS: Verify process startup with protocol already learned  Hardware Monitor:  PASS: Verify bmc_type=ipmi handling ; protocol forced to ipmi ; (re)prov PASS: Verify bmc_type=redfish handling ; protocol forced to redfish ; (re)prov PASS: Verify bmc_type=dynamic handling ; protocol is learned then persisted PASS: Verify sensor model delete and relearn over ip address change PASS: Verify sensor model delete and relearn over bm_type change change PASS: Verify sensor model not relearned username change PASS: Verify bm pw is re-fetched over any (re)provisioning change PASS: Verify bmc re-provisioning soak (test-bmc-reprovisioning.sh 50 loops) PASS: Verify protocol change handling, file cleanup, model recreation PASS: Verify End-2-End behavior for bm_type change from redfish to ipmi PASS: Verify End-2-End behavior for bm_type change from ipmi to redfish PASS: Verify End-2-End behavior for bm_type change from redfish to dynamic PASS: Verify End-2-End behavior for bm_type change from ipmi to dynamic PASS: Verify End-2-End behavior for bm_type change from dynamic to ipmi PASS: Verify End-2-End behavior for bm_type change from dynamic to redfish PASS: Verify sensor model creation waits for server power to be on PASS: Verify sensor relearn by provisioning change during model creation. (soak)  Regression:  PASS: Verify host power off and on. PASS: Verify BMC access alarm handling (assert and clear) PASS: Verify mtcAgent and hwmond logs add value PASS: Verify no core dumps / seg faults. PASS: Verify no mtcAgent and hwmond memory leak. PASS: Verify delete of BMC provisioned host PASS: Verify sensor monitoring, alarming, degrade and then clear cycle PASS: Verify static analysis report of changed modules. PASS: Verify host level bm_type=bmc functions as would dynamic selection PASS: Verify batch provisioning and deprovisioning (7 nodes) PASS: Verify batch provisioning to different protocol (5 nodes) PASS: Verify handling of flaky Redfish responses  PASS: Verify System Install  Change-Id: Ic224a9c33e0283a611725b33c90009132cab3382 Closes-Bug: #1853471 Signed-off-by: Eric MacDonald <eric.macdonald@windriver.com> (cherry picked from commit c4b8171ddd2670d9bcc11e6c8f7e2f2bfcdc024e)",integration,,,,,,
starlingx%2Fmetal~r%2Fstx.3.0~Ic224a9c33e0283a611725b33c90009132cab3382,https://review.opendev.org/698311,Refactor BMC provisioning in Maintenance,"Refactor BMC provisioning in Maintenance  The current mechanism used to preserve the learned bmc protocol in the filesystem on the active controller is problematic over swact.  This update removes the file storage method in favor of preserving the learned protocol in the system inventory database as a key/value pair at the host level in already existing mtce_info database field.  The specified or learned bmc access protocol is then shared with the hardware monitor through inter-daemon maintenance messaging.  This update refactors bmc provisioning to accommodate bmc protocol selection at the host rather than system level. Towards that this update removes system level bmc_access_method selection in favor of host level selection through bm_type. A bm_type of 'bmc' specifies that the bmc access protocol for that host be learned. This has the effect of making it the same as what is delivered today but without support for changing it as the system level.  A system inventory update will be delivered shortly that enables bmc access protocol selection at the host level. That update allows the customer to specify the bmc access protocol at the host level to be either dynamic (aka learned) or to only use 'redfish' or 'ipmi'. That system inventory update delivers that information to maintenance through bm_type via bmc provisioning. Until that update is delivered bm_type always comes in as 'bmc' which get interpreted as 'dynamic' to maintain existing configuration.  The following additional issues were also fixed in this update.  1. The nodeTimers module defaults the 'ring' member of timers that are    not running to false but should be true.  2. Added a pingUtil_restart function to facilitate quicker sensor    monitoring following provisioning changes and bmc access failures.  3. Enhanced the hardware monitor sensor grouping filter to accommodate    non-standard Redfish readout labelling so that more sensors fall    into the existing canned groups ; leads to more monitored sensors.  4. Added a 'http security mode' to hardware monitor messaging. This    defaults to https as that is all that is supported by the Redfish    implementation today. This field can be used to specify non-secure    'http' mode in the future when that gets implemented.  5. Ensure the hardware monitor performs a bmc password re-fetch on every    provisioning change.  Test Plan:  PASS: Verify bmc access protocol store/fetched from the database (mtce_info) PASS: Verify inventory push from mtcAgent to hwmond over mtcAgent restart PASS: Verify inventory push from mtcAgent to hwmond over hwmon restart PASS: Verify bmc provisioning of ipmi and redfish servers PASS: Verify learned bmc protocol persists over process restart and swact PASS: Verify process startup with protocol already learned  Hardware Monitor:  PASS: Verify bmc_type=ipmi handling ; protocol forced to ipmi ; (re)prov PASS: Verify bmc_type=redfish handling ; protocol forced to redfish ; (re)prov PASS: Verify bmc_type=dynamic handling ; protocol is learned then persisted PASS: Verify sensor model delete and relearn over ip address change PASS: Verify sensor model delete and relearn over bm_type change change PASS: Verify sensor model not relearned username change PASS: Verify bm pw is re-fetched over any (re)provisioning change PASS: Verify bmc re-provisioning soak (test-bmc-reprovisioning.sh 50 loops) PASS: Verify protocol change handling, file cleanup, model recreation PASS: Verify End-2-End behavior for bm_type change from redfish to ipmi PASS: Verify End-2-End behavior for bm_type change from ipmi to redfish PASS: Verify End-2-End behavior for bm_type change from redfish to dynamic PASS: Verify End-2-End behavior for bm_type change from ipmi to dynamic PASS: Verify End-2-End behavior for bm_type change from dynamic to ipmi PASS: Verify End-2-End behavior for bm_type change from dynamic to redfish PASS: Verify sensor model creation waits for server power to be on PASS: Verify sensor relearn by provisioning change during model creation. (soak)  Regression:  PASS: Verify host power off and on. PASS: Verify BMC access alarm handling (assert and clear) PASS: Verify mtcAgent and hwmond logs add value PASS: Verify no core dumps / seg faults. PASS: Verify no mtcAgent and hwmond memory leak. PASS: Verify delete of BMC provisioned host PASS: Verify sensor monitoring, alarming, degrade and then clear cycle PASS: Verify static analysis report of changed modules. PASS: Verify host level bm_type=bmc functions as would dynamic selection PASS: Verify batch provisioning and deprovisioning (7 nodes) PASS: Verify batch provisioning to different protocol (5 nodes) PASS: Verify handling of flaky Redfish responses  PASS: Verify System Install  Change-Id: Ic224a9c33e0283a611725b33c90009132cab3382 Closes-Bug: #1853471 Signed-off-by: Eric MacDonald <eric.macdonald@windriver.com> (cherry picked from commit c4b8171ddd2670d9bcc11e6c8f7e2f2bfcdc024e)",objective,,,,,,
starlingx%2Fmetal~master~Ic224a9c33e0283a611725b33c90009132cab3382,https://review.opendev.org/697309,Refactor BMC provisioning in Maintenance,"Refactor BMC provisioning in Maintenance  The current mechanism used to preserve the learned bmc protocol in the filesystem on the active controller is problematic over swact.  This update removes the file storage method in favor of preserving the learned protocol in the system inventory database as a key/value pair at the host level in already existing mtce_info database field.  The specified or learned bmc access protocol is then shared with the hardware monitor through inter-daemon maintenance messaging.  This update refactors bmc provisioning to accommodate bmc protocol selection at the host rather than system level. Towards that this update removes system level bmc_access_method selection in favor of host level selection through bm_type. A bm_type of 'bmc' specifies that the bmc access protocol for that host be learned. This has the effect of making it the same as what is delivered today but without support for changing it as the system level.  A system inventory update will be delivered shortly that enables bmc access protocol selection at the host level. That update allows the customer to specify the bmc access protocol at the host level to be either dynamic (aka learned) or to only use 'redfish' or 'ipmi'. That system inventory update delivers that information to maintenance through bm_type via bmc provisioning. Until that update is delivered bm_type always comes in as 'bmc' which get interpreted as 'dynamic' to maintain existing configuration.  The following additional issues were also fixed in this update.  1. The nodeTimers module defaults the 'ring' member of timers that are    not running to false but should be true.  2. Added a pingUtil_restart function to facilitate quicker sensor    monitoring following provisioning changes and bmc access failures.  3. Enhanced the hardware monitor sensor grouping filter to accommodate    non-standard Redfish readout labelling so that more sensors fall    into the existing canned groups ; leads to more monitored sensors.  4. Added a 'http security mode' to hardware monitor messaging. This    defaults to https as that is all that is supported by the Redfish    implementation today. This field can be used to specify non-secure    'http' mode in the future when that gets implemented.  5. Ensure the hardware monitor performs a bmc password re-fetch on every    provisioning change.  Test Plan:  PASS: Verify bmc access protocol store/fetched from the database (mtce_info) PASS: Verify inventory push from mtcAgent to hwmond over mtcAgent restart PASS: Verify inventory push from mtcAgent to hwmond over hwmon restart PASS: Verify bmc provisioning of ipmi and redfish servers PASS: Verify learned bmc protocol persists over process restart and swact PASS: Verify process startup with protocol already learned  Hardware Monitor:  PASS: Verify bmc_type=ipmi handling ; protocol forced to ipmi ; (re)prov PASS: Verify bmc_type=redfish handling ; protocol forced to redfish ; (re)prov PASS: Verify bmc_type=dynamic handling ; protocol is learned then persisted PASS: Verify sensor model delete and relearn over ip address change PASS: Verify sensor model delete and relearn over bm_type change change PASS: Verify sensor model not relearned username change PASS: Verify bm pw is re-fetched over any (re)provisioning change PASS: Verify bmc re-provisioning soak (test-bmc-reprovisioning.sh 50 loops) PASS: Verify protocol change handling, file cleanup, model recreation PASS: Verify End-2-End behavior for bm_type change from redfish to ipmi PASS: Verify End-2-End behavior for bm_type change from ipmi to redfish PASS: Verify End-2-End behavior for bm_type change from redfish to dynamic PASS: Verify End-2-End behavior for bm_type change from ipmi to dynamic PASS: Verify End-2-End behavior for bm_type change from dynamic to ipmi PASS: Verify End-2-End behavior for bm_type change from dynamic to redfish PASS: Verify sensor model creation waits for server power to be on PASS: Verify sensor relearn by provisioning change during model creation. (soak)  Regression:  PASS: Verify host power off and on. PASS: Verify BMC access alarm handling (assert and clear) PASS: Verify mtcAgent and hwmond logs add value PASS: Verify no core dumps / seg faults. PASS: Verify no mtcAgent and hwmond memory leak. PASS: Verify delete of BMC provisioned host PASS: Verify sensor monitoring, alarming, degrade and then clear cycle PASS: Verify static analysis report of changed modules. PASS: Verify host level bm_type=bmc functions as would dynamic selection PASS: Verify batch provisioning and deprovisioning (7 nodes) PASS: Verify batch provisioning to different protocol (5 nodes) PASS: Verify handling of flaky Redfish responses  PEND: Verify System Install  Change-Id: Ic224a9c33e0283a611725b33c90009132cab3382 Closes-Bug: #1853471 Signed-off-by: Eric MacDonald <eric.macdonald@windriver.com>",testing,,,,,,
starlingx%2Fmetal~master~Ic224a9c33e0283a611725b33c90009132cab3382,https://review.opendev.org/697309,Refactor BMC provisioning in Maintenance,"Refactor BMC provisioning in Maintenance  The current mechanism used to preserve the learned bmc protocol in the filesystem on the active controller is problematic over swact.  This update removes the file storage method in favor of preserving the learned protocol in the system inventory database as a key/value pair at the host level in already existing mtce_info database field.  The specified or learned bmc access protocol is then shared with the hardware monitor through inter-daemon maintenance messaging.  This update refactors bmc provisioning to accommodate bmc protocol selection at the host rather than system level. Towards that this update removes system level bmc_access_method selection in favor of host level selection through bm_type. A bm_type of 'bmc' specifies that the bmc access protocol for that host be learned. This has the effect of making it the same as what is delivered today but without support for changing it as the system level.  A system inventory update will be delivered shortly that enables bmc access protocol selection at the host level. That update allows the customer to specify the bmc access protocol at the host level to be either dynamic (aka learned) or to only use 'redfish' or 'ipmi'. That system inventory update delivers that information to maintenance through bm_type via bmc provisioning. Until that update is delivered bm_type always comes in as 'bmc' which get interpreted as 'dynamic' to maintain existing configuration.  The following additional issues were also fixed in this update.  1. The nodeTimers module defaults the 'ring' member of timers that are    not running to false but should be true.  2. Added a pingUtil_restart function to facilitate quicker sensor    monitoring following provisioning changes and bmc access failures.  3. Enhanced the hardware monitor sensor grouping filter to accommodate    non-standard Redfish readout labelling so that more sensors fall    into the existing canned groups ; leads to more monitored sensors.  4. Added a 'http security mode' to hardware monitor messaging. This    defaults to https as that is all that is supported by the Redfish    implementation today. This field can be used to specify non-secure    'http' mode in the future when that gets implemented.  5. Ensure the hardware monitor performs a bmc password re-fetch on every    provisioning change.  Test Plan:  PASS: Verify bmc access protocol store/fetched from the database (mtce_info) PASS: Verify inventory push from mtcAgent to hwmond over mtcAgent restart PASS: Verify inventory push from mtcAgent to hwmond over hwmon restart PASS: Verify bmc provisioning of ipmi and redfish servers PASS: Verify learned bmc protocol persists over process restart and swact PASS: Verify process startup with protocol already learned  Hardware Monitor:  PASS: Verify bmc_type=ipmi handling ; protocol forced to ipmi ; (re)prov PASS: Verify bmc_type=redfish handling ; protocol forced to redfish ; (re)prov PASS: Verify bmc_type=dynamic handling ; protocol is learned then persisted PASS: Verify sensor model delete and relearn over ip address change PASS: Verify sensor model delete and relearn over bm_type change change PASS: Verify sensor model not relearned username change PASS: Verify bm pw is re-fetched over any (re)provisioning change PASS: Verify bmc re-provisioning soak (test-bmc-reprovisioning.sh 50 loops) PASS: Verify protocol change handling, file cleanup, model recreation PASS: Verify End-2-End behavior for bm_type change from redfish to ipmi PASS: Verify End-2-End behavior for bm_type change from ipmi to redfish PASS: Verify End-2-End behavior for bm_type change from redfish to dynamic PASS: Verify End-2-End behavior for bm_type change from ipmi to dynamic PASS: Verify End-2-End behavior for bm_type change from dynamic to ipmi PASS: Verify End-2-End behavior for bm_type change from dynamic to redfish PASS: Verify sensor model creation waits for server power to be on PASS: Verify sensor relearn by provisioning change during model creation. (soak)  Regression:  PASS: Verify host power off and on. PASS: Verify BMC access alarm handling (assert and clear) PASS: Verify mtcAgent and hwmond logs add value PASS: Verify no core dumps / seg faults. PASS: Verify no mtcAgent and hwmond memory leak. PASS: Verify delete of BMC provisioned host PASS: Verify sensor monitoring, alarming, degrade and then clear cycle PASS: Verify static analysis report of changed modules. PASS: Verify host level bm_type=bmc functions as would dynamic selection PASS: Verify batch provisioning and deprovisioning (7 nodes) PASS: Verify batch provisioning to different protocol (5 nodes) PASS: Verify handling of flaky Redfish responses  PEND: Verify System Install  Change-Id: Ic224a9c33e0283a611725b33c90009132cab3382 Closes-Bug: #1853471 Signed-off-by: Eric MacDonald <eric.macdonald@windriver.com>",quality,,,,,,
starlingx%2Fmetal~master~Ic224a9c33e0283a611725b33c90009132cab3382,https://review.opendev.org/697309,Refactor BMC provisioning in Maintenance,"Refactor BMC provisioning in Maintenance  The current mechanism used to preserve the learned bmc protocol in the filesystem on the active controller is problematic over swact.  This update removes the file storage method in favor of preserving the learned protocol in the system inventory database as a key/value pair at the host level in already existing mtce_info database field.  The specified or learned bmc access protocol is then shared with the hardware monitor through inter-daemon maintenance messaging.  This update refactors bmc provisioning to accommodate bmc protocol selection at the host rather than system level. Towards that this update removes system level bmc_access_method selection in favor of host level selection through bm_type. A bm_type of 'bmc' specifies that the bmc access protocol for that host be learned. This has the effect of making it the same as what is delivered today but without support for changing it as the system level.  A system inventory update will be delivered shortly that enables bmc access protocol selection at the host level. That update allows the customer to specify the bmc access protocol at the host level to be either dynamic (aka learned) or to only use 'redfish' or 'ipmi'. That system inventory update delivers that information to maintenance through bm_type via bmc provisioning. Until that update is delivered bm_type always comes in as 'bmc' which get interpreted as 'dynamic' to maintain existing configuration.  The following additional issues were also fixed in this update.  1. The nodeTimers module defaults the 'ring' member of timers that are    not running to false but should be true.  2. Added a pingUtil_restart function to facilitate quicker sensor    monitoring following provisioning changes and bmc access failures.  3. Enhanced the hardware monitor sensor grouping filter to accommodate    non-standard Redfish readout labelling so that more sensors fall    into the existing canned groups ; leads to more monitored sensors.  4. Added a 'http security mode' to hardware monitor messaging. This    defaults to https as that is all that is supported by the Redfish    implementation today. This field can be used to specify non-secure    'http' mode in the future when that gets implemented.  5. Ensure the hardware monitor performs a bmc password re-fetch on every    provisioning change.  Test Plan:  PASS: Verify bmc access protocol store/fetched from the database (mtce_info) PASS: Verify inventory push from mtcAgent to hwmond over mtcAgent restart PASS: Verify inventory push from mtcAgent to hwmond over hwmon restart PASS: Verify bmc provisioning of ipmi and redfish servers PASS: Verify learned bmc protocol persists over process restart and swact PASS: Verify process startup with protocol already learned  Hardware Monitor:  PASS: Verify bmc_type=ipmi handling ; protocol forced to ipmi ; (re)prov PASS: Verify bmc_type=redfish handling ; protocol forced to redfish ; (re)prov PASS: Verify bmc_type=dynamic handling ; protocol is learned then persisted PASS: Verify sensor model delete and relearn over ip address change PASS: Verify sensor model delete and relearn over bm_type change change PASS: Verify sensor model not relearned username change PASS: Verify bm pw is re-fetched over any (re)provisioning change PASS: Verify bmc re-provisioning soak (test-bmc-reprovisioning.sh 50 loops) PASS: Verify protocol change handling, file cleanup, model recreation PASS: Verify End-2-End behavior for bm_type change from redfish to ipmi PASS: Verify End-2-End behavior for bm_type change from ipmi to redfish PASS: Verify End-2-End behavior for bm_type change from redfish to dynamic PASS: Verify End-2-End behavior for bm_type change from ipmi to dynamic PASS: Verify End-2-End behavior for bm_type change from dynamic to ipmi PASS: Verify End-2-End behavior for bm_type change from dynamic to redfish PASS: Verify sensor model creation waits for server power to be on PASS: Verify sensor relearn by provisioning change during model creation. (soak)  Regression:  PASS: Verify host power off and on. PASS: Verify BMC access alarm handling (assert and clear) PASS: Verify mtcAgent and hwmond logs add value PASS: Verify no core dumps / seg faults. PASS: Verify no mtcAgent and hwmond memory leak. PASS: Verify delete of BMC provisioned host PASS: Verify sensor monitoring, alarming, degrade and then clear cycle PASS: Verify static analysis report of changed modules. PASS: Verify host level bm_type=bmc functions as would dynamic selection PASS: Verify batch provisioning and deprovisioning (7 nodes) PASS: Verify batch provisioning to different protocol (5 nodes) PASS: Verify handling of flaky Redfish responses  PEND: Verify System Install  Change-Id: Ic224a9c33e0283a611725b33c90009132cab3382 Closes-Bug: #1853471 Signed-off-by: Eric MacDonald <eric.macdonald@windriver.com>",integration,,,,,,
starlingx%2Fmetal~master~Ic224a9c33e0283a611725b33c90009132cab3382,https://review.opendev.org/697309,Refactor BMC provisioning in Maintenance,"Refactor BMC provisioning in Maintenance  The current mechanism used to preserve the learned bmc protocol in the filesystem on the active controller is problematic over swact.  This update removes the file storage method in favor of preserving the learned protocol in the system inventory database as a key/value pair at the host level in already existing mtce_info database field.  The specified or learned bmc access protocol is then shared with the hardware monitor through inter-daemon maintenance messaging.  This update refactors bmc provisioning to accommodate bmc protocol selection at the host rather than system level. Towards that this update removes system level bmc_access_method selection in favor of host level selection through bm_type. A bm_type of 'bmc' specifies that the bmc access protocol for that host be learned. This has the effect of making it the same as what is delivered today but without support for changing it as the system level.  A system inventory update will be delivered shortly that enables bmc access protocol selection at the host level. That update allows the customer to specify the bmc access protocol at the host level to be either dynamic (aka learned) or to only use 'redfish' or 'ipmi'. That system inventory update delivers that information to maintenance through bm_type via bmc provisioning. Until that update is delivered bm_type always comes in as 'bmc' which get interpreted as 'dynamic' to maintain existing configuration.  The following additional issues were also fixed in this update.  1. The nodeTimers module defaults the 'ring' member of timers that are    not running to false but should be true.  2. Added a pingUtil_restart function to facilitate quicker sensor    monitoring following provisioning changes and bmc access failures.  3. Enhanced the hardware monitor sensor grouping filter to accommodate    non-standard Redfish readout labelling so that more sensors fall    into the existing canned groups ; leads to more monitored sensors.  4. Added a 'http security mode' to hardware monitor messaging. This    defaults to https as that is all that is supported by the Redfish    implementation today. This field can be used to specify non-secure    'http' mode in the future when that gets implemented.  5. Ensure the hardware monitor performs a bmc password re-fetch on every    provisioning change.  Test Plan:  PASS: Verify bmc access protocol store/fetched from the database (mtce_info) PASS: Verify inventory push from mtcAgent to hwmond over mtcAgent restart PASS: Verify inventory push from mtcAgent to hwmond over hwmon restart PASS: Verify bmc provisioning of ipmi and redfish servers PASS: Verify learned bmc protocol persists over process restart and swact PASS: Verify process startup with protocol already learned  Hardware Monitor:  PASS: Verify bmc_type=ipmi handling ; protocol forced to ipmi ; (re)prov PASS: Verify bmc_type=redfish handling ; protocol forced to redfish ; (re)prov PASS: Verify bmc_type=dynamic handling ; protocol is learned then persisted PASS: Verify sensor model delete and relearn over ip address change PASS: Verify sensor model delete and relearn over bm_type change change PASS: Verify sensor model not relearned username change PASS: Verify bm pw is re-fetched over any (re)provisioning change PASS: Verify bmc re-provisioning soak (test-bmc-reprovisioning.sh 50 loops) PASS: Verify protocol change handling, file cleanup, model recreation PASS: Verify End-2-End behavior for bm_type change from redfish to ipmi PASS: Verify End-2-End behavior for bm_type change from ipmi to redfish PASS: Verify End-2-End behavior for bm_type change from redfish to dynamic PASS: Verify End-2-End behavior for bm_type change from ipmi to dynamic PASS: Verify End-2-End behavior for bm_type change from dynamic to ipmi PASS: Verify End-2-End behavior for bm_type change from dynamic to redfish PASS: Verify sensor model creation waits for server power to be on PASS: Verify sensor relearn by provisioning change during model creation. (soak)  Regression:  PASS: Verify host power off and on. PASS: Verify BMC access alarm handling (assert and clear) PASS: Verify mtcAgent and hwmond logs add value PASS: Verify no core dumps / seg faults. PASS: Verify no mtcAgent and hwmond memory leak. PASS: Verify delete of BMC provisioned host PASS: Verify sensor monitoring, alarming, degrade and then clear cycle PASS: Verify static analysis report of changed modules. PASS: Verify host level bm_type=bmc functions as would dynamic selection PASS: Verify batch provisioning and deprovisioning (7 nodes) PASS: Verify batch provisioning to different protocol (5 nodes) PASS: Verify handling of flaky Redfish responses  PEND: Verify System Install  Change-Id: Ic224a9c33e0283a611725b33c90009132cab3382 Closes-Bug: #1853471 Signed-off-by: Eric MacDonald <eric.macdonald@windriver.com>",objective,,,,,,
openstack%2Fnova~master~Id0e8b1c32600d53382e5ac938e403258c80221a0,https://review.opendev.org/682741,Refactor volume connection cleanup out of _post_live_migration,Refactor volume connection cleanup out of _post_live_migration  The _post_live_migration method is huge and hard to review/test/ maintain in isolation so we need to break down the complexity. To that end this change refactors the source host volume connection cleanup code into another method which also allows us to simplify a couple of unit tests that target that specific set of code. The error handling in that new method is tested by the functional test class LiveMigrationCinderFailure.  Change-Id: Id0e8b1c32600d53382e5ac938e403258c80221a0,testing,,,,,,
openstack%2Fnova~master~Id0e8b1c32600d53382e5ac938e403258c80221a0,https://review.opendev.org/682741,Refactor volume connection cleanup out of _post_live_migration,Refactor volume connection cleanup out of _post_live_migration  The _post_live_migration method is huge and hard to review/test/ maintain in isolation so we need to break down the complexity. To that end this change refactors the source host volume connection cleanup code into another method which also allows us to simplify a couple of unit tests that target that specific set of code. The error handling in that new method is tested by the functional test class LiveMigrationCinderFailure.  Change-Id: Id0e8b1c32600d53382e5ac938e403258c80221a0,quality,,,,,,
openstack%2Fnova~master~Id0e8b1c32600d53382e5ac938e403258c80221a0,https://review.opendev.org/682741,Refactor volume connection cleanup out of _post_live_migration,Refactor volume connection cleanup out of _post_live_migration  The _post_live_migration method is huge and hard to review/test/ maintain in isolation so we need to break down the complexity. To that end this change refactors the source host volume connection cleanup code into another method which also allows us to simplify a couple of unit tests that target that specific set of code. The error handling in that new method is tested by the functional test class LiveMigrationCinderFailure.  Change-Id: Id0e8b1c32600d53382e5ac938e403258c80221a0,objective,,,,,,
starlingx%2Fconfig~master~Ic94a84e93f0511ecdaeb159521980a3c8bef8821,https://review.opendev.org/689540,Refactor Host API unit tests,[WIP] Refactor Host API unit test  The host API unit tests are refactored to use the BaseHostTestCase class.  Story: 2004515 Task: tbd  Change-Id: Ic94a84e93f0511ecdaeb159521980a3c8bef8821 Signed-off-by: Teresa Ho <teresa.ho@windriver.com>,testing,,,,,,
starlingx%2Fconfig~master~Ic94a84e93f0511ecdaeb159521980a3c8bef8821,https://review.opendev.org/689540,Refactor Host API unit tests,[WIP] Refactor Host API unit test  The host API unit tests are refactored to use the BaseHostTestCase class.  Story: 2004515 Task: tbd  Change-Id: Ic94a84e93f0511ecdaeb159521980a3c8bef8821 Signed-off-by: Teresa Ho <teresa.ho@windriver.com>,objective,,,,,,
starlingx%2Fconfig~master~Ic94a84e93f0511ecdaeb159521980a3c8bef8821,https://review.opendev.org/689540,Refactor Host API unit tests,[WIP] Refactor Host API unit test  The host API unit tests are refactored to use the BaseHostTestCase class.  Story: 2004515 Task: tbd  Change-Id: Ic94a84e93f0511ecdaeb159521980a3c8bef8821 Signed-off-by: Teresa Ho <teresa.ho@windriver.com>,quality,,,,,,
openstack%2Fopenstack-chef~master~Ie6d7b56a78f7fadbd28e6d27a46446a46c3c5ebd,https://review.opendev.org/669581,Refactor and update test-kitchen suites,Refactor and update test-kitchen suites  This provides a large collection of updates and refactoring to improve the development environment for the cookbooks using test-kitchen.  The primary change this provides is the addition of the 'minimal' suite which replicates what the integration test jobs run in Zuul. This is useful for testing and debugging issues that might be found during CI jobs.  - Switch run_list to using roles to better match how the zuul jobs work - Update to using Ubuntu 18.04 instead of 16.04 - Move all attributes from .kitchen.yml files to environments - Update multi-node and dokken test-kitchen - Use MariaDB 10.1 by default as 10.0 has been deprecated upstream for   ubuntu 18.04. Also use OSUOSL mirror as it's more stable than   upstream - Don't disable EPEL on RHEL systems - Synchronize attributes (within reason) between test-kitchen files - Update roles run_list - Create openstack_test cookbook and update /etc/apt/sources.list to   OSUOSL mirrors to improve stability on Ubuntu  Change-Id: Ie6d7b56a78f7fadbd28e6d27a46446a46c3c5ebd Signed-off-by: Lance Albertson <lance@osuosl.org>,testing,,,,,,
openstack%2Fopenstack-chef~master~Ie6d7b56a78f7fadbd28e6d27a46446a46c3c5ebd,https://review.opendev.org/669581,Refactor and update test-kitchen suites,Refactor and update test-kitchen suites  This provides a large collection of updates and refactoring to improve the development environment for the cookbooks using test-kitchen.  The primary change this provides is the addition of the 'minimal' suite which replicates what the integration test jobs run in Zuul. This is useful for testing and debugging issues that might be found during CI jobs.  - Switch run_list to using roles to better match how the zuul jobs work - Update to using Ubuntu 18.04 instead of 16.04 - Move all attributes from .kitchen.yml files to environments - Update multi-node and dokken test-kitchen - Use MariaDB 10.1 by default as 10.0 has been deprecated upstream for   ubuntu 18.04. Also use OSUOSL mirror as it's more stable than   upstream - Don't disable EPEL on RHEL systems - Synchronize attributes (within reason) between test-kitchen files - Update roles run_list - Create openstack_test cookbook and update /etc/apt/sources.list to   OSUOSL mirrors to improve stability on Ubuntu  Change-Id: Ie6d7b56a78f7fadbd28e6d27a46446a46c3c5ebd Signed-off-by: Lance Albertson <lance@osuosl.org>,quality,,,,,,
openstack%2Fopenstack-chef~master~Ie6d7b56a78f7fadbd28e6d27a46446a46c3c5ebd,https://review.opendev.org/669581,Refactor and update test-kitchen suites,Refactor and update test-kitchen suites  This provides a large collection of updates and refactoring to improve the development environment for the cookbooks using test-kitchen.  The primary change this provides is the addition of the 'minimal' suite which replicates what the integration test jobs run in Zuul. This is useful for testing and debugging issues that might be found during CI jobs.  - Switch run_list to using roles to better match how the zuul jobs work - Update to using Ubuntu 18.04 instead of 16.04 - Move all attributes from .kitchen.yml files to environments - Update multi-node and dokken test-kitchen - Use MariaDB 10.1 by default as 10.0 has been deprecated upstream for   ubuntu 18.04. Also use OSUOSL mirror as it's more stable than   upstream - Don't disable EPEL on RHEL systems - Synchronize attributes (within reason) between test-kitchen files - Update roles run_list - Create openstack_test cookbook and update /etc/apt/sources.list to   OSUOSL mirrors to improve stability on Ubuntu  Change-Id: Ie6d7b56a78f7fadbd28e6d27a46446a46c3c5ebd Signed-off-by: Lance Albertson <lance@osuosl.org>,objective,,,,,,
openstack%2Fkolla~master~I7da3ef430b1ef6a412aae7d42bf1db79682b64d1,https://review.opendev.org/180729,Refactors tools/initrunonce,"Refactors tools/initrunonce  Previously runonce suffered from the following limitations:  1. Could only be run once. 2. Had hardcoded parameters.  This patch adds idempotentcy, allowing the tool to be safely run more than once. Additionally, config options have been parameterized providing flexibility for different dev environments.  Existing defaults have been persevered for backwards compatibility.  Change-Id: I7da3ef430b1ef6a412aae7d42bf1db79682b64d1",integration,,,,,,
openstack%2Fkolla~master~I7da3ef430b1ef6a412aae7d42bf1db79682b64d1,https://review.opendev.org/180729,Refactors tools/initrunonce,"Refactors tools/initrunonce  Previously runonce suffered from the following limitations:  1. Could only be run once. 2. Had hardcoded parameters.  This patch adds idempotentcy, allowing the tool to be safely run more than once. Additionally, config options have been parameterized providing flexibility for different dev environments.  Existing defaults have been persevered for backwards compatibility.  Change-Id: I7da3ef430b1ef6a412aae7d42bf1db79682b64d1",objective,,,,,,
openstack%2Fnova~master~I6daf8366185fd3768fa75973b6b1c41ac6314fec,https://review.opendev.org/77897,VMWare: session management refactor - tools,VMWare: session management refactor - tools  introduce session diagnostic methods to Vim object. Start the process of eliminating the need for the VMwareAPISession object by folding tese functions back into the Vim object and authoring them to use the vSphere API as intended without wrappers.  Change-Id: I6daf8366185fd3768fa75973b6b1c41ac6314fec blueprint: vmware-soap-session-management,integration,,,,,,
openstack%2Fnova~master~I6daf8366185fd3768fa75973b6b1c41ac6314fec,https://review.opendev.org/77897,VMWare: session management refactor - tools,VMWare: session management refactor - tools  introduce session diagnostic methods to Vim object. Start the process of eliminating the need for the VMwareAPISession object by folding tese functions back into the Vim object and authoring them to use the vSphere API as intended without wrappers.  Change-Id: I6daf8366185fd3768fa75973b6b1c41ac6314fec blueprint: vmware-soap-session-management,integration,,,,,,
openstack%2Fnova~master~I6daf8366185fd3768fa75973b6b1c41ac6314fec,https://review.opendev.org/77897,VMWare: session management refactor - tools,VMWare: session management refactor - tools  introduce session diagnostic methods to Vim object. Start the process of eliminating the need for the VMwareAPISession object by folding tese functions back into the Vim object and authoring them to use the vSphere API as intended without wrappers.  Change-Id: I6daf8366185fd3768fa75973b6b1c41ac6314fec blueprint: vmware-soap-session-management,objective,,,,,,
openstack%2Ffuel-ostf~master~Ia62871f0d91a96d31aea7a5d1f1454a64d864f9a,https://review.opendev.org/75873,DB toolkit refactoring,DB toolkit refactoring  Code that controls db related toolkit (creating orm sessions and engines) has been refactored. This change was made with purpose of simplifiying and unifying of mentioned logic so that it can be reused by several processes withoud beind compromised by dependency on pecan.conf attribute.  Change-Id: Ia62871f0d91a96d31aea7a5d1f1454a64d864f9a,integration,,,,,,
openstack%2Ffuel-ostf~master~Ia62871f0d91a96d31aea7a5d1f1454a64d864f9a,https://review.opendev.org/75873,DB toolkit refactoring,DB toolkit refactoring  Code that controls db related toolkit (creating orm sessions and engines) has been refactored. This change was made with purpose of simplifiying and unifying of mentioned logic so that it can be reused by several processes withoud beind compromised by dependency on pecan.conf attribute.  Change-Id: Ia62871f0d91a96d31aea7a5d1f1454a64d864f9a,quality,,,,,,
openstack%2Ffuel-ostf~master~Ia62871f0d91a96d31aea7a5d1f1454a64d864f9a,https://review.opendev.org/75873,DB toolkit refactoring,DB toolkit refactoring  Code that controls db related toolkit (creating orm sessions and engines) has been refactored. This change was made with purpose of simplifiying and unifying of mentioned logic so that it can be reused by several processes withoud beind compromised by dependency on pecan.conf attribute.  Change-Id: Ia62871f0d91a96d31aea7a5d1f1454a64d864f9a,integration,,,,,,
openstack%2Ffuel-ostf~master~Ia62871f0d91a96d31aea7a5d1f1454a64d864f9a,https://review.opendev.org/75873,DB toolkit refactoring,DB toolkit refactoring  Code that controls db related toolkit (creating orm sessions and engines) has been refactored. This change was made with purpose of simplifiying and unifying of mentioned logic so that it can be reused by several processes withoud beind compromised by dependency on pecan.conf attribute.  Change-Id: Ia62871f0d91a96d31aea7a5d1f1454a64d864f9a,objective,,,,,,
x%2Fcollectd-openstack-plugins~master~I8451242bb4db5ee7db4fad4fea2656e51e853ffd,https://review.opendev.org/352380,Create base tools for refactoring configuration model,WIP: Create base tools for refactoring configuration class  Create a base class to be eredited by a new configuration class to be used in a Pythonic way:      from collectd_ceilometer import attribute      class Configuration(attribute.HasAttributes):          VERBOSE = attribute.Boolean(False)  Configuration parsing could then be sued like this:       configuration = Configuration()      assert configuration.VERBOSE is False      configuration.VERBOSE = 1      assert configuration.VERBOSE is True  Change-Id: I8451242bb4db5ee7db4fad4fea2656e51e853ffd Related-Bug: #1610949,integration,,,,,,
x%2Fcollectd-openstack-plugins~master~I8451242bb4db5ee7db4fad4fea2656e51e853ffd,https://review.opendev.org/352380,Create base tools for refactoring configuration model,WIP: Create base tools for refactoring configuration class  Create a base class to be eredited by a new configuration class to be used in a Pythonic way:      from collectd_ceilometer import attribute      class Configuration(attribute.HasAttributes):          VERBOSE = attribute.Boolean(False)  Configuration parsing could then be sued like this:       configuration = Configuration()      assert configuration.VERBOSE is False      configuration.VERBOSE = 1      assert configuration.VERBOSE is True  Change-Id: I8451242bb4db5ee7db4fad4fea2656e51e853ffd Related-Bug: #1610949,quality,,,,,,
x%2Fcollectd-openstack-plugins~master~I8451242bb4db5ee7db4fad4fea2656e51e853ffd,https://review.opendev.org/352380,Create base tools for refactoring configuration model,WIP: Create base tools for refactoring configuration class  Create a base class to be eredited by a new configuration class to be used in a Pythonic way:      from collectd_ceilometer import attribute      class Configuration(attribute.HasAttributes):          VERBOSE = attribute.Boolean(False)  Configuration parsing could then be sued like this:       configuration = Configuration()      assert configuration.VERBOSE is False      configuration.VERBOSE = 1      assert configuration.VERBOSE is True  Change-Id: I8451242bb4db5ee7db4fad4fea2656e51e853ffd Related-Bug: #1610949,objective,,,,,,
openstack%2Fopenstack-helm-infra~master~I4a280d0645206ca74794fc4e69ec374bde4c4633,https://review.opendev.org/579333,Helm-Toolkit: Simplify and refactor endpoint functions,Helm-Toolkit: Simplify and refactor endpoint functions  This PS refactors the endpoint functions to reduce code repetition and improve readability.  Change-Id: I4a280d0645206ca74794fc4e69ec374bde4c4633 Signed-off-by: Pete Birley <pete@port.direct>,integration,,,,,,
openstack%2Fopenstack-helm-infra~master~I4a280d0645206ca74794fc4e69ec374bde4c4633,https://review.opendev.org/579333,Helm-Toolkit: Simplify and refactor endpoint functions,Helm-Toolkit: Simplify and refactor endpoint functions  This PS refactors the endpoint functions to reduce code repetition and improve readability.  Change-Id: I4a280d0645206ca74794fc4e69ec374bde4c4633 Signed-off-by: Pete Birley <pete@port.direct>,quality,,,,,,
openstack%2Fopenstack-helm-infra~master~I4a280d0645206ca74794fc4e69ec374bde4c4633,https://review.opendev.org/579333,Helm-Toolkit: Simplify and refactor endpoint functions,Helm-Toolkit: Simplify and refactor endpoint functions  This PS refactors the endpoint functions to reduce code repetition and improve readability.  Change-Id: I4a280d0645206ca74794fc4e69ec374bde4c4633 Signed-off-by: Pete Birley <pete@port.direct>,objective,,,,,,
opendev%2Fsystem-config~master~I3bd95eb06414ff7a27d6332591f65468e74bc5cd,https://review.opendev.org/556538,Add #softwarefactory IRC channel to eavesdrop.o.o,Add #softwarefactory IRC channel to eavesdrop.o.o  We'd like to take advantage of the IRC logging that is managed by openstack-infra. #softwarefactory is a project that packages openstack-infra tooling:    https://softwarefactory-project.io/docs/  Change-Id: I3bd95eb06414ff7a27d6332591f65468e74bc5cd Signed-off-by: Paul Belanger <pabelanger@redhat.com>,integration,,,,,,
opendev%2Fsystem-config~master~I3bd95eb06414ff7a27d6332591f65468e74bc5cd,https://review.opendev.org/556538,Add #softwarefactory IRC channel to eavesdrop.o.o,Add #softwarefactory IRC channel to eavesdrop.o.o  We'd like to take advantage of the IRC logging that is managed by openstack-infra. #softwarefactory is a project that packages openstack-infra tooling:    https://softwarefactory-project.io/docs/  Change-Id: I3bd95eb06414ff7a27d6332591f65468e74bc5cd Signed-off-by: Paul Belanger <pabelanger@redhat.com>,objective,,,,,,
opendev%2Fsystem-config~master~I3bd95eb06414ff7a27d6332591f65468e74bc5cd,https://review.opendev.org/556538,Add #softwarefactory IRC channel to eavesdrop.o.o,Add #softwarefactory IRC channel to eavesdrop.o.o  We'd like to take advantage of the IRC logging that is managed by openstack-infra. #softwarefactory is a project that packages openstack-infra tooling:    https://softwarefactory-project.io/docs/  Change-Id: I3bd95eb06414ff7a27d6332591f65468e74bc5cd Signed-off-by: Paul Belanger <pabelanger@redhat.com>,objective,,,,,,
openstack%2Fglance~master~I26f570b85617200880543b7114730a1ac76d3fb1,https://review.opendev.org/510449,Scrubber refactor,"[WIP]Scrubber refactor  glance-scrubber is a pending-delete image clean tool for admin, so actually there is no need for authentication at all.  This patch removed the related registry logic and let glance-scrubber visit db directly.  Change-Id: I26f570b85617200880543b7114730a1ac76d3fb1",integration,,,,,,
openstack%2Fglance~master~I26f570b85617200880543b7114730a1ac76d3fb1,https://review.opendev.org/510449,Scrubber refactor,"[WIP]Scrubber refactor  glance-scrubber is a pending-delete image clean tool for admin, so actually there is no need for authentication at all.  This patch removed the related registry logic and let glance-scrubber visit db directly.  Change-Id: I26f570b85617200880543b7114730a1ac76d3fb1",objective,,,,,,
openstack%2Fos-brick~master~Ia1c47bfaa7bc3544a5feba6a8a30faf2f132b8d7,https://review.opendev.org/455393,Refactor iSCSI connect,"WIP: Refactor iSCSI connect  This patch refactors iSCSI connect code changing the approach to one that relies primarily on sysfs, instead of CLI tools, to retrieve all the required information: devices from the connection, multipath system device name, multipath name, the WWN for the block devices...  By doing so, not only do we fix a good number of bugs, but we also improve the reliability and speed of the mechanism.  A good example of improvements and benefits achieved by this patch are:  - Clean all leftovers on exceptions on a connection.  - Parallelize logins on multipath to increase speed on flaky network   connections.  - As long as there is at least one good path when working with multipath   we will return a multipath device instead of a single path device,   which helps with temporary flaky connections.  - Don't use the rescan retry parameter as log in retry on multipath   connections so both single and multipath cases are consistent.  - We no longer rely on just one device to get the wwn and look for the   multipath.  This would be problematic with flaky connections.  - No more querying iSCSI devices for their WWN (page 0x83) removing   delays and issue on flaky connections.  - It's no longer a problem for the mechanism the fact that a device   exists but is not accessible.  - We no longer use symlinks from `/dev/disk/by-path`, `/dev/disk/by-id`,   or `/dev/mapper` to find devices or multipaths, as they could be   leftovers from previous runs.  - We no longer need to rely on the WWN to determine the multipath, we   have the session and the LUN, so we trace the devices and from those   we get if they belong to a multipath.  - Stop polluting the logs with unnecessary exceptions from checking if   the node or session exist.  - Action retries will now only log the final exception instead of   logging all the exceptions.  - Warn when a multipath could not be formed and a single device is being   used, as performance will be degraded.  - We no longer do global rescans on single connections that could be   bringing in unrelated and unwanted devices (`iscsiadm -T iqn -p portal   --rescan`).  - Fix scan mechanism that would not request all scans when the same iqn   was shareed between portals and could send a scan request to the wrong   IP if they shared the same iqn.  - When doing single pathed connections we could end with a multipath   because we didn't clean up unfruitful connections.  It's worth mentioning that this patch does not touch the extend operation.  Change-Id: Ia1c47bfaa7bc3544a5feba6a8a30faf2f132b8d7",integration,,,,,,
openstack%2Fos-brick~master~Ia1c47bfaa7bc3544a5feba6a8a30faf2f132b8d7,https://review.opendev.org/455393,Refactor iSCSI connect,"WIP: Refactor iSCSI connect  This patch refactors iSCSI connect code changing the approach to one that relies primarily on sysfs, instead of CLI tools, to retrieve all the required information: devices from the connection, multipath system device name, multipath name, the WWN for the block devices...  By doing so, not only do we fix a good number of bugs, but we also improve the reliability and speed of the mechanism.  A good example of improvements and benefits achieved by this patch are:  - Clean all leftovers on exceptions on a connection.  - Parallelize logins on multipath to increase speed on flaky network   connections.  - As long as there is at least one good path when working with multipath   we will return a multipath device instead of a single path device,   which helps with temporary flaky connections.  - Don't use the rescan retry parameter as log in retry on multipath   connections so both single and multipath cases are consistent.  - We no longer rely on just one device to get the wwn and look for the   multipath.  This would be problematic with flaky connections.  - No more querying iSCSI devices for their WWN (page 0x83) removing   delays and issue on flaky connections.  - It's no longer a problem for the mechanism the fact that a device   exists but is not accessible.  - We no longer use symlinks from `/dev/disk/by-path`, `/dev/disk/by-id`,   or `/dev/mapper` to find devices or multipaths, as they could be   leftovers from previous runs.  - We no longer need to rely on the WWN to determine the multipath, we   have the session and the LUN, so we trace the devices and from those   we get if they belong to a multipath.  - Stop polluting the logs with unnecessary exceptions from checking if   the node or session exist.  - Action retries will now only log the final exception instead of   logging all the exceptions.  - Warn when a multipath could not be formed and a single device is being   used, as performance will be degraded.  - We no longer do global rescans on single connections that could be   bringing in unrelated and unwanted devices (`iscsiadm -T iqn -p portal   --rescan`).  - Fix scan mechanism that would not request all scans when the same iqn   was shareed between portals and could send a scan request to the wrong   IP if they shared the same iqn.  - When doing single pathed connections we could end with a multipath   because we didn't clean up unfruitful connections.  It's worth mentioning that this patch does not touch the extend operation.  Change-Id: Ia1c47bfaa7bc3544a5feba6a8a30faf2f132b8d7",objective,,,,,,
openstack%2Fos-brick~master~Ia1c47bfaa7bc3544a5feba6a8a30faf2f132b8d7,https://review.opendev.org/455393,Refactor iSCSI connect,"WIP: Refactor iSCSI connect  This patch refactors iSCSI connect code changing the approach to one that relies primarily on sysfs, instead of CLI tools, to retrieve all the required information: devices from the connection, multipath system device name, multipath name, the WWN for the block devices...  By doing so, not only do we fix a good number of bugs, but we also improve the reliability and speed of the mechanism.  A good example of improvements and benefits achieved by this patch are:  - Clean all leftovers on exceptions on a connection.  - Parallelize logins on multipath to increase speed on flaky network   connections.  - As long as there is at least one good path when working with multipath   we will return a multipath device instead of a single path device,   which helps with temporary flaky connections.  - Don't use the rescan retry parameter as log in retry on multipath   connections so both single and multipath cases are consistent.  - We no longer rely on just one device to get the wwn and look for the   multipath.  This would be problematic with flaky connections.  - No more querying iSCSI devices for their WWN (page 0x83) removing   delays and issue on flaky connections.  - It's no longer a problem for the mechanism the fact that a device   exists but is not accessible.  - We no longer use symlinks from `/dev/disk/by-path`, `/dev/disk/by-id`,   or `/dev/mapper` to find devices or multipaths, as they could be   leftovers from previous runs.  - We no longer need to rely on the WWN to determine the multipath, we   have the session and the LUN, so we trace the devices and from those   we get if they belong to a multipath.  - Stop polluting the logs with unnecessary exceptions from checking if   the node or session exist.  - Action retries will now only log the final exception instead of   logging all the exceptions.  - Warn when a multipath could not be formed and a single device is being   used, as performance will be degraded.  - We no longer do global rescans on single connections that could be   bringing in unrelated and unwanted devices (`iscsiadm -T iqn -p portal   --rescan`).  - Fix scan mechanism that would not request all scans when the same iqn   was shareed between portals and could send a scan request to the wrong   IP if they shared the same iqn.  - When doing single pathed connections we could end with a multipath   because we didn't clean up unfruitful connections.  It's worth mentioning that this patch does not touch the extend operation.  Change-Id: Ia1c47bfaa7bc3544a5feba6a8a30faf2f132b8d7",quality,,,,,,
openstack%2Fos-brick~master~Ia1c47bfaa7bc3544a5feba6a8a30faf2f132b8d7,https://review.opendev.org/455393,Refactor iSCSI connect,"WIP: Refactor iSCSI connect  This patch refactors iSCSI connect code changing the approach to one that relies primarily on sysfs, instead of CLI tools, to retrieve all the required information: devices from the connection, multipath system device name, multipath name, the WWN for the block devices...  By doing so, not only do we fix a good number of bugs, but we also improve the reliability and speed of the mechanism.  A good example of improvements and benefits achieved by this patch are:  - Clean all leftovers on exceptions on a connection.  - Parallelize logins on multipath to increase speed on flaky network   connections.  - As long as there is at least one good path when working with multipath   we will return a multipath device instead of a single path device,   which helps with temporary flaky connections.  - Don't use the rescan retry parameter as log in retry on multipath   connections so both single and multipath cases are consistent.  - We no longer rely on just one device to get the wwn and look for the   multipath.  This would be problematic with flaky connections.  - No more querying iSCSI devices for their WWN (page 0x83) removing   delays and issue on flaky connections.  - It's no longer a problem for the mechanism the fact that a device   exists but is not accessible.  - We no longer use symlinks from `/dev/disk/by-path`, `/dev/disk/by-id`,   or `/dev/mapper` to find devices or multipaths, as they could be   leftovers from previous runs.  - We no longer need to rely on the WWN to determine the multipath, we   have the session and the LUN, so we trace the devices and from those   we get if they belong to a multipath.  - Stop polluting the logs with unnecessary exceptions from checking if   the node or session exist.  - Action retries will now only log the final exception instead of   logging all the exceptions.  - Warn when a multipath could not be formed and a single device is being   used, as performance will be degraded.  - We no longer do global rescans on single connections that could be   bringing in unrelated and unwanted devices (`iscsiadm -T iqn -p portal   --rescan`).  - Fix scan mechanism that would not request all scans when the same iqn   was shareed between portals and could send a scan request to the wrong   IP if they shared the same iqn.  - When doing single pathed connections we could end with a multipath   because we didn't clean up unfruitful connections.  It's worth mentioning that this patch does not touch the extend operation.  Change-Id: Ia1c47bfaa7bc3544a5feba6a8a30faf2f132b8d7",objective,,,,,,
openstack%2Fkolla~stable%2Focata~Ic753a94311c5d7d72a82d91c1279dfe982e9afbd,https://review.opendev.org/446248,Refactor and enable shell access,"Refactor and enable shell access  When installing from binary, packaging tools create a user for Keystone which does not have a shell.  This results in fernet token operations failing due to the fact that `rsync` cannot connect over SSH because the Keystone user cannot login.  This patch addresses this issue by enabling shell access to the Keystone user, it also refactors the Nova SSH controller to use the pre-existing macro.  Change-Id: Ic753a94311c5d7d72a82d91c1279dfe982e9afbd Related-Bug: #1617902",quality,,,,,,
openstack%2Fkolla~stable%2Focata~Ic753a94311c5d7d72a82d91c1279dfe982e9afbd,https://review.opendev.org/446248,Refactor and enable shell access,"Refactor and enable shell access  When installing from binary, packaging tools create a user for Keystone which does not have a shell.  This results in fernet token operations failing due to the fact that `rsync` cannot connect over SSH because the Keystone user cannot login.  This patch addresses this issue by enabling shell access to the Keystone user, it also refactors the Nova SSH controller to use the pre-existing macro.  Change-Id: Ic753a94311c5d7d72a82d91c1279dfe982e9afbd Related-Bug: #1617902",objective,,,,,,
openstack%2Fkolla~stable%2Focata~Ic753a94311c5d7d72a82d91c1279dfe982e9afbd,https://review.opendev.org/446248,Refactor and enable shell access,"Refactor and enable shell access  When installing from binary, packaging tools create a user for Keystone which does not have a shell.  This results in fernet token operations failing due to the fact that `rsync` cannot connect over SSH because the Keystone user cannot login.  This patch addresses this issue by enabling shell access to the Keystone user, it also refactors the Nova SSH controller to use the pre-existing macro.  Change-Id: Ic753a94311c5d7d72a82d91c1279dfe982e9afbd Related-Bug: #1617902",objective,,,,,,
openstack%2Fkolla~stable%2Fnewton~Ic753a94311c5d7d72a82d91c1279dfe982e9afbd,https://review.opendev.org/446249,Refactor and enable shell access,"Refactor and enable shell access  When installing from binary, packaging tools create a user for Keystone which does not have a shell.  This results in fernet token operations failing due to the fact that `rsync` cannot connect over SSH because the Keystone user cannot login.  This patch addresses this issue by enabling shell access to the Keystone user, it also refactors the Nova SSH controller to use the pre-existing macro.  Change-Id: Ic753a94311c5d7d72a82d91c1279dfe982e9afbd Related-Bug: #1617902",quality,,,,,,
openstack%2Fkolla~stable%2Fnewton~Ic753a94311c5d7d72a82d91c1279dfe982e9afbd,https://review.opendev.org/446249,Refactor and enable shell access,"Refactor and enable shell access  When installing from binary, packaging tools create a user for Keystone which does not have a shell.  This results in fernet token operations failing due to the fact that `rsync` cannot connect over SSH because the Keystone user cannot login.  This patch addresses this issue by enabling shell access to the Keystone user, it also refactors the Nova SSH controller to use the pre-existing macro.  Change-Id: Ic753a94311c5d7d72a82d91c1279dfe982e9afbd Related-Bug: #1617902",objective,,,,,,
openstack%2Fkolla~stable%2Fnewton~Ic753a94311c5d7d72a82d91c1279dfe982e9afbd,https://review.opendev.org/446249,Refactor and enable shell access,"Refactor and enable shell access  When installing from binary, packaging tools create a user for Keystone which does not have a shell.  This results in fernet token operations failing due to the fact that `rsync` cannot connect over SSH because the Keystone user cannot login.  This patch addresses this issue by enabling shell access to the Keystone user, it also refactors the Nova SSH controller to use the pre-existing macro.  Change-Id: Ic753a94311c5d7d72a82d91c1279dfe982e9afbd Related-Bug: #1617902",objective,,,,,,
x%2Fmogan~master~I7c7333bac44ebe46181da298d7277af33029704d,https://review.opendev.org/444770,Refactor: abstract status setting for instance to utils,"Refactor: abstract status setting for instance to utils  instance's status and power_state setting is in many place,  it could be abstracted to utils as a tool function.  Change-Id: I7c7333bac44ebe46181da298d7277af33029704d",integration,,,,,,
x%2Fmogan~master~I7c7333bac44ebe46181da298d7277af33029704d,https://review.opendev.org/444770,Refactor: abstract status setting for instance to utils,"Refactor: abstract status setting for instance to utils  instance's status and power_state setting is in many place,  it could be abstracted to utils as a tool function.  Change-Id: I7c7333bac44ebe46181da298d7277af33029704d",quality,,,,,,
x%2Fmogan~master~I7c7333bac44ebe46181da298d7277af33029704d,https://review.opendev.org/444770,Refactor: abstract status setting for instance to utils,"Refactor: abstract status setting for instance to utils  instance's status and power_state setting is in many place,  it could be abstracted to utils as a tool function.  Change-Id: I7c7333bac44ebe46181da298d7277af33029704d",objective,,,,,,
x%2Fmogan~master~I4db2bb2fb698db52e1bfaccaf01036ef8ed847aa,https://review.opendev.org/444753,Refactor: move fsm initiation to utils,"Refactor: move fsm initiation to utils  Since we use fsm in many place, so the initation of it could be moved to utils as a tool function.  Change-Id: I4db2bb2fb698db52e1bfaccaf01036ef8ed847aa",integration,,,,,,
x%2Fmogan~master~I4db2bb2fb698db52e1bfaccaf01036ef8ed847aa,https://review.opendev.org/444753,Refactor: move fsm initiation to utils,"Refactor: move fsm initiation to utils  Since we use fsm in many place, so the initation of it could be moved to utils as a tool function.  Change-Id: I4db2bb2fb698db52e1bfaccaf01036ef8ed847aa",quality,,,,,,
x%2Fmogan~master~I4db2bb2fb698db52e1bfaccaf01036ef8ed847aa,https://review.opendev.org/444753,Refactor: move fsm initiation to utils,"Refactor: move fsm initiation to utils  Since we use fsm in many place, so the initation of it could be moved to utils as a tool function.  Change-Id: I4db2bb2fb698db52e1bfaccaf01036ef8ed847aa",objective,,,,,,
openstack%2Ftripleo-heat-templates~master~I5551af42bc87fb8489edbfbd2abadba3dca30b0b,https://review.opendev.org/753465,Refactor OVNMacAddressNetwork,Refactor OVNMacAddressNetwork  Move the OVNMacAddressNetwork resource out of the Networks resource. This is a special network that we want to create internally.  Having this network nested in the Networks resource interfer with the work related to creating composable networks with non-heat tooling.  Change-Id: I5551af42bc87fb8489edbfbd2abadba3dca30b0b,integration,,,,,,
openstack%2Ftripleo-heat-templates~master~I5551af42bc87fb8489edbfbd2abadba3dca30b0b,https://review.opendev.org/753465,Refactor OVNMacAddressNetwork,Refactor OVNMacAddressNetwork  Move the OVNMacAddressNetwork resource out of the Networks resource. This is a special network that we want to create internally.  Having this network nested in the Networks resource interfer with the work related to creating composable networks with non-heat tooling.  Change-Id: I5551af42bc87fb8489edbfbd2abadba3dca30b0b,objective,,,,,,
openstack%2Fopenstack-ansible~master~If032bcc9e4727d3895e4ef6cecb6aff511d4b0af,https://review.opendev.org/392417,Refactor inventory generation load/save filesystem,"Refactor inventory generation load/save filesystem  Segmenting the storage-related operations from the rest of the inventory generation management tooling, in support of better maintainability testability and future support for alternate storage options.  Operations in manage.py are slightly updated to make use of common code.  Change-Id: If032bcc9e4727d3895e4ef6cecb6aff511d4b0af",integration,,,,,,
openstack%2Fopenstack-ansible~master~If032bcc9e4727d3895e4ef6cecb6aff511d4b0af,https://review.opendev.org/392417,Refactor inventory generation load/save filesystem,"Refactor inventory generation load/save filesystem  Segmenting the storage-related operations from the rest of the inventory generation management tooling, in support of better maintainability testability and future support for alternate storage options.  Operations in manage.py are slightly updated to make use of common code.  Change-Id: If032bcc9e4727d3895e4ef6cecb6aff511d4b0af",quality,,,,,,
openstack%2Fopenstack-ansible~master~If032bcc9e4727d3895e4ef6cecb6aff511d4b0af,https://review.opendev.org/392417,Refactor inventory generation load/save filesystem,"Refactor inventory generation load/save filesystem  Segmenting the storage-related operations from the rest of the inventory generation management tooling, in support of better maintainability testability and future support for alternate storage options.  Operations in manage.py are slightly updated to make use of common code.  Change-Id: If032bcc9e4727d3895e4ef6cecb6aff511d4b0af",testing,,,,,,
openstack%2Fopenstack-ansible~master~If032bcc9e4727d3895e4ef6cecb6aff511d4b0af,https://review.opendev.org/392417,Refactor inventory generation load/save filesystem,"Refactor inventory generation load/save filesystem  Segmenting the storage-related operations from the rest of the inventory generation management tooling, in support of better maintainability testability and future support for alternate storage options.  Operations in manage.py are slightly updated to make use of common code.  Change-Id: If032bcc9e4727d3895e4ef6cecb6aff511d4b0af",objective,,,,,,
openstack%2Fopenstack-ansible~master~Iaa9761a73a626c4f02c7662b119881a79397d690,https://review.opendev.org/392056,Refactor inventory management filesystem,"Refactor inventory management filesystem  Segmenting the storage-related operations from the rest of the inventory management tooling, in support of better maintainability testability and future support for alternate storage options.  Change-Id: Iaa9761a73a626c4f02c7662b119881a79397d690",integration,,,,,,
openstack%2Fopenstack-ansible~master~Iaa9761a73a626c4f02c7662b119881a79397d690,https://review.opendev.org/392056,Refactor inventory management filesystem,"Refactor inventory management filesystem  Segmenting the storage-related operations from the rest of the inventory management tooling, in support of better maintainability testability and future support for alternate storage options.  Change-Id: Iaa9761a73a626c4f02c7662b119881a79397d690",quality,,,,,,
openstack%2Fopenstack-ansible~master~Iaa9761a73a626c4f02c7662b119881a79397d690,https://review.opendev.org/392056,Refactor inventory management filesystem,"Refactor inventory management filesystem  Segmenting the storage-related operations from the rest of the inventory management tooling, in support of better maintainability testability and future support for alternate storage options.  Change-Id: Iaa9761a73a626c4f02c7662b119881a79397d690",testing,,,,,,
openstack%2Fopenstack-ansible~master~Iaa9761a73a626c4f02c7662b119881a79397d690,https://review.opendev.org/392056,Refactor inventory management filesystem,"Refactor inventory management filesystem  Segmenting the storage-related operations from the rest of the inventory management tooling, in support of better maintainability testability and future support for alternate storage options.  Change-Id: Iaa9761a73a626c4f02c7662b119881a79397d690",objective,,,,,,
openstack%2Fstorlets~master~If1844089a2d91c0103161ee2401873b40998b356,https://review.opendev.org/378683,Refactor CommandSuccess/Failure class with functool.partial,"Refactor CommandSuccess/Failure class with functool.partial  We don't need to define each class for success/failure, but can use functool.partial to create an alias for them.  TrivialFix  Change-Id: If1844089a2d91c0103161ee2401873b40998b356",integration,,,,,,
openstack%2Fstorlets~master~If1844089a2d91c0103161ee2401873b40998b356,https://review.opendev.org/378683,Refactor CommandSuccess/Failure class with functool.partial,"Refactor CommandSuccess/Failure class with functool.partial  We don't need to define each class for success/failure, but can use functool.partial to create an alias for them.  TrivialFix  Change-Id: If1844089a2d91c0103161ee2401873b40998b356",objective,,,,,,
openstack%2Fironic~master~I456dbb9ef11230d722ff1b1fe5aa142237e0d187,https://review.opendev.org/346896,Refactor common checks when instantiating the ipmitool classes,"Refactor common checks when instantiating the ipmitool classes  The constructor for the ipmitool classes are the same but they are duplicated all over this patch is refactoring that code into a common function that can be called from the classes constructors.  The VendorPassthru class wasn't checking for the 'timing' option support of the ipmitool command, it should, this patch is fixing that too.  Change-Id: I456dbb9ef11230d722ff1b1fe5aa142237e0d187",quality,,,,,,
openstack%2Fironic~master~I456dbb9ef11230d722ff1b1fe5aa142237e0d187,https://review.opendev.org/346896,Refactor common checks when instantiating the ipmitool classes,"Refactor common checks when instantiating the ipmitool classes  The constructor for the ipmitool classes are the same but they are duplicated all over this patch is refactoring that code into a common function that can be called from the classes constructors.  The VendorPassthru class wasn't checking for the 'timing' option support of the ipmitool command, it should, this patch is fixing that too.  Change-Id: I456dbb9ef11230d722ff1b1fe5aa142237e0d187",objective,,,,,,
openstack%2Fstorlets~master~Ibb39d7ea661be1058bc6f8b6e02ef1c205ffc116,https://review.opendev.org/356486,Refactor tools for functests,WIP: Refactor tools for functests  Change-Id: Ibb39d7ea661be1058bc6f8b6e02ef1c205ffc116,integration,,,,,,
openstack%2Fstorlets~master~Ibb39d7ea661be1058bc6f8b6e02ef1c205ffc116,https://review.opendev.org/356486,Refactor tools for functests,WIP: Refactor tools for functests  Change-Id: Ibb39d7ea661be1058bc6f8b6e02ef1c205ffc116,refactoring,,,,,,
openstack%2Fstorlets~master~Ibb39d7ea661be1058bc6f8b6e02ef1c205ffc116,https://review.opendev.org/356486,Refactor tools for functests,WIP: Refactor tools for functests  Change-Id: Ibb39d7ea661be1058bc6f8b6e02ef1c205ffc116,testing,,,,,,
openstack%2Fopenstack-ansible~master~I064c1c480d261a885666b7dc3edc4cd0769876a6,https://review.opendev.org/308584,Refactor run-playbooks,"Refactor run-playbooks  This changes the run playbooks script so that its using our core CLI tools and is no longer a special case script running bits outside of simply running the deployment tools as they've been designed.  The script is still executing all of the playbooks using the ""scripts-library"" function ``install_bits`` so that we ensure gate success by having a retry on a playbook execution in the case of transient failure.  A notice has been added to the script whenever it exists notifying the deployer that they should now work out of the playbooks directory and never execute the run-playbooks.sh script ever again. Within the notice links to our documentation have been added.  Change-Id: I064c1c480d261a885666b7dc3edc4cd0769876a6",integration,,,,,,
openstack%2Fopenstack-ansible~master~I064c1c480d261a885666b7dc3edc4cd0769876a6,https://review.opendev.org/308584,Refactor run-playbooks,"Refactor run-playbooks  This changes the run playbooks script so that its using our core CLI tools and is no longer a special case script running bits outside of simply running the deployment tools as they've been designed.  The script is still executing all of the playbooks using the ""scripts-library"" function ``install_bits`` so that we ensure gate success by having a retry on a playbook execution in the case of transient failure.  A notice has been added to the script whenever it exists notifying the deployer that they should now work out of the playbooks directory and never execute the run-playbooks.sh script ever again. Within the notice links to our documentation have been added.  Change-Id: I064c1c480d261a885666b7dc3edc4cd0769876a6",quality,,,,,,
openstack%2Fopenstack-ansible~master~I064c1c480d261a885666b7dc3edc4cd0769876a6,https://review.opendev.org/308584,Refactor run-playbooks,"Refactor run-playbooks  This changes the run playbooks script so that its using our core CLI tools and is no longer a special case script running bits outside of simply running the deployment tools as they've been designed.  The script is still executing all of the playbooks using the ""scripts-library"" function ``install_bits`` so that we ensure gate success by having a retry on a playbook execution in the case of transient failure.  A notice has been added to the script whenever it exists notifying the deployer that they should now work out of the playbooks directory and never execute the run-playbooks.sh script ever again. Within the notice links to our documentation have been added.  Change-Id: I064c1c480d261a885666b7dc3edc4cd0769876a6",testing,,,,,,
openstack%2Fopenstack-ansible~master~I064c1c480d261a885666b7dc3edc4cd0769876a6,https://review.opendev.org/308584,Refactor run-playbooks,"Refactor run-playbooks  This changes the run playbooks script so that its using our core CLI tools and is no longer a special case script running bits outside of simply running the deployment tools as they've been designed.  The script is still executing all of the playbooks using the ""scripts-library"" function ``install_bits`` so that we ensure gate success by having a retry on a playbook execution in the case of transient failure.  A notice has been added to the script whenever it exists notifying the deployer that they should now work out of the playbooks directory and never execute the run-playbooks.sh script ever again. Within the notice links to our documentation have been added.  Change-Id: I064c1c480d261a885666b7dc3edc4cd0769876a6",objective,,,,,,
openstack%2Ffuel-library~master~I1836d35134dc56a4e1bf3e43f453e589c11a5bfa,https://review.opendev.org/290478,Refactor osnailyfacter/modular/tools,Refactor osnailyfacter/modular/tools  Refactor osnailyfacter/modular/tools to be compatible with Puppet Master  Blueprint: fuel-refactor-osnailyfacter-for-puppet-master-compatibility  Change-Id: I1836d35134dc56a4e1bf3e43f453e589c11a5bfa,integration,,,,,,
openstack%2Ffuel-library~master~I1836d35134dc56a4e1bf3e43f453e589c11a5bfa,https://review.opendev.org/290478,Refactor osnailyfacter/modular/tools,Refactor osnailyfacter/modular/tools  Refactor osnailyfacter/modular/tools to be compatible with Puppet Master  Blueprint: fuel-refactor-osnailyfacter-for-puppet-master-compatibility  Change-Id: I1836d35134dc56a4e1bf3e43f453e589c11a5bfa,objective,,,,,,
openstack%2Fneutron~master~Icf1d5518f9f394b534e3b75cfe55f2adf7fe5169,https://review.opendev.org/230678,Code refactor for generating integer in testcase,Code refactor for generating integer in testcase  This will remove the need of import random in unit/objects/test_base.py as its already done in tests/tools.py and some of the functions are called from there.  Change-Id: Icf1d5518f9f394b534e3b75cfe55f2adf7fe5169,testing,,,,,,
openstack%2Fneutron~master~Icf1d5518f9f394b534e3b75cfe55f2adf7fe5169,https://review.opendev.org/230678,Code refactor for generating integer in testcase,Code refactor for generating integer in testcase  This will remove the need of import random in unit/objects/test_base.py as its already done in tests/tools.py and some of the functions are called from there.  Change-Id: Icf1d5518f9f394b534e3b75cfe55f2adf7fe5169,quality,,,,,,
openstack%2Fneutron~master~Icf1d5518f9f394b534e3b75cfe55f2adf7fe5169,https://review.opendev.org/230678,Code refactor for generating integer in testcase,Code refactor for generating integer in testcase  This will remove the need of import random in unit/objects/test_base.py as its already done in tests/tools.py and some of the functions are called from there.  Change-Id: Icf1d5518f9f394b534e3b75cfe55f2adf7fe5169,objective,,,,,,
openstack%2Fkolla~master~I759fb8fc050973460c9c69bb500de68e88a68b3b,https://review.opendev.org/222893,Significant refactor of base image,"Significant refactor of base image  This refactor organizes the code as follows:  If RPM family:     execute YUM repo setup     if binary         install binary tools     if source         install source tools  IF yum family:    install source tools  I have tested building and everything seems fairly solid except possilby RHOS.  The long term goal of this patch is to allow us to add our own repos in the ""execute YUM repo setup"" section of the base file based upon OpenStack Infrastructure YUM repos.  Change-Id: I759fb8fc050973460c9c69bb500de68e88a68b3b",testing,,,,,,
openstack%2Fkolla~master~I759fb8fc050973460c9c69bb500de68e88a68b3b,https://review.opendev.org/222893,Significant refactor of base image,"Significant refactor of base image  This refactor organizes the code as follows:  If RPM family:     execute YUM repo setup     if binary         install binary tools     if source         install source tools  IF yum family:    install source tools  I have tested building and everything seems fairly solid except possilby RHOS.  The long term goal of this patch is to allow us to add our own repos in the ""execute YUM repo setup"" section of the base file based upon OpenStack Infrastructure YUM repos.  Change-Id: I759fb8fc050973460c9c69bb500de68e88a68b3b",quality,,,,,,
openstack%2Fkolla~master~I759fb8fc050973460c9c69bb500de68e88a68b3b,https://review.opendev.org/222893,Significant refactor of base image,"Significant refactor of base image  This refactor organizes the code as follows:  If RPM family:     execute YUM repo setup     if binary         install binary tools     if source         install source tools  IF yum family:    install source tools  I have tested building and everything seems fairly solid except possilby RHOS.  The long term goal of this patch is to allow us to add our own repos in the ""execute YUM repo setup"" section of the base file based upon OpenStack Infrastructure YUM repos.  Change-Id: I759fb8fc050973460c9c69bb500de68e88a68b3b",objective,,,,,,
openstack%2Fbifrost~master~I72a5b329d3c55350644a777b5a77d61947c921bc,https://review.opendev.org/193742,Refactor ironic-install playbook to support CentOS & RHEL,Refactor ironic-install playbook to support CentOS & RHEL  Refactor the ironic-install role so that it can be used on Centos. Also add a new template for systemd configuration so we can install and run the ironic services.  Document the additional steps that RHEL and CentOS users will need to take to get bifrost up and running.  Install gcc in env-setup.sh as it is needed to install pip and we can't take it for granted.  Temporarily remove amttool from RedHat family dependencies since it's not currently packaged for RHEL or CentOS 7. We'll handle this in a separate patch.  Change libxslt-dev to libxslt1-dev as it is the correct name for the package.  Change-Id: I72a5b329d3c55350644a777b5a77d61947c921bc,integration,,,,,,
openstack%2Fbifrost~master~I72a5b329d3c55350644a777b5a77d61947c921bc,https://review.opendev.org/193742,Refactor ironic-install playbook to support CentOS & RHEL,Refactor ironic-install playbook to support CentOS & RHEL  Refactor the ironic-install role so that it can be used on Centos. Also add a new template for systemd configuration so we can install and run the ironic services.  Document the additional steps that RHEL and CentOS users will need to take to get bifrost up and running.  Install gcc in env-setup.sh as it is needed to install pip and we can't take it for granted.  Temporarily remove amttool from RedHat family dependencies since it's not currently packaged for RHEL or CentOS 7. We'll handle this in a separate patch.  Change libxslt-dev to libxslt1-dev as it is the correct name for the package.  Change-Id: I72a5b329d3c55350644a777b5a77d61947c921bc,quality,,,,,,
openstack%2Fbifrost~master~I72a5b329d3c55350644a777b5a77d61947c921bc,https://review.opendev.org/193742,Refactor ironic-install playbook to support CentOS & RHEL,Refactor ironic-install playbook to support CentOS & RHEL  Refactor the ironic-install role so that it can be used on Centos. Also add a new template for systemd configuration so we can install and run the ironic services.  Document the additional steps that RHEL and CentOS users will need to take to get bifrost up and running.  Install gcc in env-setup.sh as it is needed to install pip and we can't take it for granted.  Temporarily remove amttool from RedHat family dependencies since it's not currently packaged for RHEL or CentOS 7. We'll handle this in a separate patch.  Change libxslt-dev to libxslt1-dev as it is the correct name for the package.  Change-Id: I72a5b329d3c55350644a777b5a77d61947c921bc,quality,,,,,,
openstack%2Fbifrost~master~I72a5b329d3c55350644a777b5a77d61947c921bc,https://review.opendev.org/193742,Refactor ironic-install playbook to support CentOS & RHEL,Refactor ironic-install playbook to support CentOS & RHEL  Refactor the ironic-install role so that it can be used on Centos. Also add a new template for systemd configuration so we can install and run the ironic services.  Document the additional steps that RHEL and CentOS users will need to take to get bifrost up and running.  Install gcc in env-setup.sh as it is needed to install pip and we can't take it for granted.  Temporarily remove amttool from RedHat family dependencies since it's not currently packaged for RHEL or CentOS 7. We'll handle this in a separate patch.  Change libxslt-dev to libxslt1-dev as it is the correct name for the package.  Change-Id: I72a5b329d3c55350644a777b5a77d61947c921bc,objective,,,,,,
openstack%2Fpython-solumclient~master~I530a965dc5d5bad080c49b5cf0d38f3f7aee201a,https://review.opendev.org/171394,Refactored github tools to prefer token-based auth,"Refactored github tools to prefer token-based auth  The github workflow still asks for username, password, and 2FA token if need be, but creates a repo token and uses that for further exchanges to save on user input fatigue.  Change-Id: I530a965dc5d5bad080c49b5cf0d38f3f7aee201a",integration,,,,,,
openstack%2Fpython-solumclient~master~I530a965dc5d5bad080c49b5cf0d38f3f7aee201a,https://review.opendev.org/171394,Refactored github tools to prefer token-based auth,"Refactored github tools to prefer token-based auth  The github workflow still asks for username, password, and 2FA token if need be, but creates a repo token and uses that for further exchanges to save on user input fatigue.  Change-Id: I530a965dc5d5bad080c49b5cf0d38f3f7aee201a",objective,,,,,,
openstack%2Foslo-incubator~master~I3852a89d246bc368697982667af9d6894b29d5a3,https://review.opendev.org/147680,Refactor oslo.conf handling for tool scripts,Refactor oslo.conf handling for tool scripts  Move the oslo.conf handling for tool scripts to a module that can be reused.  Change-Id: I3852a89d246bc368697982667af9d6894b29d5a3,integration,,,,,,
openstack%2Foslo-incubator~master~I3852a89d246bc368697982667af9d6894b29d5a3,https://review.opendev.org/147680,Refactor oslo.conf handling for tool scripts,Refactor oslo.conf handling for tool scripts  Move the oslo.conf handling for tool scripts to a module that can be reused.  Change-Id: I3852a89d246bc368697982667af9d6894b29d5a3,quality,,,,,,
openstack%2Foslo-incubator~master~I3852a89d246bc368697982667af9d6894b29d5a3,https://review.opendev.org/147680,Refactor oslo.conf handling for tool scripts,Refactor oslo.conf handling for tool scripts  Move the oslo.conf handling for tool scripts to a module that can be reused.  Change-Id: I3852a89d246bc368697982667af9d6894b29d5a3,objective,,,,,,
openstack%2Fhorizon~master~Ie13f0a804968d548b3c13b0d87daa745dd2ad040,https://review.opendev.org/723210,Refactor tools/unit_tests.sh,"Refactor tools/unit_tests.sh  unit_tests.sh has a lot of duplicated statements. This commits introduces run_test function to clarify the differences.  selenium_tests.sh is also updated to clarify which positional arguments are used. Direct usage of $1, $2 is not easy to understand.  Change-Id: Ie13f0a804968d548b3c13b0d87daa745dd2ad040",quality,,,,,,
openstack%2Fhorizon~master~Ie13f0a804968d548b3c13b0d87daa745dd2ad040,https://review.opendev.org/723210,Refactor tools/unit_tests.sh,"Refactor tools/unit_tests.sh  unit_tests.sh has a lot of duplicated statements. This commits introduces run_test function to clarify the differences.  selenium_tests.sh is also updated to clarify which positional arguments are used. Direct usage of $1, $2 is not easy to understand.  Change-Id: Ie13f0a804968d548b3c13b0d87daa745dd2ad040",testing,,,,,,
openstack%2Fhorizon~master~Ie13f0a804968d548b3c13b0d87daa745dd2ad040,https://review.opendev.org/723210,Refactor tools/unit_tests.sh,"Refactor tools/unit_tests.sh  unit_tests.sh has a lot of duplicated statements. This commits introduces run_test function to clarify the differences.  selenium_tests.sh is also updated to clarify which positional arguments are used. Direct usage of $1, $2 is not easy to understand.  Change-Id: Ie13f0a804968d548b3c13b0d87daa745dd2ad040",objective,,,,,,
openstack%2Frally~master~I4b822f954059f604cf5248550df1e20ef94a8d64,https://review.opendev.org/76592,Refactor the decorator which sets a default deploy_id,"Refactor the decorator which sets a default deploy_id  * The decorator is now more generic and is able to manage any default id. If you need to add a new default id, you have to add a _default_{name_id}_id function that will set your default id, you will have to fill the id_func_mapping dict (e.g id_func_mapping = {'deploy_id': _default_deploy_id} * And finally if you want to use it, simply specify your name_id in parameter of the decorator (e.g @default_id('deploy_id'))  * Replaced decorator.decorator by functools.wraps since we do not have method signature issues with the new implementation of the decorator @default_id. * Removed python-decorator dependency in requirements since we do not use this dependency somewhere else.  Change-Id: I4b822f954059f604cf5248550df1e20ef94a8d64",quality,,,,,,
openstack%2Frally~master~I4b822f954059f604cf5248550df1e20ef94a8d64,https://review.opendev.org/76592,Refactor the decorator which sets a default deploy_id,"Refactor the decorator which sets a default deploy_id  * The decorator is now more generic and is able to manage any default id. If you need to add a new default id, you have to add a _default_{name_id}_id function that will set your default id, you will have to fill the id_func_mapping dict (e.g id_func_mapping = {'deploy_id': _default_deploy_id} * And finally if you want to use it, simply specify your name_id in parameter of the decorator (e.g @default_id('deploy_id'))  * Replaced decorator.decorator by functools.wraps since we do not have method signature issues with the new implementation of the decorator @default_id. * Removed python-decorator dependency in requirements since we do not use this dependency somewhere else.  Change-Id: I4b822f954059f604cf5248550df1e20ef94a8d64",objective,,,,,,
vexxhost%2Fopenstack-operator~master~I23437d65f8761dbea1f4ffed31ed87ff73ec9142,https://review.opendev.org/719310,refactor: change images and zuul,"refactor: change images and zuul  We no longer use underscores in image names, we instead use dashes because that is a sane pattern.  We also create a tool which updates zuul jobs automatically based on the images and builds each image in it's own job (only if necessary when we have Dockerfile changes).  Change-Id: I23437d65f8761dbea1f4ffed31ed87ff73ec9142",integration,,,,,,
vexxhost%2Fopenstack-operator~master~I23437d65f8761dbea1f4ffed31ed87ff73ec9142,https://review.opendev.org/719310,refactor: change images and zuul,"refactor: change images and zuul  We no longer use underscores in image names, we instead use dashes because that is a sane pattern.  We also create a tool which updates zuul jobs automatically based on the images and builds each image in it's own job (only if necessary when we have Dockerfile changes).  Change-Id: I23437d65f8761dbea1f4ffed31ed87ff73ec9142",objective,,,,,,
openstack%2Ftrove~master~I06f7fcdbcfbeec03dea6c06e83b86797db481489,https://review.opendev.org/18352,"- switch to testtools - remove pep8 warnings - more unit tests for dbaas.py, covers create_user, enable_root - refactoring","- switch to testtools - remove pep8 warnings - more unit tests for dbaas.py, covers create_user, enable_root - refactoring  Bug # 1090139 Blueprint https://blueprints.launchpad.net/reddwarf/+spec/guestagent-unit-test-coverage  Change-Id: I06f7fcdbcfbeec03dea6c06e83b86797db481489",testing,,,,,,
openstack%2Ftrove~master~I06f7fcdbcfbeec03dea6c06e83b86797db481489,https://review.opendev.org/18352,"- switch to testtools - remove pep8 warnings - more unit tests for dbaas.py, covers create_user, enable_root - refactoring","- switch to testtools - remove pep8 warnings - more unit tests for dbaas.py, covers create_user, enable_root - refactoring  Bug # 1090139 Blueprint https://blueprints.launchpad.net/reddwarf/+spec/guestagent-unit-test-coverage  Change-Id: I06f7fcdbcfbeec03dea6c06e83b86797db481489",integration,,,,,,
openstack%2Ftrove~master~I06f7fcdbcfbeec03dea6c06e83b86797db481489,https://review.opendev.org/18352,"- switch to testtools - remove pep8 warnings - more unit tests for dbaas.py, covers create_user, enable_root - refactoring","- switch to testtools - remove pep8 warnings - more unit tests for dbaas.py, covers create_user, enable_root - refactoring  Bug # 1090139 Blueprint https://blueprints.launchpad.net/reddwarf/+spec/guestagent-unit-test-coverage  Change-Id: I06f7fcdbcfbeec03dea6c06e83b86797db481489",objective,,,,,,
openstack%2Ftripleo-heat-templates~stable%2Ftrain~I5551af42bc87fb8489edbfbd2abadba3dca30b0b,https://review.opendev.org/782747,Refactor OVNMacAddressNetwork,Refactor OVNMacAddressNetwork  Move the OVNMacAddressNetwork resource out of the Networks resource. This is a special network that we want to create internally.  Having this network nested in the Networks resource interfer with the work related to creating composable networks with non-heat tooling.  Change-Id: I5551af42bc87fb8489edbfbd2abadba3dca30b0b (cherry picked from commit 6362a0205f17d30d7a5048b38770d5ef920a3259) (cherry picked from commit 98222bf0b48aba8a4bfd2a4d3fc8066d4898566e),integration,,,,,,
openstack%2Ftripleo-heat-templates~stable%2Ftrain~I5551af42bc87fb8489edbfbd2abadba3dca30b0b,https://review.opendev.org/782747,Refactor OVNMacAddressNetwork,Refactor OVNMacAddressNetwork  Move the OVNMacAddressNetwork resource out of the Networks resource. This is a special network that we want to create internally.  Having this network nested in the Networks resource interfer with the work related to creating composable networks with non-heat tooling.  Change-Id: I5551af42bc87fb8489edbfbd2abadba3dca30b0b (cherry picked from commit 6362a0205f17d30d7a5048b38770d5ef920a3259) (cherry picked from commit 98222bf0b48aba8a4bfd2a4d3fc8066d4898566e),objective,,,,,,
openstack%2Ftripleo-heat-templates~stable%2Fussuri~I5551af42bc87fb8489edbfbd2abadba3dca30b0b,https://review.opendev.org/768064,Refactor OVNMacAddressNetwork,Refactor OVNMacAddressNetwork  Move the OVNMacAddressNetwork resource out of the Networks resource. This is a special network that we want to create internally.  Having this network nested in the Networks resource interfer with the work related to creating composable networks with non-heat tooling.  Change-Id: I5551af42bc87fb8489edbfbd2abadba3dca30b0b (cherry picked from commit 6362a0205f17d30d7a5048b38770d5ef920a3259),integration,,,,,,
openstack%2Ftripleo-heat-templates~stable%2Fussuri~I5551af42bc87fb8489edbfbd2abadba3dca30b0b,https://review.opendev.org/768064,Refactor OVNMacAddressNetwork,Refactor OVNMacAddressNetwork  Move the OVNMacAddressNetwork resource out of the Networks resource. This is a special network that we want to create internally.  Having this network nested in the Networks resource interfer with the work related to creating composable networks with non-heat tooling.  Change-Id: I5551af42bc87fb8489edbfbd2abadba3dca30b0b (cherry picked from commit 6362a0205f17d30d7a5048b38770d5ef920a3259),objective,,,,,,
openstack%2Fheat~stable%2Fkilo~Idec60343b2b859b466514400de9bb1ce22879d96,https://review.opendev.org/225526,refactoring update_task,"refactoring update_task  Function update_task will be too complex if we add another exception inside, but this is required by bug 1475057. Require small refactoring.  Conflicts:         heat/engine/stack.py         heat/tests/test_stack.py  Change-Id: Idec60343b2b859b466514400de9bb1ce22879d96 Partial-Bug: #1475057 (cherry picked from commit 9c65cd14bb78b5611ce07f823a4f0bd09355261a)",quality,,,,,,
openstack%2Fheat~stable%2Fkilo~Idec60343b2b859b466514400de9bb1ce22879d96,https://review.opendev.org/225526,refactoring update_task,"refactoring update_task  Function update_task will be too complex if we add another exception inside, but this is required by bug 1475057. Require small refactoring.  Conflicts:         heat/engine/stack.py         heat/tests/test_stack.py  Change-Id: Idec60343b2b859b466514400de9bb1ce22879d96 Partial-Bug: #1475057 (cherry picked from commit 9c65cd14bb78b5611ce07f823a4f0bd09355261a)",objective,,,,,,
openstack%2Ftempest~master~I5711edfd563d55a86238291edc127c0a062dbbf3,https://review.opendev.org/82709,Refactors cleanup resource for scenario,Refactors cleanup resource for scenario  Eliminate duplicate code with some refactor using _status_timeout to wait for resource deletion. Also removes a hardcoded 10 seconds timeout using CONF.compute.build_interval instead. This fixes the bug mentioned bellow.  Fixes bug #1276781  Change-Id: I5711edfd563d55a86238291edc127c0a062dbbf3,quality,,,,,,
openstack%2Ftempest~master~I5711edfd563d55a86238291edc127c0a062dbbf3,https://review.opendev.org/82709,Refactors cleanup resource for scenario,Refactors cleanup resource for scenario  Eliminate duplicate code with some refactor using _status_timeout to wait for resource deletion. Also removes a hardcoded 10 seconds timeout using CONF.compute.build_interval instead. This fixes the bug mentioned bellow.  Fixes bug #1276781  Change-Id: I5711edfd563d55a86238291edc127c0a062dbbf3,objective,,,,,,
openstack%2Fswift~master~I90178372de11ed3da60b51c4a7db16b007b883b9,https://review.opendev.org/77812,refactor proxy and close connections,"refactor proxy and close connections  The last time someone went after the close backend connections on PUT bug a refactoring of that method came up as something we should do.  And I've often given Swift's proxy.controller.obj.PUT as an example of a fairly complex method.  So I think this is better, but mostly just cause it started out so unruly. This may be able to improve (significantly?!) further, but I'll probably need to step away from it for a bit to come back and see if I've done anything really ugly - or you could just point it out to me (or just push over the change).  Also, close backend connections to object servers when we're done with them - always.  Fixes lp bug #667956  Change-Id: I90178372de11ed3da60b51c4a7db16b007b883b9",quality,,,,,,
openstack%2Fswift~master~I90178372de11ed3da60b51c4a7db16b007b883b9,https://review.opendev.org/77812,refactor proxy and close connections,"refactor proxy and close connections  The last time someone went after the close backend connections on PUT bug a refactoring of that method came up as something we should do.  And I've often given Swift's proxy.controller.obj.PUT as an example of a fairly complex method.  So I think this is better, but mostly just cause it started out so unruly. This may be able to improve (significantly?!) further, but I'll probably need to step away from it for a bit to come back and see if I've done anything really ugly - or you could just point it out to me (or just push over the change).  Also, close backend connections to object servers when we're done with them - always.  Fixes lp bug #667956  Change-Id: I90178372de11ed3da60b51c4a7db16b007b883b9",objective,,,,,,
openstack%2Fswift~master~I90178372de11ed3da60b51c4a7db16b007b883b9,https://review.opendev.org/77812,refactor proxy and close connections,"refactor proxy and close connections  The last time someone went after the close backend connections on PUT bug a refactoring of that method came up as something we should do.  And I've often given Swift's proxy.controller.obj.PUT as an example of a fairly complex method.  So I think this is better, but mostly just cause it started out so unruly. This may be able to improve (significantly?!) further, but I'll probably need to step away from it for a bit to come back and see if I've done anything really ugly - or you could just point it out to me (or just push over the change).  Also, close backend connections to object servers when we're done with them - always.  Fixes lp bug #667956  Change-Id: I90178372de11ed3da60b51c4a7db16b007b883b9",objective,,,,,,
openstack%2Fpython-neutronclient~master~Ibaff8703104c7e1017a2c9b87f72c51af2024305,https://review.opendev.org/47292,refactor showcommand and RetrivePoolStats command,"Allow query pool stat by pool name  This command needs to query two resources: pool and stats, and the query function and returned data are named differently. So I refactor the base showcommand to support it.  Bug #1227422  Change-Id: Ibaff8703104c7e1017a2c9b87f72c51af2024305",quality,,,,,,
openstack%2Fpython-neutronclient~master~Ibaff8703104c7e1017a2c9b87f72c51af2024305,https://review.opendev.org/47292,refactor showcommand and RetrivePoolStats command,"Allow query pool stat by pool name  This command needs to query two resources: pool and stats, and the query function and returned data are named differently. So I refactor the base showcommand to support it.  Bug #1227422  Change-Id: Ibaff8703104c7e1017a2c9b87f72c51af2024305",objective,,,,,,
openstack%2Fceilometer~stable%2Fhavana~I17889b2199484166b22055578553fe30e4135d4d,https://review.opendev.org/74795,Refactor timestamp existence validation in V2 API,"Refactor timestamp existence validation in V2 API  There was a bug in AlarmThresholdRule in v2.py, the timestamp_keys were defined with a missing comma: ['timestamp', 'start', 'start_timestamp' 'end', 'end_timestamp'].  The validation, if the timestamp field is used or not, was unclear in the current implementation. A new parameter, 'timestamp_is_valid', was added to the validation functions to show, if the timestamp is allowed to use or not in the validated query.  Fixes bug 1280975  Change-Id: I17889b2199484166b22055578553fe30e4135d4d",quality,,,,,,
openstack%2Fceilometer~stable%2Fhavana~I17889b2199484166b22055578553fe30e4135d4d,https://review.opendev.org/74795,Refactor timestamp existence validation in V2 API,"Refactor timestamp existence validation in V2 API  There was a bug in AlarmThresholdRule in v2.py, the timestamp_keys were defined with a missing comma: ['timestamp', 'start', 'start_timestamp' 'end', 'end_timestamp'].  The validation, if the timestamp field is used or not, was unclear in the current implementation. A new parameter, 'timestamp_is_valid', was added to the validation functions to show, if the timestamp is allowed to use or not in the validated query.  Fixes bug 1280975  Change-Id: I17889b2199484166b22055578553fe30e4135d4d",objective,,,,,,
openstack%2Fceilometer~stable%2Fhavana~I17889b2199484166b22055578553fe30e4135d4d,https://review.opendev.org/74795,Refactor timestamp existence validation in V2 API,"Refactor timestamp existence validation in V2 API  There was a bug in AlarmThresholdRule in v2.py, the timestamp_keys were defined with a missing comma: ['timestamp', 'start', 'start_timestamp' 'end', 'end_timestamp'].  The validation, if the timestamp field is used or not, was unclear in the current implementation. A new parameter, 'timestamp_is_valid', was added to the validation functions to show, if the timestamp is allowed to use or not in the validated query.  Fixes bug 1280975  Change-Id: I17889b2199484166b22055578553fe30e4135d4d",objective,,,,,,
openstack%2Fnova~master~I0f186c2f81edbd546c0a24d66e4b9c1626373b12,https://review.opendev.org/46057,xenapi: refactor: move RawTGZImage to common,"xenapi: refactor: move RawTGZImage to common  During the review of https://review.openstack.org/40909 it was requested, that the RawTGZImage class should be moved to a common territory, so that others can re-use it later.  Fixes bug 1220596  Change-Id: I0f186c2f81edbd546c0a24d66e4b9c1626373b12",quality,,,,,,
openstack%2Fnova~master~I0f186c2f81edbd546c0a24d66e4b9c1626373b12,https://review.opendev.org/46057,xenapi: refactor: move RawTGZImage to common,"xenapi: refactor: move RawTGZImage to common  During the review of https://review.openstack.org/40909 it was requested, that the RawTGZImage class should be moved to a common territory, so that others can re-use it later.  Fixes bug 1220596  Change-Id: I0f186c2f81edbd546c0a24d66e4b9c1626373b12",objective,,,,,,
openstack%2Fnova~master~I0f186c2f81edbd546c0a24d66e4b9c1626373b12,https://review.opendev.org/46057,xenapi: refactor: move RawTGZImage to common,"xenapi: refactor: move RawTGZImage to common  During the review of https://review.openstack.org/40909 it was requested, that the RawTGZImage class should be moved to a common territory, so that others can re-use it later.  Fixes bug 1220596  Change-Id: I0f186c2f81edbd546c0a24d66e4b9c1626373b12",objective,,,,,,
openstack%2Fnova~master~Ifde5b7600562a9f4d37d0787ed49611ee18efa99,https://review.opendev.org/33935,Refactored compute/servers.py:update() to properly use API,Refactored compute/servers.py:update() to properly use API  Changed some integration tests to match API response  Related to blueprint unified-object-model Fixes: bug #1192012  Change-Id: Ifde5b7600562a9f4d37d0787ed49611ee18efa99,integration,,,,,,
openstack%2Fnova~master~Ifde5b7600562a9f4d37d0787ed49611ee18efa99,https://review.opendev.org/33935,Refactored compute/servers.py:update() to properly use API,Refactored compute/servers.py:update() to properly use API  Changed some integration tests to match API response  Related to blueprint unified-object-model Fixes: bug #1192012  Change-Id: Ifde5b7600562a9f4d37d0787ed49611ee18efa99,objective,,,,,,
openstack%2Fnova~master~Ifde5b7600562a9f4d37d0787ed49611ee18efa99,https://review.opendev.org/33935,Refactored compute/servers.py:update() to properly use API,Refactored compute/servers.py:update() to properly use API  Changed some integration tests to match API response  Related to blueprint unified-object-model Fixes: bug #1192012  Change-Id: Ifde5b7600562a9f4d37d0787ed49611ee18efa99,testing,,,,,,
openstack%2Fnova~master~Ifde5b7600562a9f4d37d0787ed49611ee18efa99,https://review.opendev.org/33935,Refactored compute/servers.py:update() to properly use API,Refactored compute/servers.py:update() to properly use API  Changed some integration tests to match API response  Related to blueprint unified-object-model Fixes: bug #1192012  Change-Id: Ifde5b7600562a9f4d37d0787ed49611ee18efa99,quality,,,,,,
openstack%2Fnova~master~Ied7a67825bd02953544fb50fc5a24d64a92901d9,https://review.opendev.org/38288,xenapi: refactor spawn to prep for more code share,"xenapi: refactor spawn so more code can be shared  To fix a bug related to inconsistent behavior between spawn and finish_migration, I have refactored the spawn code so it will be easier to share with finish_migration.  At the same time there were some inconsistencies in the ordering of the step definitions and running. This has also be resolved as part of this change, including altering some of the grouping of the steps to show more granular progress as the instance is built.  Change-Id: Ied7a67825bd02953544fb50fc5a24d64a92901d9",objective,,,,,,
openstack%2Fnova~master~Ied7a67825bd02953544fb50fc5a24d64a92901d9,https://review.opendev.org/38288,xenapi: refactor spawn to prep for more code share,"xenapi: refactor spawn so more code can be shared  To fix a bug related to inconsistent behavior between spawn and finish_migration, I have refactored the spawn code so it will be easier to share with finish_migration.  At the same time there were some inconsistencies in the ordering of the step definitions and running. This has also be resolved as part of this change, including altering some of the grouping of the steps to show more granular progress as the instance is built.  Change-Id: Ied7a67825bd02953544fb50fc5a24d64a92901d9",quality,,,,,,
openstack%2Fnova~master~Ied7a67825bd02953544fb50fc5a24d64a92901d9,https://review.opendev.org/38288,xenapi: refactor spawn to prep for more code share,"xenapi: refactor spawn so more code can be shared  To fix a bug related to inconsistent behavior between spawn and finish_migration, I have refactored the spawn code so it will be easier to share with finish_migration.  At the same time there were some inconsistencies in the ordering of the step definitions and running. This has also be resolved as part of this change, including altering some of the grouping of the steps to show more granular progress as the instance is built.  Change-Id: Ied7a67825bd02953544fb50fc5a24d64a92901d9",objective,,,,,,
openstack%2Fpython-neutronclient~master~I7f1d746bbe640f225cf480b0a41fa9a59e382984,https://review.opendev.org/25025,Refactored parsing and detection of help arguments.,"Refactored parsing and detection of help arguments.  Simplified the code that detects help arguments (-h, --help, help) and displays a help message for the client or for a specified command.  Made help arguments position insensitive.  Fixes: bug #1116866 Fixes: bug #1158209  Change-Id: I7f1d746bbe640f225cf480b0a41fa9a59e382984",objective,,,,,,
openstack%2Fpython-neutronclient~master~I7f1d746bbe640f225cf480b0a41fa9a59e382984,https://review.opendev.org/25025,Refactored parsing and detection of help arguments.,"Refactored parsing and detection of help arguments.  Simplified the code that detects help arguments (-h, --help, help) and displays a help message for the client or for a specified command.  Made help arguments position insensitive.  Fixes: bug #1116866 Fixes: bug #1158209  Change-Id: I7f1d746bbe640f225cf480b0a41fa9a59e382984",objective,,,,,,
openstack%2Fkeystone~stable%2Fgrizzly~I890415c755dd383749f2d4382f53d0b3a6badc6c,https://review.opendev.org/29878,A minor refactor in wsgi.py,A minor refactor in wsgi.py  A minor refactor to move the code up in the file as suggested by termie and henry regarding the review comments in https://review.openstack.org/#/c/26487/  Fix bug 1166697  Change-Id: I890415c755dd383749f2d4382f53d0b3a6badc6c (cherry picked from commit 13f8dc829f6a2cadfc8dbcf88c1d632558531e6c),refactoring,,,,,,
openstack%2Fkeystone~stable%2Fgrizzly~I890415c755dd383749f2d4382f53d0b3a6badc6c,https://review.opendev.org/29878,A minor refactor in wsgi.py,A minor refactor in wsgi.py  A minor refactor to move the code up in the file as suggested by termie and henry regarding the review comments in https://review.openstack.org/#/c/26487/  Fix bug 1166697  Change-Id: I890415c755dd383749f2d4382f53d0b3a6badc6c (cherry picked from commit 13f8dc829f6a2cadfc8dbcf88c1d632558531e6c),objective,,,,,,
openstack%2Fhorizon~master~I872a9f8ed8e2a85cd6749015b5da585562481b8f,https://review.opendev.org/27799,Refactor the LBaaS templates code,"Refactor the LBaaS templates code  Replace the LBaaS templates 'addvip.html', 'addpool.html', 'addmember.html' and 'addmonitor.html' with the one.  fixes bug 1173027  Change-Id: I872a9f8ed8e2a85cd6749015b5da585562481b8f",refactoring,,,,,,
openstack%2Fhorizon~master~I872a9f8ed8e2a85cd6749015b5da585562481b8f,https://review.opendev.org/27799,Refactor the LBaaS templates code,"Refactor the LBaaS templates code  Replace the LBaaS templates 'addvip.html', 'addpool.html', 'addmember.html' and 'addmonitor.html' with the one.  fixes bug 1173027  Change-Id: I872a9f8ed8e2a85cd6749015b5da585562481b8f",objective,,,,,,
openstack%2Ftrove~master~If831b4f5d99e6d2aa07c1d13b7428807afc9a16c,https://review.opendev.org/24962,Refactored tests for failing quota int-tests,Refactored tests for failing quota int-tests  Change-Id: If831b4f5d99e6d2aa07c1d13b7428807afc9a16c Fixes: bug #1155317,testing,,,,,,
openstack%2Ftrove~master~If831b4f5d99e6d2aa07c1d13b7428807afc9a16c,https://review.opendev.org/24962,Refactored tests for failing quota int-tests,Refactored tests for failing quota int-tests  Change-Id: If831b4f5d99e6d2aa07c1d13b7428807afc9a16c Fixes: bug #1155317,objective,,,,,,
openstack-attic%2Fidentity-api~master~I6c738d85b3bd8789ee3597a413835fa9a11f0a6b,https://review.opendev.org/15925,Refactoring API 2.0 content to create a single long dev guide.,"Refactoring API 2.0 content to create a single long dev guide.  However, it doesn't build just yet. Will keep working on it.  The idea is to keep all the extension ""dev guides"" while also building a long all-in-one PDF/HTML dev guide containing all calls.  fix bug 961370 bug 1015119 bug 1039758  Change-Id: I6c738d85b3bd8789ee3597a413835fa9a11f0a6b",objective,,,,,,
openstack-attic%2Fidentity-api~master~I6c738d85b3bd8789ee3597a413835fa9a11f0a6b,https://review.opendev.org/15925,Refactoring API 2.0 content to create a single long dev guide.,"Refactoring API 2.0 content to create a single long dev guide.  However, it doesn't build just yet. Will keep working on it.  The idea is to keep all the extension ""dev guides"" while also building a long all-in-one PDF/HTML dev guide containing all calls.  fix bug 961370 bug 1015119 bug 1039758  Change-Id: I6c738d85b3bd8789ee3597a413835fa9a11f0a6b",objective,,,,,,
openstack%2Fnova~master~Ie3e88e5f9f40770c10e5559f1346c272873f1e8e,https://review.opendev.org/13046,LXC: Refactor attach and detach of volumes,"LXC: Refactor attach and detach of volumes  In essex lxc attach and detach was doing the wrong thing, it was doing a bind mount of a block device from the host to the lxc container. This was ineffective and broken at best.  In this refactor, given the PID of the libvirt lxc container we can find the child process of the lxc container, via the ps command to find the init process of the lxc container.  Once we have found the init process.  To find the cgroups path for a given instance the container we traverse the cgroups filesystem to find where the devices.allow for the lxc instance and allow the device to be used by the container by giving the block device major and minor device information.  Once we have the init process we create a device via mknod in the /proc/<init process of container>/dev/ directory on the host, After the devices has been attached to the container it looks and acts like a real block device in the container.  To remove the device from the container we blacklist the device and remove the device from the container.  Note: In order for the block device to be used by the container we have to use the ""real"" block information on the host. Not what devmapper tells us.  This fixes bug LP: #1009701  Change-Id: Ie3e88e5f9f40770c10e5559f1346c272873f1e8e Signed-off-by: Chuck Short <chuck.short@canonical.com>",quality,,,,,,
openstack%2Fnova~master~Ie3e88e5f9f40770c10e5559f1346c272873f1e8e,https://review.opendev.org/13046,LXC: Refactor attach and detach of volumes,"LXC: Refactor attach and detach of volumes  In essex lxc attach and detach was doing the wrong thing, it was doing a bind mount of a block device from the host to the lxc container. This was ineffective and broken at best.  In this refactor, given the PID of the libvirt lxc container we can find the child process of the lxc container, via the ps command to find the init process of the lxc container.  Once we have found the init process.  To find the cgroups path for a given instance the container we traverse the cgroups filesystem to find where the devices.allow for the lxc instance and allow the device to be used by the container by giving the block device major and minor device information.  Once we have the init process we create a device via mknod in the /proc/<init process of container>/dev/ directory on the host, After the devices has been attached to the container it looks and acts like a real block device in the container.  To remove the device from the container we blacklist the device and remove the device from the container.  Note: In order for the block device to be used by the container we have to use the ""real"" block information on the host. Not what devmapper tells us.  This fixes bug LP: #1009701  Change-Id: Ie3e88e5f9f40770c10e5559f1346c272873f1e8e Signed-off-by: Chuck Short <chuck.short@canonical.com>",objective,,,,,,
openstack%2Fnova~master~I27736bb794030dad52f64f83cb7e503c42133567,https://review.opendev.org/9645,Refactor libvirt disk config generation.,Fix and refactor libvirt disk config generation.  * Deal with corner case where the root device is an iso image to fix bug 1023250.  * Refactor to reduce duplicated code in disk config generation.  Change-Id: I27736bb794030dad52f64f83cb7e503c42133567,objective,,,,,,
openstack%2Fnova~master~I27736bb794030dad52f64f83cb7e503c42133567,https://review.opendev.org/9645,Refactor libvirt disk config generation.,Fix and refactor libvirt disk config generation.  * Deal with corner case where the root device is an iso image to fix bug 1023250.  * Refactor to reduce duplicated code in disk config generation.  Change-Id: I27736bb794030dad52f64f83cb7e503c42133567,quality,,,,,,
openstack%2Foslo-incubator~master~I911f05cf26dc549b366dbfc41545fd7760f496e1,https://review.opendev.org/8401,Refactor namespace fallback imports for update.py,Refactor namespace fallback imports for update.py  * Refixes Bug #951197  Change-Id: I911f05cf26dc549b366dbfc41545fd7760f496e1,refactoring,,,,,,
starlingx%2Fconfig~master~I07954d2efa905a56ca8482d0ec147534c97d01ea,https://review.opendev.org/633400,Refactor raw cache feature,"Refactor raw cache feature  Originally the raw cache feature is enabled in stx-glance. But upstream cinder already has the raw cache feature, so refactor the code to leverage this.  This patch did below things: 1. Add parameter 'cinder_raw_cache_gib' in 'system storage-backend-modify' 2. Get/Generate tenant id in sysinv-conductor 3. Fill tenant id, cache size, cache switch into yaml file 4. Update puppet file to write these information to cinder.conf  Some verification did: 1. Verified these code in starlingx storage dedicated deployment    - Run 'system storage-backend-modify ceph-store cinder_raw_cache_gib=10'    - Verified ""cinder_raw_cache_gib"": ""10"" is added in db table      'storage_backend', field 'capabilities'    - Verified tenent id (internal_project_id/internal_user_id),      image_volume_cache_enabled, image_volume_cache_max_size_gb is added in      /tmp/puppet/hieradata/system.yaml    - Verified these info has been added in /etc/cinder/cinder.conf    - Verified in starlingx running system, cache feature is enabled, but only      one volume is cached no matter how big the cache size is specified. This      is because starlingx is using cinder pike version, so not a bug  2. Verified in community version of openstack, if fill the same info in cinder.conf, it works as expected. Cinder cache feature: https://docs.openstack.org/cinder/latest/admin/blockstorage-image-volume-cache.html  Story: 2004869 Task: 29121 Change-Id: I07954d2efa905a56ca8482d0ec147534c97d01ea Signed-off-by: Liang Fang <liang.a.fang@intel.com>",quality,,,,,,
starlingx%2Fconfig~master~I07954d2efa905a56ca8482d0ec147534c97d01ea,https://review.opendev.org/633400,Refactor raw cache feature,"Refactor raw cache feature  Originally the raw cache feature is enabled in stx-glance. But upstream cinder already has the raw cache feature, so refactor the code to leverage this.  This patch did below things: 1. Add parameter 'cinder_raw_cache_gib' in 'system storage-backend-modify' 2. Get/Generate tenant id in sysinv-conductor 3. Fill tenant id, cache size, cache switch into yaml file 4. Update puppet file to write these information to cinder.conf  Some verification did: 1. Verified these code in starlingx storage dedicated deployment    - Run 'system storage-backend-modify ceph-store cinder_raw_cache_gib=10'    - Verified ""cinder_raw_cache_gib"": ""10"" is added in db table      'storage_backend', field 'capabilities'    - Verified tenent id (internal_project_id/internal_user_id),      image_volume_cache_enabled, image_volume_cache_max_size_gb is added in      /tmp/puppet/hieradata/system.yaml    - Verified these info has been added in /etc/cinder/cinder.conf    - Verified in starlingx running system, cache feature is enabled, but only      one volume is cached no matter how big the cache size is specified. This      is because starlingx is using cinder pike version, so not a bug  2. Verified in community version of openstack, if fill the same info in cinder.conf, it works as expected. Cinder cache feature: https://docs.openstack.org/cinder/latest/admin/blockstorage-image-volume-cache.html  Story: 2004869 Task: 29121 Change-Id: I07954d2efa905a56ca8482d0ec147534c97d01ea Signed-off-by: Liang Fang <liang.a.fang@intel.com>",objective,,,,,,
starlingx%2Fconfig~master~I07954d2efa905a56ca8482d0ec147534c97d01ea,https://review.opendev.org/633400,Refactor raw cache feature,"Refactor raw cache feature  Originally the raw cache feature is enabled in stx-glance. But upstream cinder already has the raw cache feature, so refactor the code to leverage this.  This patch did below things: 1. Add parameter 'cinder_raw_cache_gib' in 'system storage-backend-modify' 2. Get/Generate tenant id in sysinv-conductor 3. Fill tenant id, cache size, cache switch into yaml file 4. Update puppet file to write these information to cinder.conf  Some verification did: 1. Verified these code in starlingx storage dedicated deployment    - Run 'system storage-backend-modify ceph-store cinder_raw_cache_gib=10'    - Verified ""cinder_raw_cache_gib"": ""10"" is added in db table      'storage_backend', field 'capabilities'    - Verified tenent id (internal_project_id/internal_user_id),      image_volume_cache_enabled, image_volume_cache_max_size_gb is added in      /tmp/puppet/hieradata/system.yaml    - Verified these info has been added in /etc/cinder/cinder.conf    - Verified in starlingx running system, cache feature is enabled, but only      one volume is cached no matter how big the cache size is specified. This      is because starlingx is using cinder pike version, so not a bug  2. Verified in community version of openstack, if fill the same info in cinder.conf, it works as expected. Cinder cache feature: https://docs.openstack.org/cinder/latest/admin/blockstorage-image-volume-cache.html  Story: 2004869 Task: 29121 Change-Id: I07954d2efa905a56ca8482d0ec147534c97d01ea Signed-off-by: Liang Fang <liang.a.fang@intel.com>",objective,,,,,,
openstack%2Fkarbor~master~Iedf380cf7fd363af63357d2faded9a0fdd4ed5de,https://review.opendev.org/407899,Refactor clients used in protect service,"Refactor clients used in protect service  Refactor the way of creating client of other openstack service used in protect service, which includes several respects.  1. Move several public config items into the common config list. For example, move 'auth_insecure' to common/config.py/service_client_opts. Then there is no need to write same codes in each client's file.  2. Delete the codes which re-registers config options to parameter 'conf'. Because 'conf' is 'cfg.CONF' generally, except for the Swift which uses individual config. And for Swift, register the opts in the config instance to make sure 'conf' has been registered any opts needed before invoking the 'create' method.  3. Move 'protection/utils.py' to 'protection/clients/utils.py'. Because that file is only used by files in clients. Besides, add a new way to get endpoint of service in utils.py/get_url.  4. Add a new way to create clients, which is by session and can solve the bug that the token may expire during protecting works. Then we can create client once and use it all the time(<48h) without worry that the token may expire.  Change-Id: Iedf380cf7fd363af63357d2faded9a0fdd4ed5de Implements: blueprint refactor-clients Partial-Bug: #1566793",quality,,,,,,
openstack%2Fkarbor~master~Iedf380cf7fd363af63357d2faded9a0fdd4ed5de,https://review.opendev.org/407899,Refactor clients used in protect service,"Refactor clients used in protect service  Refactor the way of creating client of other openstack service used in protect service, which includes several respects.  1. Move several public config items into the common config list. For example, move 'auth_insecure' to common/config.py/service_client_opts. Then there is no need to write same codes in each client's file.  2. Delete the codes which re-registers config options to parameter 'conf'. Because 'conf' is 'cfg.CONF' generally, except for the Swift which uses individual config. And for Swift, register the opts in the config instance to make sure 'conf' has been registered any opts needed before invoking the 'create' method.  3. Move 'protection/utils.py' to 'protection/clients/utils.py'. Because that file is only used by files in clients. Besides, add a new way to get endpoint of service in utils.py/get_url.  4. Add a new way to create clients, which is by session and can solve the bug that the token may expire during protecting works. Then we can create client once and use it all the time(<48h) without worry that the token may expire.  Change-Id: Iedf380cf7fd363af63357d2faded9a0fdd4ed5de Implements: blueprint refactor-clients Partial-Bug: #1566793",objective,,,,,,
openstack%2Fkarbor~master~Iedf380cf7fd363af63357d2faded9a0fdd4ed5de,https://review.opendev.org/407899,Refactor clients used in protect service,"Refactor clients used in protect service  Refactor the way of creating client of other openstack service used in protect service, which includes several respects.  1. Move several public config items into the common config list. For example, move 'auth_insecure' to common/config.py/service_client_opts. Then there is no need to write same codes in each client's file.  2. Delete the codes which re-registers config options to parameter 'conf'. Because 'conf' is 'cfg.CONF' generally, except for the Swift which uses individual config. And for Swift, register the opts in the config instance to make sure 'conf' has been registered any opts needed before invoking the 'create' method.  3. Move 'protection/utils.py' to 'protection/clients/utils.py'. Because that file is only used by files in clients. Besides, add a new way to get endpoint of service in utils.py/get_url.  4. Add a new way to create clients, which is by session and can solve the bug that the token may expire during protecting works. Then we can create client once and use it all the time(<48h) without worry that the token may expire.  Change-Id: Iedf380cf7fd363af63357d2faded9a0fdd4ed5de Implements: blueprint refactor-clients Partial-Bug: #1566793",objective,,,,,,
openstack%2Fkarbor~master~Iedf380cf7fd363af63357d2faded9a0fdd4ed5de,https://review.opendev.org/407899,Refactor clients used in protect service,"Refactor clients used in protect service  Refactor the way of creating client of other openstack service used in protect service, which includes several respects.  1. Move several public config items into the common config list. For example, move 'auth_insecure' to common/config.py/service_client_opts. Then there is no need to write same codes in each client's file.  2. Delete the codes which re-registers config options to parameter 'conf'. Because 'conf' is 'cfg.CONF' generally, except for the Swift which uses individual config. And for Swift, register the opts in the config instance to make sure 'conf' has been registered any opts needed before invoking the 'create' method.  3. Move 'protection/utils.py' to 'protection/clients/utils.py'. Because that file is only used by files in clients. Besides, add a new way to get endpoint of service in utils.py/get_url.  4. Add a new way to create clients, which is by session and can solve the bug that the token may expire during protecting works. Then we can create client once and use it all the time(<48h) without worry that the token may expire.  Change-Id: Iedf380cf7fd363af63357d2faded9a0fdd4ed5de Implements: blueprint refactor-clients Partial-Bug: #1566793",objective,,,,,,
openstack%2Ftripleo-common~master~Ic4593a7b1d61ac8094e00374d394f5cb8c001a7a,https://review.opendev.org/741526,Refactor 55-heat-config related tasks,"Refactor 55-heat-config related tasks  When 55-heat-config ran, it creates a json file for the output. We use jq to fetch the return code written in that file.  This patch aims to refactor the tasks which run this script and verification to avoid task duplication and also ensure that the file actually exists on the file system, with a retries/delay mechanism in order to avoid a race condition (see bug report).  Change-Id: Ic4593a7b1d61ac8094e00374d394f5cb8c001a7a Closes-Bug: #1887846",quality,,,,,,
openstack%2Ftripleo-common~master~Ic4593a7b1d61ac8094e00374d394f5cb8c001a7a,https://review.opendev.org/741526,Refactor 55-heat-config related tasks,"Refactor 55-heat-config related tasks  When 55-heat-config ran, it creates a json file for the output. We use jq to fetch the return code written in that file.  This patch aims to refactor the tasks which run this script and verification to avoid task duplication and also ensure that the file actually exists on the file system, with a retries/delay mechanism in order to avoid a race condition (see bug report).  Change-Id: Ic4593a7b1d61ac8094e00374d394f5cb8c001a7a Closes-Bug: #1887846",objective,,,,,,
openstack%2Ftripleo-common~master~Ic4593a7b1d61ac8094e00374d394f5cb8c001a7a,https://review.opendev.org/741526,Refactor 55-heat-config related tasks,"Refactor 55-heat-config related tasks  When 55-heat-config ran, it creates a json file for the output. We use jq to fetch the return code written in that file.  This patch aims to refactor the tasks which run this script and verification to avoid task duplication and also ensure that the file actually exists on the file system, with a retries/delay mechanism in order to avoid a race condition (see bug report).  Change-Id: Ic4593a7b1d61ac8094e00374d394f5cb8c001a7a Closes-Bug: #1887846",objective,,,,,,
openstack%2Fneutron~master~Ic119d14e4d6a2d6d04c4288b9b0242475adf55d6,https://review.opendev.org/189686,Refactor tunnel_sync to handle race conditions,Refactor tunnel_sync to handle race conditions  The problem statement is available in the bug description. Closes-Bug: #1426427 Closed-Bug: #1435852  Change-Id: Ic119d14e4d6a2d6d04c4288b9b0242475adf55d6 Co-Authored-By: Ihar Hrachyshka <ihrachys@redhat.com>,objective,,,,,,
osf%2Fopenstackid-resources~master~I78d990c630a9149d8e762fdebdae9e908d3f194b,https://review.opendev.org/655786,Fix on multiparse request data * bug fixin * refactoring,Fix on multiparse request data * bug fixin * refactoring  Change-Id: I78d990c630a9149d8e762fdebdae9e908d3f194b,refactoring,,,,,,
osf%2Fopenstackid-resources~master~I78d990c630a9149d8e762fdebdae9e908d3f194b,https://review.opendev.org/655786,Fix on multiparse request data * bug fixin * refactoring,Fix on multiparse request data * bug fixin * refactoring  Change-Id: I78d990c630a9149d8e762fdebdae9e908d3f194b,objective,,,,,,
osf%2Fopenstackid-resources~master~I1575790a2364a1a05e6098261d8d497d447533ba,https://review.opendev.org/637620,Speakers/Moderators Refactoring,Speakers/Moderators Refactoring  Bug Fixing  Change-Id: I1575790a2364a1a05e6098261d8d497d447533ba,refactoring,,,,,,
osf%2Fopenstackid-resources~master~I1575790a2364a1a05e6098261d8d497d447533ba,https://review.opendev.org/637620,Speakers/Moderators Refactoring,Speakers/Moderators Refactoring  Bug Fixing  Change-Id: I1575790a2364a1a05e6098261d8d497d447533ba,objective,,,,,,
openstack%2Fhorizon~master~I378e58c7a80e2d00481a582eb3fa449f51c3612a,https://review.opendev.org/630775,api.cinder: refactor microversioning logic,api.cinder: refactor microversioning logic  There are sevral similar logics to handle microversioning in Cinder API wrapper. This commit refactors them and introduces _cinderclient_with_features() function.  The parent commit to fix bug 1810309 does not introduce this logic to make it easy to backport the fix.  Change-Id: I378e58c7a80e2d00481a582eb3fa449f51c3612a Related-Bug: #1810309,quality,,,,,,
openstack%2Fhorizon~master~I378e58c7a80e2d00481a582eb3fa449f51c3612a,https://review.opendev.org/630775,api.cinder: refactor microversioning logic,api.cinder: refactor microversioning logic  There are sevral similar logics to handle microversioning in Cinder API wrapper. This commit refactors them and introduces _cinderclient_with_features() function.  The parent commit to fix bug 1810309 does not introduce this logic to make it easy to backport the fix.  Change-Id: I378e58c7a80e2d00481a582eb3fa449f51c3612a Related-Bug: #1810309,objective,,,,,,
openstack%2Fhorizon~master~I378e58c7a80e2d00481a582eb3fa449f51c3612a,https://review.opendev.org/630775,api.cinder: refactor microversioning logic,api.cinder: refactor microversioning logic  There are sevral similar logics to handle microversioning in Cinder API wrapper. This commit refactors them and introduces _cinderclient_with_features() function.  The parent commit to fix bug 1810309 does not introduce this logic to make it easy to backport the fix.  Change-Id: I378e58c7a80e2d00481a582eb3fa449f51c3612a Related-Bug: #1810309,objective,,,,,,
airship%2Fpromenade~master~I8b39caaab04819a935b83eb544979eac333fe409,https://review.opendev.org/599012,[458884] Refactor validation,[458884] Refactor validation  - This addresses a bug where Promenade doesn't detect some invalid   configurations during genesis script generation. - Refactor some validation checks for performance  Change-Id: I8b39caaab04819a935b83eb544979eac333fe409,objective,,,,,,
airship%2Fpromenade~master~I8b39caaab04819a935b83eb544979eac333fe409,https://review.opendev.org/599012,[458884] Refactor validation,[458884] Refactor validation  - This addresses a bug where Promenade doesn't detect some invalid   configurations during genesis script generation. - Refactor some validation checks for performance  Change-Id: I8b39caaab04819a935b83eb544979eac333fe409,quality,,,,,,
openstack%2Fcookbook-openstack-dashboard~master~I1e0be7d59414897adf82ac21d2430df2525a61d9,https://review.opendev.org/523048,dashboard refactor for Pike and Chef 13,dashboard refactor for Pike and Chef 13  - implemented foodcritic and cookstyle corrections - deprecated node.foo.bar method access for node['foo']['bar'] bracket access - added workaround for bug #1616265 - deprecated postgresql support  Implements blueprint modern-chef  Change-Id: I1e0be7d59414897adf82ac21d2430df2525a61d9,quality,,,,,,
openstack%2Fcookbook-openstack-dashboard~master~I1e0be7d59414897adf82ac21d2430df2525a61d9,https://review.opendev.org/523048,dashboard refactor for Pike and Chef 13,dashboard refactor for Pike and Chef 13  - implemented foodcritic and cookstyle corrections - deprecated node.foo.bar method access for node['foo']['bar'] bracket access - added workaround for bug #1616265 - deprecated postgresql support  Implements blueprint modern-chef  Change-Id: I1e0be7d59414897adf82ac21d2430df2525a61d9,objective,,,,,,
openstack%2Fcookbook-openstack-dashboard~master~I1e0be7d59414897adf82ac21d2430df2525a61d9,https://review.opendev.org/523048,dashboard refactor for Pike and Chef 13,dashboard refactor for Pike and Chef 13  - implemented foodcritic and cookstyle corrections - deprecated node.foo.bar method access for node['foo']['bar'] bracket access - added workaround for bug #1616265 - deprecated postgresql support  Implements blueprint modern-chef  Change-Id: I1e0be7d59414897adf82ac21d2430df2525a61d9,integration,,,,,,
x%2Fstackalytics~master~Iac62008d87d06f57fe07d43b3d4a89e1211e76e0,https://review.opendev.org/455249,Refactor repo processing code,"Refactor repo processing code  Prepare the code for repo-based settings for code, reviews, bug tracker, etc.  Change-Id: Iac62008d87d06f57fe07d43b3d4a89e1211e76e0",refactoring,,,,,,
x%2Fstackalytics~master~Iac62008d87d06f57fe07d43b3d4a89e1211e76e0,https://review.opendev.org/455249,Refactor repo processing code,"Refactor repo processing code  Prepare the code for repo-based settings for code, reviews, bug tracker, etc.  Change-Id: Iac62008d87d06f57fe07d43b3d4a89e1211e76e0",objective,,,,,,
openstack%2Fneutron~master~I55835a34d8fba7a139dce93f99cbff54584d695c,https://review.opendev.org/425756,Refactor OVSCookieBridge: always use bridge cookie,"Refactor OVSCookieBridge to always apply extension cookie  Instead of using a passthrough class that does not provide the intended behavior (see bug 1557620), this change implements a cookie bridge as a pathched copy of the underlying bridge: - the underlying bridge is copied - the copy is given a specific cookie - the base class of the copy is set to a dynamically created class   inheriting from the class of the underlying bridge and from   an OVSCookieBridge method  The two problems in the bug are addressed: - the extension cookie is now applied even for call to   methods other than add/delete/flows - the extension cookie is now applied in the case of the   native implementation  This is an alternative to 3d56cfff517820f57fdd601c5f5634a20b5e2c47.  Change-Id: I55835a34d8fba7a139dce93f99cbff54584d695c Closes-Bug: #1557620",quality,,,,,,
openstack%2Fneutron~master~I55835a34d8fba7a139dce93f99cbff54584d695c,https://review.opendev.org/425756,Refactor OVSCookieBridge: always use bridge cookie,"Refactor OVSCookieBridge to always apply extension cookie  Instead of using a passthrough class that does not provide the intended behavior (see bug 1557620), this change implements a cookie bridge as a pathched copy of the underlying bridge: - the underlying bridge is copied - the copy is given a specific cookie - the base class of the copy is set to a dynamically created class   inheriting from the class of the underlying bridge and from   an OVSCookieBridge method  The two problems in the bug are addressed: - the extension cookie is now applied even for call to   methods other than add/delete/flows - the extension cookie is now applied in the case of the   native implementation  This is an alternative to 3d56cfff517820f57fdd601c5f5634a20b5e2c47.  Change-Id: I55835a34d8fba7a139dce93f99cbff54584d695c Closes-Bug: #1557620",objective,,,,,,
openstack%2Fneutron~master~I55835a34d8fba7a139dce93f99cbff54584d695c,https://review.opendev.org/425756,Refactor OVSCookieBridge: always use bridge cookie,"Refactor OVSCookieBridge to always apply extension cookie  Instead of using a passthrough class that does not provide the intended behavior (see bug 1557620), this change implements a cookie bridge as a pathched copy of the underlying bridge: - the underlying bridge is copied - the copy is given a specific cookie - the base class of the copy is set to a dynamically created class   inheriting from the class of the underlying bridge and from   an OVSCookieBridge method  The two problems in the bug are addressed: - the extension cookie is now applied even for call to   methods other than add/delete/flows - the extension cookie is now applied in the case of the   native implementation  This is an alternative to 3d56cfff517820f57fdd601c5f5634a20b5e2c47.  Change-Id: I55835a34d8fba7a139dce93f99cbff54584d695c Closes-Bug: #1557620",objective,,,,,,
x%2Fbrowbeat~master~Ic592a97875a9ec783519f618260713277589c83e,https://review.opendev.org/345543,Refactor EPEL into a role,"WIP Refactor EPEL into a role  Fixes bug 1605228, where if the user installs epel-relase from the Centos7 default packages rather than from the latest rpm online packages the latest epel-release from the rpm installs on top of it but does not provide newer packages.  What this translates to is that packages like graphite-web don't exist and installation of things like elk fails.  This change adds a check to uninstall epel-release if it's already there right now it will uninstall even a valid version (so if you install elk and graphite back to back it will remove and reinstall epel. I'm looking for a way to identify the source of the epel package to prevent that)  Finally since the epel package was installed by half a dozen different playbooks all with copy/pasted versions of the same role I refacotred all the tasks that require epel to call the epel role to install it.  Change-Id: Ic592a97875a9ec783519f618260713277589c83e",quality,,,,,,
x%2Fbrowbeat~master~Ic592a97875a9ec783519f618260713277589c83e,https://review.opendev.org/345543,Refactor EPEL into a role,"WIP Refactor EPEL into a role  Fixes bug 1605228, where if the user installs epel-relase from the Centos7 default packages rather than from the latest rpm online packages the latest epel-release from the rpm installs on top of it but does not provide newer packages.  What this translates to is that packages like graphite-web don't exist and installation of things like elk fails.  This change adds a check to uninstall epel-release if it's already there right now it will uninstall even a valid version (so if you install elk and graphite back to back it will remove and reinstall epel. I'm looking for a way to identify the source of the epel package to prevent that)  Finally since the epel package was installed by half a dozen different playbooks all with copy/pasted versions of the same role I refacotred all the tasks that require epel to call the epel role to install it.  Change-Id: Ic592a97875a9ec783519f618260713277589c83e",objective,,,,,,
x%2Fbrowbeat~master~Ic592a97875a9ec783519f618260713277589c83e,https://review.opendev.org/345543,Refactor EPEL into a role,"WIP Refactor EPEL into a role  Fixes bug 1605228, where if the user installs epel-relase from the Centos7 default packages rather than from the latest rpm online packages the latest epel-release from the rpm installs on top of it but does not provide newer packages.  What this translates to is that packages like graphite-web don't exist and installation of things like elk fails.  This change adds a check to uninstall epel-release if it's already there right now it will uninstall even a valid version (so if you install elk and graphite back to back it will remove and reinstall epel. I'm looking for a way to identify the source of the epel package to prevent that)  Finally since the epel package was installed by half a dozen different playbooks all with copy/pasted versions of the same role I refacotred all the tasks that require epel to call the epel role to install it.  Change-Id: Ic592a97875a9ec783519f618260713277589c83e",objective,,,,,,
x%2Fkingbird~master~I44d5d3561427c6e055b45a3e474d4d07bcf60810,https://review.opendev.org/336653,RPC refactoring,RPC refactoring  Fix for the bug where api is not able to send request to engine over RPC. Modified and added UTs wherever required.  Change-Id: I44d5d3561427c6e055b45a3e474d4d07bcf60810 Closes-Bug: #1598235,objective,,,,,,
x%2Fkingbird~master~I44d5d3561427c6e055b45a3e474d4d07bcf60810,https://review.opendev.org/336653,RPC refactoring,RPC refactoring  Fix for the bug where api is not able to send request to engine over RPC. Modified and added UTs wherever required.  Change-Id: I44d5d3561427c6e055b45a3e474d4d07bcf60810 Closes-Bug: #1598235,testing,,,,,,
openstack%2Fcloudkitty~stable%2Fmitaka~I1e2fdf8c19b7d7414dc6d9ed2fcb229d5453aa53,https://review.opendev.org/333968,Refactor gnocchi transformer,Refactor gnocchi transformer  Use of the new generic transformer class. Fixed a bug with image_id extraction from image_ref.  Change-Id: I1e2fdf8c19b7d7414dc6d9ed2fcb229d5453aa53 (cherry picked from commit 3e2c66427f94e477a7af0cd528418fa079c1ec5a),objective,,,,,,
openstack%2Fcloudkitty~stable%2Fmitaka~I1e2fdf8c19b7d7414dc6d9ed2fcb229d5453aa53,https://review.opendev.org/333968,Refactor gnocchi transformer,Refactor gnocchi transformer  Use of the new generic transformer class. Fixed a bug with image_id extraction from image_ref.  Change-Id: I1e2fdf8c19b7d7414dc6d9ed2fcb229d5453aa53 (cherry picked from commit 3e2c66427f94e477a7af0cd528418fa079c1ec5a),objective,,,,,,
openstack%2Fcloudkitty~master~I1e2fdf8c19b7d7414dc6d9ed2fcb229d5453aa53,https://review.opendev.org/314663,Refactor gnocchi transformer,Refactor gnocchi transformer  Use of the new generic transformer class. Fixed a bug with image_id extraction from image_ref.  Change-Id: I1e2fdf8c19b7d7414dc6d9ed2fcb229d5453aa53,objective,,,,,,
openstack%2Fcloudkitty~master~I1e2fdf8c19b7d7414dc6d9ed2fcb229d5453aa53,https://review.opendev.org/314663,Refactor gnocchi transformer,Refactor gnocchi transformer  Use of the new generic transformer class. Fixed a bug with image_id extraction from image_ref.  Change-Id: I1e2fdf8c19b7d7414dc6d9ed2fcb229d5453aa53,objective,,,,,,
openstack%2Fmistral~master~I0330870e4382f01c4519b5c48e43ac50a08db338,https://review.opendev.org/296250,Refactor workflow controller and fix a bug in _fail_workflow(),Refactor workflow controller and fix a bug in _fail_workflow()  Change-Id: I0330870e4382f01c4519b5c48e43ac50a08db338,refactoring,,,,,,
openstack%2Fmistral~master~I0330870e4382f01c4519b5c48e43ac50a08db338,https://review.opendev.org/296250,Refactor workflow controller and fix a bug in _fail_workflow(),Refactor workflow controller and fix a bug in _fail_workflow()  Change-Id: I0330870e4382f01c4519b5c48e43ac50a08db338,objective,,,,,,
airship%2Fairshipctl~master~I89bac0af811f744c209be2aee921033a5e8a4fca,https://review.opendev.org/784705,Refactor config get-manifest command,"Refactor config get-manifest command  This commit addresses the bug that user is unable to see retrieved manifest name or names, also simplifies the internal logic and reorganizes unit tests.  Change-Id: I89bac0af811f744c209be2aee921033a5e8a4fca Signed-off-by: Ruslan Aliev <raliev@mirantis.com> Closes: #505",objective,,,,,,
airship%2Fairshipctl~master~I89bac0af811f744c209be2aee921033a5e8a4fca,https://review.opendev.org/784705,Refactor config get-manifest command,"Refactor config get-manifest command  This commit addresses the bug that user is unable to see retrieved manifest name or names, also simplifies the internal logic and reorganizes unit tests.  Change-Id: I89bac0af811f744c209be2aee921033a5e8a4fca Signed-off-by: Ruslan Aliev <raliev@mirantis.com> Closes: #505",testing,,,,,,
airship%2Fairshipctl~master~I89bac0af811f744c209be2aee921033a5e8a4fca,https://review.opendev.org/784705,Refactor config get-manifest command,"Refactor config get-manifest command  This commit addresses the bug that user is unable to see retrieved manifest name or names, also simplifies the internal logic and reorganizes unit tests.  Change-Id: I89bac0af811f744c209be2aee921033a5e8a4fca Signed-off-by: Ruslan Aliev <raliev@mirantis.com> Closes: #505",quality,,,,,,
openstack%2Fheat~master~Ie20b79c33bded82db3befd3ca25fa76ebed3d417,https://review.opendev.org/288795,Refactor validation of arguments to 'repeat' intrinsic function,"Refactor validation of arguments to 'repeat' intrinsic function  Separate validation of the structure of the function call itself from validation of the arguments passed. The former remains in the initialisation method, while the latter moves to the validate() method. This is consistent with how other intrinsic functions are instantiated, and should hopefully lead to less confusion of the kind that resulted in bug 1553306.  Change-Id: Ie20b79c33bded82db3befd3ca25fa76ebed3d417 Related-Bug: 1553306",objective,,,,,,
openstack%2Fheat~master~Ie20b79c33bded82db3befd3ca25fa76ebed3d417,https://review.opendev.org/288795,Refactor validation of arguments to 'repeat' intrinsic function,"Refactor validation of arguments to 'repeat' intrinsic function  Separate validation of the structure of the function call itself from validation of the arguments passed. The former remains in the initialisation method, while the latter moves to the validate() method. This is consistent with how other intrinsic functions are instantiated, and should hopefully lead to less confusion of the kind that resulted in bug 1553306.  Change-Id: Ie20b79c33bded82db3befd3ca25fa76ebed3d417 Related-Bug: 1553306",quality,,,,,,
openstack%2Fheat~master~Ie20b79c33bded82db3befd3ca25fa76ebed3d417,https://review.opendev.org/288795,Refactor validation of arguments to 'repeat' intrinsic function,"Refactor validation of arguments to 'repeat' intrinsic function  Separate validation of the structure of the function call itself from validation of the arguments passed. The former remains in the initialisation method, while the latter moves to the validate() method. This is consistent with how other intrinsic functions are instantiated, and should hopefully lead to less confusion of the kind that resulted in bug 1553306.  Change-Id: Ie20b79c33bded82db3befd3ca25fa76ebed3d417 Related-Bug: 1553306",objective,,,,,,
openstack%2Fpython-openstackclient~master~I4225179dca4aedf799e1656ec49236bdedc5e9bd,https://review.opendev.org/287763,Refactor security group set to use SDK,"Refactor security group set to use SDK  Refactored the 'os security group set' command to use the SDK when neutron is enabled, but continue to use the nova client when nova network is enabled.  This patch set also fixes a compute bug which ignores name and description when set to an empty value.  Change-Id: I4225179dca4aedf799e1656ec49236bdedc5e9bd Partial-Bug: #1519511 Implements: blueprint neutron-client",objective,,,,,,
openstack%2Fpython-openstackclient~master~I4225179dca4aedf799e1656ec49236bdedc5e9bd,https://review.opendev.org/287763,Refactor security group set to use SDK,"Refactor security group set to use SDK  Refactored the 'os security group set' command to use the SDK when neutron is enabled, but continue to use the nova client when nova network is enabled.  This patch set also fixes a compute bug which ignores name and description when set to an empty value.  Change-Id: I4225179dca4aedf799e1656ec49236bdedc5e9bd Partial-Bug: #1519511 Implements: blueprint neutron-client",quality,,,,,,
openstack%2Fpython-openstackclient~master~I4225179dca4aedf799e1656ec49236bdedc5e9bd,https://review.opendev.org/287763,Refactor security group set to use SDK,"Refactor security group set to use SDK  Refactored the 'os security group set' command to use the SDK when neutron is enabled, but continue to use the nova client when nova network is enabled.  This patch set also fixes a compute bug which ignores name and description when set to an empty value.  Change-Id: I4225179dca4aedf799e1656ec49236bdedc5e9bd Partial-Bug: #1519511 Implements: blueprint neutron-client",objective,,,,,,
openstack%2Frally~master~I4ec7d07607fa6ac2e1befe262a1c80ce4f9b4eab,https://review.opendev.org/274882,Refactored atomic action in authenticate scenario,Refactored authenticate.py to remove atomic actions from loops when performing multiple repititions.  bug #1540545  Change-Id: I4ec7d07607fa6ac2e1befe262a1c80ce4f9b4eab,quality,,,,,,
openstack%2Frally~master~I4ec7d07607fa6ac2e1befe262a1c80ce4f9b4eab,https://review.opendev.org/274882,Refactored atomic action in authenticate scenario,Refactored authenticate.py to remove atomic actions from loops when performing multiple repititions.  bug #1540545  Change-Id: I4ec7d07607fa6ac2e1befe262a1c80ce4f9b4eab,objective,,,,,,
openstack%2Fnetworking-odl~master~I654321a9012aba98775690d530e3e0788957b21b,https://review.opendev.org/222409,Opendaylight driver refactor to handle out of sync issues,"Opendaylight driver refactor to handle out of sync issues  This commits refactors the Opendaylight ML2 mechanism driver to handle race conditions and out of sync issues. It attempts to address these using an atomic thread synchronization model that tracks the sync, retry, success and failed states of Neutron objects sent to Opendaylight.  Partially fixes Bug # 1493551  Change-Id: I654321a9012aba98775690d530e3e0788957b21b",objective,,,,,,
openstack%2Fnetworking-odl~master~I654321a9012aba98775690d530e3e0788957b21b,https://review.opendev.org/222409,Opendaylight driver refactor to handle out of sync issues,"Opendaylight driver refactor to handle out of sync issues  This commits refactors the Opendaylight ML2 mechanism driver to handle race conditions and out of sync issues. It attempts to address these using an atomic thread synchronization model that tracks the sync, retry, success and failed states of Neutron objects sent to Opendaylight.  Partially fixes Bug # 1493551  Change-Id: I654321a9012aba98775690d530e3e0788957b21b",quality,,,,,,
openstack%2Fnetworking-odl~master~I654321a9012aba98775690d530e3e0788957b21b,https://review.opendev.org/222409,Opendaylight driver refactor to handle out of sync issues,"Opendaylight driver refactor to handle out of sync issues  This commits refactors the Opendaylight ML2 mechanism driver to handle race conditions and out of sync issues. It attempts to address these using an atomic thread synchronization model that tracks the sync, retry, success and failed states of Neutron objects sent to Opendaylight.  Partially fixes Bug # 1493551  Change-Id: I654321a9012aba98775690d530e3e0788957b21b",objective,,,,,,
openstack%2Fstackviz~master~Id11d15a34466e42c5ebc9808717d52b468245e3a,https://review.opendev.org/261129,Refactor the timeline directive.,"Refactor the timeline directive.  Presently the timeline directive is a single gigantic directive containing all of the timeline code. Given the amount of code involved, this complicates maintenance and makes it excessively difficult to improve.  This refactors the single timeline directive into four separate collaborating directives: a controller, an overview, a viewport, and dstat charts. Each child directive is functionally separate from the others, but can communicate with other chart components via the controller. This separation should greatly improve future maintenance, and has already led to several (included) bug fixes.  Change-Id: Id11d15a34466e42c5ebc9808717d52b468245e3a",quality,,,,,,
openstack%2Fstackviz~master~Id11d15a34466e42c5ebc9808717d52b468245e3a,https://review.opendev.org/261129,Refactor the timeline directive.,"Refactor the timeline directive.  Presently the timeline directive is a single gigantic directive containing all of the timeline code. Given the amount of code involved, this complicates maintenance and makes it excessively difficult to improve.  This refactors the single timeline directive into four separate collaborating directives: a controller, an overview, a viewport, and dstat charts. Each child directive is functionally separate from the others, but can communicate with other chart components via the controller. This separation should greatly improve future maintenance, and has already led to several (included) bug fixes.  Change-Id: Id11d15a34466e42c5ebc9808717d52b468245e3a",objective,,,,,,
openstack%2Fstackviz~master~Id11d15a34466e42c5ebc9808717d52b468245e3a,https://review.opendev.org/261129,Refactor the timeline directive.,"Refactor the timeline directive.  Presently the timeline directive is a single gigantic directive containing all of the timeline code. Given the amount of code involved, this complicates maintenance and makes it excessively difficult to improve.  This refactors the single timeline directive into four separate collaborating directives: a controller, an overview, a viewport, and dstat charts. Each child directive is functionally separate from the others, but can communicate with other chart components via the controller. This separation should greatly improve future maintenance, and has already led to several (included) bug fixes.  Change-Id: Id11d15a34466e42c5ebc9808717d52b468245e3a",objective,,,,,,
openstack%2Fkolla~stable%2Fliberty~I28db6a38406ce0dd38340319eea7ef9134682007,https://review.opendev.org/242383,Small refactor for site.yml,Small refactor for site.yml  As the bug mentions this file is complex and has caused problems in the past. It will likely cause problems in the future.  Change-Id: I28db6a38406ce0dd38340319eea7ef9134682007 Closes-Bug: #1512582 (cherry picked from commit 9e7977d6094bfcdd4e25ebb390c62778661dd570),quality,,,,,,
openstack%2Fkolla~stable%2Fliberty~I28db6a38406ce0dd38340319eea7ef9134682007,https://review.opendev.org/242383,Small refactor for site.yml,Small refactor for site.yml  As the bug mentions this file is complex and has caused problems in the past. It will likely cause problems in the future.  Change-Id: I28db6a38406ce0dd38340319eea7ef9134682007 Closes-Bug: #1512582 (cherry picked from commit 9e7977d6094bfcdd4e25ebb390c62778661dd570),objective,,,,,,
openstack%2Frally~master~Ia75578a67a1fe626b80b877bbda659b5e6070ef0,https://review.opendev.org/244087,[Verify] Refactoring HtmlOutput,"[verify] refactor HtmlOutput  There is no reason to use OOP for one simple method. This patch replaces class HtmlOutput by method generate_report.  Also, it add improvement for skip reason: number of bug is replaced by link to it.  Change-Id: Ia75578a67a1fe626b80b877bbda659b5e6070ef0",objective,,,,,,
openstack%2Frally~master~Ia75578a67a1fe626b80b877bbda659b5e6070ef0,https://review.opendev.org/244087,[Verify] Refactoring HtmlOutput,"[verify] refactor HtmlOutput  There is no reason to use OOP for one simple method. This patch replaces class HtmlOutput by method generate_report.  Also, it add improvement for skip reason: number of bug is replaced by link to it.  Change-Id: Ia75578a67a1fe626b80b877bbda659b5e6070ef0",objective,,,,,,
openstack%2Fkolla~master~I28db6a38406ce0dd38340319eea7ef9134682007,https://review.opendev.org/241105,Small refactor for site.yml,Small refactor for site.yml  As the bug mentions this file is complex and has caused problems in the past. It will likely cause problems in the future.  Change-Id: I28db6a38406ce0dd38340319eea7ef9134682007 Closes-Bug: #1512582,quality,,,,,,
openstack%2Fkolla~master~I28db6a38406ce0dd38340319eea7ef9134682007,https://review.opendev.org/241105,Small refactor for site.yml,Small refactor for site.yml  As the bug mentions this file is complex and has caused problems in the past. It will likely cause problems in the future.  Change-Id: I28db6a38406ce0dd38340319eea7ef9134682007 Closes-Bug: #1512582,objective,,,,,,
openstack%2Fbandit~master~I1e8d7093656786159a783081601aa2641b6aa8f8,https://review.opendev.org/226832,Fixing bug introduced by manager refactor,Fixing bug introduced by manager refactor  Change-Id: I1e8d7093656786159a783081601aa2641b6aa8f8,objective,,,,,,
openstack%2Faodh~master~Ic6d46783cbccc34be38855ab365ac882cfcfa4ab,https://review.opendev.org/220133,Refactor event-alarm caching,"Refactor event-alarm caching  This patch changes the format of alarm definitions cached in the event-alarm evaluator to dict. This reduces complex of the code to find and update the alarm entry in cache in the case of the alarm fired.  This also fixes the bug which will occured when it start evaluation in debug=True. Whith this bug, the evaluator cannot start evaluation due to failure of generating debug message.  Change-Id: Ic6d46783cbccc34be38855ab365ac882cfcfa4ab",quality,,,,,,
openstack%2Faodh~master~Ic6d46783cbccc34be38855ab365ac882cfcfa4ab,https://review.opendev.org/220133,Refactor event-alarm caching,"Refactor event-alarm caching  This patch changes the format of alarm definitions cached in the event-alarm evaluator to dict. This reduces complex of the code to find and update the alarm entry in cache in the case of the alarm fired.  This also fixes the bug which will occured when it start evaluation in debug=True. Whith this bug, the evaluator cannot start evaluation due to failure of generating debug message.  Change-Id: Ic6d46783cbccc34be38855ab365ac882cfcfa4ab",objective,,,,,,
openstack%2Faodh~master~Ic6d46783cbccc34be38855ab365ac882cfcfa4ab,https://review.opendev.org/220133,Refactor event-alarm caching,"Refactor event-alarm caching  This patch changes the format of alarm definitions cached in the event-alarm evaluator to dict. This reduces complex of the code to find and update the alarm entry in cache in the case of the alarm fired.  This also fixes the bug which will occured when it start evaluation in debug=True. Whith this bug, the evaluator cannot start evaluation due to failure of generating debug message.  Change-Id: Ic6d46783cbccc34be38855ab365ac882cfcfa4ab",objective,,,,,,
openstack%2Fapi-site~master~If04e13c239634d7fb6d61d5d27e7d8f669f5e42e,https://review.opendev.org/216927,"Refactoring on ""Security groups and rules"" section","Add missing params to ""Security groups and rules""  This is a bug similar to https://bugs.launchpad.net/openstack-api-site/+bug/1480312, which has been confirmed and its patch has been merged.  ""Request parameters"" and ""Response parameters"" tables of ""Security groups and rules"" are missing ""security_group(s)"" (xsd:dict). Please see http://developer.openstack.org/api-ref-networking-v2-ext.html#security_groups .  I also fixed some parts where was written as ""security_group_rules"", but actually should be ""security_group_rule"".  I did some refactoring in common.ent as well in order to make it easier to maintain.  Change-Id: If04e13c239634d7fb6d61d5d27e7d8f669f5e42e Closes-Bug: #1482246",quality,,,,,,
openstack%2Fapi-site~master~If04e13c239634d7fb6d61d5d27e7d8f669f5e42e,https://review.opendev.org/216927,"Refactoring on ""Security groups and rules"" section","Add missing params to ""Security groups and rules""  This is a bug similar to https://bugs.launchpad.net/openstack-api-site/+bug/1480312, which has been confirmed and its patch has been merged.  ""Request parameters"" and ""Response parameters"" tables of ""Security groups and rules"" are missing ""security_group(s)"" (xsd:dict). Please see http://developer.openstack.org/api-ref-networking-v2-ext.html#security_groups .  I also fixed some parts where was written as ""security_group_rules"", but actually should be ""security_group_rule"".  I did some refactoring in common.ent as well in order to make it easier to maintain.  Change-Id: If04e13c239634d7fb6d61d5d27e7d8f669f5e42e Closes-Bug: #1482246",objective,,,,,,
openstack%2Fapi-site~master~If04e13c239634d7fb6d61d5d27e7d8f669f5e42e,https://review.opendev.org/216927,"Refactoring on ""Security groups and rules"" section","Add missing params to ""Security groups and rules""  This is a bug similar to https://bugs.launchpad.net/openstack-api-site/+bug/1480312, which has been confirmed and its patch has been merged.  ""Request parameters"" and ""Response parameters"" tables of ""Security groups and rules"" are missing ""security_group(s)"" (xsd:dict). Please see http://developer.openstack.org/api-ref-networking-v2-ext.html#security_groups .  I also fixed some parts where was written as ""security_group_rules"", but actually should be ""security_group_rule"".  I did some refactoring in common.ent as well in order to make it easier to maintain.  Change-Id: If04e13c239634d7fb6d61d5d27e7d8f669f5e42e Closes-Bug: #1482246",objective,,,,,,
openstack%2Fceilometer~master~I077317533fd30865eea8a3f32e3c3a7f53fa6343,https://review.opendev.org/207409,[MongoDB] Refactor indexes for meter and resources,"[MongoDB] Refactor indexes for meter and resources  Currently Ceilometer uses redundant indexes in MongoDB and in same time doesn't cover get_resources sorting by indexes. In this CR source field indexing is deleted and resource.project_id, resource.user_id indexes are combined to one. New compound index covers the get_resource sorting and its parts are used in queries by timestamp, project_id, user_id.  Change-Id: I077317533fd30865eea8a3f32e3c3a7f53fa6343 Closes: bug 1433924",integration,,,,,,
openstack%2Fceilometer~master~I077317533fd30865eea8a3f32e3c3a7f53fa6343,https://review.opendev.org/207409,[MongoDB] Refactor indexes for meter and resources,"[MongoDB] Refactor indexes for meter and resources  Currently Ceilometer uses redundant indexes in MongoDB and in same time doesn't cover get_resources sorting by indexes. In this CR source field indexing is deleted and resource.project_id, resource.user_id indexes are combined to one. New compound index covers the get_resource sorting and its parts are used in queries by timestamp, project_id, user_id.  Change-Id: I077317533fd30865eea8a3f32e3c3a7f53fa6343 Closes: bug 1433924",quality,,,,,,
openstack%2Fceilometer~master~I077317533fd30865eea8a3f32e3c3a7f53fa6343,https://review.opendev.org/207409,[MongoDB] Refactor indexes for meter and resources,"[MongoDB] Refactor indexes for meter and resources  Currently Ceilometer uses redundant indexes in MongoDB and in same time doesn't cover get_resources sorting by indexes. In this CR source field indexing is deleted and resource.project_id, resource.user_id indexes are combined to one. New compound index covers the get_resource sorting and its parts are used in queries by timestamp, project_id, user_id.  Change-Id: I077317533fd30865eea8a3f32e3c3a7f53fa6343 Closes: bug 1433924",objective,,,,,,
openstack%2Fopenstacksdk~master~If75813d28e915f7a62c23a0059afada7fb3e575f,https://review.opendev.org/192732,Refactor verify_list tests,"Refactor verify_list tests  Rework the verify_list testing to put more of the guts into the implementation instead of having a lot of common things passed in arguments.  Additionally, this adds an explicit pagination argument in calls to _list, which is one of the steps we need to take in properly completing the pagination calls per bug #1465756.  Partial-Bug: 1465756  Change-Id: If75813d28e915f7a62c23a0059afada7fb3e575f",testing,,,,,,
openstack%2Fopenstacksdk~master~If75813d28e915f7a62c23a0059afada7fb3e575f,https://review.opendev.org/192732,Refactor verify_list tests,"Refactor verify_list tests  Rework the verify_list testing to put more of the guts into the implementation instead of having a lot of common things passed in arguments.  Additionally, this adds an explicit pagination argument in calls to _list, which is one of the steps we need to take in properly completing the pagination calls per bug #1465756.  Partial-Bug: 1465756  Change-Id: If75813d28e915f7a62c23a0059afada7fb3e575f",objective,,,,,,
openstack%2Fopenstacksdk~master~If75813d28e915f7a62c23a0059afada7fb3e575f,https://review.opendev.org/192732,Refactor verify_list tests,"Refactor verify_list tests  Rework the verify_list testing to put more of the guts into the implementation instead of having a lot of common things passed in arguments.  Additionally, this adds an explicit pagination argument in calls to _list, which is one of the steps we need to take in properly completing the pagination calls per bug #1465756.  Partial-Bug: 1465756  Change-Id: If75813d28e915f7a62c23a0059afada7fb3e575f",quality,,,,,,
openstack%2Fopenstacksdk~master~If75813d28e915f7a62c23a0059afada7fb3e575f,https://review.opendev.org/192732,Refactor verify_list tests,"Refactor verify_list tests  Rework the verify_list testing to put more of the guts into the implementation instead of having a lot of common things passed in arguments.  Additionally, this adds an explicit pagination argument in calls to _list, which is one of the steps we need to take in properly completing the pagination calls per bug #1465756.  Partial-Bug: 1465756  Change-Id: If75813d28e915f7a62c23a0059afada7fb3e575f",objective,,,,,,
openstack%2Fnova~master~Id0603ddd642acccfa12ae53a52ecfb66dca53702,https://review.opendev.org/171912,Refactor nova-net cidr validation in prep for bug fix,"Refactor nova-net cidr validation in prep for bug fix  The network manager create_networks function is on the verge of the ""too complex"" pep8 check error, so this change refactors the cidr validation code out into a private function in preparation for fixing a bug.  Change-Id: Id0603ddd642acccfa12ae53a52ecfb66dca53702",quality,,,,,,
openstack%2Fnova~master~Id0603ddd642acccfa12ae53a52ecfb66dca53702,https://review.opendev.org/171912,Refactor nova-net cidr validation in prep for bug fix,"Refactor nova-net cidr validation in prep for bug fix  The network manager create_networks function is on the verge of the ""too complex"" pep8 check error, so this change refactors the cidr validation code out into a private function in preparation for fixing a bug.  Change-Id: Id0603ddd642acccfa12ae53a52ecfb66dca53702",objective,,,,,,
performa%2Fshaker~master~I410d0dd75577674f0cc8067f39b5253ff44d1998,https://review.opendev.org/156652,Refactor agent processing and filter alive,Refactor agent processing and filter alive  There is a bug in Nova that results in VM with unknown IPs. Slave agents for corresponding VMs are useless and must be ignored  Change-Id: I410d0dd75577674f0cc8067f39b5253ff44d1998,objective,,,,,,
performa%2Fshaker~master~I410d0dd75577674f0cc8067f39b5253ff44d1998,https://review.opendev.org/156652,Refactor agent processing and filter alive,Refactor agent processing and filter alive  There is a bug in Nova that results in VM with unknown IPs. Slave agents for corresponding VMs are useless and must be ignored  Change-Id: I410d0dd75577674f0cc8067f39b5253ff44d1998,objective,,,,,,
openstack%2Fmistral~master~Ie32226c08344e5b8bcb4c79d63e4a5cc7410cb11,https://review.opendev.org/155756,Fixing a bug in logging logic and small refactoring,"Fixing a bug in logging logic and small refactoring  * It used to log ""Task 'taskName' [RUNNING -> RUNNING, result = 'result'].   Same state twice.  Change-Id: Ie32226c08344e5b8bcb4c79d63e4a5cc7410cb11",objective,,,,,,
openstack%2Fmistral~master~Ie32226c08344e5b8bcb4c79d63e4a5cc7410cb11,https://review.opendev.org/155756,Fixing a bug in logging logic and small refactoring,"Fixing a bug in logging logic and small refactoring  * It used to log ""Task 'taskName' [RUNNING -> RUNNING, result = 'result'].   Same state twice.  Change-Id: Ie32226c08344e5b8bcb4c79d63e4a5cc7410cb11",quality,,,,,,
openstack%2Fcinder~master~Iea3d94e35a4ced4dafc1b61e2df6b075cf200577,https://review.opendev.org/148038,Refactoring for export functions in Target object,"Refactoring for export functions in Target object  Currently, export functions such as create_export() are implemented in individual Target code, but most of them are same and these are common features in each target. This patch moves these methods to parent ISCSITarget class to commonalize and each Target simply inherit these methods from parent class. As a result of this change, LioAdm can inherit ISCSITarget class directly instead of inheriting TgtAdm class. This simplifies dependency of targets and improves maintainability.  By refactoring these methods, this patch also fixes following issues.  (a) Fix bug #1410566 After transitioning to the new driver and target model, iscsi_targets is not added to the table during create_export() phase. However, remove_export() in LIO Target is still reffering empty iscsi_targets table. This causes NotFound exception and remove_export() skips to do remove_iscsi_target(). As a result, iscsi target is not removed and the target continues to grab the volume(logical volume) as an in-use status. This patch fix the problem.  (b) Re-export a volume with CHAP Current Tgt Target recreate iscsi target without CHAP during ensure_export() even if the volume is exported with CHAP previously. This patch changes this bahaviour to recreate iscsi target using previous CHAP which is stored in volume file on state_path dir.  (c) Raise correct exception if deleting of iSCSI target is failed terminate_connection in LIO target raises ISCSITargetAttachFailed if deleting of iSCSI target is failed. This should be raised ISCSITargetDetachFailed.  (d) Delete _ensure_iscsi_targets() This methods is dead code in tgt.py after transitioning.  Closes-Bug: 1410566 Change-Id: Iea3d94e35a4ced4dafc1b61e2df6b075cf200577",quality,,,,,,
openstack%2Fcinder~master~Iea3d94e35a4ced4dafc1b61e2df6b075cf200577,https://review.opendev.org/148038,Refactoring for export functions in Target object,"Refactoring for export functions in Target object  Currently, export functions such as create_export() are implemented in individual Target code, but most of them are same and these are common features in each target. This patch moves these methods to parent ISCSITarget class to commonalize and each Target simply inherit these methods from parent class. As a result of this change, LioAdm can inherit ISCSITarget class directly instead of inheriting TgtAdm class. This simplifies dependency of targets and improves maintainability.  By refactoring these methods, this patch also fixes following issues.  (a) Fix bug #1410566 After transitioning to the new driver and target model, iscsi_targets is not added to the table during create_export() phase. However, remove_export() in LIO Target is still reffering empty iscsi_targets table. This causes NotFound exception and remove_export() skips to do remove_iscsi_target(). As a result, iscsi target is not removed and the target continues to grab the volume(logical volume) as an in-use status. This patch fix the problem.  (b) Re-export a volume with CHAP Current Tgt Target recreate iscsi target without CHAP during ensure_export() even if the volume is exported with CHAP previously. This patch changes this bahaviour to recreate iscsi target using previous CHAP which is stored in volume file on state_path dir.  (c) Raise correct exception if deleting of iSCSI target is failed terminate_connection in LIO target raises ISCSITargetAttachFailed if deleting of iSCSI target is failed. This should be raised ISCSITargetDetachFailed.  (d) Delete _ensure_iscsi_targets() This methods is dead code in tgt.py after transitioning.  Closes-Bug: 1410566 Change-Id: Iea3d94e35a4ced4dafc1b61e2df6b075cf200577",objective,,,,,,
openstack%2Fcinder~master~Iea3d94e35a4ced4dafc1b61e2df6b075cf200577,https://review.opendev.org/148038,Refactoring for export functions in Target object,"Refactoring for export functions in Target object  Currently, export functions such as create_export() are implemented in individual Target code, but most of them are same and these are common features in each target. This patch moves these methods to parent ISCSITarget class to commonalize and each Target simply inherit these methods from parent class. As a result of this change, LioAdm can inherit ISCSITarget class directly instead of inheriting TgtAdm class. This simplifies dependency of targets and improves maintainability.  By refactoring these methods, this patch also fixes following issues.  (a) Fix bug #1410566 After transitioning to the new driver and target model, iscsi_targets is not added to the table during create_export() phase. However, remove_export() in LIO Target is still reffering empty iscsi_targets table. This causes NotFound exception and remove_export() skips to do remove_iscsi_target(). As a result, iscsi target is not removed and the target continues to grab the volume(logical volume) as an in-use status. This patch fix the problem.  (b) Re-export a volume with CHAP Current Tgt Target recreate iscsi target without CHAP during ensure_export() even if the volume is exported with CHAP previously. This patch changes this bahaviour to recreate iscsi target using previous CHAP which is stored in volume file on state_path dir.  (c) Raise correct exception if deleting of iSCSI target is failed terminate_connection in LIO target raises ISCSITargetAttachFailed if deleting of iSCSI target is failed. This should be raised ISCSITargetDetachFailed.  (d) Delete _ensure_iscsi_targets() This methods is dead code in tgt.py after transitioning.  Closes-Bug: 1410566 Change-Id: Iea3d94e35a4ced4dafc1b61e2df6b075cf200577",objective,,,,,,
x%2Fgit-upstream~master~Ie36520162a73cd621a61889f7860753dd911be54,https://review.opendev.org/141844,Refactor code used to build tree into helpers,Refactor code used to build tree into helpers  Split code up to simplify understanding and make use of helpers. fix minor bug in retreival of parent commits to pass to the read-tree call.  Change-Id: Ie36520162a73cd621a61889f7860753dd911be54,objective,,,,,,
x%2Fgit-upstream~master~Ie36520162a73cd621a61889f7860753dd911be54,https://review.opendev.org/141844,Refactor code used to build tree into helpers,Refactor code used to build tree into helpers  Split code up to simplify understanding and make use of helpers. fix minor bug in retreival of parent commits to pass to the read-tree call.  Change-Id: Ie36520162a73cd621a61889f7860753dd911be54,quality,,,,,,
x%2Fgit-upstream~master~Ie36520162a73cd621a61889f7860753dd911be54,https://review.opendev.org/141844,Refactor code used to build tree into helpers,Refactor code used to build tree into helpers  Split code up to simplify understanding and make use of helpers. fix minor bug in retreival of parent commits to pass to the read-tree call.  Change-Id: Ie36520162a73cd621a61889f7860753dd911be54,objective,,,,,,
x%2Fgroup-based-policy~master~Ife80c21ae61fe432130c7c5265c8b79a2b693563,https://review.opendev.org/140201,UTs refactor,[WIP]: UTs refactor  - Easier update resource API; - Easier show resources API; - PRS rules on security groups verification framework; - Fixed bug 1397721  Change-Id: Ife80c21ae61fe432130c7c5265c8b79a2b693563,objective,,,,,,
x%2Fgroup-based-policy~master~Ife80c21ae61fe432130c7c5265c8b79a2b693563,https://review.opendev.org/140201,UTs refactor,[WIP]: UTs refactor  - Easier update resource API; - Easier show resources API; - PRS rules on security groups verification framework; - Fixed bug 1397721  Change-Id: Ife80c21ae61fe432130c7c5265c8b79a2b693563,quality,,,,,,
x%2Fgroup-based-policy~master~Ife80c21ae61fe432130c7c5265c8b79a2b693563,https://review.opendev.org/140201,UTs refactor,[WIP]: UTs refactor  - Easier update resource API; - Easier show resources API; - PRS rules on security groups verification framework; - Fixed bug 1397721  Change-Id: Ife80c21ae61fe432130c7c5265c8b79a2b693563,refactoring,,,,,,
openstack%2Frally~master~I9f6fb0642b73b7b4d3f6f14de4ef6943a4fb7320,https://review.opendev.org/132436,Refactor generic cleanup mechanism part 1,"Refactor generic cleanup mechanism part 1  Current cleanup mechanism is awful. It's hardcoed, without repeat on failures, contains a lot of mistakes, in some places it is too fast (in case of deletion of VMs) in other to slow (like deletion of users). As well there is mix of cleanup mechanism and resource cleanup mechanism. To resolve these all issues this patch introcude a cleanup engine that resolves all issues above. It's resource based, so to add new resouce you should just a make subclass of base.Resource and probably override some of methods like (list, delete, is_deleted) and that's all. All complexity of managing: 0) waiting unit async deletion is finished 1) repeat on failure logic 2) greaceful failure handling 3) parallelization 4) plugin support Is hidden deep inside cleanup engine + bonus we are able to specify now single resource (without clenaping whole service)  PART 1: ------- * Add new generic cleanup engine * Fix bug in broker (queue can be empty because of multithreading access) * Add retry method in rally utils, allow as to repeat few times method on failures  bp benchmark-context-cleanup-refactor  Change-Id: I9f6fb0642b73b7b4d3f6f14de4ef6943a4fb7320",quality,,,,,,
openstack%2Frally~master~I9f6fb0642b73b7b4d3f6f14de4ef6943a4fb7320,https://review.opendev.org/132436,Refactor generic cleanup mechanism part 1,"Refactor generic cleanup mechanism part 1  Current cleanup mechanism is awful. It's hardcoed, without repeat on failures, contains a lot of mistakes, in some places it is too fast (in case of deletion of VMs) in other to slow (like deletion of users). As well there is mix of cleanup mechanism and resource cleanup mechanism. To resolve these all issues this patch introcude a cleanup engine that resolves all issues above. It's resource based, so to add new resouce you should just a make subclass of base.Resource and probably override some of methods like (list, delete, is_deleted) and that's all. All complexity of managing: 0) waiting unit async deletion is finished 1) repeat on failure logic 2) greaceful failure handling 3) parallelization 4) plugin support Is hidden deep inside cleanup engine + bonus we are able to specify now single resource (without clenaping whole service)  PART 1: ------- * Add new generic cleanup engine * Fix bug in broker (queue can be empty because of multithreading access) * Add retry method in rally utils, allow as to repeat few times method on failures  bp benchmark-context-cleanup-refactor  Change-Id: I9f6fb0642b73b7b4d3f6f14de4ef6943a4fb7320",objective,,,,,,
openstack%2Frally~master~I9f6fb0642b73b7b4d3f6f14de4ef6943a4fb7320,https://review.opendev.org/132436,Refactor generic cleanup mechanism part 1,"Refactor generic cleanup mechanism part 1  Current cleanup mechanism is awful. It's hardcoed, without repeat on failures, contains a lot of mistakes, in some places it is too fast (in case of deletion of VMs) in other to slow (like deletion of users). As well there is mix of cleanup mechanism and resource cleanup mechanism. To resolve these all issues this patch introcude a cleanup engine that resolves all issues above. It's resource based, so to add new resouce you should just a make subclass of base.Resource and probably override some of methods like (list, delete, is_deleted) and that's all. All complexity of managing: 0) waiting unit async deletion is finished 1) repeat on failure logic 2) greaceful failure handling 3) parallelization 4) plugin support Is hidden deep inside cleanup engine + bonus we are able to specify now single resource (without clenaping whole service)  PART 1: ------- * Add new generic cleanup engine * Fix bug in broker (queue can be empty because of multithreading access) * Add retry method in rally utils, allow as to repeat few times method on failures  bp benchmark-context-cleanup-refactor  Change-Id: I9f6fb0642b73b7b4d3f6f14de4ef6943a4fb7320",objective,,,,,,
openstack%2Fneutron~master~I02d0126e31adcab88a7ee82ba1cb76f952c9a68c,https://review.opendev.org/118704,Add scheduler unit tests to enable bug fixes and refactoring,Add scheduler unit tests to enable bug fixes and refactoring  Improves the coverage for DVR scheduling and will allow safer bug fixes and refactoring in follow-on patches.  Change-Id: I02d0126e31adcab88a7ee82ba1cb76f952c9a68c Partial-bug: #1353266 Partial-bug: #1356639 Co-Authored-By: Swaminathan Vasudevan <swaminathan.vasudevan@hp.com> Co-Authored-By: Carl Baldwin <carl.baldwin@hp.com>,objective,,,,,,
openstack%2Fneutron~master~I02d0126e31adcab88a7ee82ba1cb76f952c9a68c,https://review.opendev.org/118704,Add scheduler unit tests to enable bug fixes and refactoring,Add scheduler unit tests to enable bug fixes and refactoring  Improves the coverage for DVR scheduling and will allow safer bug fixes and refactoring in follow-on patches.  Change-Id: I02d0126e31adcab88a7ee82ba1cb76f952c9a68c Partial-bug: #1353266 Partial-bug: #1356639 Co-Authored-By: Swaminathan Vasudevan <swaminathan.vasudevan@hp.com> Co-Authored-By: Carl Baldwin <carl.baldwin@hp.com>,testing,,,,,,
openstack%2Fneutron~master~I1aa82ac00c16a53a59a93087f0ca4ef281ee3f2b,https://review.opendev.org/118165,Fix a bug in Mellanox plugin RPC caused by secgroup RPC refactoring,"Fix a bug in Mellanox plugin RPC caused by secgroup RPC refactoring  SecurityGroupsRpcCallback RPC refactoring patch (commit 2781fce238) moves get_port_from_device method from plugin RPC callback class to plugin layer, but Mellanox plugin RPC callback was forgot to update and as a result RPC calls from agents to Mellanox plugin fails.  Change-Id: I1aa82ac00c16a53a59a93087f0ca4ef281ee3f2b Related-Bug: #1359416",objective,,,,,,
openstack%2Fneutron~master~I1aa82ac00c16a53a59a93087f0ca4ef281ee3f2b,https://review.opendev.org/118165,Fix a bug in Mellanox plugin RPC caused by secgroup RPC refactoring,"Fix a bug in Mellanox plugin RPC caused by secgroup RPC refactoring  SecurityGroupsRpcCallback RPC refactoring patch (commit 2781fce238) moves get_port_from_device method from plugin RPC callback class to plugin layer, but Mellanox plugin RPC callback was forgot to update and as a result RPC calls from agents to Mellanox plugin fails.  Change-Id: I1aa82ac00c16a53a59a93087f0ca4ef281ee3f2b Related-Bug: #1359416",objective,,,,,,
openstack%2Fheat~master~I001d3a432397d4cdfaa62145228aad7eaf051b98,https://review.opendev.org/100366,test_autoscaling refactor suspend/resume stubbing,"test_autoscaling refactor suspend/resume stubbing  Rework to encapsulate the suspend/resume stubbing in functions and add a stub of the image validation, which is required because the properties get revalidated when we create the events associated with the state transition (ref bug #1324102).  With the current keystoneclient mocking this is not visible in the tests because the error creating the client to do the validation is obscured by the fact that the Event constructor tolerates a validation error and the error creating the client is just treated as an unexpected validation error by the CustomConstraint code.  Moving to a model where clients.keystone() is consistently mocked exposes the fact that we will try to connect to glance on suspend when the event is created if the validation is not correctly stubbed.  Partial-Bug: #1306294  Change-Id: I001d3a432397d4cdfaa62145228aad7eaf051b98",testing,,,,,,
openstack%2Fheat~master~I001d3a432397d4cdfaa62145228aad7eaf051b98,https://review.opendev.org/100366,test_autoscaling refactor suspend/resume stubbing,"test_autoscaling refactor suspend/resume stubbing  Rework to encapsulate the suspend/resume stubbing in functions and add a stub of the image validation, which is required because the properties get revalidated when we create the events associated with the state transition (ref bug #1324102).  With the current keystoneclient mocking this is not visible in the tests because the error creating the client to do the validation is obscured by the fact that the Event constructor tolerates a validation error and the error creating the client is just treated as an unexpected validation error by the CustomConstraint code.  Moving to a model where clients.keystone() is consistently mocked exposes the fact that we will try to connect to glance on suspend when the event is created if the validation is not correctly stubbed.  Partial-Bug: #1306294  Change-Id: I001d3a432397d4cdfaa62145228aad7eaf051b98",quality,,,,,,
openstack%2Fheat~master~I001d3a432397d4cdfaa62145228aad7eaf051b98,https://review.opendev.org/100366,test_autoscaling refactor suspend/resume stubbing,"test_autoscaling refactor suspend/resume stubbing  Rework to encapsulate the suspend/resume stubbing in functions and add a stub of the image validation, which is required because the properties get revalidated when we create the events associated with the state transition (ref bug #1324102).  With the current keystoneclient mocking this is not visible in the tests because the error creating the client to do the validation is obscured by the fact that the Event constructor tolerates a validation error and the error creating the client is just treated as an unexpected validation error by the CustomConstraint code.  Moving to a model where clients.keystone() is consistently mocked exposes the fact that we will try to connect to glance on suspend when the event is created if the validation is not correctly stubbed.  Partial-Bug: #1306294  Change-Id: I001d3a432397d4cdfaa62145228aad7eaf051b98",objective,,,,,,
openstack%2Fheat~master~I001d3a432397d4cdfaa62145228aad7eaf051b98,https://review.opendev.org/100366,test_autoscaling refactor suspend/resume stubbing,"test_autoscaling refactor suspend/resume stubbing  Rework to encapsulate the suspend/resume stubbing in functions and add a stub of the image validation, which is required because the properties get revalidated when we create the events associated with the state transition (ref bug #1324102).  With the current keystoneclient mocking this is not visible in the tests because the error creating the client to do the validation is obscured by the fact that the Event constructor tolerates a validation error and the error creating the client is just treated as an unexpected validation error by the CustomConstraint code.  Moving to a model where clients.keystone() is consistently mocked exposes the fact that we will try to connect to glance on suspend when the event is created if the validation is not correctly stubbed.  Partial-Bug: #1306294  Change-Id: I001d3a432397d4cdfaa62145228aad7eaf051b98",objective,,,,,,
openstack%2Fironic~master~I6e51bb956890a01535c62f8a378756e65d438ac3,https://review.opendev.org/724707,Refactor RedfishVirtualMediaBoot,"Refactor RedfishVirtualMediaBoot  - Move staticmethods and classmethods to functions, since in py36 we have a bug when ussing unittest.mock [1] The only classmethod we are keeping is `_set_boot_device` since it's used by `DracRedfishVirtualMediaBoot`  [1] https://bugs.python.org/issue23078  Change-Id: I6e51bb956890a01535c62f8a378756e65d438ac3",objective,,,,,,
openstack%2Fironic~master~I6e51bb956890a01535c62f8a378756e65d438ac3,https://review.opendev.org/724707,Refactor RedfishVirtualMediaBoot,"Refactor RedfishVirtualMediaBoot  - Move staticmethods and classmethods to functions, since in py36 we have a bug when ussing unittest.mock [1] The only classmethod we are keeping is `_set_boot_device` since it's used by `DracRedfishVirtualMediaBoot`  [1] https://bugs.python.org/issue23078  Change-Id: I6e51bb956890a01535c62f8a378756e65d438ac3",objective,,,,,,
x%2Fdriverlog~master~I8edfd326e016b98a376e3a803ea70d7a8fe06812,https://review.opendev.org/93348,Refactored review processing and tests,Refactored review processing and tests  Part of bug 1317554  Change-Id: I8edfd326e016b98a376e3a803ea70d7a8fe06812,refactoring,,,,,,
x%2Fdriverlog~master~I6f79025cb86501ae10ab8b63781287781d14ae21,https://review.opendev.org/93268,Refactoring of vote processing,Refactoring of vote processing  Part of bug 1317554  Change-Id: I6f79025cb86501ae10ab8b63781287781d14ae21,refactoring,,,,,,
openstack%2Fsahara-image-elements~master~If9db8359ad77a9a77ceefabac4d71fef3c162935,https://review.opendev.org/86987,Refactor logic around selinux bug 1204824,Refactor logic around selinux bug 1204824  Change-Id: If9db8359ad77a9a77ceefabac4d71fef3c162935,refactoring,,,,,,
openstack%2Fceilometer~stable%2Fhavana~I2aaef54354926f9afe3bb1d4fae8f8aa0ae600ab,https://review.opendev.org/75058,Refactor timestamp existence validation in V2 API,"Refactor timestamp existence validation in V2 API  There was a bug in AlarmThresholdRule in v2.py, the timestamp_keys were defined with a missing comma: ['timestamp', 'start', 'start_timestamp' 'end', 'end_timestamp'].  The validation, if the timestamp field is used or not, was unclear in the current implementation. A new parameter, 'timestamp_is_valid', was added to the validation functions to show, if the timestamp is allowed to use or not in the validated query.  Fixes bug 1280975  (cherry picked from commit b1834e55fce08f1536c7d9392ae035b9583be8ed)  Change-Id: I2aaef54354926f9afe3bb1d4fae8f8aa0ae600ab",objective,,,,,,
openstack%2Fceilometer~stable%2Fhavana~I2aaef54354926f9afe3bb1d4fae8f8aa0ae600ab,https://review.opendev.org/75058,Refactor timestamp existence validation in V2 API,"Refactor timestamp existence validation in V2 API  There was a bug in AlarmThresholdRule in v2.py, the timestamp_keys were defined with a missing comma: ['timestamp', 'start', 'start_timestamp' 'end', 'end_timestamp'].  The validation, if the timestamp field is used or not, was unclear in the current implementation. A new parameter, 'timestamp_is_valid', was added to the validation functions to show, if the timestamp is allowed to use or not in the validated query.  Fixes bug 1280975  (cherry picked from commit b1834e55fce08f1536c7d9392ae035b9583be8ed)  Change-Id: I2aaef54354926f9afe3bb1d4fae8f8aa0ae600ab",objective,,,,,,
openstack%2Ftempest~master~Ic0760d6d91a83bdce45ae42dd3f9d05a7bc8b6b3,https://review.opendev.org/65533,Refactor usage of custom_match tests,"Refactor usage of custom_match tests  For some requests a check outside of custom_match was used, thus bug #1262534 was not completely closed.  This patch refactors part of the code to use custom_match as far as possible and also adds some more checks.  Closes-Bug: #1262534 Change-Id: Ic0760d6d91a83bdce45ae42dd3f9d05a7bc8b6b3",testing,,,,,,
openstack%2Ftempest~master~Ic0760d6d91a83bdce45ae42dd3f9d05a7bc8b6b3,https://review.opendev.org/65533,Refactor usage of custom_match tests,"Refactor usage of custom_match tests  For some requests a check outside of custom_match was used, thus bug #1262534 was not completely closed.  This patch refactors part of the code to use custom_match as far as possible and also adds some more checks.  Closes-Bug: #1262534 Change-Id: Ic0760d6d91a83bdce45ae42dd3f9d05a7bc8b6b3",objective,,,,,,
openstack%2Ftempest~master~Ic0760d6d91a83bdce45ae42dd3f9d05a7bc8b6b3,https://review.opendev.org/65533,Refactor usage of custom_match tests,"Refactor usage of custom_match tests  For some requests a check outside of custom_match was used, thus bug #1262534 was not completely closed.  This patch refactors part of the code to use custom_match as far as possible and also adds some more checks.  Closes-Bug: #1262534 Change-Id: Ic0760d6d91a83bdce45ae42dd3f9d05a7bc8b6b3",objective,,,,,,
openstack%2Fkeystone~master~I2a446611a0fb91b946e986342ae5ede926b8dd44,https://review.opendev.org/65377,Cleanup from business logic refactor,"Cleanup from business logic refactor  This patchset resolves a few minor nits including proper translation of a couple strings in exceptions, order of addCleanup in test_keystoneclient, a simple white-space change to make a line more readable, and adding a bug reference to a comment.  All of these changes are in response to comments on the deletion business logic refactor that moved business logic from the controllers to the *_api managers.  Change-Id: I2a446611a0fb91b946e986342ae5ede926b8dd44 bp: assignment-controller-first-class",quality,,,,,,
openstack%2Fkeystone~master~I2a446611a0fb91b946e986342ae5ede926b8dd44,https://review.opendev.org/65377,Cleanup from business logic refactor,"Cleanup from business logic refactor  This patchset resolves a few minor nits including proper translation of a couple strings in exceptions, order of addCleanup in test_keystoneclient, a simple white-space change to make a line more readable, and adding a bug reference to a comment.  All of these changes are in response to comments on the deletion business logic refactor that moved business logic from the controllers to the *_api managers.  Change-Id: I2a446611a0fb91b946e986342ae5ede926b8dd44 bp: assignment-controller-first-class",objective,,,,,,
openstack%2Fkeystone~master~I2a446611a0fb91b946e986342ae5ede926b8dd44,https://review.opendev.org/65377,Cleanup from business logic refactor,"Cleanup from business logic refactor  This patchset resolves a few minor nits including proper translation of a couple strings in exceptions, order of addCleanup in test_keystoneclient, a simple white-space change to make a line more readable, and adding a bug reference to a comment.  All of these changes are in response to comments on the deletion business logic refactor that moved business logic from the controllers to the *_api managers.  Change-Id: I2a446611a0fb91b946e986342ae5ede926b8dd44 bp: assignment-controller-first-class",objective,,,,,,
x%2Fstackalytics~master~Ic9b52f84fbf0237669e920541524c4e3e62f09d1,https://review.opendev.org/63924,Record updater refactoring,Record updater refactoring  Moved together code that updates records after default data changed and code that called during data pulling. Removed unnecessary code.  Part of bug 1260696  Change-Id: Ic9b52f84fbf0237669e920541524c4e3e62f09d1,objective,,,,,,
x%2Fstackalytics~master~Ic9b52f84fbf0237669e920541524c4e3e62f09d1,https://review.opendev.org/63924,Record updater refactoring,Record updater refactoring  Moved together code that updates records after default data changed and code that called during data pulling. Removed unnecessary code.  Part of bug 1260696  Change-Id: Ic9b52f84fbf0237669e920541524c4e3e62f09d1,quality,,,,,,
x%2Fstackalytics~master~Ic9b52f84fbf0237669e920541524c4e3e62f09d1,https://review.opendev.org/63924,Record updater refactoring,Record updater refactoring  Moved together code that updates records after default data changed and code that called during data pulling. Removed unnecessary code.  Part of bug 1260696  Change-Id: Ic9b52f84fbf0237669e920541524c4e3e62f09d1,refactoring,,,,,,
openstack%2Fneutron~stable%2Fhavana~I0cfb58d487b1925e0a0db2a701c5ea3c56a0b2b5,https://review.opendev.org/53689,Refactor configuring of floating ips on a router,"Refactor configuring of floating ips on a router.  This approach to configuring floating ips is stateless and idempotent. This allows it to handle corner cases, such as reusing a floating ip address with a different floating ip id in a way that is easier to understand.  The concept is to wipe the floating ips clean and rebuild them each time with the following optimizations.  To avoid bad performance in manipulating iptables, it is called in the context of a call to defer_apply_on.  To avoid a disruption in network flow a set difference is use to determine the set of addresses that no longer belong on the inteface rather than removing them all blindly.  Fixes: Bug #1209011  Conflicts:          neutron/tests/unit/test_l3_agent.py  Change-Id: I0cfb58d487b1925e0a0db2a701c5ea3c56a0b2b5 (cherry picked from commit 9382ee659212285a203550cf60476dd146d27a29)",quality,,,,,,
openstack%2Fneutron~stable%2Fhavana~I0cfb58d487b1925e0a0db2a701c5ea3c56a0b2b5,https://review.opendev.org/53689,Refactor configuring of floating ips on a router,"Refactor configuring of floating ips on a router.  This approach to configuring floating ips is stateless and idempotent. This allows it to handle corner cases, such as reusing a floating ip address with a different floating ip id in a way that is easier to understand.  The concept is to wipe the floating ips clean and rebuild them each time with the following optimizations.  To avoid bad performance in manipulating iptables, it is called in the context of a call to defer_apply_on.  To avoid a disruption in network flow a set difference is use to determine the set of addresses that no longer belong on the inteface rather than removing them all blindly.  Fixes: Bug #1209011  Conflicts:          neutron/tests/unit/test_l3_agent.py  Change-Id: I0cfb58d487b1925e0a0db2a701c5ea3c56a0b2b5 (cherry picked from commit 9382ee659212285a203550cf60476dd146d27a29)",objective,,,,,,
openstack%2Fneutron~stable%2Fhavana~I0cfb58d487b1925e0a0db2a701c5ea3c56a0b2b5,https://review.opendev.org/53689,Refactor configuring of floating ips on a router,"Refactor configuring of floating ips on a router.  This approach to configuring floating ips is stateless and idempotent. This allows it to handle corner cases, such as reusing a floating ip address with a different floating ip id in a way that is easier to understand.  The concept is to wipe the floating ips clean and rebuild them each time with the following optimizations.  To avoid bad performance in manipulating iptables, it is called in the context of a call to defer_apply_on.  To avoid a disruption in network flow a set difference is use to determine the set of addresses that no longer belong on the inteface rather than removing them all blindly.  Fixes: Bug #1209011  Conflicts:          neutron/tests/unit/test_l3_agent.py  Change-Id: I0cfb58d487b1925e0a0db2a701c5ea3c56a0b2b5 (cherry picked from commit 9382ee659212285a203550cf60476dd146d27a29)",objective,,,,,,
openstack%2Fneutron~master~I98aacbbb52b35688036990961d02e0b273504a77,https://review.opendev.org/42412,Refactor configuring of floating ips on a router,"Refactor configuring of floating ips on a router.  This approach to configuring floating ips is stateless and idempotent. This allows it to handle corner cases, such as reusing a floating ip address with a different floating ip id in a way that is easier to understand.  The concept is to wipe the floating ips clean and rebuild them each time with the following optimizations.  To avoid bad performance in manipulating iptables, it is called in the context of a call to defer_apply_on.  To avoid a disruption in network flow a set difference is use to determine the set of addresses that no longer belong on the inteface rather than removing them all blindly.  Change-Id: I98aacbbb52b35688036990961d02e0b273504a77 Fixes: Bug #1209011",quality,,,,,,
openstack%2Fneutron~master~I98aacbbb52b35688036990961d02e0b273504a77,https://review.opendev.org/42412,Refactor configuring of floating ips on a router,"Refactor configuring of floating ips on a router.  This approach to configuring floating ips is stateless and idempotent. This allows it to handle corner cases, such as reusing a floating ip address with a different floating ip id in a way that is easier to understand.  The concept is to wipe the floating ips clean and rebuild them each time with the following optimizations.  To avoid bad performance in manipulating iptables, it is called in the context of a call to defer_apply_on.  To avoid a disruption in network flow a set difference is use to determine the set of addresses that no longer belong on the inteface rather than removing them all blindly.  Change-Id: I98aacbbb52b35688036990961d02e0b273504a77 Fixes: Bug #1209011",objective,,,,,,
openstack%2Fneutron~master~I98aacbbb52b35688036990961d02e0b273504a77,https://review.opendev.org/42412,Refactor configuring of floating ips on a router,"Refactor configuring of floating ips on a router.  This approach to configuring floating ips is stateless and idempotent. This allows it to handle corner cases, such as reusing a floating ip address with a different floating ip id in a way that is easier to understand.  The concept is to wipe the floating ips clean and rebuild them each time with the following optimizations.  To avoid bad performance in manipulating iptables, it is called in the context of a call to defer_apply_on.  To avoid a disruption in network flow a set difference is use to determine the set of addresses that no longer belong on the inteface rather than removing them all blindly.  Change-Id: I98aacbbb52b35688036990961d02e0b273504a77 Fixes: Bug #1209011",objective,,,,,,
openstack%2Fceilometer~master~Iec396f045cd3afe817301f0d00917c42c7587b55,https://review.opendev.org/54500,Refactor API error handling,"Refactor API error handling  Refactor the API error handling to ensure error messages are translated. Since wsme 0.5b6, the error message doesn't need to be converted to unicode, wsme handles it for us.  Related bug #1200518  Change-Id: Iec396f045cd3afe817301f0d00917c42c7587b55",quality,,,,,,
openstack%2Fceilometer~master~Iec396f045cd3afe817301f0d00917c42c7587b55,https://review.opendev.org/54500,Refactor API error handling,"Refactor API error handling  Refactor the API error handling to ensure error messages are translated. Since wsme 0.5b6, the error message doesn't need to be converted to unicode, wsme handles it for us.  Related bug #1200518  Change-Id: Iec396f045cd3afe817301f0d00917c42c7587b55",objective,,,,,,
openstack%2Fnova~master~I95ae89525b7e6768c5a70364945d5a10cb906d88,https://review.opendev.org/46056,xenapi: refactor: move UpdateGlanceImage to common,xenapi: refactor: move UpdateGlanceImage to common  During the review of https://review.openstack.org/41651 it was recommended to move UpdateGlanceImage to a common library. A bug was filed to deal with the refactors. This change fixes the first part.  Fixes bug 1220596  Change-Id: I95ae89525b7e6768c5a70364945d5a10cb906d88,refactoring,,,,,,
openstack%2Fnova~master~I95ae89525b7e6768c5a70364945d5a10cb906d88,https://review.opendev.org/46056,xenapi: refactor: move UpdateGlanceImage to common,xenapi: refactor: move UpdateGlanceImage to common  During the review of https://review.openstack.org/41651 it was recommended to move UpdateGlanceImage to a common library. A bug was filed to deal with the refactors. This change fixes the first part.  Fixes bug 1220596  Change-Id: I95ae89525b7e6768c5a70364945d5a10cb906d88,objective,,,,,,
openstack%2Fnova~master~I95ae89525b7e6768c5a70364945d5a10cb906d88,https://review.opendev.org/46056,xenapi: refactor: move UpdateGlanceImage to common,xenapi: refactor: move UpdateGlanceImage to common  During the review of https://review.openstack.org/41651 it was recommended to move UpdateGlanceImage to a common library. A bug was filed to deal with the refactors. This change fixes the first part.  Fixes bug 1220596  Change-Id: I95ae89525b7e6768c5a70364945d5a10cb906d88,objective,,,,,,
openstack%2Fdevstack~master~Idf0d1b842bb9ab046c9ef826de1dfc55b3f1df9d,https://review.opendev.org/43006,Colorize Neutron log output and refactor log setup code,"Colorize Neutron log output and refactor log setup code  Bug 1214616  This patch adds colors to on-screen Neutron log output in the same way nova, cinder, and heat engine do. To this aim, logging configuration instructions are moved into ./functions. The reason for this refactoring is that these instruction are the same for each project, with the only exception of the target configuration file.  Change-Id: Idf0d1b842bb9ab046c9ef826de1dfc55b3f1df9d",objective,,,,,,
openstack%2Fdevstack~master~Idf0d1b842bb9ab046c9ef826de1dfc55b3f1df9d,https://review.opendev.org/43006,Colorize Neutron log output and refactor log setup code,"Colorize Neutron log output and refactor log setup code  Bug 1214616  This patch adds colors to on-screen Neutron log output in the same way nova, cinder, and heat engine do. To this aim, logging configuration instructions are moved into ./functions. The reason for this refactoring is that these instruction are the same for each project, with the only exception of the target configuration file.  Change-Id: Idf0d1b842bb9ab046c9ef826de1dfc55b3f1df9d",objective,,,,,,
x%2Fstackalytics~master~I7146fda70b4892d3d08c35682ff452cc4b891f58,https://review.opendev.org/45247,JSON API refactoring,"JSON API refactoring  * Introduced json decorator * Changed signatures of API URIs * Extract common js code into separate static file   * Move all renderers (chart, table, timeline)   * Move common functions  Resolves bug 1221185  Change-Id: I7146fda70b4892d3d08c35682ff452cc4b891f58",objective,,,,,,
x%2Fstackalytics~master~I7146fda70b4892d3d08c35682ff452cc4b891f58,https://review.opendev.org/45247,JSON API refactoring,"JSON API refactoring  * Introduced json decorator * Changed signatures of API URIs * Extract common js code into separate static file   * Move all renderers (chart, table, timeline)   * Move common functions  Resolves bug 1221185  Change-Id: I7146fda70b4892d3d08c35682ff452cc4b891f58",integration,,,,,,
x%2Fstackalytics~master~I7146fda70b4892d3d08c35682ff452cc4b891f58,https://review.opendev.org/45247,JSON API refactoring,"JSON API refactoring  * Introduced json decorator * Changed signatures of API URIs * Extract common js code into separate static file   * Move all renderers (chart, table, timeline)   * Move common functions  Resolves bug 1221185  Change-Id: I7146fda70b4892d3d08c35682ff452cc4b891f58",quality,,,,,,
openstack%2Fneutron~master~Ia636c40e744b3b1c543e891791bf492df4f675d2,https://review.opendev.org/43420,Refactor BigSwitch error handling to use db rollbacks,Refactor BigSwitch error handling to use db rollbacks  This patch adjusts most of the logic handling the calls to the controller in the BigSwitch/floodlight plugin to make use of the db rollbacks from sqlalchemy for free on exceptions. This eliminates several complex try-except blocks and makes maintaining db<->controller consistency easier.  Fixes: bug #1215823 Change-Id: Ia636c40e744b3b1c543e891791bf492df4f675d2,quality,,,,,,
openstack%2Fneutron~master~Ia636c40e744b3b1c543e891791bf492df4f675d2,https://review.opendev.org/43420,Refactor BigSwitch error handling to use db rollbacks,Refactor BigSwitch error handling to use db rollbacks  This patch adjusts most of the logic handling the calls to the controller in the BigSwitch/floodlight plugin to make use of the db rollbacks from sqlalchemy for free on exceptions. This eliminates several complex try-except blocks and makes maintaining db<->controller consistency easier.  Fixes: bug #1215823 Change-Id: Ia636c40e744b3b1c543e891791bf492df4f675d2,objective,,,,,,
openstack%2Fceilometer~master~Id605ae676eddfb4a471e8a3d9f5581e0bf2b8ff0,https://review.opendev.org/39031,Api V2 post sample refactoring,Api V2 post sample refactoring  Refactoring of the post sample rest api to set the correct source in the publisher context. The content of the pipeline is now checked The admin role case is now tested  Fixes bug #1202689 Fixes bug #1204593  Change-Id: Id605ae676eddfb4a471e8a3d9f5581e0bf2b8ff0,testing,,,,,,
openstack%2Fceilometer~master~Id605ae676eddfb4a471e8a3d9f5581e0bf2b8ff0,https://review.opendev.org/39031,Api V2 post sample refactoring,Api V2 post sample refactoring  Refactoring of the post sample rest api to set the correct source in the publisher context. The content of the pipeline is now checked The admin role case is now tested  Fixes bug #1202689 Fixes bug #1204593  Change-Id: Id605ae676eddfb4a471e8a3d9f5581e0bf2b8ff0,quality,,,,,,
openstack%2Fceilometer~master~Id605ae676eddfb4a471e8a3d9f5581e0bf2b8ff0,https://review.opendev.org/39031,Api V2 post sample refactoring,Api V2 post sample refactoring  Refactoring of the post sample rest api to set the correct source in the publisher context. The content of the pipeline is now checked The admin role case is now tested  Fixes bug #1202689 Fixes bug #1204593  Change-Id: Id605ae676eddfb4a471e8a3d9f5581e0bf2b8ff0,objective,,,,,,
openstack%2Fneutron~master~I05925798cddc7a706e922025ef6ce27b6638ffb6,https://review.opendev.org/42390,"Revert ""Refactor configuring of floating ips on a router.""","Revert ""Refactor configuring of floating ips on a router.""  This patch breaks gating job. Because nat rule for metadata will be only added on the router_add. Revert it for now.  Fixes bug 1211829 This reverts commit 9382ee659212285a203550cf60476dd146d27a29.  Change-Id: I05925798cddc7a706e922025ef6ce27b6638ffb6",objective,,,,,,
openstack%2Fneutron~master~I05925798cddc7a706e922025ef6ce27b6638ffb6,https://review.opendev.org/42390,"Revert ""Refactor configuring of floating ips on a router.""","Revert ""Refactor configuring of floating ips on a router.""  This patch breaks gating job. Because nat rule for metadata will be only added on the router_add. Revert it for now.  Fixes bug 1211829 This reverts commit 9382ee659212285a203550cf60476dd146d27a29.  Change-Id: I05925798cddc7a706e922025ef6ce27b6638ffb6",objective,,,,,,
openstack%2Fcinder~master~Icefd065f885ad417735490e6ac90e2b21557d2dc,https://review.opendev.org/42236,refactor/unify driver version strings,refactor/unify driver version strings  This patch updates each driver to provide the same mechanism for reporting the version of the driver.  It also includes fixing the reported driver version at get_volume_stats() time to be the version set in the driver.  When the manager starts the driver it now logs the driver's name and version in the log file.  fixes Bug #1212878  Change-Id: Icefd065f885ad417735490e6ac90e2b21557d2dc,quality,,,,,,
openstack%2Fcinder~master~Icefd065f885ad417735490e6ac90e2b21557d2dc,https://review.opendev.org/42236,refactor/unify driver version strings,refactor/unify driver version strings  This patch updates each driver to provide the same mechanism for reporting the version of the driver.  It also includes fixing the reported driver version at get_volume_stats() time to be the version set in the driver.  When the manager starts the driver it now logs the driver's name and version in the log file.  fixes Bug #1212878  Change-Id: Icefd065f885ad417735490e6ac90e2b21557d2dc,objective,,,,,,
openstack%2Fcinder~master~Icefd065f885ad417735490e6ac90e2b21557d2dc,https://review.opendev.org/42236,refactor/unify driver version strings,refactor/unify driver version strings  This patch updates each driver to provide the same mechanism for reporting the version of the driver.  It also includes fixing the reported driver version at get_volume_stats() time to be the version set in the driver.  When the manager starts the driver it now logs the driver's name and version in the log file.  fixes Bug #1212878  Change-Id: Icefd065f885ad417735490e6ac90e2b21557d2dc,objective,,,,,,
openstack%2Fneutron~master~I0cfb58d487b1925e0a0db2a701c5ea3c56a0b2b5,https://review.opendev.org/41584,Refactor configuring of floating ips on a router.,"Refactor configuring of floating ips on a router.  This approach to configuring floating ips is stateless and idempotent. This allows it to handle corner cases, such as reusing a floating ip address with a different floating ip id in a way that is easier to understand.  The concept is to wipe the floating ips clean and rebuild them each time with the following optimizations.  To avoid bad performance in manipulating iptables, it is called in the context of a call to defer_apply_on.  To avoid a disruption in network flow a set difference is use to determine the set of addresses that no longer belong on the inteface rather than removing them all blindly.  Change-Id: I0cfb58d487b1925e0a0db2a701c5ea3c56a0b2b5 Fixes: Bug #1209011",quality,,,,,,
openstack%2Fneutron~master~I0cfb58d487b1925e0a0db2a701c5ea3c56a0b2b5,https://review.opendev.org/41584,Refactor configuring of floating ips on a router.,"Refactor configuring of floating ips on a router.  This approach to configuring floating ips is stateless and idempotent. This allows it to handle corner cases, such as reusing a floating ip address with a different floating ip id in a way that is easier to understand.  The concept is to wipe the floating ips clean and rebuild them each time with the following optimizations.  To avoid bad performance in manipulating iptables, it is called in the context of a call to defer_apply_on.  To avoid a disruption in network flow a set difference is use to determine the set of addresses that no longer belong on the inteface rather than removing them all blindly.  Change-Id: I0cfb58d487b1925e0a0db2a701c5ea3c56a0b2b5 Fixes: Bug #1209011",objective,,,,,,
openstack%2Fneutron~master~I0cfb58d487b1925e0a0db2a701c5ea3c56a0b2b5,https://review.opendev.org/41584,Refactor configuring of floating ips on a router.,"Refactor configuring of floating ips on a router.  This approach to configuring floating ips is stateless and idempotent. This allows it to handle corner cases, such as reusing a floating ip address with a different floating ip id in a way that is easier to understand.  The concept is to wipe the floating ips clean and rebuild them each time with the following optimizations.  To avoid bad performance in manipulating iptables, it is called in the context of a call to defer_apply_on.  To avoid a disruption in network flow a set difference is use to determine the set of addresses that no longer belong on the inteface rather than removing them all blindly.  Change-Id: I0cfb58d487b1925e0a0db2a701c5ea3c56a0b2b5 Fixes: Bug #1209011",objective,,,,,,
openstack%2Fheat~master~Ia71d14b2cfde9110216ba38a515fee16d0f0c35e,https://review.opendev.org/39523,Port policy from oslo and refactor heat policy,Port policy from oslo and refactor heat policy  Fixes bug #1192551  Change-Id: Ia71d14b2cfde9110216ba38a515fee16d0f0c35e,refactoring,,,,,,
openstack%2Fheat~master~Ia71d14b2cfde9110216ba38a515fee16d0f0c35e,https://review.opendev.org/39523,Port policy from oslo and refactor heat policy,Port policy from oslo and refactor heat policy  Fixes bug #1192551  Change-Id: Ia71d14b2cfde9110216ba38a515fee16d0f0c35e,objective,,,,,,
openstack%2Fneutron~master~I5a77eb7395e14482a856e033f536f72a1bf82e06,https://review.opendev.org/34133,refactor port binding codes,refactor port binding codes  Bug #1195047  This patch: 1. removes the iteration in get_ports to call extend_dict_binding 2. uses a unified way for plugins to do this kind of stuff  ml2 will enhance the binding so that it can have different binding for port according to port's host. mlnx is also an exception due to the dynamic binding info.  Change-Id: I5a77eb7395e14482a856e033f536f72a1bf82e06,quality,,,,,,
openstack%2Fneutron~master~I5a77eb7395e14482a856e033f536f72a1bf82e06,https://review.opendev.org/34133,refactor port binding codes,refactor port binding codes  Bug #1195047  This patch: 1. removes the iteration in get_ports to call extend_dict_binding 2. uses a unified way for plugins to do this kind of stuff  ml2 will enhance the binding so that it can have different binding for port according to port's host. mlnx is also an exception due to the dynamic binding info.  Change-Id: I5a77eb7395e14482a856e033f536f72a1bf82e06,objective,,,,,,
openstack%2Fneutron~master~I5a77eb7395e14482a856e033f536f72a1bf82e06,https://review.opendev.org/34133,refactor port binding codes,refactor port binding codes  Bug #1195047  This patch: 1. removes the iteration in get_ports to call extend_dict_binding 2. uses a unified way for plugins to do this kind of stuff  ml2 will enhance the binding so that it can have different binding for port according to port's host. mlnx is also an exception due to the dynamic binding info.  Change-Id: I5a77eb7395e14482a856e033f536f72a1bf82e06,objective,,,,,,
openstack%2Fcinder~master~Ic2bf2fa1ad82cf8669b6c491c955dcab39eb1510,https://review.opendev.org/36793,Refactor SSHPool.get() to use Pool.get(),"Refactor SSHPool.get() with Pool.get()  In previous code of SSHPool.get(), we pasted the code from Pool.get() and check if a connection is active before return it.  However, it's much simpler and cleaner to just call the Pool.get() and then check the connection before return. With this,we can free from manually keeping up with code of Pool.get() in upstream package eventlet  as a side effect, this patch fixed bug #1194393 due to the bug in eventlet code before revision 1072(and also previous code in utils.py)  Change-Id: Ic2bf2fa1ad82cf8669b6c491c955dcab39eb1510",quality,,,,,,
openstack%2Fcinder~master~Ic2bf2fa1ad82cf8669b6c491c955dcab39eb1510,https://review.opendev.org/36793,Refactor SSHPool.get() to use Pool.get(),"Refactor SSHPool.get() with Pool.get()  In previous code of SSHPool.get(), we pasted the code from Pool.get() and check if a connection is active before return it.  However, it's much simpler and cleaner to just call the Pool.get() and then check the connection before return. With this,we can free from manually keeping up with code of Pool.get() in upstream package eventlet  as a side effect, this patch fixed bug #1194393 due to the bug in eventlet code before revision 1072(and also previous code in utils.py)  Change-Id: Ic2bf2fa1ad82cf8669b6c491c955dcab39eb1510",objective,,,,,,
openstack%2Fcinder~master~Ic2bf2fa1ad82cf8669b6c491c955dcab39eb1510,https://review.opendev.org/36793,Refactor SSHPool.get() to use Pool.get(),"Refactor SSHPool.get() with Pool.get()  In previous code of SSHPool.get(), we pasted the code from Pool.get() and check if a connection is active before return it.  However, it's much simpler and cleaner to just call the Pool.get() and then check the connection before return. With this,we can free from manually keeping up with code of Pool.get() in upstream package eventlet  as a side effect, this patch fixed bug #1194393 due to the bug in eventlet code before revision 1072(and also previous code in utils.py)  Change-Id: Ic2bf2fa1ad82cf8669b6c491c955dcab39eb1510",objective,,,,,,
openstack%2Fhorizon~master~Ieefb6ed5dd88e5c840ef6bad93ae87237a1b63f9,https://review.opendev.org/31724,Refactoring url_for to remove admin parameter,"Refactoring url_for to remove admin parameter  Removed unused admin parameter that was unused and removed tests that were no longer necessary.  Added an option configuration setting SECONDARY_ENDPOINT_TYPE that will be attempted if the OPENSTACK_ENDPOINT_TYPE does not exist in the service catalog for the desired service.  The primary use case for this fix is in cloud configurations where Keystone does not return all endpoint types for each service, and only does so based on the user's privilege level.  Example use case would be set OPENSTACK_ENDPOINT_TYPE to 'adminURL' and set SECONDARY_ENDPOINT_TYPE to 'publicURL'.  If adminURL is not available to the user, then they get the publicURL back.  If SECONDARY_ENDPOINT_TYPE is not set in the settings, then the current behavior is maintained.  Fixes: bug #1186379  Change-Id: Ieefb6ed5dd88e5c840ef6bad93ae87237a1b63f9",quality,,,,,,
openstack%2Fhorizon~master~Ieefb6ed5dd88e5c840ef6bad93ae87237a1b63f9,https://review.opendev.org/31724,Refactoring url_for to remove admin parameter,"Refactoring url_for to remove admin parameter  Removed unused admin parameter that was unused and removed tests that were no longer necessary.  Added an option configuration setting SECONDARY_ENDPOINT_TYPE that will be attempted if the OPENSTACK_ENDPOINT_TYPE does not exist in the service catalog for the desired service.  The primary use case for this fix is in cloud configurations where Keystone does not return all endpoint types for each service, and only does so based on the user's privilege level.  Example use case would be set OPENSTACK_ENDPOINT_TYPE to 'adminURL' and set SECONDARY_ENDPOINT_TYPE to 'publicURL'.  If adminURL is not available to the user, then they get the publicURL back.  If SECONDARY_ENDPOINT_TYPE is not set in the settings, then the current behavior is maintained.  Fixes: bug #1186379  Change-Id: Ieefb6ed5dd88e5c840ef6bad93ae87237a1b63f9",objective,,,,,,
openstack%2Fhorizon~master~Ieefb6ed5dd88e5c840ef6bad93ae87237a1b63f9,https://review.opendev.org/31724,Refactoring url_for to remove admin parameter,"Refactoring url_for to remove admin parameter  Removed unused admin parameter that was unused and removed tests that were no longer necessary.  Added an option configuration setting SECONDARY_ENDPOINT_TYPE that will be attempted if the OPENSTACK_ENDPOINT_TYPE does not exist in the service catalog for the desired service.  The primary use case for this fix is in cloud configurations where Keystone does not return all endpoint types for each service, and only does so based on the user's privilege level.  Example use case would be set OPENSTACK_ENDPOINT_TYPE to 'adminURL' and set SECONDARY_ENDPOINT_TYPE to 'publicURL'.  If adminURL is not available to the user, then they get the publicURL back.  If SECONDARY_ENDPOINT_TYPE is not set in the settings, then the current behavior is maintained.  Fixes: bug #1186379  Change-Id: Ieefb6ed5dd88e5c840ef6bad93ae87237a1b63f9",objective,,,,,,
openstack%2Fhorizon~master~Ieefb6ed5dd88e5c840ef6bad93ae87237a1b63f9,https://review.opendev.org/31724,Refactoring url_for to remove admin parameter,"Refactoring url_for to remove admin parameter  Removed unused admin parameter that was unused and removed tests that were no longer necessary.  Added an option configuration setting SECONDARY_ENDPOINT_TYPE that will be attempted if the OPENSTACK_ENDPOINT_TYPE does not exist in the service catalog for the desired service.  The primary use case for this fix is in cloud configurations where Keystone does not return all endpoint types for each service, and only does so based on the user's privilege level.  Example use case would be set OPENSTACK_ENDPOINT_TYPE to 'adminURL' and set SECONDARY_ENDPOINT_TYPE to 'publicURL'.  If adminURL is not available to the user, then they get the publicURL back.  If SECONDARY_ENDPOINT_TYPE is not set in the settings, then the current behavior is maintained.  Fixes: bug #1186379  Change-Id: Ieefb6ed5dd88e5c840ef6bad93ae87237a1b63f9",objective,,,,,,
openstack%2Fcinder~master~Idce5d06f8be1fb6018012503ec7f844898a21b25,https://review.opendev.org/35771,Refactor reschedule in exception handling of volume manager,"Refactor reschedule in exception handling of volume manager  In some cases, exception is caught in volume manager but the recode cannot be retrieved by sys.exc_info(). This patch attempts to refactor some part of exception handling in create_volume(), as well as the reschedule_and_reraise() funtion, so that above corner case is handled.  Also fixed a bug in unittest which didn't provide correct argument to db API but previously this exception has been wrongly consumed by volume manager's exception handling.  Partially fix bug: 1197648  Change-Id: Idce5d06f8be1fb6018012503ec7f844898a21b25",quality,,,,,,
openstack%2Fcinder~master~Idce5d06f8be1fb6018012503ec7f844898a21b25,https://review.opendev.org/35771,Refactor reschedule in exception handling of volume manager,"Refactor reschedule in exception handling of volume manager  In some cases, exception is caught in volume manager but the recode cannot be retrieved by sys.exc_info(). This patch attempts to refactor some part of exception handling in create_volume(), as well as the reschedule_and_reraise() funtion, so that above corner case is handled.  Also fixed a bug in unittest which didn't provide correct argument to db API but previously this exception has been wrongly consumed by volume manager's exception handling.  Partially fix bug: 1197648  Change-Id: Idce5d06f8be1fb6018012503ec7f844898a21b25",objective,,,,,,
openstack%2Fcinder~master~Idce5d06f8be1fb6018012503ec7f844898a21b25,https://review.opendev.org/35771,Refactor reschedule in exception handling of volume manager,"Refactor reschedule in exception handling of volume manager  In some cases, exception is caught in volume manager but the recode cannot be retrieved by sys.exc_info(). This patch attempts to refactor some part of exception handling in create_volume(), as well as the reschedule_and_reraise() funtion, so that above corner case is handled.  Also fixed a bug in unittest which didn't provide correct argument to db API but previously this exception has been wrongly consumed by volume manager's exception handling.  Partially fix bug: 1197648  Change-Id: Idce5d06f8be1fb6018012503ec7f844898a21b25",objective,,,,,,
openstack%2Fopenstack-manuals~master~I303f502a641278d1cdc9663381afd4c2be7cc67c,https://review.opendev.org/35037,Refactored active/passive section of HA guide,"Refactored active/passive section of HA guide  As part of the restructuring of the HA guide to include active/active, the original active/passive page files are now renamed to be prefaced with ""ap-"" to distinguish them from the active/active pages, prefaced with ""aa-"". The main ha-guide.txt file has also been edited to reflect this change.  bug 1196096 blueprint improve-high-availability-support  Change-Id: I303f502a641278d1cdc9663381afd4c2be7cc67c",quality,,,,,,
openstack%2Fopenstack-manuals~master~I303f502a641278d1cdc9663381afd4c2be7cc67c,https://review.opendev.org/35037,Refactored active/passive section of HA guide,"Refactored active/passive section of HA guide  As part of the restructuring of the HA guide to include active/active, the original active/passive page files are now renamed to be prefaced with ""ap-"" to distinguish them from the active/active pages, prefaced with ""aa-"". The main ha-guide.txt file has also been edited to reflect this change.  bug 1196096 blueprint improve-high-availability-support  Change-Id: I303f502a641278d1cdc9663381afd4c2be7cc67c",objective,,,,,,
openstack%2Fopenstack-manuals~master~I303f502a641278d1cdc9663381afd4c2be7cc67c,https://review.opendev.org/35037,Refactored active/passive section of HA guide,"Refactored active/passive section of HA guide  As part of the restructuring of the HA guide to include active/active, the original active/passive page files are now renamed to be prefaced with ""ap-"" to distinguish them from the active/active pages, prefaced with ""aa-"". The main ha-guide.txt file has also been edited to reflect this change.  bug 1196096 blueprint improve-high-availability-support  Change-Id: I303f502a641278d1cdc9663381afd4c2be7cc67c",objective,,,,,,
openstack%2Foslo-incubator~master~Ic6d9715c945e620da20b43310e8e8ba79296e4ad,https://review.opendev.org/33804,Refactor KombuStubs fixture.,Refactor KombuStubs fixture.  Fixes bug 1192924.  Change-Id: Ic6d9715c945e620da20b43310e8e8ba79296e4ad,refactoring,,,,,,
openstack%2Foslo-incubator~master~Ic6d9715c945e620da20b43310e8e8ba79296e4ad,https://review.opendev.org/33804,Refactor KombuStubs fixture.,Refactor KombuStubs fixture.  Fixes bug 1192924.  Change-Id: Ic6d9715c945e620da20b43310e8e8ba79296e4ad,objective,,,,,,
openstack%2Fnova~master~Ic4d7ee0202ca15837f9dcab97e5502cbf82aa16f,https://review.opendev.org/26441,Refactors get_instance_security_groups to only use instance_uuid,Refactors get_instance_security_groups to only use instance_uuid  Fixes Bug 1160078  Change-Id: Ic4d7ee0202ca15837f9dcab97e5502cbf82aa16f,refactoring,,,,,,
openstack%2Fnova~master~Ic4d7ee0202ca15837f9dcab97e5502cbf82aa16f,https://review.opendev.org/26441,Refactors get_instance_security_groups to only use instance_uuid,Refactors get_instance_security_groups to only use instance_uuid  Fixes Bug 1160078  Change-Id: Ic4d7ee0202ca15837f9dcab97e5502cbf82aa16f,objective,,,,,,
openstack%2Fneutron~master~Ib3602321328cbf945358e0581ecc649e3f69d196,https://review.opendev.org/30757,Refactor db_base_plugin_v2 and to remove code duplication,Refactor db_base_plugin_v2 and to remove code duplication  fixes bug 1104379  Introduce CommonDbMixin which includes utility methods to manipulate model queries.  Change-Id: Ib3602321328cbf945358e0581ecc649e3f69d196,quality,,,,,,
openstack%2Fneutron~master~Ib3602321328cbf945358e0581ecc649e3f69d196,https://review.opendev.org/30757,Refactor db_base_plugin_v2 and to remove code duplication,Refactor db_base_plugin_v2 and to remove code duplication  fixes bug 1104379  Introduce CommonDbMixin which includes utility methods to manipulate model queries.  Change-Id: Ib3602321328cbf945358e0581ecc649e3f69d196,objective,,,,,,
openstack%2Fheat~master~I78ade1c53113f8f72b4df8ff346c45ec93f19393,https://review.opendev.org/30555,refactor test_engine_service.py,"refactor test_engine_service.py  refactor tests based on stackServiceTestBase to be more like the other tests, ie clear mocking, validation, and just inherit from HeatTestCase rather than inheriting lots of stuff from a base class, which isn't needed for all the tests  Fixes bug #1180375  Change-Id: I78ade1c53113f8f72b4df8ff346c45ec93f19393",quality,,,,,,
openstack%2Fheat~master~I78ade1c53113f8f72b4df8ff346c45ec93f19393,https://review.opendev.org/30555,refactor test_engine_service.py,"refactor test_engine_service.py  refactor tests based on stackServiceTestBase to be more like the other tests, ie clear mocking, validation, and just inherit from HeatTestCase rather than inheriting lots of stuff from a base class, which isn't needed for all the tests  Fixes bug #1180375  Change-Id: I78ade1c53113f8f72b4df8ff346c45ec93f19393",testing,,,,,,
openstack%2Fheat~master~I78ade1c53113f8f72b4df8ff346c45ec93f19393,https://review.opendev.org/30555,refactor test_engine_service.py,"refactor test_engine_service.py  refactor tests based on stackServiceTestBase to be more like the other tests, ie clear mocking, validation, and just inherit from HeatTestCase rather than inheriting lots of stuff from a base class, which isn't needed for all the tests  Fixes bug #1180375  Change-Id: I78ade1c53113f8f72b4df8ff346c45ec93f19393",objective,,,,,,
openstack%2Fheat~master~I78ade1c53113f8f72b4df8ff346c45ec93f19393,https://review.opendev.org/30555,refactor test_engine_service.py,"refactor test_engine_service.py  refactor tests based on stackServiceTestBase to be more like the other tests, ie clear mocking, validation, and just inherit from HeatTestCase rather than inheriting lots of stuff from a base class, which isn't needed for all the tests  Fixes bug #1180375  Change-Id: I78ade1c53113f8f72b4df8ff346c45ec93f19393",objective,,,,,,
openstack%2Fnova~master~I5e7f944c1c29b2f211ece2ef86c0959c81e806df,https://review.opendev.org/27537,Refactor nova.volume.cinder.API to reduce roundtrips with Cinder,Refactor nova.volume.cinder.API to reduce roundtrips with Cinder  Make cinder.API methods accept volume_id instead of the whole volume object. This will remove redundant roundtrip to get the volume before passing it to other methods as in fact they only need the id.  Fixes bug 1172297  Change-Id: I5e7f944c1c29b2f211ece2ef86c0959c81e806df,quality,,,,,,
openstack%2Fnova~master~I5e7f944c1c29b2f211ece2ef86c0959c81e806df,https://review.opendev.org/27537,Refactor nova.volume.cinder.API to reduce roundtrips with Cinder,Refactor nova.volume.cinder.API to reduce roundtrips with Cinder  Make cinder.API methods accept volume_id instead of the whole volume object. This will remove redundant roundtrip to get the volume before passing it to other methods as in fact they only need the id.  Fixes bug 1172297  Change-Id: I5e7f944c1c29b2f211ece2ef86c0959c81e806df,objective,,,,,,
openstack%2Fnova~master~I5e7f944c1c29b2f211ece2ef86c0959c81e806df,https://review.opendev.org/27537,Refactor nova.volume.cinder.API to reduce roundtrips with Cinder,Refactor nova.volume.cinder.API to reduce roundtrips with Cinder  Make cinder.API methods accept volume_id instead of the whole volume object. This will remove redundant roundtrip to get the volume before passing it to other methods as in fact they only need the id.  Fixes bug 1172297  Change-Id: I5e7f944c1c29b2f211ece2ef86c0959c81e806df,objective,,,,,,
openstack%2Fkeystone~master~I890415c755dd383749f2d4382f53d0b3a6badc6c,https://review.opendev.org/28657,A minor refactor in wsgi.py,a minor refactor in wsgi.py  a minor refactor to move the code up in the file as suggested by termie and henry regarding the review comments in https://review.openstack.org/#/c/26487/  Fix bug 1166697  Change-Id: I890415c755dd383749f2d4382f53d0b3a6badc6c,refactoring,,,,,,
openstack%2Fkeystone~master~I890415c755dd383749f2d4382f53d0b3a6badc6c,https://review.opendev.org/28657,A minor refactor in wsgi.py,a minor refactor in wsgi.py  a minor refactor to move the code up in the file as suggested by termie and henry regarding the review comments in https://review.openstack.org/#/c/26487/  Fix bug 1166697  Change-Id: I890415c755dd383749f2d4382f53d0b3a6badc6c,objective,,,,,,
openstack%2Fhorizon~master~I32fb28da0d4640c463fb6e22ee04763012d12190,https://review.opendev.org/25375,Refactor the quotas tests,Refactor the quotas tests  Refactoring as part of bug 1157950 to limit the amount of copy-pasting required when adding a new quota  Change-Id: I32fb28da0d4640c463fb6e22ee04763012d12190,objective,,,,,,
openstack%2Fhorizon~master~I32fb28da0d4640c463fb6e22ee04763012d12190,https://review.opendev.org/25375,Refactor the quotas tests,Refactor the quotas tests  Refactoring as part of bug 1157950 to limit the amount of copy-pasting required when adding a new quota  Change-Id: I32fb28da0d4640c463fb6e22ee04763012d12190,testing,,,,,,
openstack%2Fhorizon~master~I32fb28da0d4640c463fb6e22ee04763012d12190,https://review.opendev.org/25375,Refactor the quotas tests,Refactor the quotas tests  Refactoring as part of bug 1157950 to limit the amount of copy-pasting required when adding a new quota  Change-Id: I32fb28da0d4640c463fb6e22ee04763012d12190,quality,,,,,,
openstack%2Fnova~master~Ifcc8fdebfc95daec736464cbc9e16301116540aa,https://review.opendev.org/24849,Refactor db.service_destroy and db.service_update methods,Refactor db.service_destroy and db.service_update methods  Remove session parameter from db.service_get method  Optimize db.service_destroy: Was: 1 request with join to get service with compute_node 1 request to delete service 1(0) to delete compute_node Now: 1 request (without join) to delete service 1 request to delete compute_node  Optimize db.service_update: Remove unused join.  Fixes bug 1157442  blueprint db-session-cleanup  Change-Id: Ifcc8fdebfc95daec736464cbc9e16301116540aa,integration,,,,,,
openstack%2Fnova~master~Ifcc8fdebfc95daec736464cbc9e16301116540aa,https://review.opendev.org/24849,Refactor db.service_destroy and db.service_update methods,Refactor db.service_destroy and db.service_update methods  Remove session parameter from db.service_get method  Optimize db.service_destroy: Was: 1 request with join to get service with compute_node 1 request to delete service 1(0) to delete compute_node Now: 1 request (without join) to delete service 1 request to delete compute_node  Optimize db.service_update: Remove unused join.  Fixes bug 1157442  blueprint db-session-cleanup  Change-Id: Ifcc8fdebfc95daec736464cbc9e16301116540aa,quality,,,,,,
openstack%2Fnova~master~Ifcc8fdebfc95daec736464cbc9e16301116540aa,https://review.opendev.org/24849,Refactor db.service_destroy and db.service_update methods,Refactor db.service_destroy and db.service_update methods  Remove session parameter from db.service_get method  Optimize db.service_destroy: Was: 1 request with join to get service with compute_node 1 request to delete service 1(0) to delete compute_node Now: 1 request (without join) to delete service 1 request to delete compute_node  Optimize db.service_update: Remove unused join.  Fixes bug 1157442  blueprint db-session-cleanup  Change-Id: Ifcc8fdebfc95daec736464cbc9e16301116540aa,objective,,,,,,
openstack%2Fnova~master~I86c1b697fe5c7d6e4a6c689f75fd5cf737cef5d4,https://review.opendev.org/24066,Resize/Migrate refactoring fixes and test cases,"Resize/Migrate refactoring fixes  This patch will fix the construction of an scp command to be joined on spaces. Also adds a parameter in driver.finish_migration to _create_lpar_instance(), some refactoring that needed to be done in order to launch the instance on the destination host. This patch fixes Bug #1153599.  Bug #1153599 Change-Id: I86c1b697fe5c7d6e4a6c689f75fd5cf737cef5d4",quality,,,,,,
openstack%2Fnova~master~I86c1b697fe5c7d6e4a6c689f75fd5cf737cef5d4,https://review.opendev.org/24066,Resize/Migrate refactoring fixes and test cases,"Resize/Migrate refactoring fixes  This patch will fix the construction of an scp command to be joined on spaces. Also adds a parameter in driver.finish_migration to _create_lpar_instance(), some refactoring that needed to be done in order to launch the instance on the destination host. This patch fixes Bug #1153599.  Bug #1153599 Change-Id: I86c1b697fe5c7d6e4a6c689f75fd5cf737cef5d4",objective,,,,,,
openstack%2Fnova~master~I86c1b697fe5c7d6e4a6c689f75fd5cf737cef5d4,https://review.opendev.org/24066,Resize/Migrate refactoring fixes and test cases,"Resize/Migrate refactoring fixes  This patch will fix the construction of an scp command to be joined on spaces. Also adds a parameter in driver.finish_migration to _create_lpar_instance(), some refactoring that needed to be done in order to launch the instance on the destination host. This patch fixes Bug #1153599.  Bug #1153599 Change-Id: I86c1b697fe5c7d6e4a6c689f75fd5cf737cef5d4",objective,,,,,,
openstack%2Fnova~master~I94674d20c8fa320a5855bfa94eb694703fa23326,https://review.opendev.org/24068,Refactor db tests to ensure that notdb driver is used.,Refactor db tests to ensure that notdb driver is used.  Resolves bug 1076023 by refactoring to ensure that the notdb driver is used for these tests.  Change-Id: I94674d20c8fa320a5855bfa94eb694703fa23326,quality,,,,,,
openstack%2Fnova~master~I94674d20c8fa320a5855bfa94eb694703fa23326,https://review.opendev.org/24068,Refactor db tests to ensure that notdb driver is used.,Refactor db tests to ensure that notdb driver is used.  Resolves bug 1076023 by refactoring to ensure that the notdb driver is used for these tests.  Change-Id: I94674d20c8fa320a5855bfa94eb694703fa23326,objective,,,,,,
openstack%2Fnova~master~I7de14f1ffda37c14f760f602fd81250d2163b430,https://review.opendev.org/23047,Refactor compute manager _get_instances_by_driver,Refactor compute manager _get_instances_by_driver  Make the method more efficient by only querying nova-conductor once. Also limit fallback instance query to host only. This is in preparation for fixing bug 1129519.  Change-Id: I7de14f1ffda37c14f760f602fd81250d2163b430,quality,,,,,,
openstack%2Fnova~master~I7de14f1ffda37c14f760f602fd81250d2163b430,https://review.opendev.org/23047,Refactor compute manager _get_instances_by_driver,Refactor compute manager _get_instances_by_driver  Make the method more efficient by only querying nova-conductor once. Also limit fallback instance query to host only. This is in preparation for fixing bug 1129519.  Change-Id: I7de14f1ffda37c14f760f602fd81250d2163b430,objective,,,,,,
openstack%2Fnova~master~I7de14f1ffda37c14f760f602fd81250d2163b430,https://review.opendev.org/23047,Refactor compute manager _get_instances_by_driver,Refactor compute manager _get_instances_by_driver  Make the method more efficient by only querying nova-conductor once. Also limit fallback instance query to host only. This is in preparation for fixing bug 1129519.  Change-Id: I7de14f1ffda37c14f760f602fd81250d2163b430,objective,,,,,,
openstack%2Fneutron~master~I5e838a3df6d4c7192d4a738d3860f3a162cb5a8c,https://review.opendev.org/22231,refactor LoadBalancerPluginDbTestCase setUp(),"refactor LoadBalancerPluginDbTestCase setUp()  fixes bug: 1129417  This fixes the bug by changing LoadBalancerPluginDbTestCase to inherit from test_db_plugin.QuantumDbPluginV2TestCase.  This allows for the plugin to access context managers for core resources.  Additionally, this change adds subresource and service_plugin support to QuantumDbPluginV2TestCase.  Change-Id: I5e838a3df6d4c7192d4a738d3860f3a162cb5a8c",quality,,,,,,
openstack%2Fneutron~master~I5e838a3df6d4c7192d4a738d3860f3a162cb5a8c,https://review.opendev.org/22231,refactor LoadBalancerPluginDbTestCase setUp(),"refactor LoadBalancerPluginDbTestCase setUp()  fixes bug: 1129417  This fixes the bug by changing LoadBalancerPluginDbTestCase to inherit from test_db_plugin.QuantumDbPluginV2TestCase.  This allows for the plugin to access context managers for core resources.  Additionally, this change adds subresource and service_plugin support to QuantumDbPluginV2TestCase.  Change-Id: I5e838a3df6d4c7192d4a738d3860f3a162cb5a8c",objective,,,,,,
openstack%2Fneutron~master~I5e838a3df6d4c7192d4a738d3860f3a162cb5a8c,https://review.opendev.org/22231,refactor LoadBalancerPluginDbTestCase setUp(),"refactor LoadBalancerPluginDbTestCase setUp()  fixes bug: 1129417  This fixes the bug by changing LoadBalancerPluginDbTestCase to inherit from test_db_plugin.QuantumDbPluginV2TestCase.  This allows for the plugin to access context managers for core resources.  Additionally, this change adds subresource and service_plugin support to QuantumDbPluginV2TestCase.  Change-Id: I5e838a3df6d4c7192d4a738d3860f3a162cb5a8c",objective,,,,,,
openstack%2Fnova~master~I50ec5dcffa8ff0232ae0aba0a08fce5151962238,https://review.opendev.org/22369,Refactor nwfilter parameters,Refactor nwfilter parameters  * libvirt < 1.0.1 does not allow dynamically updating filter   parameters inside an interface block of theinstance XML. To   address this we move the nwfilter paramters from the instance   XML to the per-instance base nwfilter.  Relates to bug #1124722  Change-Id: I50ec5dcffa8ff0232ae0aba0a08fce5151962238,quality,,,,,,
openstack%2Fnova~master~I50ec5dcffa8ff0232ae0aba0a08fce5151962238,https://review.opendev.org/22369,Refactor nwfilter parameters,Refactor nwfilter parameters  * libvirt < 1.0.1 does not allow dynamically updating filter   parameters inside an interface block of theinstance XML. To   address this we move the nwfilter paramters from the instance   XML to the per-instance base nwfilter.  Relates to bug #1124722  Change-Id: I50ec5dcffa8ff0232ae0aba0a08fce5151962238,objective,,,,,,
openstack%2Fnova~master~I50ec5dcffa8ff0232ae0aba0a08fce5151962238,https://review.opendev.org/22369,Refactor nwfilter parameters,Refactor nwfilter parameters  * libvirt < 1.0.1 does not allow dynamically updating filter   parameters inside an interface block of theinstance XML. To   address this we move the nwfilter paramters from the instance   XML to the per-instance base nwfilter.  Relates to bug #1124722  Change-Id: I50ec5dcffa8ff0232ae0aba0a08fce5151962238,objective,,,,,,
openstack%2Fnova~master~I8bd92e3688109bfbdf1da21a175055b7263abf45,https://review.opendev.org/20664,refactored data upgrade tests in test_migrations,"refactored data upgrade tests in test_migrations  The one off testing in test_migrations was starting to get obtuse enough that it was possible for bugs to slip through (which they did already). Create a more general framework for testing data transitions at any db migration.  Hook the walk_versions code so as we are about to upgrade to a migration point, attempt to run a _prerun_### function, then follow it up with a _check_### function afterwards. Create some utility functions to make doing things in these _prerun and _check functions pretty concise.  This makes these checks db independent, and has it so they'll run however we are running the walk_versions.  In doing so, this uncovered a bug in the 147 migration, which is fixed inline. There is no retroactive fix, as 147 was destructive to data, so would have nuked anyone that hit it already.  Partially implements blueprint migration-testing-with-data  Change-Id: I8bd92e3688109bfbdf1da21a175055b7263abf45",testing,,,,,,
openstack%2Fnova~master~I8bd92e3688109bfbdf1da21a175055b7263abf45,https://review.opendev.org/20664,refactored data upgrade tests in test_migrations,"refactored data upgrade tests in test_migrations  The one off testing in test_migrations was starting to get obtuse enough that it was possible for bugs to slip through (which they did already). Create a more general framework for testing data transitions at any db migration.  Hook the walk_versions code so as we are about to upgrade to a migration point, attempt to run a _prerun_### function, then follow it up with a _check_### function afterwards. Create some utility functions to make doing things in these _prerun and _check functions pretty concise.  This makes these checks db independent, and has it so they'll run however we are running the walk_versions.  In doing so, this uncovered a bug in the 147 migration, which is fixed inline. There is no retroactive fix, as 147 was destructive to data, so would have nuked anyone that hit it already.  Partially implements blueprint migration-testing-with-data  Change-Id: I8bd92e3688109bfbdf1da21a175055b7263abf45",objective,,,,,,
openstack%2Fnova~master~I8bd92e3688109bfbdf1da21a175055b7263abf45,https://review.opendev.org/20664,refactored data upgrade tests in test_migrations,"refactored data upgrade tests in test_migrations  The one off testing in test_migrations was starting to get obtuse enough that it was possible for bugs to slip through (which they did already). Create a more general framework for testing data transitions at any db migration.  Hook the walk_versions code so as we are about to upgrade to a migration point, attempt to run a _prerun_### function, then follow it up with a _check_### function afterwards. Create some utility functions to make doing things in these _prerun and _check functions pretty concise.  This makes these checks db independent, and has it so they'll run however we are running the walk_versions.  In doing so, this uncovered a bug in the 147 migration, which is fixed inline. There is no retroactive fix, as 147 was destructive to data, so would have nuked anyone that hit it already.  Partially implements blueprint migration-testing-with-data  Change-Id: I8bd92e3688109bfbdf1da21a175055b7263abf45",quality,,,,,,
openstack%2Fnova~master~I8bd92e3688109bfbdf1da21a175055b7263abf45,https://review.opendev.org/20664,refactored data upgrade tests in test_migrations,"refactored data upgrade tests in test_migrations  The one off testing in test_migrations was starting to get obtuse enough that it was possible for bugs to slip through (which they did already). Create a more general framework for testing data transitions at any db migration.  Hook the walk_versions code so as we are about to upgrade to a migration point, attempt to run a _prerun_### function, then follow it up with a _check_### function afterwards. Create some utility functions to make doing things in these _prerun and _check functions pretty concise.  This makes these checks db independent, and has it so they'll run however we are running the walk_versions.  In doing so, this uncovered a bug in the 147 migration, which is fixed inline. There is no retroactive fix, as 147 was destructive to data, so would have nuked anyone that hit it already.  Partially implements blueprint migration-testing-with-data  Change-Id: I8bd92e3688109bfbdf1da21a175055b7263abf45",objective,,,,,,
openstack%2Fnova~master~I8bd92e3688109bfbdf1da21a175055b7263abf45,https://review.opendev.org/20664,refactored data upgrade tests in test_migrations,"refactored data upgrade tests in test_migrations  The one off testing in test_migrations was starting to get obtuse enough that it was possible for bugs to slip through (which they did already). Create a more general framework for testing data transitions at any db migration.  Hook the walk_versions code so as we are about to upgrade to a migration point, attempt to run a _prerun_### function, then follow it up with a _check_### function afterwards. Create some utility functions to make doing things in these _prerun and _check functions pretty concise.  This makes these checks db independent, and has it so they'll run however we are running the walk_versions.  In doing so, this uncovered a bug in the 147 migration, which is fixed inline. There is no retroactive fix, as 147 was destructive to data, so would have nuked anyone that hit it already.  Partially implements blueprint migration-testing-with-data  Change-Id: I8bd92e3688109bfbdf1da21a175055b7263abf45",objective,,,,,,
openstack%2Fdevstack~master~Ic5ab5b993272fdd3b4e779823323777a845ee681,https://review.opendev.org/19074,lib/quantum: refactor quantum plugins and third party,"lib/quantum: rafactor quantum plugins and third party  As quantum plugin support is coming like floodlight, nvp and nec, it's worth while to refactor quantum plugin logic so that each plugin can be modified/enhanced without intervening other quantum plugin. And new plugin support can be added easily (hopefully) without modifying core logic.  And refactored rpc backend configuration logic at the same time with a minor bug fix.  Change-Id: Ic5ab5b993272fdd3b4e779823323777a845ee681",quality,,,,,,
openstack%2Fdevstack~master~Ic5ab5b993272fdd3b4e779823323777a845ee681,https://review.opendev.org/19074,lib/quantum: refactor quantum plugins and third party,"lib/quantum: rafactor quantum plugins and third party  As quantum plugin support is coming like floodlight, nvp and nec, it's worth while to refactor quantum plugin logic so that each plugin can be modified/enhanced without intervening other quantum plugin. And new plugin support can be added easily (hopefully) without modifying core logic.  And refactored rpc backend configuration logic at the same time with a minor bug fix.  Change-Id: Ic5ab5b993272fdd3b4e779823323777a845ee681",objective,,,,,,
openstack%2Fdevstack~master~Ic5ab5b993272fdd3b4e779823323777a845ee681,https://review.opendev.org/19074,lib/quantum: refactor quantum plugins and third party,"lib/quantum: rafactor quantum plugins and third party  As quantum plugin support is coming like floodlight, nvp and nec, it's worth while to refactor quantum plugin logic so that each plugin can be modified/enhanced without intervening other quantum plugin. And new plugin support can be added easily (hopefully) without modifying core logic.  And refactored rpc backend configuration logic at the same time with a minor bug fix.  Change-Id: Ic5ab5b993272fdd3b4e779823323777a845ee681",objective,,,,,,
openstack%2Fopenstack-manuals~stable%2Ffolsom~Ie95008a430c06f9ec5b6c2fd7d6ba5c17862c3d2,https://review.opendev.org/19775,Refactor nova.conf docs so they also appear in install guide.,Refactor nova.conf docs so they also appear in install guide.  Fixes bug https://bugs.launchpad.net/openstack-manuals/+bug/1043935  Cherry-picked from https://review.openstack.org/17293  This is an old commit that never got backported into folsom.  Change-Id: Ie95008a430c06f9ec5b6c2fd7d6ba5c17862c3d2,objective,,,,,,
openstack%2Fopenstack-manuals~stable%2Ffolsom~Ie95008a430c06f9ec5b6c2fd7d6ba5c17862c3d2,https://review.opendev.org/19775,Refactor nova.conf docs so they also appear in install guide.,Refactor nova.conf docs so they also appear in install guide.  Fixes bug https://bugs.launchpad.net/openstack-manuals/+bug/1043935  Cherry-picked from https://review.openstack.org/17293  This is an old commit that never got backported into folsom.  Change-Id: Ie95008a430c06f9ec5b6c2fd7d6ba5c17862c3d2,quality,,,,,,
openstack%2Fopenstack-manuals~stable%2Ffolsom~Ie95008a430c06f9ec5b6c2fd7d6ba5c17862c3d2,https://review.opendev.org/19775,Refactor nova.conf docs so they also appear in install guide.,Refactor nova.conf docs so they also appear in install guide.  Fixes bug https://bugs.launchpad.net/openstack-manuals/+bug/1043935  Cherry-picked from https://review.openstack.org/17293  This is an old commit that never got backported into folsom.  Change-Id: Ie95008a430c06f9ec5b6c2fd7d6ba5c17862c3d2,objective,,,,,,
openstack%2Fdevstack~master~I45e21b1fb85e539213f5243764132a37906d7455,https://review.opendev.org/19572,Refactor rpc backend configuration logic,Refactor rpc backend configuration logic  This commit also changes the following: - Fixes Nova QPID module path - Fixes a bug Cinder ZeroMQ RPC points to nova module - Adds ZeroMQ setting for Heat RPC  This work is based on the work by Isaku Yamahata <yamahata@valinux.co.jp> in https://review.openstack.org/#/c/19074/.  Change-Id: I45e21b1fb85e539213f5243764132a37906d7455,quality,,,,,,
openstack%2Fdevstack~master~I45e21b1fb85e539213f5243764132a37906d7455,https://review.opendev.org/19572,Refactor rpc backend configuration logic,Refactor rpc backend configuration logic  This commit also changes the following: - Fixes Nova QPID module path - Fixes a bug Cinder ZeroMQ RPC points to nova module - Adds ZeroMQ setting for Heat RPC  This work is based on the work by Isaku Yamahata <yamahata@valinux.co.jp> in https://review.openstack.org/#/c/19074/.  Change-Id: I45e21b1fb85e539213f5243764132a37906d7455,objective,,,,,,
openstack%2Fdevstack~master~I45e21b1fb85e539213f5243764132a37906d7455,https://review.opendev.org/19572,Refactor rpc backend configuration logic,Refactor rpc backend configuration logic  This commit also changes the following: - Fixes Nova QPID module path - Fixes a bug Cinder ZeroMQ RPC points to nova module - Adds ZeroMQ setting for Heat RPC  This work is based on the work by Isaku Yamahata <yamahata@valinux.co.jp> in https://review.openstack.org/#/c/19074/.  Change-Id: I45e21b1fb85e539213f5243764132a37906d7455,objective,,,,,,
openstack%2Fneutron~master~Id7d1f7ddee69bfc4419df375366319dedc3dc439,https://review.opendev.org/19039,refactor QuotaV2 import to match to other exts,"refactor QuotaV2 import to match to other exts  fixes bug 1096486  The previous code used a special extension loading mechanism to selectively load the Quota model is the plugin matched and object path. This was intended to load models required by plugins, but this loading actually occurred after the db schema was created, so the model was not always loaded.  This fix refactors the code to make the QuotaV2 ext behave similarly to the other extensions ensuring the models are loaded prior to database schema creation.  Change-Id: Id7d1f7ddee69bfc4419df375366319dedc3dc439",objective,,,,,,
openstack%2Fneutron~master~Id7d1f7ddee69bfc4419df375366319dedc3dc439,https://review.opendev.org/19039,refactor QuotaV2 import to match to other exts,"refactor QuotaV2 import to match to other exts  fixes bug 1096486  The previous code used a special extension loading mechanism to selectively load the Quota model is the plugin matched and object path. This was intended to load models required by plugins, but this loading actually occurred after the db schema was created, so the model was not always loaded.  This fix refactors the code to make the QuotaV2 ext behave similarly to the other extensions ensuring the models are loaded prior to database schema creation.  Change-Id: Id7d1f7ddee69bfc4419df375366319dedc3dc439",integration,,,,,,
openstack%2Fneutron~master~Id7d1f7ddee69bfc4419df375366319dedc3dc439,https://review.opendev.org/19039,refactor QuotaV2 import to match to other exts,"refactor QuotaV2 import to match to other exts  fixes bug 1096486  The previous code used a special extension loading mechanism to selectively load the Quota model is the plugin matched and object path. This was intended to load models required by plugins, but this loading actually occurred after the db schema was created, so the model was not always loaded.  This fix refactors the code to make the QuotaV2 ext behave similarly to the other extensions ensuring the models are loaded prior to database schema creation.  Change-Id: Id7d1f7ddee69bfc4419df375366319dedc3dc439",objective,,,,,,
openstack%2Fnova~master~I7f245a88b8d229a481c1b65a4c0f1e2769bf3901,https://review.opendev.org/18618,Refactor periodic tasks.,"Refactor periodic tasks.  This review allows periodic tasks to be enabled or disabled in the decorator, as well as by specifying an interval which is negative.  The spacing between runs of a periodic task is now specified in seconds, with zero meaning the default spacing which is currently 60 seconds.  I also remove the periodic_interval flag to services, as the interval between runs is now dynamic based on the number of seconds that a periodic task wants to wait for its next run. For callers who want to twiddle the sleep period (for example unit tests), there is a create() argument periodic_interval_max which lets the period periodic_tasks() specifies be overridden. This is not exposed as a flag because I cannot see a use case for that. It is needed for unit testing however.  DocImpact. Resolves bug 939087.  Change-Id: I7f245a88b8d229a481c1b65a4c0f1e2769bf3901",quality,,,,,,
openstack%2Fnova~master~I7f245a88b8d229a481c1b65a4c0f1e2769bf3901,https://review.opendev.org/18618,Refactor periodic tasks.,"Refactor periodic tasks.  This review allows periodic tasks to be enabled or disabled in the decorator, as well as by specifying an interval which is negative.  The spacing between runs of a periodic task is now specified in seconds, with zero meaning the default spacing which is currently 60 seconds.  I also remove the periodic_interval flag to services, as the interval between runs is now dynamic based on the number of seconds that a periodic task wants to wait for its next run. For callers who want to twiddle the sleep period (for example unit tests), there is a create() argument periodic_interval_max which lets the period periodic_tasks() specifies be overridden. This is not exposed as a flag because I cannot see a use case for that. It is needed for unit testing however.  DocImpact. Resolves bug 939087.  Change-Id: I7f245a88b8d229a481c1b65a4c0f1e2769bf3901",objective,,,,,,
openstack%2Fnova~master~I7f245a88b8d229a481c1b65a4c0f1e2769bf3901,https://review.opendev.org/18618,Refactor periodic tasks.,"Refactor periodic tasks.  This review allows periodic tasks to be enabled or disabled in the decorator, as well as by specifying an interval which is negative.  The spacing between runs of a periodic task is now specified in seconds, with zero meaning the default spacing which is currently 60 seconds.  I also remove the periodic_interval flag to services, as the interval between runs is now dynamic based on the number of seconds that a periodic task wants to wait for its next run. For callers who want to twiddle the sleep period (for example unit tests), there is a create() argument periodic_interval_max which lets the period periodic_tasks() specifies be overridden. This is not exposed as a flag because I cannot see a use case for that. It is needed for unit testing however.  DocImpact. Resolves bug 939087.  Change-Id: I7f245a88b8d229a481c1b65a4c0f1e2769bf3901",testing,,,,,,
openstack%2Fnova~master~I7f245a88b8d229a481c1b65a4c0f1e2769bf3901,https://review.opendev.org/18618,Refactor periodic tasks.,"Refactor periodic tasks.  This review allows periodic tasks to be enabled or disabled in the decorator, as well as by specifying an interval which is negative.  The spacing between runs of a periodic task is now specified in seconds, with zero meaning the default spacing which is currently 60 seconds.  I also remove the periodic_interval flag to services, as the interval between runs is now dynamic based on the number of seconds that a periodic task wants to wait for its next run. For callers who want to twiddle the sleep period (for example unit tests), there is a create() argument periodic_interval_max which lets the period periodic_tasks() specifies be overridden. This is not exposed as a flag because I cannot see a use case for that. It is needed for unit testing however.  DocImpact. Resolves bug 939087.  Change-Id: I7f245a88b8d229a481c1b65a4c0f1e2769bf3901",objective,,,,,,
openstack%2Fopenstack-manuals~master~I0c8c7dca2b064f3d15702005b83726851b4894d8,https://review.opendev.org/17293,Refactor nova.conf docs so they also appear in install guide.,Refactor nova.conf docs so they also appear in install guide.  Fixes bug https://bugs.launchpad.net/openstack-manuals/+bug/1043935  Change-Id: I0c8c7dca2b064f3d15702005b83726851b4894d8,objective,,,,,,
openstack%2Fopenstack-manuals~master~I0c8c7dca2b064f3d15702005b83726851b4894d8,https://review.opendev.org/17293,Refactor nova.conf docs so they also appear in install guide.,Refactor nova.conf docs so they also appear in install guide.  Fixes bug https://bugs.launchpad.net/openstack-manuals/+bug/1043935  Change-Id: I0c8c7dca2b064f3d15702005b83726851b4894d8,quality,,,,,,
openstack%2Fopenstack-manuals~master~I0c8c7dca2b064f3d15702005b83726851b4894d8,https://review.opendev.org/17293,Refactor nova.conf docs so they also appear in install guide.,Refactor nova.conf docs so they also appear in install guide.  Fixes bug https://bugs.launchpad.net/openstack-manuals/+bug/1043935  Change-Id: I0c8c7dca2b064f3d15702005b83726851b4894d8,objective,,,,,,
openstack%2Fneutron~master~I5b144ff3924cbc623174172f3f74b2d33d24229b,https://review.opendev.org/16732,Refactor resources listing testcase for test_db_plugin.py,Refactor resources listing testcase for test_db_plugin.py  Fixes bug 1083502 Add common function '_test_list_resources' for resource listing.  Change-Id: I5b144ff3924cbc623174172f3f74b2d33d24229b,testing,,,,,,
openstack%2Fneutron~master~I5b144ff3924cbc623174172f3f74b2d33d24229b,https://review.opendev.org/16732,Refactor resources listing testcase for test_db_plugin.py,Refactor resources listing testcase for test_db_plugin.py  Fixes bug 1083502 Add common function '_test_list_resources' for resource listing.  Change-Id: I5b144ff3924cbc623174172f3f74b2d33d24229b,objective,,,,,,
openstack%2Fnova~stable%2Ffolsom~I3e2973747135a9c33de194e38537620c397bb87e,https://review.opendev.org/14758,xenapi: Refactor snapshots during resize,"xenapi: Refactor snapshots during resize  Currently, we use VM.snapshot for resize, which fails if we have a volume attached to the VM, which does not support snapshots. This change uses VDI.snapshot instead, for all VDIs that are not attached by nova.  Also needed for xenapi: detaching and reattaching volumes during migrations and reverting of migrations.  Fixes Bug #1028092  Change-Id: I3e2973747135a9c33de194e38537620c397bb87e (cherry picked from commit 359527501604ea720b594a2ed1b32cd29fe6adbc)",objective,,,,,,
openstack%2Fnova~stable%2Ffolsom~I3e2973747135a9c33de194e38537620c397bb87e,https://review.opendev.org/14758,xenapi: Refactor snapshots during resize,"xenapi: Refactor snapshots during resize  Currently, we use VM.snapshot for resize, which fails if we have a volume attached to the VM, which does not support snapshots. This change uses VDI.snapshot instead, for all VDIs that are not attached by nova.  Also needed for xenapi: detaching and reattaching volumes during migrations and reverting of migrations.  Fixes Bug #1028092  Change-Id: I3e2973747135a9c33de194e38537620c397bb87e (cherry picked from commit 359527501604ea720b594a2ed1b32cd29fe6adbc)",objective,,,,,,
openstack%2Fnova~master~I3e2973747135a9c33de194e38537620c397bb87e,https://review.opendev.org/11906,xenapi: Refactor snapshots during resize,"xenapi: Refactor snapshots during resize  Currently, we use VM.snapshot for resize, which fails if we have a volume attached to the VM, which does not support snapshots. This change uses VDI.snapshot instead, for all VDIs that are not attached by nova.  Fixes Bug #1028092  Change-Id: I3e2973747135a9c33de194e38537620c397bb87e",objective,,,,,,
openstack%2Fnova~master~I3e2973747135a9c33de194e38537620c397bb87e,https://review.opendev.org/11906,xenapi: Refactor snapshots during resize,"xenapi: Refactor snapshots during resize  Currently, we use VM.snapshot for resize, which fails if we have a volume attached to the VM, which does not support snapshots. This change uses VDI.snapshot instead, for all VDIs that are not attached by nova.  Fixes Bug #1028092  Change-Id: I3e2973747135a9c33de194e38537620c397bb87e",objective,,,,,,
openstack%2Ftempest~master~I2271000278918bd87fea66cb810f2dad0af4ffdd,https://review.opendev.org/12484,Refactor status_timeout() methods in tempest.test,Refactor status_timeout() methods in tempest.test   * Factor timing loop out of status_timeout() methods to new method    call_until_true() to allow for reuse.  * In support of bug 1043980  Change-Id: I2271000278918bd87fea66cb810f2dad0af4ffdd,quality,,,,,,
openstack%2Ftempest~master~I2271000278918bd87fea66cb810f2dad0af4ffdd,https://review.opendev.org/12484,Refactor status_timeout() methods in tempest.test,Refactor status_timeout() methods in tempest.test   * Factor timing loop out of status_timeout() methods to new method    call_until_true() to allow for reuse.  * In support of bug 1043980  Change-Id: I2271000278918bd87fea66cb810f2dad0af4ffdd,testing,,,,,,
openstack%2Ftempest~master~I2271000278918bd87fea66cb810f2dad0af4ffdd,https://review.opendev.org/12484,Refactor status_timeout() methods in tempest.test,Refactor status_timeout() methods in tempest.test   * Factor timing loop out of status_timeout() methods to new method    call_until_true() to allow for reuse.  * In support of bug 1043980  Change-Id: I2271000278918bd87fea66cb810f2dad0af4ffdd,objective,,,,,,
openstack%2Fnova~master~I0aa0ddfb86cf8b89b2e4dcc95e21bdca304bd6b3,https://review.opendev.org/8526,Refactor libvirt config classes for representing CPU models/features,"Refactor libvirt config classes for representing CPU models/features  The previously added (but not used) LibvirtConfigCPUTest class was too inflexible. It did not distinguish between parts of the XML schema which applied to both capabilities & domain XML, vs those which only applied to the domain XML. By representing features as a plain string it did not allow for setting attributes on feature flags like policy.  This change replaces the single LibvirtConfigCPUTest class with 4 new classes:   - LibvirtConfigCPUFeature - base class for defining CPU features  - LibvirtConfigCPU - base class for defining CPU models  - LibvirtConfigGuestCPUFeature - extension for setting the guest    specific feature policy  - LibvirtConfigGuestCPU - extension for setting the guest specific    match policy, and allowing use of host CPU model passthrough  Fixes: bug #1003373 Implements: blueprint libvirt-xml-cpu-model Change-Id: I0aa0ddfb86cf8b89b2e4dcc95e21bdca304bd6b3 Signed-off-by: Daniel P. Berrange <berrange@redhat.com>",quality,,,,,,
openstack%2Fnova~master~I0aa0ddfb86cf8b89b2e4dcc95e21bdca304bd6b3,https://review.opendev.org/8526,Refactor libvirt config classes for representing CPU models/features,"Refactor libvirt config classes for representing CPU models/features  The previously added (but not used) LibvirtConfigCPUTest class was too inflexible. It did not distinguish between parts of the XML schema which applied to both capabilities & domain XML, vs those which only applied to the domain XML. By representing features as a plain string it did not allow for setting attributes on feature flags like policy.  This change replaces the single LibvirtConfigCPUTest class with 4 new classes:   - LibvirtConfigCPUFeature - base class for defining CPU features  - LibvirtConfigCPU - base class for defining CPU models  - LibvirtConfigGuestCPUFeature - extension for setting the guest    specific feature policy  - LibvirtConfigGuestCPU - extension for setting the guest specific    match policy, and allowing use of host CPU model passthrough  Fixes: bug #1003373 Implements: blueprint libvirt-xml-cpu-model Change-Id: I0aa0ddfb86cf8b89b2e4dcc95e21bdca304bd6b3 Signed-off-by: Daniel P. Berrange <berrange@redhat.com>",objective,,,,,,
openstack%2Fnova~master~I0aa0ddfb86cf8b89b2e4dcc95e21bdca304bd6b3,https://review.opendev.org/8526,Refactor libvirt config classes for representing CPU models/features,"Refactor libvirt config classes for representing CPU models/features  The previously added (but not used) LibvirtConfigCPUTest class was too inflexible. It did not distinguish between parts of the XML schema which applied to both capabilities & domain XML, vs those which only applied to the domain XML. By representing features as a plain string it did not allow for setting attributes on feature flags like policy.  This change replaces the single LibvirtConfigCPUTest class with 4 new classes:   - LibvirtConfigCPUFeature - base class for defining CPU features  - LibvirtConfigCPU - base class for defining CPU models  - LibvirtConfigGuestCPUFeature - extension for setting the guest    specific feature policy  - LibvirtConfigGuestCPU - extension for setting the guest specific    match policy, and allowing use of host CPU model passthrough  Fixes: bug #1003373 Implements: blueprint libvirt-xml-cpu-model Change-Id: I0aa0ddfb86cf8b89b2e4dcc95e21bdca304bd6b3 Signed-off-by: Daniel P. Berrange <berrange@redhat.com>",objective,,,,,,
openstack%2Fnova~master~I8822f322bb8f60e5992afbe1feb45c0f4fffc893,https://review.opendev.org/8914,Refactor vm_vdi_cleaner.py connection use,Refactor vm_vdi_cleaner.py connection use  cleanup_instance() would fail because of using old get_connection(). This refactors everything to use XenAPIDriver().  Fixes bug 1017282  Change-Id: I8822f322bb8f60e5992afbe1feb45c0f4fffc893,objective,,,,,,
openstack%2Fnova~master~I8822f322bb8f60e5992afbe1feb45c0f4fffc893,https://review.opendev.org/8914,Refactor vm_vdi_cleaner.py connection use,Refactor vm_vdi_cleaner.py connection use  cleanup_instance() would fail because of using old get_connection(). This refactors everything to use XenAPIDriver().  Fixes bug 1017282  Change-Id: I8822f322bb8f60e5992afbe1feb45c0f4fffc893,quality,,,,,,
openstack%2Fnova~master~I8822f322bb8f60e5992afbe1feb45c0f4fffc893,https://review.opendev.org/8914,Refactor vm_vdi_cleaner.py connection use,Refactor vm_vdi_cleaner.py connection use  cleanup_instance() would fail because of using old get_connection(). This refactors everything to use XenAPIDriver().  Fixes bug 1017282  Change-Id: I8822f322bb8f60e5992afbe1feb45c0f4fffc893,objective,,,,,,
openstack-attic%2Fidentity-api~master~I9b16ee44252481680cce90eb044d081a65eaf336,https://review.opendev.org/7774,Cleanup and refactoring of identity docs.  Bug #972370,Clean up and refactor of identity docs.  Bug #972370  Change-Id: I9b16ee44252481680cce90eb044d081a65eaf336,quality,,,,,,
openstack-attic%2Fidentity-api~master~I9b16ee44252481680cce90eb044d081a65eaf336,https://review.opendev.org/7774,Cleanup and refactoring of identity docs.  Bug #972370,Clean up and refactor of identity docs.  Bug #972370  Change-Id: I9b16ee44252481680cce90eb044d081a65eaf336,objective,,,,,,
openstack%2Fnova~master~Ic04d1a918fedd5fd71f58af8e27b58deef070ee2,https://review.opendev.org/5213,"refactoring code, check connection in Listener. refer to Bug #943031","refactoring code, check connection in Listener. refer to Bug #943031  Change-Id: Ic04d1a918fedd5fd71f58af8e27b58deef070ee2",objective,,,,,,
openstack%2Fnova~master~I810afe05223228df1bcc20a0ac688d8c62c472b4,https://review.opendev.org/5268,Refactor glance id<->internal id conversion for s3,"Refactor glance id<->internal id conversion for s3   * Moves nova.image.s3.S3ImageService functions for converting    between glance ('image_uuid') and internal (db) ids to ec2utils:         get_image_id => ec2utils.glance_id_to_id        get_image_uuid => ec2utils.id_to_glance_id   * Refactors ec2utils.glance_id_to_id to create a new S3Image    object associating a glance id to an internal id if such a    mapping does not already exist.  Previously, only calls to    nova.api.ec2.cloud.CloudController.describe_images would    add new mappings, but now any attempt to convert a glance id    to an internal id will succeed, resolving bug 948286.   * Adds 2 convenience methods to ec2utils, as per bcwaldon:         ec2_id_to_glance_id        glance_id_to_ec2_id   * Since this is a strict refactor and only streamlines existing    well-tested functionality, this change includes no new tests.  Change-Id: I810afe05223228df1bcc20a0ac688d8c62c472b4",testing,,,,,,
openstack%2Fnova~master~I810afe05223228df1bcc20a0ac688d8c62c472b4,https://review.opendev.org/5268,Refactor glance id<->internal id conversion for s3,"Refactor glance id<->internal id conversion for s3   * Moves nova.image.s3.S3ImageService functions for converting    between glance ('image_uuid') and internal (db) ids to ec2utils:         get_image_id => ec2utils.glance_id_to_id        get_image_uuid => ec2utils.id_to_glance_id   * Refactors ec2utils.glance_id_to_id to create a new S3Image    object associating a glance id to an internal id if such a    mapping does not already exist.  Previously, only calls to    nova.api.ec2.cloud.CloudController.describe_images would    add new mappings, but now any attempt to convert a glance id    to an internal id will succeed, resolving bug 948286.   * Adds 2 convenience methods to ec2utils, as per bcwaldon:         ec2_id_to_glance_id        glance_id_to_ec2_id   * Since this is a strict refactor and only streamlines existing    well-tested functionality, this change includes no new tests.  Change-Id: I810afe05223228df1bcc20a0ac688d8c62c472b4",objective,,,,,,
openstack%2Fnova~master~I810afe05223228df1bcc20a0ac688d8c62c472b4,https://review.opendev.org/5268,Refactor glance id<->internal id conversion for s3,"Refactor glance id<->internal id conversion for s3   * Moves nova.image.s3.S3ImageService functions for converting    between glance ('image_uuid') and internal (db) ids to ec2utils:         get_image_id => ec2utils.glance_id_to_id        get_image_uuid => ec2utils.id_to_glance_id   * Refactors ec2utils.glance_id_to_id to create a new S3Image    object associating a glance id to an internal id if such a    mapping does not already exist.  Previously, only calls to    nova.api.ec2.cloud.CloudController.describe_images would    add new mappings, but now any attempt to convert a glance id    to an internal id will succeed, resolving bug 948286.   * Adds 2 convenience methods to ec2utils, as per bcwaldon:         ec2_id_to_glance_id        glance_id_to_ec2_id   * Since this is a strict refactor and only streamlines existing    well-tested functionality, this change includes no new tests.  Change-Id: I810afe05223228df1bcc20a0ac688d8c62c472b4",quality,,,,,,
openstack%2Fnova~master~I810afe05223228df1bcc20a0ac688d8c62c472b4,https://review.opendev.org/5268,Refactor glance id<->internal id conversion for s3,"Refactor glance id<->internal id conversion for s3   * Moves nova.image.s3.S3ImageService functions for converting    between glance ('image_uuid') and internal (db) ids to ec2utils:         get_image_id => ec2utils.glance_id_to_id        get_image_uuid => ec2utils.id_to_glance_id   * Refactors ec2utils.glance_id_to_id to create a new S3Image    object associating a glance id to an internal id if such a    mapping does not already exist.  Previously, only calls to    nova.api.ec2.cloud.CloudController.describe_images would    add new mappings, but now any attempt to convert a glance id    to an internal id will succeed, resolving bug 948286.   * Adds 2 convenience methods to ec2utils, as per bcwaldon:         ec2_id_to_glance_id        glance_id_to_ec2_id   * Since this is a strict refactor and only streamlines existing    well-tested functionality, this change includes no new tests.  Change-Id: I810afe05223228df1bcc20a0ac688d8c62c472b4",integration,,,,,,
openstack%2Fnova~master~I810afe05223228df1bcc20a0ac688d8c62c472b4,https://review.opendev.org/5268,Refactor glance id<->internal id conversion for s3,"Refactor glance id<->internal id conversion for s3   * Moves nova.image.s3.S3ImageService functions for converting    between glance ('image_uuid') and internal (db) ids to ec2utils:         get_image_id => ec2utils.glance_id_to_id        get_image_uuid => ec2utils.id_to_glance_id   * Refactors ec2utils.glance_id_to_id to create a new S3Image    object associating a glance id to an internal id if such a    mapping does not already exist.  Previously, only calls to    nova.api.ec2.cloud.CloudController.describe_images would    add new mappings, but now any attempt to convert a glance id    to an internal id will succeed, resolving bug 948286.   * Adds 2 convenience methods to ec2utils, as per bcwaldon:         ec2_id_to_glance_id        glance_id_to_ec2_id   * Since this is a strict refactor and only streamlines existing    well-tested functionality, this change includes no new tests.  Change-Id: I810afe05223228df1bcc20a0ac688d8c62c472b4",objective,,,,,,
openstack%2Fhorizon~master~I196ccdbf327425e40a8205edc620ecdf817746db,https://review.opendev.org/4907,Refactorize JS codes for action button check to reduce duplication,Refactorize JS codes for action button check to reduce duplication  Fix the delete instance link action to be allowed on ajax context   * fixes bug 944853  Change-Id: I196ccdbf327425e40a8205edc620ecdf817746db,objective,,,,,,
openstack%2Fhorizon~master~I196ccdbf327425e40a8205edc620ecdf817746db,https://review.opendev.org/4907,Refactorize JS codes for action button check to reduce duplication,Refactorize JS codes for action button check to reduce duplication  Fix the delete instance link action to be allowed on ajax context   * fixes bug 944853  Change-Id: I196ccdbf327425e40a8205edc620ecdf817746db,quality,,,,,,
openstack%2Fnova~master~I65332cabedf2edb88acb48b3293cba291d440238,https://review.opendev.org/2346,Refactors handling of detach volume,Refactors handling of detach volume   * removes unnecessary flags in detach_volume call  * stops double detach reported in bug 887402  Change-Id: I65332cabedf2edb88acb48b3293cba291d440238,quality,,,,,,
openstack%2Fnova~master~I65332cabedf2edb88acb48b3293cba291d440238,https://review.opendev.org/2346,Refactors handling of detach volume,Refactors handling of detach volume   * removes unnecessary flags in detach_volume call  * stops double detach reported in bug 887402  Change-Id: I65332cabedf2edb88acb48b3293cba291d440238,objective,,,,,,
openstack%2Fkeystone~master~Ic0109819a56d8d815ec7708f9b954a9a7eb67baa,https://review.opendev.org/1723,Refactoring master to match stable/diablo fix for bug 891710,"Refactoring master to match stable/diablo fix for bug 891710  This is not a bug fix (and contains no functional changes), as the bug found in stable/diablo was already fixed in master.  Change-Id: Ic0109819a56d8d815ec7708f9b954a9a7eb67baa",refactoring,,,,,,
openstack%2Fkeystone~master~Ic0109819a56d8d815ec7708f9b954a9a7eb67baa,https://review.opendev.org/1723,Refactoring master to match stable/diablo fix for bug 891710,"Refactoring master to match stable/diablo fix for bug 891710  This is not a bug fix (and contains no functional changes), as the bug found in stable/diablo was already fixed in master.  Change-Id: Ic0109819a56d8d815ec7708f9b954a9a7eb67baa",objective,,,,,,
openstack%2Fkeystone~master~I096d2c63e8f2c996dc1e5dd7315f57e2303d24cb,https://review.opendev.org/1643,Refactor auth_token.py to only call out to Keystone once.,Refactor auth_token.py to only call out to Keystone once.  Fixes bug 890881.  Change-Id: I096d2c63e8f2c996dc1e5dd7315f57e2303d24cb,refactoring,,,,,,
openstack%2Fkeystone~master~I096d2c63e8f2c996dc1e5dd7315f57e2303d24cb,https://review.opendev.org/1643,Refactor auth_token.py to only call out to Keystone once.,Refactor auth_token.py to only call out to Keystone once.  Fixes bug 890881.  Change-Id: I096d2c63e8f2c996dc1e5dd7315f57e2303d24cb,objective,,,,,,
openstack%2Fglance~master~If6775eb3ce85390bc5d579dff6c59c6066e77e9b,https://review.opendev.org/825,Refactoring/cleanup around our exception handling,Refactoring/cleanup around our exception handling  Fixes LP Bug #820643 - import_class() does not report original exception.  * Makes ALL exceptions now use base exception class * Removes unused exception classes from Nova * Removes unused code in glance.common.utils * Adds unit tests for bool_from_string and import_class  Change-Id: If6775eb3ce85390bc5d579dff6c59c6066e77e9b,quality,,,,,,
openstack%2Fglance~master~If6775eb3ce85390bc5d579dff6c59c6066e77e9b,https://review.opendev.org/825,Refactoring/cleanup around our exception handling,Refactoring/cleanup around our exception handling  Fixes LP Bug #820643 - import_class() does not report original exception.  * Makes ALL exceptions now use base exception class * Removes unused exception classes from Nova * Removes unused code in glance.common.utils * Adds unit tests for bool_from_string and import_class  Change-Id: If6775eb3ce85390bc5d579dff6c59c6066e77e9b,testing,,,,,,
openstack%2Fglance~master~If6775eb3ce85390bc5d579dff6c59c6066e77e9b,https://review.opendev.org/825,Refactoring/cleanup around our exception handling,Refactoring/cleanup around our exception handling  Fixes LP Bug #820643 - import_class() does not report original exception.  * Makes ALL exceptions now use base exception class * Removes unused exception classes from Nova * Removes unused code in glance.common.utils * Adds unit tests for bool_from_string and import_class  Change-Id: If6775eb3ce85390bc5d579dff6c59c6066e77e9b,objective,,,,,,
openstack%2Fopenstack-health~master~I879fe0e9ba35dad8492179cec79aa271152ad0a6,https://review.opendev.org/244207,Refactor dashboard api,"Refactor dashboard api  In order to get a consistent REST api, a few minor changes need to be made. The first of them is having the dashboard (home) endpoint at '/'.  Change-Id: I879fe0e9ba35dad8492179cec79aa271152ad0a6",integration,,,,,,
openstack%2Fneutron-specs~master~Ib7d50aa71ed2c482030ea48cd2ed4434fa5744a9,https://review.opendev.org/177108,Agent DB Refactor,"Agent DB Refactor  For variant neutron agents, they share the same database model to store basic information, configurations, as well as dynamic workload data. Neutron-server depends on it to apply correct operations such as producing API response, scheduling, and HA. Also, how to maintain, transport those data is a performance factor to neutron. We believe the db model needs a refactor, base on some thinkings of the two scenarios.  First, currently there is no attribute to identify agent logical status, such as initializing, ready, data sync, or error. Once agent is connected to neutron-server, only admin state and liveness is checked on server side. That means neutron-server may apply operations on agent blindly.  Second, agents send heartbeat message to transport those data. However, carrying/parsing static data and writing them to db everytime is inefficient. We'd like to see static and dynamic data is well decoupled in agent db model. Then agent only needs to send static data once, and subsequent heartbeats only carry dynamic data.  Change-Id: Ib7d50aa71ed2c482030ea48cd2ed4434fa5744a9 Blueprint: agent-db-refactor",integration,,,,,,
openstack%2Fneutron-specs~master~Ib7d50aa71ed2c482030ea48cd2ed4434fa5744a9,https://review.opendev.org/177108,Agent DB Refactor,"Agent DB Refactor  For variant neutron agents, they share the same database model to store basic information, configurations, as well as dynamic workload data. Neutron-server depends on it to apply correct operations such as producing API response, scheduling, and HA. Also, how to maintain, transport those data is a performance factor to neutron. We believe the db model needs a refactor, base on some thinkings of the two scenarios.  First, currently there is no attribute to identify agent logical status, such as initializing, ready, data sync, or error. Once agent is connected to neutron-server, only admin state and liveness is checked on server side. That means neutron-server may apply operations on agent blindly.  Second, agents send heartbeat message to transport those data. However, carrying/parsing static data and writing them to db everytime is inefficient. We'd like to see static and dynamic data is well decoupled in agent db model. Then agent only needs to send static data once, and subsequent heartbeats only carry dynamic data.  Change-Id: Ib7d50aa71ed2c482030ea48cd2ed4434fa5744a9 Blueprint: agent-db-refactor",quality,,,,,,
openstack%2Fneutron-specs~master~Ib7d50aa71ed2c482030ea48cd2ed4434fa5744a9,https://review.opendev.org/177108,Agent DB Refactor,"Agent DB Refactor  For variant neutron agents, they share the same database model to store basic information, configurations, as well as dynamic workload data. Neutron-server depends on it to apply correct operations such as producing API response, scheduling, and HA. Also, how to maintain, transport those data is a performance factor to neutron. We believe the db model needs a refactor, base on some thinkings of the two scenarios.  First, currently there is no attribute to identify agent logical status, such as initializing, ready, data sync, or error. Once agent is connected to neutron-server, only admin state and liveness is checked on server side. That means neutron-server may apply operations on agent blindly.  Second, agents send heartbeat message to transport those data. However, carrying/parsing static data and writing them to db everytime is inefficient. We'd like to see static and dynamic data is well decoupled in agent db model. Then agent only needs to send static data once, and subsequent heartbeats only carry dynamic data.  Change-Id: Ib7d50aa71ed2c482030ea48cd2ed4434fa5744a9 Blueprint: agent-db-refactor",objective,,,,,,
opendev%2Fsubunit2sql~master~I8a2d5585215e0c0c42e592e6b37ff6df7b7c3295,https://review.opendev.org/228554,Refactor subunit2sql dbapi,Refactor subunit2sql dbapi  Change-Id: I8a2d5585215e0c0c42e592e6b37ff6df7b7c3295 Co-Authored-By: Caio Carrara <ccarrara@thoughtworks.com>,integration,,,,,,
openstack%2Fnova~master~Id63fc2c5637424a778514ff40911193dd7a0cd1d,https://review.opendev.org/144875,Refactor image's code to support both versions,"Refactor image's code to support both versions  This patch is part of the blueprint use-glance-v2-api  `nova.image.glance` module has been removed in favor of a more robust `nova.image.api` implementation. This implementation uses, for now, quite a few functions from the old module. The only reason for this is to keep backwards compatibility and also make the change more granular - follow-up patches will clean some of those functions up.  In the process of making this new API more stable some issues were found in glanceclient - some of these issues were already fixed and others are on its way to be fixed - and also in the implementation itself that required extra work/refactor.  Here's a list of some notable changes:  - The image API constructor now takes just a `cfg.ConfigOpts` object   where it'll take all the required info from.  - The download method has now been split into 2 different methods. The   first one is still called `download` and it's a 1:1 mapping to   glanceclient's download call. The second one, instead, is called   `download_to` and it allows consumers of this api to download the data   *to* a specific location. This method *always* returns `None`   regardless of its input and it relies on the already mentioned   `download` method to get the data.  - `show` and `detail` have been renamed to `get` and `get_all`   respectevly. This is to have a better mapping with glanceclient's api.  - The 'retry' logic now relies on the `retrying` module. See all the   decorated methods in `nova.image.api.API`  - The default api version is now v2  - URL's passed in `api_servers` are expected to be versioned. If not, a   warning will be logged and the default version will be used.  Code that remains to clean up:  - _convert_* functions should go away. There shouldn't be any need for   nova to translate what's returned from Glance.  - _extract_attributes should go away. This was mainly caused by an   inconsistency in glanceclient's returned objects. This is being   ""fixed"".  Implementation flaws to clean up:  - Many drivers make assumptions on Glance's URLs. This shouldn't be done   or permitted. Glanceclient is the one responsible for building those   urls, whereas the virt drivers should just care about the image_id.  - While I understand why `UpdateGlanceImage` exists, I believe it   shouldn't. This is *just* used by xenapi and I believe it should be   fixed there.  - xenapi makes way more assumption than other drivers when it comes to   Glance URI's, uploads and downloads. The code in `....plugins.glance`   has its own implementation for uploads and downloads through custom   http calls to Glance's API. I really don't understand why this code   exists but I think it should be cleaned up, asap.  - Some drivers are using a global `IMAGE_API` object. This shouldn't be   bad since `image.api.API` is stateless - .... I think .... :P - but   it'd be better not to rely on those global instances.  This patch implements most of this blueprint, as it does remove the glance module and the biggest refactor is done. However, I'm not marking the blueprint as implemented since I'd like to get some minor cleanups in before we consider it done.  Partially-Implements: blueprint use-glance-v2-api  Change-Id: Id63fc2c5637424a778514ff40911193dd7a0cd1d",integration,,,,,,
openstack%2Fnova~master~Id63fc2c5637424a778514ff40911193dd7a0cd1d,https://review.opendev.org/144875,Refactor image's code to support both versions,"Refactor image's code to support both versions  This patch is part of the blueprint use-glance-v2-api  `nova.image.glance` module has been removed in favor of a more robust `nova.image.api` implementation. This implementation uses, for now, quite a few functions from the old module. The only reason for this is to keep backwards compatibility and also make the change more granular - follow-up patches will clean some of those functions up.  In the process of making this new API more stable some issues were found in glanceclient - some of these issues were already fixed and others are on its way to be fixed - and also in the implementation itself that required extra work/refactor.  Here's a list of some notable changes:  - The image API constructor now takes just a `cfg.ConfigOpts` object   where it'll take all the required info from.  - The download method has now been split into 2 different methods. The   first one is still called `download` and it's a 1:1 mapping to   glanceclient's download call. The second one, instead, is called   `download_to` and it allows consumers of this api to download the data   *to* a specific location. This method *always* returns `None`   regardless of its input and it relies on the already mentioned   `download` method to get the data.  - `show` and `detail` have been renamed to `get` and `get_all`   respectevly. This is to have a better mapping with glanceclient's api.  - The 'retry' logic now relies on the `retrying` module. See all the   decorated methods in `nova.image.api.API`  - The default api version is now v2  - URL's passed in `api_servers` are expected to be versioned. If not, a   warning will be logged and the default version will be used.  Code that remains to clean up:  - _convert_* functions should go away. There shouldn't be any need for   nova to translate what's returned from Glance.  - _extract_attributes should go away. This was mainly caused by an   inconsistency in glanceclient's returned objects. This is being   ""fixed"".  Implementation flaws to clean up:  - Many drivers make assumptions on Glance's URLs. This shouldn't be done   or permitted. Glanceclient is the one responsible for building those   urls, whereas the virt drivers should just care about the image_id.  - While I understand why `UpdateGlanceImage` exists, I believe it   shouldn't. This is *just* used by xenapi and I believe it should be   fixed there.  - xenapi makes way more assumption than other drivers when it comes to   Glance URI's, uploads and downloads. The code in `....plugins.glance`   has its own implementation for uploads and downloads through custom   http calls to Glance's API. I really don't understand why this code   exists but I think it should be cleaned up, asap.  - Some drivers are using a global `IMAGE_API` object. This shouldn't be   bad since `image.api.API` is stateless - .... I think .... :P - but   it'd be better not to rely on those global instances.  This patch implements most of this blueprint, as it does remove the glance module and the biggest refactor is done. However, I'm not marking the blueprint as implemented since I'd like to get some minor cleanups in before we consider it done.  Partially-Implements: blueprint use-glance-v2-api  Change-Id: Id63fc2c5637424a778514ff40911193dd7a0cd1d",objective,,,,,,
openstack%2Fnova-specs~master~I32aee20c0bab86242a74ee01f81921a77683565b,https://review.opendev.org/141129,Refactor allocate_for_instance,"Refactor allocate_for_instance  Split allocate_for_instance into logical function groups, make better use of the neutron API by coalescing multiple calls into one where supported and support asynchronous operations where appropriate.  Change-Id: I32aee20c0bab86242a74ee01f81921a77683565b",integration,,,,,,
openstack%2Fnova-specs~master~I32aee20c0bab86242a74ee01f81921a77683565b,https://review.opendev.org/141129,Refactor allocate_for_instance,"Refactor allocate_for_instance  Split allocate_for_instance into logical function groups, make better use of the neutron API by coalescing multiple calls into one where supported and support asynchronous operations where appropriate.  Change-Id: I32aee20c0bab86242a74ee01f81921a77683565b",objective,,,,,,
openstack%2Fnova-specs~master~If98aa01031fcdfa46fd59a511f16175892a9baea,https://review.opendev.org/131413,Refactor of the Neutron network adapter,"Refactor of the Neutron network adapter  Refactor the network API-neutron adapter to improve neutron API usage, reduce complexity of critical, frequently used methods and align with current data practices in nova.  Change-Id: If98aa01031fcdfa46fd59a511f16175892a9baea Blueprint: nova-neutron-refactor",integration,,,,,,
openstack%2Fnova-specs~master~If98aa01031fcdfa46fd59a511f16175892a9baea,https://review.opendev.org/131413,Refactor of the Neutron network adapter,"Refactor of the Neutron network adapter  Refactor the network API-neutron adapter to improve neutron API usage, reduce complexity of critical, frequently used methods and align with current data practices in nova.  Change-Id: If98aa01031fcdfa46fd59a511f16175892a9baea Blueprint: nova-neutron-refactor",quality,,,,,,
openstack%2Fcinder~master~I5d562dc85eb45c2db3f106b653e9e9ed942212bf,https://review.opendev.org/148920,Refactoring initialize connection api to use taskflow,Refactoring initialize connection api to use taskflow  Refactor initialize connection workflow using taskflow and split that workflow for volume-manager into separate tasks. Create tasks which perform the individual required actions to accomplish the desried outcome.  The volume-manager workflow composed of following tasks: - Verify driver initialization and validates Connector. - Exports the volume and returns the updated volume reference (remove   export on failure) - Allow connection to connector and returns connection info. - Add QOS specs to connection info and returns updated connection info.  Change-Id: I5d562dc85eb45c2db3f106b653e9e9ed942212bf,integration,,,,,,
openstack%2Fcinder~master~I5d562dc85eb45c2db3f106b653e9e9ed942212bf,https://review.opendev.org/148920,Refactoring initialize connection api to use taskflow,Refactoring initialize connection api to use taskflow  Refactor initialize connection workflow using taskflow and split that workflow for volume-manager into separate tasks. Create tasks which perform the individual required actions to accomplish the desried outcome.  The volume-manager workflow composed of following tasks: - Verify driver initialization and validates Connector. - Exports the volume and returns the updated volume reference (remove   export on failure) - Allow connection to connector and returns connection info. - Add QOS specs to connection info and returns updated connection info.  Change-Id: I5d562dc85eb45c2db3f106b653e9e9ed942212bf,objective,,,,,,
openstack%2Fcinder~master~Ie5fed49c0776176c9aee722c8e467dd760bf493a,https://review.opendev.org/148922,Refactoring attach volume api to use taskflow,Refactoring attach volume api to use taskflow  Refactor attach volume workflow using taskflow and split that workflow for volume-manager into separate tasks. Create tasks which perform the individual required actions to accomplish the desired outcome.  The volume-manager workflow composed of following tasks: - Extracts volume reference from database. - Validates volume status and availability. - Updates volume status and its metadata. - Verify driver initialization. - Updates volume status to attached. - Notifies about volume actions.  Change-Id: Ie5fed49c0776176c9aee722c8e467dd760bf493a,integration,,,,,,
openstack%2Fcinder~master~Ie5fed49c0776176c9aee722c8e467dd760bf493a,https://review.opendev.org/148922,Refactoring attach volume api to use taskflow,Refactoring attach volume api to use taskflow  Refactor attach volume workflow using taskflow and split that workflow for volume-manager into separate tasks. Create tasks which perform the individual required actions to accomplish the desired outcome.  The volume-manager workflow composed of following tasks: - Extracts volume reference from database. - Validates volume status and availability. - Updates volume status and its metadata. - Verify driver initialization. - Updates volume status to attached. - Notifies about volume actions.  Change-Id: Ie5fed49c0776176c9aee722c8e467dd760bf493a,objective,,,,,,
openstack%2Fneutron~feature%2Fqos~Ia9d8638b9268b5aa8512cbb9d001413751f82649,https://review.opendev.org/211090,QoS agent extension and driver refactoring,QoS agent extension and driver refactoring  This patch add the following: 1. Move code to be handle by the Qos Driver abstrct class to avoid code duplication. 2. chace the poclies to reduce pull RPC calls to server. 3. support delete per rule_type or delete all rules.  Partially-Implements: quantum-qos-api  Change-Id: Ia9d8638b9268b5aa8512cbb9d001413751f82649,quality,,,,,,
openstack%2Fneutron~feature%2Fqos~Ia9d8638b9268b5aa8512cbb9d001413751f82649,https://review.opendev.org/211090,QoS agent extension and driver refactoring,QoS agent extension and driver refactoring  This patch add the following: 1. Move code to be handle by the Qos Driver abstrct class to avoid code duplication. 2. chace the poclies to reduce pull RPC calls to server. 3. support delete per rule_type or delete all rules.  Partially-Implements: quantum-qos-api  Change-Id: Ia9d8638b9268b5aa8512cbb9d001413751f82649,objective,,,,,,
openstack%2Ffuel-web~master~Ia0e70a2e1aca6f1d734ffb269fc4a9afc1f010fa,https://review.opendev.org/115578,API jsonschema validation refactoring,"API jsonschema validation refactoring  - request, response schemas mapping added - validate_schema decorator implemented - validate_schema added into content_json decorator - tests on api schema validation added - common json types for node added - Node and NodeCollection shcemas added - schema validation added into base handlers GET, POST, PUT, DELETE methods - Node nailgun object uses jsonschema from prototcol  Change-Id: Ia0e70a2e1aca6f1d734ffb269fc4a9afc1f010fa",integration,,,,,,
openstack%2Ffuel-web~master~Ia0e70a2e1aca6f1d734ffb269fc4a9afc1f010fa,https://review.opendev.org/115578,API jsonschema validation refactoring,"API jsonschema validation refactoring  - request, response schemas mapping added - validate_schema decorator implemented - validate_schema added into content_json decorator - tests on api schema validation added - common json types for node added - Node and NodeCollection shcemas added - schema validation added into base handlers GET, POST, PUT, DELETE methods - Node nailgun object uses jsonschema from prototcol  Change-Id: Ia0e70a2e1aca6f1d734ffb269fc4a9afc1f010fa",objective,,,,,,
openstack%2Fglance-specs~master~I11fc3a89df24b1fa6bb7047ad918f2430334e24c,https://review.opendev.org/126550,Complete refactor to glance-store's API,Complete refactor to glance-store's API  Change-Id: I11fc3a89df24b1fa6bb7047ad918f2430334e24c,integration,,,,,,
openstack%2Fneutron~master~Id171afb3e9bafacd8b77ace9087f6ee2317c4054,https://review.opendev.org/172443,WIP Alternate Refactoring for Pluggable IPAM,"WIP Alternate Refactoring for Pluggable IPAM  This provides an alternate approach to the refactoring needed for pluggable IPAM. In [1], the proposed approach does not require changes to any plugins, only to the base class. The approach in this patch requires changes to the plugin subclasses in order to utilize pluggable IPAM; unchanged plugins will continue to use the builtin IPAM.  The advantage of this patch is that the IPAM driver calls are done prior to the start of the management layer's transaction. This means that there is no open transaction during any external API calls.  This is very much a WIP, it is only intended to demonstrate the alternate approach. Some notes:    * Only the create_port method is refactored    * Much of the validation (such as _test_fixed_ips_for_port) is      deferred to the driver layer.    * There is no error handling    * I haven't even looked to see if it will handle IPv6, auto-      addressed ports, or router ports.    * I borrowed the ipam/__init__.py changes from [1].    * It is only very lightly tested: allocations for fixed IPs      via the neutron CLI are working in the single-subnet case,      as well as allocations when only a network ID is specified.    * Since none of the subnet calls are refactored, you have to      manual setup the database entries for them for the driver      to know what to do.    * IPAllocations are still stored, as that is the foreign key      relationships defined by the Port object for its IPs.    * The new driver is used for the actual allocations. This is      done prior to the start of the transaction in the ML2      create_port call.    * Obviously the final routines would appear in the DB plugin      not the ML2 plugin so they can be used by other plugins.  [1] https://review.openstack.org/153236  Change-Id: Id171afb3e9bafacd8b77ace9087f6ee2317c4054",integration,,,,,,
openstack%2Fneutron~master~Id171afb3e9bafacd8b77ace9087f6ee2317c4054,https://review.opendev.org/172443,WIP Alternate Refactoring for Pluggable IPAM,"WIP Alternate Refactoring for Pluggable IPAM  This provides an alternate approach to the refactoring needed for pluggable IPAM. In [1], the proposed approach does not require changes to any plugins, only to the base class. The approach in this patch requires changes to the plugin subclasses in order to utilize pluggable IPAM; unchanged plugins will continue to use the builtin IPAM.  The advantage of this patch is that the IPAM driver calls are done prior to the start of the management layer's transaction. This means that there is no open transaction during any external API calls.  This is very much a WIP, it is only intended to demonstrate the alternate approach. Some notes:    * Only the create_port method is refactored    * Much of the validation (such as _test_fixed_ips_for_port) is      deferred to the driver layer.    * There is no error handling    * I haven't even looked to see if it will handle IPv6, auto-      addressed ports, or router ports.    * I borrowed the ipam/__init__.py changes from [1].    * It is only very lightly tested: allocations for fixed IPs      via the neutron CLI are working in the single-subnet case,      as well as allocations when only a network ID is specified.    * Since none of the subnet calls are refactored, you have to      manual setup the database entries for them for the driver      to know what to do.    * IPAllocations are still stored, as that is the foreign key      relationships defined by the Port object for its IPs.    * The new driver is used for the actual allocations. This is      done prior to the start of the transaction in the ML2      create_port call.    * Obviously the final routines would appear in the DB plugin      not the ML2 plugin so they can be used by other plugins.  [1] https://review.openstack.org/153236  Change-Id: Id171afb3e9bafacd8b77ace9087f6ee2317c4054",testing,,,,,,
openstack%2Fneutron~master~Id171afb3e9bafacd8b77ace9087f6ee2317c4054,https://review.opendev.org/172443,WIP Alternate Refactoring for Pluggable IPAM,"WIP Alternate Refactoring for Pluggable IPAM  This provides an alternate approach to the refactoring needed for pluggable IPAM. In [1], the proposed approach does not require changes to any plugins, only to the base class. The approach in this patch requires changes to the plugin subclasses in order to utilize pluggable IPAM; unchanged plugins will continue to use the builtin IPAM.  The advantage of this patch is that the IPAM driver calls are done prior to the start of the management layer's transaction. This means that there is no open transaction during any external API calls.  This is very much a WIP, it is only intended to demonstrate the alternate approach. Some notes:    * Only the create_port method is refactored    * Much of the validation (such as _test_fixed_ips_for_port) is      deferred to the driver layer.    * There is no error handling    * I haven't even looked to see if it will handle IPv6, auto-      addressed ports, or router ports.    * I borrowed the ipam/__init__.py changes from [1].    * It is only very lightly tested: allocations for fixed IPs      via the neutron CLI are working in the single-subnet case,      as well as allocations when only a network ID is specified.    * Since none of the subnet calls are refactored, you have to      manual setup the database entries for them for the driver      to know what to do.    * IPAllocations are still stored, as that is the foreign key      relationships defined by the Port object for its IPs.    * The new driver is used for the actual allocations. This is      done prior to the start of the transaction in the ML2      create_port call.    * Obviously the final routines would appear in the DB plugin      not the ML2 plugin so they can be used by other plugins.  [1] https://review.openstack.org/153236  Change-Id: Id171afb3e9bafacd8b77ace9087f6ee2317c4054",quality,,,,,,
openstack%2Fneutron~master~Id171afb3e9bafacd8b77ace9087f6ee2317c4054,https://review.opendev.org/172443,WIP Alternate Refactoring for Pluggable IPAM,"WIP Alternate Refactoring for Pluggable IPAM  This provides an alternate approach to the refactoring needed for pluggable IPAM. In [1], the proposed approach does not require changes to any plugins, only to the base class. The approach in this patch requires changes to the plugin subclasses in order to utilize pluggable IPAM; unchanged plugins will continue to use the builtin IPAM.  The advantage of this patch is that the IPAM driver calls are done prior to the start of the management layer's transaction. This means that there is no open transaction during any external API calls.  This is very much a WIP, it is only intended to demonstrate the alternate approach. Some notes:    * Only the create_port method is refactored    * Much of the validation (such as _test_fixed_ips_for_port) is      deferred to the driver layer.    * There is no error handling    * I haven't even looked to see if it will handle IPv6, auto-      addressed ports, or router ports.    * I borrowed the ipam/__init__.py changes from [1].    * It is only very lightly tested: allocations for fixed IPs      via the neutron CLI are working in the single-subnet case,      as well as allocations when only a network ID is specified.    * Since none of the subnet calls are refactored, you have to      manual setup the database entries for them for the driver      to know what to do.    * IPAllocations are still stored, as that is the foreign key      relationships defined by the Port object for its IPs.    * The new driver is used for the actual allocations. This is      done prior to the start of the transaction in the ML2      create_port call.    * Obviously the final routines would appear in the DB plugin      not the ML2 plugin so they can be used by other plugins.  [1] https://review.openstack.org/153236  Change-Id: Id171afb3e9bafacd8b77ace9087f6ee2317c4054",objective,,,,,,
openstack%2Fswift~master~Id855d5ed7365f0becf9d1549313cfe6f045d7282,https://review.opendev.org/159610,WIP: refactor the PUT method into separate classes,"WIP: refactor the PUT method into separate classes  For now there's only the ReplicatedObjectController class, similar to the changes in feature/ec branch.  The Base class containes all public API handling, while ReplicatedObjectController only handles data transfer to object server.  Change-Id: Id855d5ed7365f0becf9d1549313cfe6f045d7282 Signed-off-by: Thiago da Silva <thiago@redhat.com>",integration,,,,,,
openstack%2Fswift~master~Id855d5ed7365f0becf9d1549313cfe6f045d7282,https://review.opendev.org/159610,WIP: refactor the PUT method into separate classes,"WIP: refactor the PUT method into separate classes  For now there's only the ReplicatedObjectController class, similar to the changes in feature/ec branch.  The Base class containes all public API handling, while ReplicatedObjectController only handles data transfer to object server.  Change-Id: Id855d5ed7365f0becf9d1549313cfe6f045d7282 Signed-off-by: Thiago da Silva <thiago@redhat.com>",objective,,,,,,
openstack%2Fnova~master~I5216d6e9619b55eed88343b8373992f92b62c6f2,https://review.opendev.org/167027,Refactor _action_create_image of API,"Refactor _action_create_image of API  Based on current design, instance with volume backed should not have a image ref, so the code at nova/api/openstack/compute/servers.py#L1065-L1072 is not reasonable anymore. This patch will remove the 'if' check.  Closes-Bug: #1435596  Change-Id: I5216d6e9619b55eed88343b8373992f92b62c6f2",integration,,,,,,
openstack%2Fnova~master~I5216d6e9619b55eed88343b8373992f92b62c6f2,https://review.opendev.org/167027,Refactor _action_create_image of API,"Refactor _action_create_image of API  Based on current design, instance with volume backed should not have a image ref, so the code at nova/api/openstack/compute/servers.py#L1065-L1072 is not reasonable anymore. This patch will remove the 'if' check.  Closes-Bug: #1435596  Change-Id: I5216d6e9619b55eed88343b8373992f92b62c6f2",objective,,,,,,
openstack%2Fceilometer~master~I0127ae33b1e0db525ce9b58e9e8c5f15f5fe1ae3,https://review.opendev.org/147360,V2 API Refactoring,"V2 API Refactoring  The V2 API are really monolithic and difficult to maintain.  This patch separates the various controller code in separte files simplifying the overall structure and making the code more readable.  Moreover, this should simplify the integration/substitution of API that now can be clearly stated in the v2 file injecting a controller from a new source.  Change-Id: I0127ae33b1e0db525ce9b58e9e8c5f15f5fe1ae3",integration,,,,,,
openstack%2Fceilometer~master~I0127ae33b1e0db525ce9b58e9e8c5f15f5fe1ae3,https://review.opendev.org/147360,V2 API Refactoring,"V2 API Refactoring  The V2 API are really monolithic and difficult to maintain.  This patch separates the various controller code in separte files simplifying the overall structure and making the code more readable.  Moreover, this should simplify the integration/substitution of API that now can be clearly stated in the v2 file injecting a controller from a new source.  Change-Id: I0127ae33b1e0db525ce9b58e9e8c5f15f5fe1ae3",quality,,,,,,
openstack%2Fnova~master~Ic67e95f50b2f8c00d57cf3f55ee33cec17a0d9ca,https://review.opendev.org/144579,Refactor _format_instances in api/ec2/cloudy.py,"Refactor _format_instances in api/ec2/cloudy.py  Abstract _get_format_instances function from _format_instances, which all the DB calls now will be in _get_format_instances, and _format_instances will simply format input instances. This also a prepare work to implement bp v3-api-policy which will add policy check in ec2 api layer.  Change-Id: Ic67e95f50b2f8c00d57cf3f55ee33cec17a0d9ca",integration,,,,,,
openstack%2Fnova~master~Ic67e95f50b2f8c00d57cf3f55ee33cec17a0d9ca,https://review.opendev.org/144579,Refactor _format_instances in api/ec2/cloudy.py,"Refactor _format_instances in api/ec2/cloudy.py  Abstract _get_format_instances function from _format_instances, which all the DB calls now will be in _get_format_instances, and _format_instances will simply format input instances. This also a prepare work to implement bp v3-api-policy which will add policy check in ec2 api layer.  Change-Id: Ic67e95f50b2f8c00d57cf3f55ee33cec17a0d9ca",objective,,,,,,
openstack%2Fsolum~master~I912c579470a31a806a9770e5dbd15f86d915cbf7,https://review.opendev.org/129974,Refactor worker shell code,"Refactor worker shell code  1. Refactored ���unittest��� and ���build��� code so that each API just focuses on the behavior defined by the method name.  2. Added a new ���launch��� API, which does the unittest->build workflow.  3. Make the worker API signature cleaner by adding test_info and build_info dicts.  Change-Id: I912c579470a31a806a9770e5dbd15f86d915cbf7",integration,,,,,,
openstack%2Fsolum~master~I912c579470a31a806a9770e5dbd15f86d915cbf7,https://review.opendev.org/129974,Refactor worker shell code,"Refactor worker shell code  1. Refactored ���unittest��� and ���build��� code so that each API just focuses on the behavior defined by the method name.  2. Added a new ���launch��� API, which does the unittest->build workflow.  3. Make the worker API signature cleaner by adding test_info and build_info dicts.  Change-Id: I912c579470a31a806a9770e5dbd15f86d915cbf7",objective,,,,,,
openstack%2Fnova~master~I7c2d42daff3ec939e5ae90e13dc753f403afb6fd,https://review.opendev.org/74844,Refactor images layer to prep for adding Glance V2 support,Refactor images layer to prep for adding Glance V2 support  This refactoring patch lays the initial groundwork for Glance V2 API support by moving the GlanceClientWrapper and some associated functions and configuration into a new package which will later contain drivers for Glance V1 and V2.  Change-Id: I7c2d42daff3ec939e5ae90e13dc753f403afb6fd Implements: bp use-glance-v2-api,integration,,,,,,
openstack%2Fnova~master~I7c2d42daff3ec939e5ae90e13dc753f403afb6fd,https://review.opendev.org/74844,Refactor images layer to prep for adding Glance V2 support,Refactor images layer to prep for adding Glance V2 support  This refactoring patch lays the initial groundwork for Glance V2 API support by moving the GlanceClientWrapper and some associated functions and configuration into a new package which will later contain drivers for Glance V1 and V2.  Change-Id: I7c2d42daff3ec939e5ae90e13dc753f403afb6fd Implements: bp use-glance-v2-api,objective,,,,,,
openstack%2Fnova~master~Ib161fc242889903045b862601ab92aa31f95826a,https://review.opendev.org/95045,Refactor calls to cinderclient(),"Refactor calls to cinderclient()  The blueprint log-request-id-mappings will require adding logging to calls being made to other OpenStack services. We will need to log the request ID that will be returned from cinder. The current set of API functions are each calling cinderclient() individually. Rather than litter the code with dozens of logging lines, this refactor moves the cinderclient() call out of the API functions. The logging will be done at that point.  Change-Id: Ib161fc242889903045b862601ab92aa31f95826a",integration,,,,,,
openstack%2Fnova~master~Ib161fc242889903045b862601ab92aa31f95826a,https://review.opendev.org/95045,Refactor calls to cinderclient(),"Refactor calls to cinderclient()  The blueprint log-request-id-mappings will require adding logging to calls being made to other OpenStack services. We will need to log the request ID that will be returned from cinder. The current set of API functions are each calling cinderclient() individually. Rather than litter the code with dozens of logging lines, this refactor moves the cinderclient() call out of the API functions. The logging will be done at that point.  Change-Id: Ib161fc242889903045b862601ab92aa31f95826a",objective,,,,,,
openstack%2Fkeystone~milestone-proposed~I7db24040689245a616332b08744f40ab8381579d,https://review.opendev.org/85770,Refactor LDAP API,"Refactor LDAP API  The fake LDAP API must emulate the python-ldap API as much as possible otherwise much of the LDAP testing is invalid. The python-ldap API only accepts utf-8 encoded strings. However, the fake LDAP API accepts any Python type therefore properly handling type conversion into and out of the LDAP API is not exercised by the fake LDAP API during testing. Currently type conversion is done inside the LdapWrapper which calls the python-ldap API, this means unicode issues only appear when testing with a live LDAP server.  LdapWrapper and FakeLdap logically are two different providers of the same API, as such they should behave identically. Which LDAP API is used at run time a configurable option.  We need a mechanism by which we can substitute an LDAP API and then wrap the calls to that API with type conversions. Type conversion wrapping replaces the Python types used in Keystone with the types needed for the LDAP API, calls the LDAP API, and then type converts the results back from LDAP to those used by Keystone.  This patch establishes an LDAP API interface (LDAPHandler), modifies fake LDAP to support it, replaces LdapWrapper with the interface (invoking python-ldap) and adds another LDAPHandler instance which will be the common location for type conversions prior to calling the configured LDAP interface. See the LDAPHandler class definition for details).  This patch is exclusively a refactoring patch anticipating a subsequent patch to properly handle unicode values. There is no significant change in functionality with this patch, it is just refactoring to more cleanly seperate API boundaries. A few tests which exercised unicode were disabled in this patch because they will not work until the next patch which adds back in correct unicode handling. The idea here is to separate out the refactoring needed to support unicode from the actual unicode changes, this should make reviewing easier.  Partial-Bug: 1172106 Change-Id: I7db24040689245a616332b08744f40ab8381579d",integration,,,,,,
openstack%2Fkeystone~milestone-proposed~I7db24040689245a616332b08744f40ab8381579d,https://review.opendev.org/85770,Refactor LDAP API,"Refactor LDAP API  The fake LDAP API must emulate the python-ldap API as much as possible otherwise much of the LDAP testing is invalid. The python-ldap API only accepts utf-8 encoded strings. However, the fake LDAP API accepts any Python type therefore properly handling type conversion into and out of the LDAP API is not exercised by the fake LDAP API during testing. Currently type conversion is done inside the LdapWrapper which calls the python-ldap API, this means unicode issues only appear when testing with a live LDAP server.  LdapWrapper and FakeLdap logically are two different providers of the same API, as such they should behave identically. Which LDAP API is used at run time a configurable option.  We need a mechanism by which we can substitute an LDAP API and then wrap the calls to that API with type conversions. Type conversion wrapping replaces the Python types used in Keystone with the types needed for the LDAP API, calls the LDAP API, and then type converts the results back from LDAP to those used by Keystone.  This patch establishes an LDAP API interface (LDAPHandler), modifies fake LDAP to support it, replaces LdapWrapper with the interface (invoking python-ldap) and adds another LDAPHandler instance which will be the common location for type conversions prior to calling the configured LDAP interface. See the LDAPHandler class definition for details).  This patch is exclusively a refactoring patch anticipating a subsequent patch to properly handle unicode values. There is no significant change in functionality with this patch, it is just refactoring to more cleanly seperate API boundaries. A few tests which exercised unicode were disabled in this patch because they will not work until the next patch which adds back in correct unicode handling. The idea here is to separate out the refactoring needed to support unicode from the actual unicode changes, this should make reviewing easier.  Partial-Bug: 1172106 Change-Id: I7db24040689245a616332b08744f40ab8381579d",objective,,,,,,
openstack%2Fnova~master~Id365ec9376adcabf85e7e66de5f57d733fc8941a,https://review.opendev.org/81354,VMWare: spawn refactor - get_image_properties,"WIP - for Juno - VMWare: spawn refactor - get_image_properties  One of many, this is a refactor of the get_image_properties inner methods. This is only the first step in many.  get_image_properties distills OpenStack Nova image properties into a set of values that the vmwareapi drivers use to make calls against the vSphere SOAP API.  Introduces a datastructure for holding this distilled image information and additional tests to cover the method.  All validation checks for certain properties were only occuring inside the inner method get_image_properties so constants related to disk types and linked_clone values are moved to be near by the newly extracted get_image_properties method.  Several tests had to be refactored to account for changes to the fake.py framework that needed to be made to match the new structures in vmops.py  partial blueprint vmware-spawn-refactor  Change-Id: Id365ec9376adcabf85e7e66de5f57d733fc8941a",integration,,,,,,
openstack%2Fnova~master~Id365ec9376adcabf85e7e66de5f57d733fc8941a,https://review.opendev.org/81354,VMWare: spawn refactor - get_image_properties,"WIP - for Juno - VMWare: spawn refactor - get_image_properties  One of many, this is a refactor of the get_image_properties inner methods. This is only the first step in many.  get_image_properties distills OpenStack Nova image properties into a set of values that the vmwareapi drivers use to make calls against the vSphere SOAP API.  Introduces a datastructure for holding this distilled image information and additional tests to cover the method.  All validation checks for certain properties were only occuring inside the inner method get_image_properties so constants related to disk types and linked_clone values are moved to be near by the newly extracted get_image_properties method.  Several tests had to be refactored to account for changes to the fake.py framework that needed to be made to match the new structures in vmops.py  partial blueprint vmware-spawn-refactor  Change-Id: Id365ec9376adcabf85e7e66de5f57d733fc8941a",testing,,,,,,
openstack%2Fnova~master~Ia6bb88f51ed31fb3a48fc52670b978acf8a326dc,https://review.opendev.org/79680,Refactor network_get_associated_fixed_ips() for sanity,"Refactor network_get_associated_fixed_ips() for sanity  The network_get_associated_fixed_ips() db api method returns a dict of randomness that is neither a model, nor a mapping to one. In order to replace this method with an object call, we need to make it do something a little more helpful.  This patch simply refactors it to return the same data, but in model form that we can reasonably turn into an object in a later patch.  Related to blueprint nova-network-objects  Related-bug: 1290568 Change-Id: Ia6bb88f51ed31fb3a48fc52670b978acf8a326dc",integration,,,,,,
openstack%2Fnova~master~Ia6bb88f51ed31fb3a48fc52670b978acf8a326dc,https://review.opendev.org/79680,Refactor network_get_associated_fixed_ips() for sanity,"Refactor network_get_associated_fixed_ips() for sanity  The network_get_associated_fixed_ips() db api method returns a dict of randomness that is neither a model, nor a mapping to one. In order to replace this method with an object call, we need to make it do something a little more helpful.  This patch simply refactors it to return the same data, but in model form that we can reasonably turn into an object in a later patch.  Related to blueprint nova-network-objects  Related-bug: 1290568 Change-Id: Ia6bb88f51ed31fb3a48fc52670b978acf8a326dc",objective,,,,,,
openstack%2Fsolum~master~Ic2afbd91729652f49d683dcce8c2af32c08ba3e5,https://review.opendev.org/69601,Refactor type of operation and sensor in assembly/component.,"Refactor type of operation and sensor in assembly/component.  this patch replaces the type of the 'operations' and 'sensors attributes in assembly and component. Instead of common_types.Uri, it is [common_types.Link]  Operation and Sensor are both API resources and should be considered as any of the other resources.  the name of both attributes have also been updated, from operations_uri to operation_links to match the other attributes  Note : The wiki page should also be updated to match the new attribute names.  Change-Id: Ic2afbd91729652f49d683dcce8c2af32c08ba3e5",objective,,,,,,
openstack%2Fnova~master~Iecb3f1283e76cb5e09a78f7b665447a67deadf4d,https://review.opendev.org/53482,Refactor ips api log message format for debugging,"Refactor ips api log message format for debugging  This patch refactor ips api error log message format, Adds server id to log message.  Change-Id: Iecb3f1283e76cb5e09a78f7b665447a67deadf4d",integration,,,,,,
openstack%2Fnova~master~I75f071cf28c274fc16b5384227449b3525c94fbf,https://review.opendev.org/52478,VMware: Refactor vim_util to reuse existing util method,VMware: Refactor vim_util to reuse existing util method  The following methods make similar api calls using retrievePropertiesEx and hence can be consolidated to avoid code repetition :  1. get_object_properties --> retrievePropertiesEx() 2. get_objects --> retrievePropertiesEx() 3. get_properties_for_collection_of_objects -->        retrievePropertiesEx()  This has been refactored as follows in this patch :- get_object_properties/get_objects --->  get_properties_for_collection_of_object --> retrievePropertiesEx()  Closes-bug: #1240847  Change-Id: I75f071cf28c274fc16b5384227449b3525c94fbf,quality,,,,,,
openstack%2Fnova~master~I75f071cf28c274fc16b5384227449b3525c94fbf,https://review.opendev.org/52478,VMware: Refactor vim_util to reuse existing util method,VMware: Refactor vim_util to reuse existing util method  The following methods make similar api calls using retrievePropertiesEx and hence can be consolidated to avoid code repetition :  1. get_object_properties --> retrievePropertiesEx() 2. get_objects --> retrievePropertiesEx() 3. get_properties_for_collection_of_objects -->        retrievePropertiesEx()  This has been refactored as follows in this patch :- get_object_properties/get_objects --->  get_properties_for_collection_of_object --> retrievePropertiesEx()  Closes-bug: #1240847  Change-Id: I75f071cf28c274fc16b5384227449b3525c94fbf,objective,,,,,,
openstack%2Fnova~master~I75f071cf28c274fc16b5384227449b3525c94fbf,https://review.opendev.org/52478,VMware: Refactor vim_util to reuse existing util method,VMware: Refactor vim_util to reuse existing util method  The following methods make similar api calls using retrievePropertiesEx and hence can be consolidated to avoid code repetition :  1. get_object_properties --> retrievePropertiesEx() 2. get_objects --> retrievePropertiesEx() 3. get_properties_for_collection_of_objects -->        retrievePropertiesEx()  This has been refactored as follows in this patch :- get_object_properties/get_objects --->  get_properties_for_collection_of_object --> retrievePropertiesEx()  Closes-bug: #1240847  Change-Id: I75f071cf28c274fc16b5384227449b3525c94fbf,integration,,,,,,
openstack%2Fswift~master~Iefbbe7aada972b1ff2fc9fd5492646ab01fa192c,https://review.opendev.org/35381,Refactor DiskFile hiding quarantine adding reader,"Refactor file reading to a reader context manager  Ahead of the DiskFile refactoring work for a defined (yet internal) API (see https://review.openstack.org/30051), refactor DiskFile to create a DiskReader class (akin to the DiskWriter class) which will allow us to encapsulate file reading implementation details.  Also:  * Refactor DiskWriter to reference threadpool via disk_file field  * Misc exception syntax use of ""as""  Change-Id: Iefbbe7aada972b1ff2fc9fd5492646ab01fa192c Signed-off-by: Peter Portante <peter.portante@redhat.com>",integration,,,,,,
openstack%2Fswift~master~Iefbbe7aada972b1ff2fc9fd5492646ab01fa192c,https://review.opendev.org/35381,Refactor DiskFile hiding quarantine adding reader,"Refactor file reading to a reader context manager  Ahead of the DiskFile refactoring work for a defined (yet internal) API (see https://review.openstack.org/30051), refactor DiskFile to create a DiskReader class (akin to the DiskWriter class) which will allow us to encapsulate file reading implementation details.  Also:  * Refactor DiskWriter to reference threadpool via disk_file field  * Misc exception syntax use of ""as""  Change-Id: Iefbbe7aada972b1ff2fc9fd5492646ab01fa192c Signed-off-by: Peter Portante <peter.portante@redhat.com>",quality,,,,,,
openstack%2Fswift~master~Iefbbe7aada972b1ff2fc9fd5492646ab01fa192c,https://review.opendev.org/35381,Refactor DiskFile hiding quarantine adding reader,"Refactor file reading to a reader context manager  Ahead of the DiskFile refactoring work for a defined (yet internal) API (see https://review.openstack.org/30051), refactor DiskFile to create a DiskReader class (akin to the DiskWriter class) which will allow us to encapsulate file reading implementation details.  Also:  * Refactor DiskWriter to reference threadpool via disk_file field  * Misc exception syntax use of ""as""  Change-Id: Iefbbe7aada972b1ff2fc9fd5492646ab01fa192c Signed-off-by: Peter Portante <peter.portante@redhat.com>",objective,,,,,,
openstack%2Fnova~master~Ib13e831dc504c6d1c3d675a9a85c3d501842027c,https://review.opendev.org/34849,Refactor test_update_* in current API tests and v3,Refactor test_update_* from test_servers.py in current API tests and v3.  - Cleanup from copy-paste code. - Move all test_update to separate class.  blueprint api-compute-servers-tests  Change-Id: Ib13e831dc504c6d1c3d675a9a85c3d501842027c,quality,,,,,,
openstack%2Fnova~master~Ib13e831dc504c6d1c3d675a9a85c3d501842027c,https://review.opendev.org/34849,Refactor test_update_* in current API tests and v3,Refactor test_update_* from test_servers.py in current API tests and v3.  - Cleanup from copy-paste code. - Move all test_update to separate class.  blueprint api-compute-servers-tests  Change-Id: Ib13e831dc504c6d1c3d675a9a85c3d501842027c,objective,,,,,,
x%2Fcloudcafe~master~I4a429def5e4912e85e3083eec948a90dec8a757b,https://review.opendev.org/31254,Blockstorage behaviors refactor and versioning * Implemented exception-raising behaviors for volumes_api. * Removed blockstorage provider. * Added volume and snapshot statuses model. * Refactored response models. * Versioned volumes_api as v1 * Cleaned up rax auth extensions * Fixed VolumeTypeList model * Added default_volume_type config property,Blockstorage behaviors refactor and versioning * Implemented exception-raising behaviors for volumes_api. * Removed blockstorage provider. * Added volume and snapshot statuses model. * Refactored response models. * Versioned volumes_api as v1 * Cleaned up rax auth extensions * Fixed VolumeTypeList model * Added default_volume_type config property  Change-Id: I54e83d4e1eb535eb12c0709247a7116db71f418f  Changed named of base volumes api models.  Change-Id: I4a429def5e4912e85e3083eec948a90dec8a757b,integration,,,,,,
x%2Fcloudcafe~master~I4a429def5e4912e85e3083eec948a90dec8a757b,https://review.opendev.org/31254,Blockstorage behaviors refactor and versioning * Implemented exception-raising behaviors for volumes_api. * Removed blockstorage provider. * Added volume and snapshot statuses model. * Refactored response models. * Versioned volumes_api as v1 * Cleaned up rax auth extensions * Fixed VolumeTypeList model * Added default_volume_type config property,Blockstorage behaviors refactor and versioning * Implemented exception-raising behaviors for volumes_api. * Removed blockstorage provider. * Added volume and snapshot statuses model. * Refactored response models. * Versioned volumes_api as v1 * Cleaned up rax auth extensions * Fixed VolumeTypeList model * Added default_volume_type config property  Change-Id: I54e83d4e1eb535eb12c0709247a7116db71f418f  Changed named of base volumes api models.  Change-Id: I4a429def5e4912e85e3083eec948a90dec8a757b,objective,,,,,,
openstack%2Fneutron~master~Ia3f2360218bd931c17eae316a0369c2d0c6d786c,https://review.opendev.org/23246,Refactor RPC API into quantum.api.rpc directory,"Refactor RPC API into quantum.api.rpc directory  In addition, change update_lease_expiration from cast to call so that it will not RPC flood server.  Change-Id: Ia3f2360218bd931c17eae316a0369c2d0c6d786c",integration,,,,,,
openstack%2Fnova~master~I866fb66be5b74c4e9eb137b785ff142058673196,https://review.opendev.org/19071,Refactor get_encoded_zip in cloudpipe.pipelib,Refactor get_encoded_zip in cloudpipe.pipelib   * add generate_vpn_files in cert.rpcapi  * use cert.rpcapi rather than calling crypto directly  * change some file modes while generating zip file  Change-Id: I866fb66be5b74c4e9eb137b785ff142058673196,integration,,,,,,
openstack%2Fnova~master~I866fb66be5b74c4e9eb137b785ff142058673196,https://review.opendev.org/19071,Refactor get_encoded_zip in cloudpipe.pipelib,Refactor get_encoded_zip in cloudpipe.pipelib   * add generate_vpn_files in cert.rpcapi  * use cert.rpcapi rather than calling crypto directly  * change some file modes while generating zip file  Change-Id: I866fb66be5b74c4e9eb137b785ff142058673196,objective,,,,,,
openstack%2Fnova~master~I801fc09f1f9717580d8114c18fe788a32a584499,https://review.opendev.org/15028,refactor: extract class XenAPISessionBase,"refactor: extract class XenAPISessionBase  Related to blueprint xenapi-volume-drivers  As xenapi access will be required in cinder, this change extracts low-level xenapi session management (pooling) to a base class, that could be moved to nova-common later.  Change-Id: I801fc09f1f9717580d8114c18fe788a32a584499",objective,,,,,,
openstack%2Fcinder~master~If0a8ceeb79ed20c93857eefd6524e2f4cee981d8,https://review.opendev.org/14120,Scheduler API clean up and refactor,"Scheduler API clean up and refactor  Unlike Nova scheduler, which has to consider serving compute and volume scheduling, Cinder scheduler only serves volume scheduling, so there's no need to keep generic interface 'schedule'.  Instead, 'schedule_create_volume' is added (if missing) to manager/driver class and chance/simple scheduler driver implementation.  Also this patch changes the interface between API service and scheduler to allow more information about volume is passed to scheduler for advanced scheduling.  Change-Id: If0a8ceeb79ed20c93857eefd6524e2f4cee981d8",integration,,,,,,
openstack%2Fcinder~master~If0a8ceeb79ed20c93857eefd6524e2f4cee981d8,https://review.opendev.org/14120,Scheduler API clean up and refactor,"Scheduler API clean up and refactor  Unlike Nova scheduler, which has to consider serving compute and volume scheduling, Cinder scheduler only serves volume scheduling, so there's no need to keep generic interface 'schedule'.  Instead, 'schedule_create_volume' is added (if missing) to manager/driver class and chance/simple scheduler driver implementation.  Also this patch changes the interface between API service and scheduler to allow more information about volume is passed to scheduler for advanced scheduling.  Change-Id: If0a8ceeb79ed20c93857eefd6524e2f4cee981d8",objective,,,,,,
openstack%2Fheat~master~I7aef240b4a9d6b899e0d46ed78622e2b7209ecbb,https://review.opendev.org/438779,Refactor for wsgi controllers,"Refactor for wsgi controllers  This patch adds a base controller class, and move some common methods into the base class.  Blueprint: v2-api Change-Id: I7aef240b4a9d6b899e0d46ed78622e2b7209ecbb",quality,,,,,,
openstack%2Fheat~master~I7aef240b4a9d6b899e0d46ed78622e2b7209ecbb,https://review.opendev.org/438779,Refactor for wsgi controllers,"Refactor for wsgi controllers  This patch adds a base controller class, and move some common methods into the base class.  Blueprint: v2-api Change-Id: I7aef240b4a9d6b899e0d46ed78622e2b7209ecbb",objective,,,,,,
openstack%2Fneutron~master~I2ea4a240595f69ccd6f2c329387eb28d40c2997a,https://review.opendev.org/681705,"Refactor network ip availability api, add 'available_ips' filed","Refactor network ip availability api, add 'available_ips' filed  The 'available_ips' is represented the number of assignable ip address in a network.  Currently, the network ip availability api only provide 'total_ips' and 'used_ips'. In some case, we can't accurately figure out the rest of ip address only according to the two value. For example, the subnet has no 'ip_allocation_pools' or the 'ip_allocation_pools' was updated after allocated some ips.  Closes-Bug: #1843211 Change-Id: I2ea4a240595f69ccd6f2c329387eb28d40c2997a",integration,,,,,,
openstack%2Fneutron~master~I2ea4a240595f69ccd6f2c329387eb28d40c2997a,https://review.opendev.org/681705,"Refactor network ip availability api, add 'available_ips' filed","Refactor network ip availability api, add 'available_ips' filed  The 'available_ips' is represented the number of assignable ip address in a network.  Currently, the network ip availability api only provide 'total_ips' and 'used_ips'. In some case, we can't accurately figure out the rest of ip address only according to the two value. For example, the subnet has no 'ip_allocation_pools' or the 'ip_allocation_pools' was updated after allocated some ips.  Closes-Bug: #1843211 Change-Id: I2ea4a240595f69ccd6f2c329387eb28d40c2997a",objective,,,,,,
openstack%2Fpuppet-tripleo~master~Ie955632b0597f0fd4116662fde69d46dc04813cf,https://review.opendev.org/661377,Prepare glance-api to be refactored,Prepare glance-api to be refactored  Part of the effort in Idbf1250b1cdf69fb101c206183f16be70532626c - we need this patch to avoid resource duplication in Puppet catalog.  This is temporary and the code will be cleaned up later.  Change-Id: Ie955632b0597f0fd4116662fde69d46dc04813cf,objective,,,,,,
openstack%2Foslo.policy~master~Iaddb1f096a4a085f08b83e3c86c3910b7e26f40a,https://review.opendev.org/346002,Refactoring of Enforcer class,Allow policy file to not exist  Now that policy rules can be registered in code there is a desire to run projects without a policy file. However oslo.policy assumed a policy file would exist and would raise an error if it could not be found. This was fixed by https://review.openstack.org/#/c/341732/  These changes make Enforcer logic more simple. And Enforcer can be extendend or improved without adding more flags. Everything related to file was moved to FileRulesCache class. It is easy to read code or debug. This refactoring shouldn't break anything in projects because Enforcer API was not changed.  Change-Id: Iaddb1f096a4a085f08b83e3c86c3910b7e26f40a Closes-Bug: #1603329,integration,,,,,,
openstack%2Foslo.policy~master~Iaddb1f096a4a085f08b83e3c86c3910b7e26f40a,https://review.opendev.org/346002,Refactoring of Enforcer class,Allow policy file to not exist  Now that policy rules can be registered in code there is a desire to run projects without a policy file. However oslo.policy assumed a policy file would exist and would raise an error if it could not be found. This was fixed by https://review.openstack.org/#/c/341732/  These changes make Enforcer logic more simple. And Enforcer can be extendend or improved without adding more flags. Everything related to file was moved to FileRulesCache class. It is easy to read code or debug. This refactoring shouldn't break anything in projects because Enforcer API was not changed.  Change-Id: Iaddb1f096a4a085f08b83e3c86c3910b7e26f40a Closes-Bug: #1603329,objective,,,,,,
openstack%2Ffreezer-api~master~I53961a751d6e735eaf5e007c8079448e669307e9,https://review.opendev.org/591783,Refactor freezer-api jobs,Refactor freezer-api jobs  We can remove some duplicate code and stop using legacy nodesets.  Change-Id: I53961a751d6e735eaf5e007c8079448e669307e9 Signed-off-by: Paul Belanger <pabelanger@redhat.com>,quality,,,,,,
openstack%2Ffreezer-api~master~I53961a751d6e735eaf5e007c8079448e669307e9,https://review.opendev.org/591783,Refactor freezer-api jobs,Refactor freezer-api jobs  We can remove some duplicate code and stop using legacy nodesets.  Change-Id: I53961a751d6e735eaf5e007c8079448e669307e9 Signed-off-by: Paul Belanger <pabelanger@redhat.com>,objective,,,,,,
openstack%2Fglance~master~I50f88d0eeaa54d9857e8a7e30326bc4013928be6,https://review.opendev.org/777018,WIP: Staging refactor,"WIP: Staging refactor  This change is to address old technical debt by refactoring the staging used related to Interoperable Image Import to utilize locations mechanisms to track the user staging data through the process.  Handling of ""staging_host"" location metadata as preparation for Distributed Image Import tht needs to track the host where user image data is being staged to avoid the shared filesystem between service nodes.  Hiding the ""staging_host"" from API user and never selecting staging loction as direct_url provided by the API.  To be addressed beofre merging: Removing or refactoring tests skipped as ""Irrelevant?"", likely so due to the code they were testing been removed from said modules. Fixing tests skipped as ""BROKEN, needs eyes"" that are broken relying the code they were testing being in the module and mocking the rest. Additional API testing for the insecure deprecated locations API around how the locations are being presented.  Change-Id: I50f88d0eeaa54d9857e8a7e30326bc4013928be6",integration,,,,,,
openstack%2Fglance~master~I50f88d0eeaa54d9857e8a7e30326bc4013928be6,https://review.opendev.org/777018,WIP: Staging refactor,"WIP: Staging refactor  This change is to address old technical debt by refactoring the staging used related to Interoperable Image Import to utilize locations mechanisms to track the user staging data through the process.  Handling of ""staging_host"" location metadata as preparation for Distributed Image Import tht needs to track the host where user image data is being staged to avoid the shared filesystem between service nodes.  Hiding the ""staging_host"" from API user and never selecting staging loction as direct_url provided by the API.  To be addressed beofre merging: Removing or refactoring tests skipped as ""Irrelevant?"", likely so due to the code they were testing been removed from said modules. Fixing tests skipped as ""BROKEN, needs eyes"" that are broken relying the code they were testing being in the module and mocking the rest. Additional API testing for the insecure deprecated locations API around how the locations are being presented.  Change-Id: I50f88d0eeaa54d9857e8a7e30326bc4013928be6",testing,,,,,,
openstack%2Fglance~master~I50f88d0eeaa54d9857e8a7e30326bc4013928be6,https://review.opendev.org/777018,WIP: Staging refactor,"WIP: Staging refactor  This change is to address old technical debt by refactoring the staging used related to Interoperable Image Import to utilize locations mechanisms to track the user staging data through the process.  Handling of ""staging_host"" location metadata as preparation for Distributed Image Import tht needs to track the host where user image data is being staged to avoid the shared filesystem between service nodes.  Hiding the ""staging_host"" from API user and never selecting staging loction as direct_url provided by the API.  To be addressed beofre merging: Removing or refactoring tests skipped as ""Irrelevant?"", likely so due to the code they were testing been removed from said modules. Fixing tests skipped as ""BROKEN, needs eyes"" that are broken relying the code they were testing being in the module and mocking the rest. Additional API testing for the insecure deprecated locations API around how the locations are being presented.  Change-Id: I50f88d0eeaa54d9857e8a7e30326bc4013928be6",objective,,,,,,
openstack%2Fosprofiler~master~I861b619131845d601cfb22730c46a14ec683bafd,https://review.opendev.org/515739,[WIP] Refactor drivers,[WIP] Refactor drivers  * Split drivers into NotificationDriver and ReportDriver * Clean-up driver API to avoid code duplicates  Change-Id: I861b619131845d601cfb22730c46a14ec683bafd,quality,,,,,,
openstack%2Fosprofiler~master~I861b619131845d601cfb22730c46a14ec683bafd,https://review.opendev.org/515739,[WIP] Refactor drivers,[WIP] Refactor drivers  * Split drivers into NotificationDriver and ReportDriver * Clean-up driver API to avoid code duplicates  Change-Id: I861b619131845d601cfb22730c46a14ec683bafd,objective,,,,,,
openstack%2Ftripleo-ui~master~Iadb3b4ec16a703bd481c2ca3261f95e6e36e9be2,https://review.opendev.org/441891,API calls and error handling refactoring,"API calls and error handling refactoring  This change refactors API services to use Fetch instead of when+reqwest combination, Improves error handling of API requests and makes actions which do API calls lighter  Change-Id: Iadb3b4ec16a703bd481c2ca3261f95e6e36e9be2",integration,,,,,,
openstack%2Ftripleo-ui~master~Iadb3b4ec16a703bd481c2ca3261f95e6e36e9be2,https://review.opendev.org/441891,API calls and error handling refactoring,"API calls and error handling refactoring  This change refactors API services to use Fetch instead of when+reqwest combination, Improves error handling of API requests and makes actions which do API calls lighter  Change-Id: Iadb3b4ec16a703bd481c2ca3261f95e6e36e9be2",objective,,,,,,
openstack%2Fpython-octaviaclient~master~I10df09550f0d7d6cad39df22055b67e6fb0acbff,https://review.opendev.org/499834,Refactor load_balancer client api methods (DRY),Refactor load_balancer client api methods (DRY)  Change-Id: I10df09550f0d7d6cad39df22055b67e6fb0acbff,quality,,,,,,
openstack%2Fpython-octaviaclient~master~I10df09550f0d7d6cad39df22055b67e6fb0acbff,https://review.opendev.org/499834,Refactor load_balancer client api methods (DRY),Refactor load_balancer client api methods (DRY)  Change-Id: I10df09550f0d7d6cad39df22055b67e6fb0acbff,objective,,,,,,
openstack%2Ftempest~master~Ibecc4b31c0080f85cf6af3a5c27ba5d0d2e1e9a4,https://review.opendev.org/482576,Refactor get_host_for_server function,"Move the get_host_for_server function to utilites  The functionality which retrieves the OS-EXT-SRV-ATTR:host attribute of servers using the admin API was implemented in multiple places in the API and the scenario environments as well.  I moved the get_host_for_server fuction to tempest.common.compute and refactored the tests to use the new, generalized function.  Change-Id: Ibecc4b31c0080f85cf6af3a5c27ba5d0d2e1e9a4",integration,,,,,,
openstack%2Ftempest~master~Ibecc4b31c0080f85cf6af3a5c27ba5d0d2e1e9a4,https://review.opendev.org/482576,Refactor get_host_for_server function,"Move the get_host_for_server function to utilites  The functionality which retrieves the OS-EXT-SRV-ATTR:host attribute of servers using the admin API was implemented in multiple places in the API and the scenario environments as well.  I moved the get_host_for_server fuction to tempest.common.compute and refactored the tests to use the new, generalized function.  Change-Id: Ibecc4b31c0080f85cf6af3a5c27ba5d0d2e1e9a4",objective,,,,,,
openstack%2Fdragonflow~master~I8d9c9590e96f32ac23cadd1ede8db5c06342c82e,https://review.opendev.org/441683,Refactor DB consistent (part 2),[WIP] Refactor DB consistent (part 2)  Partially-Implements: blueprint refactor-nb-api Change-Id: I8d9c9590e96f32ac23cadd1ede8db5c06342c82e,objective,,,,,,
openstack%2Fironic~master~Ibb3ed84e13c340a4a0926483e43d59327d80291f,https://review.opendev.org/306358,[PoC]Refactor configdrive into a new field,[PoC] Refactor configdrive into a new field  Add a new column configdrive. Add a new field to node object and make it compatiable. Add an example to show how to keep RPC compatiable(only for test) Bump api to 1.17 to show node.configdrive field  This is a perfect example to show how Ironic live upgrade works  A short introduction about how to upgrade M to latest code online: Node A with M release API + M release conductor Node B with M release conductor 1. Apply framework patch + configdrive patch to Node A 2. ironic-dbsync upgrade 3. set [upgrade_levels]/lowest_version_services to mitaka on Node A 4. restart API on Node A 5. restart Conductor on Node A 6. Apply two patches on Node B 7. set [upgrade_levels]/lowest_version_services to mitaka on Node B 8. restart Conductor on Node B 9. unset [unpgrade_levels]/lowest_version_services on Node A/B 10. restart API on Node A 11. restart conductor on Node A 12. restart conductor on Node B  Change-Id: Ibb3ed84e13c340a4a0926483e43d59327d80291f,integration,,,,,,
openstack%2Fironic~master~Ibb3ed84e13c340a4a0926483e43d59327d80291f,https://review.opendev.org/306358,[PoC]Refactor configdrive into a new field,[PoC] Refactor configdrive into a new field  Add a new column configdrive. Add a new field to node object and make it compatiable. Add an example to show how to keep RPC compatiable(only for test) Bump api to 1.17 to show node.configdrive field  This is a perfect example to show how Ironic live upgrade works  A short introduction about how to upgrade M to latest code online: Node A with M release API + M release conductor Node B with M release conductor 1. Apply framework patch + configdrive patch to Node A 2. ironic-dbsync upgrade 3. set [upgrade_levels]/lowest_version_services to mitaka on Node A 4. restart API on Node A 5. restart Conductor on Node A 6. Apply two patches on Node B 7. set [upgrade_levels]/lowest_version_services to mitaka on Node B 8. restart Conductor on Node B 9. unset [unpgrade_levels]/lowest_version_services on Node A/B 10. restart API on Node A 11. restart conductor on Node A 12. restart conductor on Node B  Change-Id: Ibb3ed84e13c340a4a0926483e43d59327d80291f,objective,,,,,,
openstack%2Fnova~master~I40ffa8a2484fe8be3aeb077d2393f91e38b868dd,https://review.opendev.org/280165,Refactored query user_id code for quota-sets,refactory query user_id code for quota-sets  do not need to use urlparse and consistent to other API code.  Change-Id: I40ffa8a2484fe8be3aeb077d2393f91e38b868dd,objective,,,,,,
openstack%2Fdragonflow~master~I0a55beca93dcdcea0b590626a357e90c9b859f81,https://review.opendev.org/407014,[WIP] Refactor lrouter northbound API methods,[WIP] Refactor lrouter northbound API methods  Change-Id: I0a55beca93dcdcea0b590626a357e90c9b859f81,objective,,,,,,
openstack%2Fdragonflow~master~I5faff30a9baec2e1e5ffbe0f7a3cb1578f4ea11d,https://review.opendev.org/407012,[WIP] Refactor lport northbound API methods,[WIP] Refactor lports northbound API methods  Change-Id: I5faff30a9baec2e1e5ffbe0f7a3cb1578f4ea11d,integration,,,,,,
openstack%2Fdragonflow~master~If345539b5150459e8ed89131ca65e73085250c07,https://review.opendev.org/407015,[WIP] Refactor floatingip northbound API methods,[WIP] Refactor floatingip northbound API methods  Change-Id: If345539b5150459e8ed89131ca65e73085250c07,integration,,,,,,
openstack%2Fdragonflow~master~Id1ae84016250fc0aa3f151f2b2331286f6175094,https://review.opendev.org/407016,[WIP] Refactor publisher northbound API methods,[WIP] Refactor publisher northbound API methods  Change-Id: Id1ae84016250fc0aa3f151f2b2331286f6175094,integration,,,,,,
openstack%2Fdragonflow~master~Icfe34dbfc5bc48273763d05f4c7341d3ba7a9659,https://review.opendev.org/407478,[WIP] Refactor secgroup northbound API methods,[WIP] Refactor secgroup northbound API methods  Change-Id: Icfe34dbfc5bc48273763d05f4c7341d3ba7a9659,integration,,,,,,
openstack%2Fdragonflow~master~I5c5deaf8628db4cb296fce7a0101b52345a19b0c,https://review.opendev.org/407010,[WIP] Refactor lswitch northbound API methods,[WIP] Refactor lswitch northbound API methods  Change-Id: I5c5deaf8628db4cb296fce7a0101b52345a19b0c,integration,,,,,,
openstack%2Fdragonflow~master~I5f087d8c8ffb63fddbd25478e108c24d9a60090f,https://review.opendev.org/407017,[WIP] Refactor qos policy northbound API methods,[WIP] Refactor qos policy northbound API methods  Change-Id: I5f087d8c8ffb63fddbd25478e108c24d9a60090f,integration,,,,,,
openstack%2Fpython-cloudkittyclient~master~If860f824d09b22157825747837280ee5f71c6f0d,https://review.opendev.org/405939,Refactor the report API to use custom WSME objects,Refactor the report API to use custom WSME objects  Change-Id: If860f824d09b22157825747837280ee5f71c6f0d bp: report-api-refactor,integration,,,,,,
openstack%2Fsenlin~master~I8e4d9545380444c9144515f711973f0fb04fc029,https://review.opendev.org/410617,[WIP] Refactor senlin lock,[WIP] Refactor senlin lock  Add new API to get lock  Change-Id: I8e4d9545380444c9144515f711973f0fb04fc029,integration,,,,,,
openstack%2Fcloudkitty~master~I4a319e4ac8de1c3d99e21350f960e76af1f06fb6,https://review.opendev.org/405938,Refactor the report API to use custom WSME objects,Refactor the report API to use custom WSME objects  Change-Id: I4a319e4ac8de1c3d99e21350f960e76af1f06fb6 bp: report-api-refactor,integration,,,,,,
openstack%2Fdragonflow~master~Ib6d605008681d16f32565be6c8611dfee8e724ca,https://review.opendev.org/407013,[WIP] Refactor secgroup northbound API methods,[WIP] Refactor secgroup northbound API methods  Change-Id: Ib6d605008681d16f32565be6c8611dfee8e724ca Signed-off-by: Dima Kuznetsov <dima.kuznetsov@toganetworks.com>,integration,,,,,,
openstack%2Fhorizon~master~I273255bf15217fae28e2f391a9bbd625ea24cbb2,https://review.opendev.org/294572,Refactor update cell in users table,Refactor update cell in users table  1. only update the changed cell instead of whole user data 2. there is no project column in table so it will never be updated    remove 'project' to unnecessary api call.    ref: https://github.com/openstack/horizon/blob/master/         openstack_dashboard/api/keystone.py#L420 3. {cell_name: new_cell_value or None} to avoid set  email to empty string    ref: https://bugs.launchpad.net/horizon/+bug/1265805  Change-Id: I273255bf15217fae28e2f391a9bbd625ea24cbb2,integration,,,,,,
openstack%2Fhorizon~master~I273255bf15217fae28e2f391a9bbd625ea24cbb2,https://review.opendev.org/294572,Refactor update cell in users table,Refactor update cell in users table  1. only update the changed cell instead of whole user data 2. there is no project column in table so it will never be updated    remove 'project' to unnecessary api call.    ref: https://github.com/openstack/horizon/blob/master/         openstack_dashboard/api/keystone.py#L420 3. {cell_name: new_cell_value or None} to avoid set  email to empty string    ref: https://bugs.launchpad.net/horizon/+bug/1265805  Change-Id: I273255bf15217fae28e2f391a9bbd625ea24cbb2,objective,,,,,,
openstack%2Fneutron~master~I65657ada39fe87c839a66cc776acca0b14ac2f35,https://review.opendev.org/344434,Refactor get_object in object/db/api,"Refactor get_object in object/db/api  Given that OVO work is under progress and is kind of blocked by missing support for sqlalchemy queries like first() or one()etc via helper method. This patch will refactor get_object in order to support one(), one_or_none() queries by passing method name as argument to get object.  This patch is needed OVO patches under progress which I linked below. [1]. https://review.openstack.org/#/c/334695/ [2]. https://review.openstack.org/#/c/338625/  Change-Id: I65657ada39fe87c839a66cc776acca0b14ac2f35",integration,,,,,,
openstack%2Fneutron~master~I65657ada39fe87c839a66cc776acca0b14ac2f35,https://review.opendev.org/344434,Refactor get_object in object/db/api,"Refactor get_object in object/db/api  Given that OVO work is under progress and is kind of blocked by missing support for sqlalchemy queries like first() or one()etc via helper method. This patch will refactor get_object in order to support one(), one_or_none() queries by passing method name as argument to get object.  This patch is needed OVO patches under progress which I linked below. [1]. https://review.openstack.org/#/c/334695/ [2]. https://review.openstack.org/#/c/338625/  Change-Id: I65657ada39fe87c839a66cc776acca0b14ac2f35",objective,,,,,,
openstack%2Fpython-openstackclient~master~I1429d61f6f9eb14f20058d749088b58203b1e0dc,https://review.opendev.org/331845,refactor image functional tests,"refactor image function tests  following the pattern established in commit 09b783ad3e5051564bf6321feace3b65739febbf, create a common module that sets the API version we plan to use for the tests.  Change-Id: I1429d61f6f9eb14f20058d749088b58203b1e0dc",integration,,,,,,
openstack%2Fpython-openstackclient~master~I1429d61f6f9eb14f20058d749088b58203b1e0dc,https://review.opendev.org/331845,refactor image functional tests,"refactor image function tests  following the pattern established in commit 09b783ad3e5051564bf6321feace3b65739febbf, create a common module that sets the API version we plan to use for the tests.  Change-Id: I1429d61f6f9eb14f20058d749088b58203b1e0dc",objective,,,,,,
openstack%2Foslo.messaging~master~I85b49a2b65e841f6a5a84829587d6df17d9426b9,https://review.opendev.org/320067,"Revert ""Refactor RPC client""","Revert ""Refactor RPC client""  This reverts commit 82602ae36941f6f54803fb52bfe72d4f8922de4a.  This refactor breaks the RPClient API  Closes-bug: #1584889  Conflicts: 	oslo_messaging/rpc/client.py  Change-Id: I85b49a2b65e841f6a5a84829587d6df17d9426b9",objective,,,,,,
openstack%2Fnova~master~I800076996e7c3ba5f01f83ba525dd70f69a64a83,https://review.opendev.org/202714,Servicegroup foundational refactoring for Control Plane,"WIP : Servicegroup foundational refactoring for Control Plane  At present, there are various interfaces through which services data can be manipulated - admin interface(nova-manage), extensions (contrib/services.py), servicegroup API layer. Having different interfaces to manipulate the source of truth can lead to severe data inconsistency for something as useful as stored in nova.services. The proposal is to follow a common path, while interacting with services data, for all the three interfaces mentioned above. This common path will go through the servicegroup layer, who's primary purpose is to manage and check for service liveliness. Doing so will help to overcome the tight coupling between nova and services database and also have a consistent view of services data, service liveliness, etc.  Change-Id: I800076996e7c3ba5f01f83ba525dd70f69a64a83 Implements: blueprint servicegroup-api-control-plane",quality,,,,,,
openstack%2Fnova~master~I800076996e7c3ba5f01f83ba525dd70f69a64a83,https://review.opendev.org/202714,Servicegroup foundational refactoring for Control Plane,"WIP : Servicegroup foundational refactoring for Control Plane  At present, there are various interfaces through which services data can be manipulated - admin interface(nova-manage), extensions (contrib/services.py), servicegroup API layer. Having different interfaces to manipulate the source of truth can lead to severe data inconsistency for something as useful as stored in nova.services. The proposal is to follow a common path, while interacting with services data, for all the three interfaces mentioned above. This common path will go through the servicegroup layer, who's primary purpose is to manage and check for service liveliness. Doing so will help to overcome the tight coupling between nova and services database and also have a consistent view of services data, service liveliness, etc.  Change-Id: I800076996e7c3ba5f01f83ba525dd70f69a64a83 Implements: blueprint servicegroup-api-control-plane",integration,,,,,,
openstack%2Fnova~master~I800076996e7c3ba5f01f83ba525dd70f69a64a83,https://review.opendev.org/202714,Servicegroup foundational refactoring for Control Plane,"WIP : Servicegroup foundational refactoring for Control Plane  At present, there are various interfaces through which services data can be manipulated - admin interface(nova-manage), extensions (contrib/services.py), servicegroup API layer. Having different interfaces to manipulate the source of truth can lead to severe data inconsistency for something as useful as stored in nova.services. The proposal is to follow a common path, while interacting with services data, for all the three interfaces mentioned above. This common path will go through the servicegroup layer, who's primary purpose is to manage and check for service liveliness. Doing so will help to overcome the tight coupling between nova and services database and also have a consistent view of services data, service liveliness, etc.  Change-Id: I800076996e7c3ba5f01f83ba525dd70f69a64a83 Implements: blueprint servicegroup-api-control-plane",objective,,,,,,
openstack%2Fnova~master~I8d9aaa02b91418b64d3d8a168095d274d2e66f8b,https://review.opendev.org/235637,Servicegroup Foundational Refactoring,"WIP : Servicegroup Foundational Refactoring  At present, there are various interfaces through which services data can  be manipulated - admin interface(nova-manage), extensions (contrib/services.py), etc. Every interface relies on the servicegroup layer API is_up() to get details about service live-ness. The proposal is keep service data in nova database nova.services table and fetch the live-ness information from the configured servicegroup(SG) driver. Liveness will be a combination of service live-ness and RPC live-ness, where the later will be computed based on information in nova.services.  Change-Id: I8d9aaa02b91418b64d3d8a168095d274d2e66f8b Implements: blueprint servicegroup-api-control-plane",quality,,,,,,
openstack%2Fnova~master~I8d9aaa02b91418b64d3d8a168095d274d2e66f8b,https://review.opendev.org/235637,Servicegroup Foundational Refactoring,"WIP : Servicegroup Foundational Refactoring  At present, there are various interfaces through which services data can  be manipulated - admin interface(nova-manage), extensions (contrib/services.py), etc. Every interface relies on the servicegroup layer API is_up() to get details about service live-ness. The proposal is keep service data in nova database nova.services table and fetch the live-ness information from the configured servicegroup(SG) driver. Liveness will be a combination of service live-ness and RPC live-ness, where the later will be computed based on information in nova.services.  Change-Id: I8d9aaa02b91418b64d3d8a168095d274d2e66f8b Implements: blueprint servicegroup-api-control-plane",objective,,,,,,
openstack%2Fhorizon~master~I688f48eddcb8f22a240a94913e8879cb1332c388,https://review.opendev.org/199063,Refactor network topology graph as an Angular directive,"Refactor network topology graph as an Angular directive  Separate network topology graph into reusable part and network-specific part. Reusable part which is implemented as <topology-graph> directive  * takes care of initial rendering according to the data provided in   '=data' attribute; * re-renders its contents each time '=data' changes on scope; * provides one-level grouping via using convex hulls and 'contains'   array on each node that contains sub-nodes; * exposes an API via controller which is used for customizing reusable   graph - i.e., specific node glyphs, sizes, affinities, callbacks   etc.  All the specific network code is placed into network topology controller, including:  * initial data transformations, i.e. marking different nodes with   different types (server/network/ext-network/router) which works in   conjunction with <config-topology-node> directive provided for graph   customization; * all the legacy code related to pop-ups creation and behavior (copied   from networktopology.js as is: what worked there still works here,   what was broken still is broken).  Most significant changes to the original curvature topology graph code:  * simplified data containers (no usage of function constructors,   'type' key on a an object for type-checking). * refactored group collapse & expand logic: more intensive use of   d3.js data joins, all the node hidden in a collapsed group are moved   to a separate $hiddenNodes array, and put back to $nodes once the   group is expanded - with d3.js handling re-rendering of this stuff   for us in a $drawGraph method. The same applies to redrawing the   links of hidden nodes. * refactored type-dispatched rendering of nodes in $drawGraph to make   them use type-specific attributes (in situation when specific types   and stylings are not known in advance) - by using   d3.selection.filter function.  This commit is just a first step in angularizing the topology graph. I merely claim that the current refactoring didn't break a lot of things, i.e. the things that worked before in network topology still work :). Among other features/fixes that are yet to be done are:  * add tests and documentation * ensure that the proposed level of directive abstraction works for at   least 2 more consumers (e.g., Workbook graph for Mistral Workbook   Builder, HOT Template graph for Hot Builder, possible stack topology   for an existing Heat stack).  Implements: blueprint curvature-network-topology Change-Id: I688f48eddcb8f22a240a94913e8879cb1332c388",integration,,,,,,
openstack%2Fhorizon~master~I688f48eddcb8f22a240a94913e8879cb1332c388,https://review.opendev.org/199063,Refactor network topology graph as an Angular directive,"Refactor network topology graph as an Angular directive  Separate network topology graph into reusable part and network-specific part. Reusable part which is implemented as <topology-graph> directive  * takes care of initial rendering according to the data provided in   '=data' attribute; * re-renders its contents each time '=data' changes on scope; * provides one-level grouping via using convex hulls and 'contains'   array on each node that contains sub-nodes; * exposes an API via controller which is used for customizing reusable   graph - i.e., specific node glyphs, sizes, affinities, callbacks   etc.  All the specific network code is placed into network topology controller, including:  * initial data transformations, i.e. marking different nodes with   different types (server/network/ext-network/router) which works in   conjunction with <config-topology-node> directive provided for graph   customization; * all the legacy code related to pop-ups creation and behavior (copied   from networktopology.js as is: what worked there still works here,   what was broken still is broken).  Most significant changes to the original curvature topology graph code:  * simplified data containers (no usage of function constructors,   'type' key on a an object for type-checking). * refactored group collapse & expand logic: more intensive use of   d3.js data joins, all the node hidden in a collapsed group are moved   to a separate $hiddenNodes array, and put back to $nodes once the   group is expanded - with d3.js handling re-rendering of this stuff   for us in a $drawGraph method. The same applies to redrawing the   links of hidden nodes. * refactored type-dispatched rendering of nodes in $drawGraph to make   them use type-specific attributes (in situation when specific types   and stylings are not known in advance) - by using   d3.selection.filter function.  This commit is just a first step in angularizing the topology graph. I merely claim that the current refactoring didn't break a lot of things, i.e. the things that worked before in network topology still work :). Among other features/fixes that are yet to be done are:  * add tests and documentation * ensure that the proposed level of directive abstraction works for at   least 2 more consumers (e.g., Workbook graph for Mistral Workbook   Builder, HOT Template graph for Hot Builder, possible stack topology   for an existing Heat stack).  Implements: blueprint curvature-network-topology Change-Id: I688f48eddcb8f22a240a94913e8879cb1332c388",testing,,,,,,
openstack%2Fhorizon~master~I688f48eddcb8f22a240a94913e8879cb1332c388,https://review.opendev.org/199063,Refactor network topology graph as an Angular directive,"Refactor network topology graph as an Angular directive  Separate network topology graph into reusable part and network-specific part. Reusable part which is implemented as <topology-graph> directive  * takes care of initial rendering according to the data provided in   '=data' attribute; * re-renders its contents each time '=data' changes on scope; * provides one-level grouping via using convex hulls and 'contains'   array on each node that contains sub-nodes; * exposes an API via controller which is used for customizing reusable   graph - i.e., specific node glyphs, sizes, affinities, callbacks   etc.  All the specific network code is placed into network topology controller, including:  * initial data transformations, i.e. marking different nodes with   different types (server/network/ext-network/router) which works in   conjunction with <config-topology-node> directive provided for graph   customization; * all the legacy code related to pop-ups creation and behavior (copied   from networktopology.js as is: what worked there still works here,   what was broken still is broken).  Most significant changes to the original curvature topology graph code:  * simplified data containers (no usage of function constructors,   'type' key on a an object for type-checking). * refactored group collapse & expand logic: more intensive use of   d3.js data joins, all the node hidden in a collapsed group are moved   to a separate $hiddenNodes array, and put back to $nodes once the   group is expanded - with d3.js handling re-rendering of this stuff   for us in a $drawGraph method. The same applies to redrawing the   links of hidden nodes. * refactored type-dispatched rendering of nodes in $drawGraph to make   them use type-specific attributes (in situation when specific types   and stylings are not known in advance) - by using   d3.selection.filter function.  This commit is just a first step in angularizing the topology graph. I merely claim that the current refactoring didn't break a lot of things, i.e. the things that worked before in network topology still work :). Among other features/fixes that are yet to be done are:  * add tests and documentation * ensure that the proposed level of directive abstraction works for at   least 2 more consumers (e.g., Workbook graph for Mistral Workbook   Builder, HOT Template graph for Hot Builder, possible stack topology   for an existing Heat stack).  Implements: blueprint curvature-network-topology Change-Id: I688f48eddcb8f22a240a94913e8879cb1332c388",quality,,,,,,
openstack%2Fhorizon~master~I688f48eddcb8f22a240a94913e8879cb1332c388,https://review.opendev.org/199063,Refactor network topology graph as an Angular directive,"Refactor network topology graph as an Angular directive  Separate network topology graph into reusable part and network-specific part. Reusable part which is implemented as <topology-graph> directive  * takes care of initial rendering according to the data provided in   '=data' attribute; * re-renders its contents each time '=data' changes on scope; * provides one-level grouping via using convex hulls and 'contains'   array on each node that contains sub-nodes; * exposes an API via controller which is used for customizing reusable   graph - i.e., specific node glyphs, sizes, affinities, callbacks   etc.  All the specific network code is placed into network topology controller, including:  * initial data transformations, i.e. marking different nodes with   different types (server/network/ext-network/router) which works in   conjunction with <config-topology-node> directive provided for graph   customization; * all the legacy code related to pop-ups creation and behavior (copied   from networktopology.js as is: what worked there still works here,   what was broken still is broken).  Most significant changes to the original curvature topology graph code:  * simplified data containers (no usage of function constructors,   'type' key on a an object for type-checking). * refactored group collapse & expand logic: more intensive use of   d3.js data joins, all the node hidden in a collapsed group are moved   to a separate $hiddenNodes array, and put back to $nodes once the   group is expanded - with d3.js handling re-rendering of this stuff   for us in a $drawGraph method. The same applies to redrawing the   links of hidden nodes. * refactored type-dispatched rendering of nodes in $drawGraph to make   them use type-specific attributes (in situation when specific types   and stylings are not known in advance) - by using   d3.selection.filter function.  This commit is just a first step in angularizing the topology graph. I merely claim that the current refactoring didn't break a lot of things, i.e. the things that worked before in network topology still work :). Among other features/fixes that are yet to be done are:  * add tests and documentation * ensure that the proposed level of directive abstraction works for at   least 2 more consumers (e.g., Workbook graph for Mistral Workbook   Builder, HOT Template graph for Hot Builder, possible stack topology   for an existing Heat stack).  Implements: blueprint curvature-network-topology Change-Id: I688f48eddcb8f22a240a94913e8879cb1332c388",quality,,,,,,
openstack%2Fhorizon~master~I688f48eddcb8f22a240a94913e8879cb1332c388,https://review.opendev.org/199063,Refactor network topology graph as an Angular directive,"Refactor network topology graph as an Angular directive  Separate network topology graph into reusable part and network-specific part. Reusable part which is implemented as <topology-graph> directive  * takes care of initial rendering according to the data provided in   '=data' attribute; * re-renders its contents each time '=data' changes on scope; * provides one-level grouping via using convex hulls and 'contains'   array on each node that contains sub-nodes; * exposes an API via controller which is used for customizing reusable   graph - i.e., specific node glyphs, sizes, affinities, callbacks   etc.  All the specific network code is placed into network topology controller, including:  * initial data transformations, i.e. marking different nodes with   different types (server/network/ext-network/router) which works in   conjunction with <config-topology-node> directive provided for graph   customization; * all the legacy code related to pop-ups creation and behavior (copied   from networktopology.js as is: what worked there still works here,   what was broken still is broken).  Most significant changes to the original curvature topology graph code:  * simplified data containers (no usage of function constructors,   'type' key on a an object for type-checking). * refactored group collapse & expand logic: more intensive use of   d3.js data joins, all the node hidden in a collapsed group are moved   to a separate $hiddenNodes array, and put back to $nodes once the   group is expanded - with d3.js handling re-rendering of this stuff   for us in a $drawGraph method. The same applies to redrawing the   links of hidden nodes. * refactored type-dispatched rendering of nodes in $drawGraph to make   them use type-specific attributes (in situation when specific types   and stylings are not known in advance) - by using   d3.selection.filter function.  This commit is just a first step in angularizing the topology graph. I merely claim that the current refactoring didn't break a lot of things, i.e. the things that worked before in network topology still work :). Among other features/fixes that are yet to be done are:  * add tests and documentation * ensure that the proposed level of directive abstraction works for at   least 2 more consumers (e.g., Workbook graph for Mistral Workbook   Builder, HOT Template graph for Hot Builder, possible stack topology   for an existing Heat stack).  Implements: blueprint curvature-network-topology Change-Id: I688f48eddcb8f22a240a94913e8879cb1332c388",objective,,,,,,
openstack%2Fopenstacksdk~master~If4d07b8d617f53be5a86c0c8733166e68e9d21ad,https://review.opendev.org/286755,[WIP] Refactor Resource to better serve Proxy,"[WIP] Refactor Resource to better serve Proxy  Through a series of attempts we haven't been able to sufficiently solve the issue of what were called ""path_args"" in the past, somewhat of a relic of the time before we had the Proxy layer. ""path_args"" made a lot of sense when there was only the Resource and the usage was almost entirely through the classmethods on it, back when command-line example scripts were the primary example of usage.  As things have grown in the year-plus since that time, we have bolted a great higher-level interface on a lower-level interface that was stuck in an older use-case. It was most recently a problem when we had resource.prop types that accepeted Resource types, which both there and elsewhere meant it became significantly harder, if not impossible, to have nested Resources. An example of this is how ServerInterface is a resource that depends on Server.  This approach strips Resource down to a public API of only create, get, update, delete, head, find, and list methods. Resource subclasses are still constructed in the same manner, though the naming of what were ""props"" is now slightly different, but more clear. Additionally, through that change comes a more clear user experience for URI parameters, aka, ""path_args"". This also paves the way for more clarity on query parameters which work in much the same way, although they haven't been fully explored.  As the changing of this class has pretty far reaching effects, it will exist temporarily in the ""resource2"" module. The first change will be to introduce the module itself in standalone, and then we will change each service independent of the others. Subsequent changes should not be too disruptive, mostly in the form of renaming things like resource.prop to resource.Body, and the like.  There is a fairly major side effects of the implementation of this class that is behaviorally different from the initial Resource implementation. Previously, any-and-all data sent into a Resource initializer would be tracked internally on the Resource instance and then sent to the server *even if it did not correspond to a resource.prop on the class*. Ultimately this would have become a problem as servers are becoming more strict about what they receive, but this implementation makes no allowance for so-called loose data to be entered. If there is no component attribute for an argument to be sent to the server, or one received from the server, it will not exist as an attribute of the Resource. Currently said data is just dropped entirely, but it could be logged, or perhaps a strict/loose mode could be engaged to warn or otherwise fail when unexpected data is entered. Ultimately, this behavior had to happen. In the near term it may mean that the SDK doesn't work exactly as it had in previous versions, but that will just mean updating Resource definitions to match what is truly expected or given by the server.  Change-Id: If4d07b8d617f53be5a86c0c8733166e68e9d21ad",integration,,,,,,
openstack%2Fopenstacksdk~master~If4d07b8d617f53be5a86c0c8733166e68e9d21ad,https://review.opendev.org/286755,[WIP] Refactor Resource to better serve Proxy,"[WIP] Refactor Resource to better serve Proxy  Through a series of attempts we haven't been able to sufficiently solve the issue of what were called ""path_args"" in the past, somewhat of a relic of the time before we had the Proxy layer. ""path_args"" made a lot of sense when there was only the Resource and the usage was almost entirely through the classmethods on it, back when command-line example scripts were the primary example of usage.  As things have grown in the year-plus since that time, we have bolted a great higher-level interface on a lower-level interface that was stuck in an older use-case. It was most recently a problem when we had resource.prop types that accepeted Resource types, which both there and elsewhere meant it became significantly harder, if not impossible, to have nested Resources. An example of this is how ServerInterface is a resource that depends on Server.  This approach strips Resource down to a public API of only create, get, update, delete, head, find, and list methods. Resource subclasses are still constructed in the same manner, though the naming of what were ""props"" is now slightly different, but more clear. Additionally, through that change comes a more clear user experience for URI parameters, aka, ""path_args"". This also paves the way for more clarity on query parameters which work in much the same way, although they haven't been fully explored.  As the changing of this class has pretty far reaching effects, it will exist temporarily in the ""resource2"" module. The first change will be to introduce the module itself in standalone, and then we will change each service independent of the others. Subsequent changes should not be too disruptive, mostly in the form of renaming things like resource.prop to resource.Body, and the like.  There is a fairly major side effects of the implementation of this class that is behaviorally different from the initial Resource implementation. Previously, any-and-all data sent into a Resource initializer would be tracked internally on the Resource instance and then sent to the server *even if it did not correspond to a resource.prop on the class*. Ultimately this would have become a problem as servers are becoming more strict about what they receive, but this implementation makes no allowance for so-called loose data to be entered. If there is no component attribute for an argument to be sent to the server, or one received from the server, it will not exist as an attribute of the Resource. Currently said data is just dropped entirely, but it could be logged, or perhaps a strict/loose mode could be engaged to warn or otherwise fail when unexpected data is entered. Ultimately, this behavior had to happen. In the near term it may mean that the SDK doesn't work exactly as it had in previous versions, but that will just mean updating Resource definitions to match what is truly expected or given by the server.  Change-Id: If4d07b8d617f53be5a86c0c8733166e68e9d21ad",objective,,,,,,
openstack%2Fglance-specs~master~I8d38cff5656878bbf573cc74900352ba4513e5c6,https://review.opendev.org/188050,Complete refactor to glance-store's API,Complete refactor to glance-store's API  blueprint refactor-glance-store  Change-Id: I8d38cff5656878bbf573cc74900352ba4513e5c6,integration,,,,,,
openstack%2Fnova~master~Ibd0542c86f573a397bbbe658fb4c5723f964ded8,https://review.opendev.org/258616,"HyperV: Refactor livemigr, avoiding getting disk paths remotely","HyperV: Refactor livemigr, avoiding getting disk paths remotely  During live migration, if passthrough disks are attached to instances, we need to create a planned VM, setting the right disk paths according to the destination host so that the volumes will still be accessible after the instance is migrated.  At the moment, we retrieve the disk paths remotely via WMI. Due to the fact that some WMI API methods are broken, for the FC implementation we had to use the hbaapi.dll functions directly, using ctypes.  As this can't work remotely, this patch slightly changes the live migration workflow. The planned VM is created during the pre-livemigration step on the destination host, updating the virtual disk resources.  Change-Id: Ibd0542c86f573a397bbbe658fb4c5723f964ded8 Partially-implements: blueprint hyperv-fibre-channel",integration,,,,,,
openstack%2Fnova~master~Ibd0542c86f573a397bbbe658fb4c5723f964ded8,https://review.opendev.org/258616,"HyperV: Refactor livemigr, avoiding getting disk paths remotely","HyperV: Refactor livemigr, avoiding getting disk paths remotely  During live migration, if passthrough disks are attached to instances, we need to create a planned VM, setting the right disk paths according to the destination host so that the volumes will still be accessible after the instance is migrated.  At the moment, we retrieve the disk paths remotely via WMI. Due to the fact that some WMI API methods are broken, for the FC implementation we had to use the hbaapi.dll functions directly, using ctypes.  As this can't work remotely, this patch slightly changes the live migration workflow. The planned VM is created during the pre-livemigration step on the destination host, updating the virtual disk resources.  Change-Id: Ibd0542c86f573a397bbbe658fb4c5723f964ded8 Partially-implements: blueprint hyperv-fibre-channel",objective,,,,,,
openstack%2Fheat~master~Iecc73ba56565e9a3cc486849ea460924419b42b7,https://review.opendev.org/250624,Refactor format_stack_output in engine api,"Refactor format_stack_output in engine api  Unify format of resulting dict in format_stack_output: currently if we don't resolve_data, output_value key isn't added to resulting dict, what can occurres KeyError. This patch unify format of dict with or without resolving data. Also, refactor format_stack_outputs - if we don't want resolve data, method returns list of dicts without output_value key.  implements bp api-call-output  Change-Id: Iecc73ba56565e9a3cc486849ea460924419b42b7",integration,,,,,,
openstack%2Fheat~master~Iecc73ba56565e9a3cc486849ea460924419b42b7,https://review.opendev.org/250624,Refactor format_stack_output in engine api,"Refactor format_stack_output in engine api  Unify format of resulting dict in format_stack_output: currently if we don't resolve_data, output_value key isn't added to resulting dict, what can occurres KeyError. This patch unify format of dict with or without resolving data. Also, refactor format_stack_outputs - if we don't want resolve data, method returns list of dicts without output_value key.  implements bp api-call-output  Change-Id: Iecc73ba56565e9a3cc486849ea460924419b42b7",objective,,,,,,
openstack%2Fnova~master~I1ea398473947a0d9afea08c08fea09dc09afea09,https://review.opendev.org/214527,Hyper-V: refactors utilsfactory,"Hyper-V: refactors utilsfactory  The Hyper-V API can change from a version to another (e.g. new features), requiring a new Utils class to be added for specific versions.  Refactors utilsfactory module. In this way, a new utils class can be added without adding a new parameter when retrieving the suitable class for windows version.  Change-Id: I1ea398473947a0d9afea08c08fea09dc09afea09",integration,,,,,,
openstack%2Fnova~master~I1ea398473947a0d9afea08c08fea09dc09afea09,https://review.opendev.org/214527,Hyper-V: refactors utilsfactory,"Hyper-V: refactors utilsfactory  The Hyper-V API can change from a version to another (e.g. new features), requiring a new Utils class to be added for specific versions.  Refactors utilsfactory module. In this way, a new utils class can be added without adding a new parameter when retrieving the suitable class for windows version.  Change-Id: I1ea398473947a0d9afea08c08fea09dc09afea09",objective,,,,,,
starlingx%2Finteg~master~Id5342624948024ce2891e32ee6648c910a6e7391,https://review.opendev.org/659820,ceph: refactor mgr-restful-plugin state machine,"ceph: refactor mgr-restful-plugin state machine  Replace mgr-restful-plugin service monitoring based on state machine with explicit transitions with a function that goes through the following steps: - wait for Ceph cluster to become available - configure and start ceph-mgr - configure and enable restful plugin - send periodic requests to REST API  Procedure to recover from errors: restart ceph-mgr, update certificates, run again through configuration steps, wait for Ceph cluster.  mgr-restful-plugin components:  1. init script: parse command line parameters, start service    monitoring if not already running, request status via    control socket, stop service monitoring.  2. service monitoring: create process running ceph-mgr    confguration steps, report status based on current    rest api availability and init/recovery procedure,    stop ceph-mgr and helper process  3. monitoring helper: successively run commands to configure    and start ceph-mgr and restful plugin, send periodic requests    to ceph REST API, update service monitoring with current    failure status (no response from REST API or ceph-mgr    restarts).  Change-Id: Id5342624948024ce2891e32ee6648c910a6e7391 Closes-Bug: 1828024",integration,,,,,,
starlingx%2Finteg~master~Id5342624948024ce2891e32ee6648c910a6e7391,https://review.opendev.org/659820,ceph: refactor mgr-restful-plugin state machine,"ceph: refactor mgr-restful-plugin state machine  Replace mgr-restful-plugin service monitoring based on state machine with explicit transitions with a function that goes through the following steps: - wait for Ceph cluster to become available - configure and start ceph-mgr - configure and enable restful plugin - send periodic requests to REST API  Procedure to recover from errors: restart ceph-mgr, update certificates, run again through configuration steps, wait for Ceph cluster.  mgr-restful-plugin components:  1. init script: parse command line parameters, start service    monitoring if not already running, request status via    control socket, stop service monitoring.  2. service monitoring: create process running ceph-mgr    confguration steps, report status based on current    rest api availability and init/recovery procedure,    stop ceph-mgr and helper process  3. monitoring helper: successively run commands to configure    and start ceph-mgr and restful plugin, send periodic requests    to ceph REST API, update service monitoring with current    failure status (no response from REST API or ceph-mgr    restarts).  Change-Id: Id5342624948024ce2891e32ee6648c910a6e7391 Closes-Bug: 1828024",objective,,,,,,
openstack%2Fnova~master~Id916ccd21542c90bf80caec246dfdba72a9c58b8,https://review.opendev.org/668756,Refactor HostAPI.service_update,"Refactor HostAPI.service_update  Change If32bca070185937ef83f689b7163d965a89ec10a is going to reflect a compute service's disabled status with the COMPUTE_STATUS_DISABLED trait in placement. This change does some prep work so that a common method in the HostAPI (service_update) can be used to abstract that for pre-2.53 and post-2.53 service update APIs.  In the pre-2.53 case, the Service is retrieved using the host and binary which requires looking up the HostMapping. In the post-2.53 case, we already have the Service object and just need to save the changes.  Part of blueprint pre-filter-disabled-computes  Change-Id: Id916ccd21542c90bf80caec246dfdba72a9c58b8",integration,,,,,,
openstack%2Fnova~master~Id916ccd21542c90bf80caec246dfdba72a9c58b8,https://review.opendev.org/668756,Refactor HostAPI.service_update,"Refactor HostAPI.service_update  Change If32bca070185937ef83f689b7163d965a89ec10a is going to reflect a compute service's disabled status with the COMPUTE_STATUS_DISABLED trait in placement. This change does some prep work so that a common method in the HostAPI (service_update) can be used to abstract that for pre-2.53 and post-2.53 service update APIs.  In the pre-2.53 case, the Service is retrieved using the host and binary which requires looking up the HostMapping. In the post-2.53 case, we already have the Service object and just need to save the changes.  Part of blueprint pre-filter-disabled-computes  Change-Id: Id916ccd21542c90bf80caec246dfdba72a9c58b8",objective,,,,,,
openstack%2Fzun~master~I34ce08f2e1a93fbb9c15055f1e31b17454531b5c,https://review.opendev.org/652307,Refactor the code of API controller/view,"Refactor the code of API controller/view  Extract view out of controllers: ContainerAction, ContainerActionEvent, and Service. This makes improve the modularity and consistency of the code.  Change-Id: I34ce08f2e1a93fbb9c15055f1e31b17454531b5c",quality,,,,,,
openstack%2Fzun~master~I34ce08f2e1a93fbb9c15055f1e31b17454531b5c,https://review.opendev.org/652307,Refactor the code of API controller/view,"Refactor the code of API controller/view  Extract view out of controllers: ContainerAction, ContainerActionEvent, and Service. This makes improve the modularity and consistency of the code.  Change-Id: I34ce08f2e1a93fbb9c15055f1e31b17454531b5c",objective,,,,,,
starlingx%2Fdocs~master~I0442e948d5d9a41add9eb3bdde8882c157a8f752,https://review.opendev.org/648467,stx-docs refactoring for new doc structure,"stx-docs refactoring for new doc structure  Changes included updating the StarlingX docs landing page to conform to a new list of available documents as follows:   * StarlingX Introduction  * Deployment Guides  * Installation Guides  * Developer resources  * Operation Guides  * Project Specifications  * REST API Reference  * Release Notes  * Contribute  So-called ""dead-end"" links have an explanation of content coming.  Any destination associated with an existing story ID have the link to the story for reference.  The existence of a ""current"" and ""latest"" Developer Guides resulted in the top-level list of doc resources including both the ""Developer Guides"" and ""Developer Resources"" bullets.  Ideally, the Developer Guides would be included as part of the ""Developer Resources"" area.  For ""latest"" they are.  However, for ""current"" I left them alone since the 2018.10 release is out there.  This organization can settle out as more releases launch.  Finally, I did not focus on the writing aspect for this PR. That part can be cleaned up going forward.  Change-Id: I0442e948d5d9a41add9eb3bdde8882c157a8f752 Signed-off-by: Scott Rifenbark <srifenbark@gmail.com>",objective,,,,,,
airship%2Farmada~master~Iddd45f9f979307f54ad5bd54c3ee005547dd0909,https://review.opendev.org/634494,Refactor tiller commands to handle methods,Refactor tiller commands to handle methods  This is a refactor to any methods in the api and cli to move tiller operations to a separate handler function to make them uniform with the rest of the code  Change-Id: Iddd45f9f979307f54ad5bd54c3ee005547dd0909,integration,,,,,,
airship%2Farmada~master~Iddd45f9f979307f54ad5bd54c3ee005547dd0909,https://review.opendev.org/634494,Refactor tiller commands to handle methods,Refactor tiller commands to handle methods  This is a refactor to any methods in the api and cli to move tiller operations to a separate handler function to make them uniform with the rest of the code  Change-Id: Iddd45f9f979307f54ad5bd54c3ee005547dd0909,objective,,,,,,
openstack%2Fpatrole~master~I1ee95e3051d7bd27f73df818fa2b64caa07c1ed2,https://review.opendev.org/634575,Refactoring RbacUtils part 2 api tests,Refactoring RbacUtils part 2 api tests  The override_role function no longer needs test_obj parameter. Also removing self.rbac_utils variable.  Story: 2002604 Task: 22223  Change-Id: I1ee95e3051d7bd27f73df818fa2b64caa07c1ed2,integration,,,,,,
openstack%2Fpatrole~master~I1ee95e3051d7bd27f73df818fa2b64caa07c1ed2,https://review.opendev.org/634575,Refactoring RbacUtils part 2 api tests,Refactoring RbacUtils part 2 api tests  The override_role function no longer needs test_obj parameter. Also removing self.rbac_utils variable.  Story: 2002604 Task: 22223  Change-Id: I1ee95e3051d7bd27f73df818fa2b64caa07c1ed2,objective,,,,,,
openstack%2Fmonasca-ceilometer~stable%2Frocky~I4a407e0a5e2ef1518bfe76f5f583d6572d428b2f,https://review.opendev.org/637027,Refactor out Ceilometer V2 API related code,Refactor out Ceilometer V2 API related code  As of Queens the Ceilometer V2 API has been removed.  Storage driver related code in monasca-ceilometer can thus be removed.  Backport some refactoring that came up in creating https://review.openstack.org/#/c/562400/ Realized some class names could be clearer and fit better with Ceilometer.  Update test-requirements.txt with Rocky release of python-monascaclient.  Also include more license info.  Specify py35 instead of py34 in tox.ini (gates already using py35).  Include updates to devstack configuration to keep up with master ceilometer.  These include adding values for the [monasca] section in ceilometer.conf and refreshing setup.cfg as well as updating how the connection url to Monasca API is configured.  Also include some testing notes in devstack/README.md  (cherry picked from commit 8b0fb6d0485d1e446a2a4672286c8254e2a9aef9)  Change-Id: I4a407e0a5e2ef1518bfe76f5f583d6572d428b2f,integration,,,,,,
openstack%2Fmonasca-ceilometer~stable%2Frocky~I4a407e0a5e2ef1518bfe76f5f583d6572d428b2f,https://review.opendev.org/637027,Refactor out Ceilometer V2 API related code,Refactor out Ceilometer V2 API related code  As of Queens the Ceilometer V2 API has been removed.  Storage driver related code in monasca-ceilometer can thus be removed.  Backport some refactoring that came up in creating https://review.openstack.org/#/c/562400/ Realized some class names could be clearer and fit better with Ceilometer.  Update test-requirements.txt with Rocky release of python-monascaclient.  Also include more license info.  Specify py35 instead of py34 in tox.ini (gates already using py35).  Include updates to devstack configuration to keep up with master ceilometer.  These include adding values for the [monasca] section in ceilometer.conf and refreshing setup.cfg as well as updating how the connection url to Monasca API is configured.  Also include some testing notes in devstack/README.md  (cherry picked from commit 8b0fb6d0485d1e446a2a4672286c8254e2a9aef9)  Change-Id: I4a407e0a5e2ef1518bfe76f5f583d6572d428b2f,objective,,,,,,
airship%2Fpromenade~master~I33cfe80ee8e29cd79e479a7985e3c098a2288fda,https://review.opendev.org/622586,Refactor API server,"[WIP] Refactor API server  This change accomplishes 2 primary things: 1. It generalizes work to enable the EventRateLimit admission plugin. 2. It restructures the anchor so that during an upgrade an ""old"" anchor    does not try to coordinate the injection of ""new"" data from    configmaps/secrets.  It also includes these ancillary changes: * Clean up apiserver argument specification in the chart. * De-duplicate and realign apiserver arguments in bootstrapping templates.  It has the side effects of: * Adding a new field, "".apiserver.arguments"" to the Genesis config,   which will be the preferred way to configure bootstrapping apiservers   going forward (in lieu of command_prefix).  Change-Id: I33cfe80ee8e29cd79e479a7985e3c098a2288fda",integration,,,,,,
airship%2Fpromenade~master~I33cfe80ee8e29cd79e479a7985e3c098a2288fda,https://review.opendev.org/622586,Refactor API server,"[WIP] Refactor API server  This change accomplishes 2 primary things: 1. It generalizes work to enable the EventRateLimit admission plugin. 2. It restructures the anchor so that during an upgrade an ""old"" anchor    does not try to coordinate the injection of ""new"" data from    configmaps/secrets.  It also includes these ancillary changes: * Clean up apiserver argument specification in the chart. * De-duplicate and realign apiserver arguments in bootstrapping templates.  It has the side effects of: * Adding a new field, "".apiserver.arguments"" to the Genesis config,   which will be the preferred way to configure bootstrapping apiservers   going forward (in lieu of command_prefix).  Change-Id: I33cfe80ee8e29cd79e479a7985e3c098a2288fda",objective,,,,,,
openstack%2Fopenstacksdk~master~I7368c48baf414af325dad2b0579b094c803321bf,https://review.opendev.org/618993,Refactor tag support,"Refactor tag support  align different services to comply the same `tag` standard: https://specs.openstack.org/openstack/api-wg/guidelines/tags.html Currently not all services support tags, but we can prepare SDK for  that. There are some changes/issues to know: - image.add_tag and image.remove_tag return the image entity - server.query_params for tags are renamed to be compliant with rest of  services (the ones from network are reused) - cinder does support only setting of the tags, but not getting (API  limitation)  As of now the only services with tagging API available: - compute.server - network.{net, subnet, ip, port, qos_policy, router, sg, sg_rule,  subnet_pool, trunk} - image.image  Change-Id: I7368c48baf414af325dad2b0579b094c803321bf",integration,,,,,,
openstack%2Fopenstacksdk~master~I7368c48baf414af325dad2b0579b094c803321bf,https://review.opendev.org/618993,Refactor tag support,"Refactor tag support  align different services to comply the same `tag` standard: https://specs.openstack.org/openstack/api-wg/guidelines/tags.html Currently not all services support tags, but we can prepare SDK for  that. There are some changes/issues to know: - image.add_tag and image.remove_tag return the image entity - server.query_params for tags are renamed to be compliant with rest of  services (the ones from network are reused) - cinder does support only setting of the tags, but not getting (API  limitation)  As of now the only services with tagging API available: - compute.server - network.{net, subnet, ip, port, qos_policy, router, sg, sg_rule,  subnet_pool, trunk} - image.image  Change-Id: I7368c48baf414af325dad2b0579b094c803321bf",objective,,,,,,
openstack%2Fkeystone~master~I5a6194fb50ee49fed01bea960507d9b227c9129e,https://review.opendev.org/613182,Refactor flask domain config resources,"Refactor flask domain config resources  The domain config flask resource classes all call the same config_api with the same arguements that are provided if present.  This change removes the original duplication that was present to handle this, instead replacing it with subclasses for each API route to be handled with flask.  Change-Id: I5a6194fb50ee49fed01bea960507d9b227c9129e",integration,,,,,,
openstack%2Fkeystone~master~I5a6194fb50ee49fed01bea960507d9b227c9129e,https://review.opendev.org/613182,Refactor flask domain config resources,"Refactor flask domain config resources  The domain config flask resource classes all call the same config_api with the same arguements that are provided if present.  This change removes the original duplication that was present to handle this, instead replacing it with subclasses for each API route to be handled with flask.  Change-Id: I5a6194fb50ee49fed01bea960507d9b227c9129e",objective,,,,,,
openstack%2Ffreezer-api~master~I6ac3190bd44f39b20a7196699c4532fc3bcc823b,https://review.opendev.org/615373,Refactor sql driver api,"[WIP]Refactor sql driver api  sqlalchemy api implementing is too complex, the patch try to simpfy it  Change-Id: I6ac3190bd44f39b20a7196699c4532fc3bcc823b",integration,,,,,,
openstack%2Ffreezer-api~master~I6ac3190bd44f39b20a7196699c4532fc3bcc823b,https://review.opendev.org/615373,Refactor sql driver api,"[WIP]Refactor sql driver api  sqlalchemy api implementing is too complex, the patch try to simpfy it  Change-Id: I6ac3190bd44f39b20a7196699c4532fc3bcc823b",quality,,,,,,
openstack%2Fhorizon~master~I6db214f849d13c4c71e176f00113e889ff2d2997,https://review.opendev.org/611819,Refactor app response for api request '/api/keystone/svc-catalog',Refactor app response for api request '/api/keystone/svc-catalog'  Add filtration for service catalog. Now all endpoints that are not public will not be seen.  Change-Id: I6db214f849d13c4c71e176f00113e889ff2d2997,integration,,,,,,
openstack%2Fhorizon~master~I6db214f849d13c4c71e176f00113e889ff2d2997,https://review.opendev.org/611819,Refactor app response for api request '/api/keystone/svc-catalog',Refactor app response for api request '/api/keystone/svc-catalog'  Add filtration for service catalog. Now all endpoints that are not public will not be seen.  Change-Id: I6db214f849d13c4c71e176f00113e889ff2d2997,objective,,,,,,
openstack%2Fironic~master~I0fe6a6bf8757f3fa99308f66f082f899680ad33c,https://review.opendev.org/611656,Refactor API code for checking microversions,"Refactor API code for checking microversions  Copy-paste, copy-paste everywhere! This change reduces the number of places where essentially the same checks were applied in the API code.  Change-Id: I0fe6a6bf8757f3fa99308f66f082f899680ad33c",integration,,,,,,
openstack%2Fironic~master~I0fe6a6bf8757f3fa99308f66f082f899680ad33c,https://review.opendev.org/611656,Refactor API code for checking microversions,"Refactor API code for checking microversions  Copy-paste, copy-paste everywhere! This change reduces the number of places where essentially the same checks were applied in the API code.  Change-Id: I0fe6a6bf8757f3fa99308f66f082f899680ad33c",objective,,,,,,
airship%2Fshipyard~master~I3c86fca6bae1a5a2f74963a87b2198c1705cf3a6,https://review.opendev.org/608083,Refactor validations retrieval for performance,"Refactor validations retrieval for performance  The goal of this commit is to reduce the average time spent retrieving validations from Deckhand. Currently, wait times when committing configdocs can be significant due to unnecessary API calls. This change reduces the number of API calls during this process by utilizing the `/revisions/{{revision_id}}/validations/detail` endpoint exposed by Deckhand. During testing, this introduced a 71% decrease in cumulative time for committing configdocs. Note, this commit does not introduce usage of the official Deckhand client, which will be addressed in a future change.  Change-Id: I3c86fca6bae1a5a2f74963a87b2198c1705cf3a6",integration,,,,,,
airship%2Fshipyard~master~I3c86fca6bae1a5a2f74963a87b2198c1705cf3a6,https://review.opendev.org/608083,Refactor validations retrieval for performance,"Refactor validations retrieval for performance  The goal of this commit is to reduce the average time spent retrieving validations from Deckhand. Currently, wait times when committing configdocs can be significant due to unnecessary API calls. This change reduces the number of API calls during this process by utilizing the `/revisions/{{revision_id}}/validations/detail` endpoint exposed by Deckhand. During testing, this introduced a 71% decrease in cumulative time for committing configdocs. Note, this commit does not introduce usage of the official Deckhand client, which will be addressed in a future change.  Change-Id: I3c86fca6bae1a5a2f74963a87b2198c1705cf3a6",objective,,,,,,
openstack%2Fmonasca-ceilometer~master~I9291dfc06d67f18109a0ff66184bd418c6361977,https://review.opendev.org/585053,Refactor out Ceilometer V2 API related code,Refactor out Ceilometer V2 API related code  As of Queens the Ceilometer V2 API has been removed.  Storage driver related code in monasca-ceilometer can thus be removed.  Backport some refactoring that came up in creating https://review.openstack.org/#/c/562400/ Realized some class names could be clearer and fit better with Ceilometer.  Update test-requirements.txt with Rocky release of python-monascaclient.  Also include more license info.  Specify py35 instead of py34 in tox.ini (gates already using py35).  Change-Id: I9291dfc06d67f18109a0ff66184bd418c6361977,integration,,,,,,
openstack%2Fmonasca-ceilometer~master~I9291dfc06d67f18109a0ff66184bd418c6361977,https://review.opendev.org/585053,Refactor out Ceilometer V2 API related code,Refactor out Ceilometer V2 API related code  As of Queens the Ceilometer V2 API has been removed.  Storage driver related code in monasca-ceilometer can thus be removed.  Backport some refactoring that came up in creating https://review.openstack.org/#/c/562400/ Realized some class names could be clearer and fit better with Ceilometer.  Update test-requirements.txt with Rocky release of python-monascaclient.  Also include more license info.  Specify py35 instead of py34 in tox.ini (gates already using py35).  Change-Id: I9291dfc06d67f18109a0ff66184bd418c6361977,objective,,,,,,
openstack%2Fmurano~master~Ia992679c08f18a895185b1cecbb480e9879ba1d2,https://review.opendev.org/586459,Refactor murano Installation Guide,Refactor murano Installation Guide  1.remove the duplicate install murano api and engine 2.add install from source code  Change-Id: Ia992679c08f18a895185b1cecbb480e9879ba1d2 Closes-Bug: #1762013,integration,,,,,,
openstack%2Fmurano~master~Ia992679c08f18a895185b1cecbb480e9879ba1d2,https://review.opendev.org/586459,Refactor murano Installation Guide,Refactor murano Installation Guide  1.remove the duplicate install murano api and engine 2.add install from source code  Change-Id: Ia992679c08f18a895185b1cecbb480e9879ba1d2 Closes-Bug: #1762013,quality,,,,,,
openstack%2Fwatcher~master~I5353e4aa58d1675d8afb94bea35d9b953514129a,https://review.opendev.org/559899,Refactor watcher API for Action Plan Start,[WIP] Refactor watcher API for Action Plan Start  Currently the REST API to start action plan in watcher is which is same as for update action plan.  PATCH /v1/action_plans  https://docs.openstack.org/watcher/latest/api/v1.html  we need to make it easy to understand  POST /v1/action_plans/action the action should be start in above case.  Change-Id: I5353e4aa58d1675d8afb94bea35d9b953514129a Closes-Bug: #1756274,integration,,,,,,
openstack%2Fkeystone~master~I5e78f8aafec74e3edb952ab92947503c9be38b91,https://review.opendev.org/544528,Refactor token cache invalidation callbacks,"Refactor token cache invalidation callbacks  There are several cases where we need to invalidate the token cache. Notifications are used to do this and the token provider API uses callbacks to subscribe to those notifications. This commit makes them all use a single callback function instead of each defining their own just to do the same thing. A subsequent patch will refactor the term ""persistence"" from the notification names used across keystone.  Change-Id: I5e78f8aafec74e3edb952ab92947503c9be38b91",integration,,,,,,
openstack%2Fkeystone~master~I5e78f8aafec74e3edb952ab92947503c9be38b91,https://review.opendev.org/544528,Refactor token cache invalidation callbacks,"Refactor token cache invalidation callbacks  There are several cases where we need to invalidate the token cache. Notifications are used to do this and the token provider API uses callbacks to subscribe to those notifications. This commit makes them all use a single callback function instead of each defining their own just to do the same thing. A subsequent patch will refactor the term ""persistence"" from the notification names used across keystone.  Change-Id: I5e78f8aafec74e3edb952ab92947503c9be38b91",objective,,,,,,
openstack%2Fhorizon~master~Ie7e5242cc885b6eb0316f695453b0d2844360d67,https://review.opendev.org/540462,Refactor the create port form to workflow,"Refactor the create port form to workflow  The neutron API allows the users to specify security group(s) when creating a port [1], but at the moment the Horizon can only modify the security group of a port by 'Edit Port' row action.  As with edit port workflow, refactoring the creation of port form to workflow is to support the creation of ports as well as the assignment of security groups. Since the change may be more, this patch only contains reconstruct the form, support the security groups will be submitted in another patch.  [1] https://developer.openstack.org/api-ref/network/v2/index.html#create-port  Change-Id: Ie7e5242cc885b6eb0316f695453b0d2844360d67 Related-bug: #1746985",integration,,,,,,
openstack%2Fhorizon~master~Ie7e5242cc885b6eb0316f695453b0d2844360d67,https://review.opendev.org/540462,Refactor the create port form to workflow,"Refactor the create port form to workflow  The neutron API allows the users to specify security group(s) when creating a port [1], but at the moment the Horizon can only modify the security group of a port by 'Edit Port' row action.  As with edit port workflow, refactoring the creation of port form to workflow is to support the creation of ports as well as the assignment of security groups. Since the change may be more, this patch only contains reconstruct the form, support the security groups will be submitted in another patch.  [1] https://developer.openstack.org/api-ref/network/v2/index.html#create-port  Change-Id: Ie7e5242cc885b6eb0316f695453b0d2844360d67 Related-bug: #1746985",objective,,,,,,
openstack%2Fswift~master~I4a65f50828b4e90ff6be2c3b343b295e442cc59e,https://review.opendev.org/729091,prefactor: Pass s3api Config to S3Requests,prefactor: Pass s3api Config to S3Requests  That way we don't have to plumb in some half-dozen options one-by-one.  Change-Id: I4a65f50828b4e90ff6be2c3b343b295e442cc59e,integration,,,,,,
recordsansible%2Fara~feature%2F1.0~Ide2998257ead4aa61fcfa6280ab2ad08c0362872,https://review.opendev.org/524923,Refactor API unit tests to leverage pytest fixtures,WIP: Refactor API tests with fixtures  Change-Id: Ide2998257ead4aa61fcfa6280ab2ad08c0362872,integration,,,,,,
recordsansible%2Fara~feature%2F1.0~Ide2998257ead4aa61fcfa6280ab2ad08c0362872,https://review.opendev.org/524923,Refactor API unit tests to leverage pytest fixtures,WIP: Refactor API tests with fixtures  Change-Id: Ide2998257ead4aa61fcfa6280ab2ad08c0362872,testing,,,,,,
openstack%2Ftripleo-ui~master~I4326315bc8c56b74710ff19614cf826bfe6fbdba,https://review.opendev.org/506662,Refactor Ironic and Ironic Inspector services,"Refactor Ironic and Ironic Inspector services  Turn Ironic and Ironic Inspector API services functions into thunks so the store and dispatch is easily passed, this allows to use auth selectors for service url and auth token id  Change-Id: I4326315bc8c56b74710ff19614cf826bfe6fbdba",integration,,,,,,
openstack%2Ftripleo-ui~master~I4326315bc8c56b74710ff19614cf826bfe6fbdba,https://review.opendev.org/506662,Refactor Ironic and Ironic Inspector services,"Refactor Ironic and Ironic Inspector services  Turn Ironic and Ironic Inspector API services functions into thunks so the store and dispatch is easily passed, this allows to use auth selectors for service url and auth token id  Change-Id: I4326315bc8c56b74710ff19614cf826bfe6fbdba",objective,,,,,,
openstack%2Fzun~master~Icfb9fb25c3ce763a44e83209502da935c63d77a4,https://review.opendev.org/510782,Refactor the code about container force delete in api,"Refactor the code about container force delete in api  In [1], we split two method about delete to disallow non-admin user to force delete containers. It creates a lot of duplicated code, which will be a burden for further work. This patch will try to refactor it.  [1] https://review.openstack.org/#/c/498767/  Change-Id: Icfb9fb25c3ce763a44e83209502da935c63d77a4",integration,,,,,,
openstack%2Fzun~master~Icfb9fb25c3ce763a44e83209502da935c63d77a4,https://review.opendev.org/510782,Refactor the code about container force delete in api,"Refactor the code about container force delete in api  In [1], we split two method about delete to disallow non-admin user to force delete containers. It creates a lot of duplicated code, which will be a burden for further work. This patch will try to refactor it.  [1] https://review.openstack.org/#/c/498767/  Change-Id: Icfb9fb25c3ce763a44e83209502da935c63d77a4",objective,,,,,,
openstack%2Fnova~master~I78f9c6fa561dbc5bf002c396d7de34e21f7cbca2,https://review.opendev.org/765997,Refactoring of functional.regression.test_bug_1702454,Refactoring of functional.regression.test_bug_1702454  Removed direct post api call Added _evacuate_server helper  Change-Id: I78f9c6fa561dbc5bf002c396d7de34e21f7cbca2,integration,,,,,,
openstack%2Fnova~master~I78f9c6fa561dbc5bf002c396d7de34e21f7cbca2,https://review.opendev.org/765997,Refactoring of functional.regression.test_bug_1702454,Refactoring of functional.regression.test_bug_1702454  Removed direct post api call Added _evacuate_server helper  Change-Id: I78f9c6fa561dbc5bf002c396d7de34e21f7cbca2,objective,,,,,,
openstack%2Fglance-specs~master~I065ecfdff935b6c5508b9a3004d5a9c2575c4bf6,https://review.opendev.org/507908,Add spec-lite for scrubber refactor,Add spec-lite for scrubber refactor  This was discussed at the PTG as part of the session on removing the Images API v1: https://etherpad.openstack.org/p/glance-queens-ptg-remove-v1-API  Change-Id: I065ecfdff935b6c5508b9a3004d5a9c2575c4bf6,integration,,,,,,
openstack%2Fglance-specs~master~I065ecfdff935b6c5508b9a3004d5a9c2575c4bf6,https://review.opendev.org/507908,Add spec-lite for scrubber refactor,Add spec-lite for scrubber refactor  This was discussed at the PTG as part of the session on removing the Images API v1: https://etherpad.openstack.org/p/glance-queens-ptg-remove-v1-API  Change-Id: I065ecfdff935b6c5508b9a3004d5a9c2575c4bf6,objective,,,,,,
x%2Fvmware-nsx~stable%2Fpike~I060b2c97fb83ef4044fa330472ef3e4792e68d95,https://review.opendev.org/500921,NSXv3: Refactor LBaaS L7 based on API change,"NSXv3: Refactor LBaaS L7 based on API change  NSXv3 backend made a few API changes, and introduced a new param match_type to map l7 rule compare_type. This patch refactors l7 code for these changes in backend.  Change-Id: I060b2c97fb83ef4044fa330472ef3e4792e68d95 (cherry picked from commit 0b62d702c30dfd3ba1d6a5e5d742ca74f97c4bb3)",integration,,,,,,
x%2Fvmware-nsx~stable%2Fpike~I060b2c97fb83ef4044fa330472ef3e4792e68d95,https://review.opendev.org/500921,NSXv3: Refactor LBaaS L7 based on API change,"NSXv3: Refactor LBaaS L7 based on API change  NSXv3 backend made a few API changes, and introduced a new param match_type to map l7 rule compare_type. This patch refactors l7 code for these changes in backend.  Change-Id: I060b2c97fb83ef4044fa330472ef3e4792e68d95 (cherry picked from commit 0b62d702c30dfd3ba1d6a5e5d742ca74f97c4bb3)",objective,,,,,,
x%2Fvmware-nsx~master~I060b2c97fb83ef4044fa330472ef3e4792e68d95,https://review.opendev.org/497996,NSXv3: Refactor LBaaS L7 based on API change,"NSXv3: Refactor LBaaS L7 based on API change  NSXv3 backend made a few API changes, and introduced a new param match_type to map l7 rule compare_type. This patch refactors l7 code for these changes in backend.  Change-Id: I060b2c97fb83ef4044fa330472ef3e4792e68d95",integration,,,,,,
x%2Fvmware-nsx~master~I060b2c97fb83ef4044fa330472ef3e4792e68d95,https://review.opendev.org/497996,NSXv3: Refactor LBaaS L7 based on API change,"NSXv3: Refactor LBaaS L7 based on API change  NSXv3 backend made a few API changes, and introduced a new param match_type to map l7 rule compare_type. This patch refactors l7 code for these changes in backend.  Change-Id: I060b2c97fb83ef4044fa330472ef3e4792e68d95",objective,,,,,,
openstack%2Fzun-ui~master~I6e54981057bad877317ca19d049b8b071394f556,https://review.opendev.org/499925,Update and refactor zunclient,"Update and refactor zunclient  I do two things on this patch: [1] update params in zunclient [2] refactor params in zunclient by usingi memoized_with_request  python-zunclient v1 api refactor client and remove or rename parameters: removed zun_url by using endpoint_override instead input_auth_token was renamed to auth_token and zun-ui was using the old params, listing images and containers on horizon will raise error like: MissingRequiredOptions: Auth plugin requires parameters which were not given: auth_url  Change-Id: I6e54981057bad877317ca19d049b8b071394f556 Depends-On: Ie9be389495e2f13454f1f8d1c1d66b22d813a9ec",integration,,,,,,
openstack%2Fzun-ui~master~I6e54981057bad877317ca19d049b8b071394f556,https://review.opendev.org/499925,Update and refactor zunclient,"Update and refactor zunclient  I do two things on this patch: [1] update params in zunclient [2] refactor params in zunclient by usingi memoized_with_request  python-zunclient v1 api refactor client and remove or rename parameters: removed zun_url by using endpoint_override instead input_auth_token was renamed to auth_token and zun-ui was using the old params, listing images and containers on horizon will raise error like: MissingRequiredOptions: Auth plugin requires parameters which were not given: auth_url  Change-Id: I6e54981057bad877317ca19d049b8b071394f556 Depends-On: Ie9be389495e2f13454f1f8d1c1d66b22d813a9ec",objective,,,,,,
opendev%2Fsystem-config~master~Ibda65d41c17416eb28eb326e2cdd28c90153f108,https://review.opendev.org/490209,Refactor requests usage in owners script,"Refactor requests usage in owners script  In an effort to be more consistent about encoding parameters for GET requests made in the script which generates electoral rolls and some event invite lists, centralize calls to the requests module. This has the added benefit of encapsulating retry logic for potential reuse in later additions to the script.  Also generalize the query_gerrit() function to flexibly handle both Gerrit REST API which return neutered JSON and Gerrit Gitweb queries for retrieving YAML with its own special character encoding challenges.  Further extract out the JSON decoder error handling so it can be reused for other APIs than Gerrit's in future feature additions.  Change-Id: Ibda65d41c17416eb28eb326e2cdd28c90153f108",integration,,,,,,
opendev%2Fsystem-config~master~Ibda65d41c17416eb28eb326e2cdd28c90153f108,https://review.opendev.org/490209,Refactor requests usage in owners script,"Refactor requests usage in owners script  In an effort to be more consistent about encoding parameters for GET requests made in the script which generates electoral rolls and some event invite lists, centralize calls to the requests module. This has the added benefit of encapsulating retry logic for potential reuse in later additions to the script.  Also generalize the query_gerrit() function to flexibly handle both Gerrit REST API which return neutered JSON and Gerrit Gitweb queries for retrieving YAML with its own special character encoding challenges.  Further extract out the JSON decoder error handling so it can be reused for other APIs than Gerrit's in future feature additions.  Change-Id: Ibda65d41c17416eb28eb326e2cdd28c90153f108",objective,,,,,,
openstack%2Fpython-barbicanclient~master~I40c51315fe2d1751240e5b28fd8e0bf72cc215f1,https://review.opendev.org/486925,Update api references according to refactor result,Update api references according to refactor result  Change-Id: I40c51315fe2d1751240e5b28fd8e0bf72cc215f1,integration,,,,,,
openstack%2Fpython-barbicanclient~master~I40c51315fe2d1751240e5b28fd8e0bf72cc215f1,https://review.opendev.org/486925,Update api references according to refactor result,Update api references according to refactor result  Change-Id: I40c51315fe2d1751240e5b28fd8e0bf72cc215f1,objective,,,,,,
openstack%2Fpython-dracclient~master~I87996bbca129995f6c84848ebdb0c33cfedeea53,https://review.opendev.org/479443,Refactor iDRAC is ready functionality,"Refactor iDRAC is ready functionality  Web Services Management (WS-Management and WS-Man) requests/commands can fail or return invalid results when issued to an Integrated Dell Remote Access Controller (iDRAC) whose Lifecycle Controller remote service is not ""ready"". Specifically, this applies to the WS-Man Enumerate and Invoke operations.  A Dell technical white paper [0], ""Lifecycle Controller Integration -- Best Practices Guide"", states that for Lifecycle Controller firmware 1.5.0 and later ""The Lifecycle Controller remote service must be in a 'ready' state before running any other WSMAN commands."" That applies to almost all of the workflows and use cases documented by that paper and those supported by the openstack/python-dracclient project. That document describes how to determine the readiness of the Lifecycle Controller remote service. A project commit [1] implements that.  This refactors that patch in preparation for changing the internal implementation of the project's APIs so that they follow that best practice. The implementation of is_idrac_ready() and wait_until_idrac_is_ready() have been relocated further down the call stack, to the iDRAC specialization of the WS-Man client defined by class dracclient.client.WSManClient. Those methods continue to be available through the API provided by class dracclient.client.Client.  Changes have not been made to the project's APIs nor to any functional behavior.  [0] http://en.community.dell.com/techcenter/extras/m/white_papers/20442332 [1] https://github.com/openstack/python-dracclient/commit/39253bb272a7d4cfcc161c19708b8c6949a21240  Change-Id: I87996bbca129995f6c84848ebdb0c33cfedeea53 Partial-Bug: #1697558",integration,,,,,,
openstack%2Fpython-dracclient~master~I87996bbca129995f6c84848ebdb0c33cfedeea53,https://review.opendev.org/479443,Refactor iDRAC is ready functionality,"Refactor iDRAC is ready functionality  Web Services Management (WS-Management and WS-Man) requests/commands can fail or return invalid results when issued to an Integrated Dell Remote Access Controller (iDRAC) whose Lifecycle Controller remote service is not ""ready"". Specifically, this applies to the WS-Man Enumerate and Invoke operations.  A Dell technical white paper [0], ""Lifecycle Controller Integration -- Best Practices Guide"", states that for Lifecycle Controller firmware 1.5.0 and later ""The Lifecycle Controller remote service must be in a 'ready' state before running any other WSMAN commands."" That applies to almost all of the workflows and use cases documented by that paper and those supported by the openstack/python-dracclient project. That document describes how to determine the readiness of the Lifecycle Controller remote service. A project commit [1] implements that.  This refactors that patch in preparation for changing the internal implementation of the project's APIs so that they follow that best practice. The implementation of is_idrac_ready() and wait_until_idrac_is_ready() have been relocated further down the call stack, to the iDRAC specialization of the WS-Man client defined by class dracclient.client.WSManClient. Those methods continue to be available through the API provided by class dracclient.client.Client.  Changes have not been made to the project's APIs nor to any functional behavior.  [0] http://en.community.dell.com/techcenter/extras/m/white_papers/20442332 [1] https://github.com/openstack/python-dracclient/commit/39253bb272a7d4cfcc161c19708b8c6949a21240  Change-Id: I87996bbca129995f6c84848ebdb0c33cfedeea53 Partial-Bug: #1697558",objective,,,,,,
openstack%2Fpuppet-tripleo~master~I063a84a8e6da64ae3b09125cfa42e48df69adc12,https://review.opendev.org/471950,Refactor nova migration config into client & target profiles,"Refactor nova migration config into client & target profiles  The nova migration config has always been applied by the base::nova profile. It assumed that libvirtd/nova-compute and are all running on the same host. Where this config didn't apply (e.g a nova api host) it was disabled by a flag.  This approach is not compatible with containers. Hieradata for all containers are combined so per-host flags no longer work, and we can no longer assume libvirtd and nova-compute run in the same context.  This change refactors the profiles out of the base nova profile and into a client profile and a target profile that can be included where appropriate.  Change-Id: I063a84a8e6da64ae3b09125cfa42e48df69adc12 Implements: blueprint tripleo-cold-migration",integration,,,,,,
openstack%2Fpuppet-tripleo~master~I063a84a8e6da64ae3b09125cfa42e48df69adc12,https://review.opendev.org/471950,Refactor nova migration config into client & target profiles,"Refactor nova migration config into client & target profiles  The nova migration config has always been applied by the base::nova profile. It assumed that libvirtd/nova-compute and are all running on the same host. Where this config didn't apply (e.g a nova api host) it was disabled by a flag.  This approach is not compatible with containers. Hieradata for all containers are combined so per-host flags no longer work, and we can no longer assume libvirtd and nova-compute run in the same context.  This change refactors the profiles out of the base nova profile and into a client profile and a target profile that can be included where appropriate.  Change-Id: I063a84a8e6da64ae3b09125cfa42e48df69adc12 Implements: blueprint tripleo-cold-migration",objective,,,,,,
x%2Fvmware-nsx~master~Iaf5ac1d32147f090b601e646f4d23b93eb5f3073,https://review.opendev.org/479792,NSX|v3 refactor trunk driver to use nsxlib api,NSX|v3 refactor trunk driver to use nsxlib api  Change-Id: Iaf5ac1d32147f090b601e646f4d23b93eb5f3073,integration,,,,,,
openstack%2Fmistral~master~I89c78fdce256249286903c4e2c8bef2a5bf63af7,https://review.opendev.org/465001,Refactor db model methods,"WIP: refactoring methods in db models  * This is a preparation for optimizing API layer. We need to   get rid of redundant data coversions like ""db model -> dict ->   REST resource"". We can do directly ""db model -> REST resource"".  Change-Id: I89c78fdce256249286903c4e2c8bef2a5bf63af7",integration,,,,,,
openstack%2Fmistral~master~I89c78fdce256249286903c4e2c8bef2a5bf63af7,https://review.opendev.org/465001,Refactor db model methods,"WIP: refactoring methods in db models  * This is a preparation for optimizing API layer. We need to   get rid of redundant data coversions like ""db model -> dict ->   REST resource"". We can do directly ""db model -> REST resource"".  Change-Id: I89c78fdce256249286903c4e2c8bef2a5bf63af7",objective,,,,,,
x%2Fmogan~master~Ie38e50287a2a602e030d19c8b45196ed8337d677,https://review.opendev.org/459034,Refactor the network_info field in API layer,WIP: Refactor the network_info field in API layer  Change-Id: Ie38e50287a2a602e030d19c8b45196ed8337d677,integration,,,,,,
openstack%2Fcinder~master~Id0e2d2ef4a873e86e514d5784a957ea4f593a027,https://review.opendev.org/347100,Refactoring ITRI DISCO cinder volume driver,ITRI DISCO cinder volume driver  This commit is the refactored version of DISCO volume driver of ITRI.  We change the SOAP API to REST API. It adds also two different classes:  * Class for the different calls using REST API * Class for attach/detach a DISCO volume  It also includes the unit tests.  DocImpact Implements: blueprint refactor-disco-volume-driver  Change-Id: Id0e2d2ef4a873e86e514d5784a957ea4f593a027,integration,,,,,,
openstack%2Fcinder~master~Id0e2d2ef4a873e86e514d5784a957ea4f593a027,https://review.opendev.org/347100,Refactoring ITRI DISCO cinder volume driver,ITRI DISCO cinder volume driver  This commit is the refactored version of DISCO volume driver of ITRI.  We change the SOAP API to REST API. It adds also two different classes:  * Class for the different calls using REST API * Class for attach/detach a DISCO volume  It also includes the unit tests.  DocImpact Implements: blueprint refactor-disco-volume-driver  Change-Id: Id0e2d2ef4a873e86e514d5784a957ea4f593a027,objective,,,,,,
openstack%2Fnova~master~I43683e53d1d277f3ed6cc5a274b5b940fcfc55cb,https://review.opendev.org/447698,Refactor: remove _items() in nova/api/openstack/compute/attach_interfaces.py,Refactor: remove _items() in nova/api/openstack/compute/attach_interfaces.py  removing _items() as this method is called only once and also to ensure policy checks happen in the API methods.  blueprint policy-docs  Change-Id: I43683e53d1d277f3ed6cc5a274b5b940fcfc55cb,integration,,,,,,
openstack%2Fnova~master~I43683e53d1d277f3ed6cc5a274b5b940fcfc55cb,https://review.opendev.org/447698,Refactor: remove _items() in nova/api/openstack/compute/attach_interfaces.py,Refactor: remove _items() in nova/api/openstack/compute/attach_interfaces.py  removing _items() as this method is called only once and also to ensure policy checks happen in the API methods.  blueprint policy-docs  Change-Id: I43683e53d1d277f3ed6cc5a274b5b940fcfc55cb,objective,,,,,,
openstack%2Ftricircle~master~I3967ae66d744ad4b00f283306c911657c5735dae,https://review.opendev.org/444450,Refactoring XJobAPI methods,Refactoring XJobAPI methods  1. What is the problem? All the methods of XJobAPI is sharing common functionality which can be simplify it.  2. What is the solution for the problem? Refactoring those methods as much as possible  3. What the features need to be implemented to the Tricircle to    realize the solution? None  TrivialFix  Change-Id: I3967ae66d744ad4b00f283306c911657c5735dae,integration,,,,,,
openstack%2Ftricircle~master~I3967ae66d744ad4b00f283306c911657c5735dae,https://review.opendev.org/444450,Refactoring XJobAPI methods,Refactoring XJobAPI methods  1. What is the problem? All the methods of XJobAPI is sharing common functionality which can be simplify it.  2. What is the solution for the problem? Refactoring those methods as much as possible  3. What the features need to be implemented to the Tricircle to    realize the solution? None  TrivialFix  Change-Id: I3967ae66d744ad4b00f283306c911657c5735dae,objective,,,,,,
openstack%2Fnova~master~Idb25f5905f3e33cec3c7887d08408251fef5b262,https://review.opendev.org/443337,Refactor cell loading in compute/api,"Refactor cell loading in compute/api  This merely pulls out the loading of the global cells cache into a helper function that can be used by later patches that will also depend on this. Since it's the same code, existing tests exercise this path just like they did before it was moved.  This was moved out of another patch to re-order some dependencies.  Related to blueprint cells-aware-api Change-Id: Idb25f5905f3e33cec3c7887d08408251fef5b262",integration,,,,,,
openstack%2Fnova~master~Idb25f5905f3e33cec3c7887d08408251fef5b262,https://review.opendev.org/443337,Refactor cell loading in compute/api,"Refactor cell loading in compute/api  This merely pulls out the loading of the global cells cache into a helper function that can be used by later patches that will also depend on this. Since it's the same code, existing tests exercise this path just like they did before it was moved.  This was moved out of another patch to re-order some dependencies.  Related to blueprint cells-aware-api Change-Id: Idb25f5905f3e33cec3c7887d08408251fef5b262",objective,,,,,,
openstack%2Fdragonflow~master~Ided566c411d6a8a998245f473bdad7fb3619a928,https://review.opendev.org/436108,[18/xx] Refactor DB consistent,[17/xx] Refactor DB consistent  Partially-Implements: blueprint refactor-nb-api Change-Id: Ided566c411d6a8a998245f473bdad7fb3619a928,integration,,,,,,
openstack%2Fdragonflow~master~Id5acc31f5e8bc7a97de536938939224ec903e0a3,https://review.opendev.org/407011,[11/xx] Refactor Chassis model,[WIP] Refactor chassis northbound API methods  Change-Id: Id5acc31f5e8bc7a97de536938939224ec903e0a3,integration,,,,,,
openstack%2Fdragonflow~master~Id5acc31f5e8bc7a97de536938939224ec903e0a3,https://review.opendev.org/407011,[11/xx] Refactor Chassis model,[WIP] Refactor chassis northbound API methods  Change-Id: Id5acc31f5e8bc7a97de536938939224ec903e0a3,objective,,,,,,
openstack%2Fdragonflow~master~I9f643e95dc4da1d9ff5b2ee27729a293ff7f47e6,https://review.opendev.org/396915,Refactor port-status-update NB API,"Refactor port-status-update NB API  1. Rename table portstats to n_listener, which means neutron listener 2. Make the port-status API consistent with other APIs 3. Add timestamp to n_listener table  Change-Id: I9f643e95dc4da1d9ff5b2ee27729a293ff7f47e6",integration,,,,,,
openstack%2Fdragonflow~master~I9f643e95dc4da1d9ff5b2ee27729a293ff7f47e6,https://review.opendev.org/396915,Refactor port-status-update NB API,"Refactor port-status-update NB API  1. Rename table portstats to n_listener, which means neutron listener 2. Make the port-status API consistent with other APIs 3. Add timestamp to n_listener table  Change-Id: I9f643e95dc4da1d9ff5b2ee27729a293ff7f47e6",objective,,,,,,
x%2Fglare~master~I6d3a59a395e907eeb2a66e5a6b3eddaaa3b4d40e,https://review.opendev.org/426705,Refactoring of artifact db api,Refactoring of artifact db api  Change-Id: I6d3a59a395e907eeb2a66e5a6b3eddaaa3b4d40e,integration,,,,,,
openstack%2Fcyborg~master~I2b0914af4dee5abe95148cdcbc41f36e95785033,https://review.opendev.org/754259,Refactor device_profile retrieve in ARQ post API,Refactor device_profile retrieve in ARQ post API  Remove device_profile object None check as db has raised ResourceNotFound exception.  Change-Id: I2b0914af4dee5abe95148cdcbc41f36e95785033,integration,,,,,,
openstack%2Fcyborg~master~I2b0914af4dee5abe95148cdcbc41f36e95785033,https://review.opendev.org/754259,Refactor device_profile retrieve in ARQ post API,Refactor device_profile retrieve in ARQ post API  Remove device_profile object None check as db has raised ResourceNotFound exception.  Change-Id: I2b0914af4dee5abe95148cdcbc41f36e95785033,objective,,,,,,
openstack%2Fmanila~master~I4b4771bbe9f2689162c84f085cae159f364ecb20,https://review.opendev.org/415114,[api-ref] Refactor share instance export locations API documentation,Refactor Manila share-instance-export-locations API  This patch makes share-instance-export-locations API more readable and maintainable.  Change-Id: I4b4771bbe9f2689162c84f085cae159f364ecb20,quality,,,,,,
openstack%2Fmanila~master~I4b4771bbe9f2689162c84f085cae159f364ecb20,https://review.opendev.org/415114,[api-ref] Refactor share instance export locations API documentation,Refactor Manila share-instance-export-locations API  This patch makes share-instance-export-locations API more readable and maintainable.  Change-Id: I4b4771bbe9f2689162c84f085cae159f364ecb20,integration,,,,,,
openstack%2Fmanila~master~I4b4771bbe9f2689162c84f085cae159f364ecb20,https://review.opendev.org/415114,[api-ref] Refactor share instance export locations API documentation,Refactor Manila share-instance-export-locations API  This patch makes share-instance-export-locations API more readable and maintainable.  Change-Id: I4b4771bbe9f2689162c84f085cae159f364ecb20,objective,,,,,,
openstack%2Fnova~master~I413c4272fe575661774297afdb429bbb0a5b8211,https://review.opendev.org/407151,refactor: move down ``dev_number`` in xenapi,refactor: move down ``dev_number`` in xenapi  This patch resolves the TODO marked by John Garbutt. Refactored xenapi.volumeops by moving ``dev_number`` var from ``attach_volume`` to ``_attach_volume_to_vm`` method.  Change-Id: I413c4272fe575661774297afdb429bbb0a5b8211,integration,,,,,,
openstack%2Fmanila~master~I388bdc4d9f22eda50fbede1106afebba6ceb355f,https://review.opendev.org/415081,[api-ref] Refactor share actions API documentation,Refactor Manila share-access API  This patch makes share-access API be more readable and maintainable.  Change-Id: I388bdc4d9f22eda50fbede1106afebba6ceb355f,quality,,,,,,
openstack%2Fmanila~master~I388bdc4d9f22eda50fbede1106afebba6ceb355f,https://review.opendev.org/415081,[api-ref] Refactor share actions API documentation,Refactor Manila share-access API  This patch makes share-access API be more readable and maintainable.  Change-Id: I388bdc4d9f22eda50fbede1106afebba6ceb355f,integration,,,,,,
openstack%2Fmanila~master~I388bdc4d9f22eda50fbede1106afebba6ceb355f,https://review.opendev.org/415081,[api-ref] Refactor share actions API documentation,Refactor Manila share-access API  This patch makes share-access API be more readable and maintainable.  Change-Id: I388bdc4d9f22eda50fbede1106afebba6ceb355f,objective,,,,,,
openstack%2Fmanila~master~I9a43ef525b8c16941df99fe54c0d5483dcb2ed4b,https://review.opendev.org/415095,[api-ref] Refactor share export location API documentation,Refactor Manila share-export-location API  This patch make share-export-location be readable and maintainable.  Change-Id: I9a43ef525b8c16941df99fe54c0d5483dcb2ed4b,quality,,,,,,
openstack%2Fmanila~master~I9a43ef525b8c16941df99fe54c0d5483dcb2ed4b,https://review.opendev.org/415095,[api-ref] Refactor share export location API documentation,Refactor Manila share-export-location API  This patch make share-export-location be readable and maintainable.  Change-Id: I9a43ef525b8c16941df99fe54c0d5483dcb2ed4b,integration,,,,,,
openstack%2Fmanila~master~I9a43ef525b8c16941df99fe54c0d5483dcb2ed4b,https://review.opendev.org/415095,[api-ref] Refactor share export location API documentation,Refactor Manila share-export-location API  This patch make share-export-location be readable and maintainable.  Change-Id: I9a43ef525b8c16941df99fe54c0d5483dcb2ed4b,objective,,,,,,
openstack%2Fpython-cinderclient~master~I90a2b713556e91db69270a03ef6b798e08f93f90,https://review.opendev.org/400963,Refactor v2 and v3 APIs support,WIP. Refactor v2 and v3 APIs support  Now v2 API uses code from v3. It's confusing and logically incorrect. This patch makes v3 API as an extended version of v2.  Change-Id: I90a2b713556e91db69270a03ef6b798e08f93f90 Partial-Bug: #1643584,integration,,,,,,
openstack%2Fpython-cinderclient~master~I90a2b713556e91db69270a03ef6b798e08f93f90,https://review.opendev.org/400963,Refactor v2 and v3 APIs support,WIP. Refactor v2 and v3 APIs support  Now v2 API uses code from v3. It's confusing and logically incorrect. This patch makes v3 API as an extended version of v2.  Change-Id: I90a2b713556e91db69270a03ef6b798e08f93f90 Partial-Bug: #1643584,objective,,,,,,
x%2Fmogan~master~I19f9aeeeac4b75f4d738deb8e3981c4c50d82b78,https://review.opendev.org/413154,Refactor network APIs,Refactor network APIs  1. Move network related codes into its own dir 2. Initialize network API to interact with neutron  Change-Id: I19f9aeeeac4b75f4d738deb8e3981c4c50d82b78,integration,,,,,,
x%2Fmogan~master~I19f9aeeeac4b75f4d738deb8e3981c4c50d82b78,https://review.opendev.org/413154,Refactor network APIs,Refactor network APIs  1. Move network related codes into its own dir 2. Initialize network API to interact with neutron  Change-Id: I19f9aeeeac4b75f4d738deb8e3981c4c50d82b78,objective,,,,,,
openstack%2Fmanila~master~I622b2470996b0e43cf9dcefdf72172759b3daec8,https://review.opendev.org/374517,[api-ref] Refactor Manila availability-zones API,[api-ref] Refactor Malina availability-zones API  This patch makes availability-zones API be more readable and maintainable.  Change-Id: I622b2470996b0e43cf9dcefdf72172759b3daec8,quality,,,,,,
openstack%2Fmanila~master~I622b2470996b0e43cf9dcefdf72172759b3daec8,https://review.opendev.org/374517,[api-ref] Refactor Manila availability-zones API,[api-ref] Refactor Malina availability-zones API  This patch makes availability-zones API be more readable and maintainable.  Change-Id: I622b2470996b0e43cf9dcefdf72172759b3daec8,integration,,,,,,
openstack%2Fmanila~master~I622b2470996b0e43cf9dcefdf72172759b3daec8,https://review.opendev.org/374517,[api-ref] Refactor Manila availability-zones API,[api-ref] Refactor Malina availability-zones API  This patch makes availability-zones API be more readable and maintainable.  Change-Id: I622b2470996b0e43cf9dcefdf72172759b3daec8,objective,,,,,,
openstack%2Fcookbook-openstack-telemetry~master~I63636ca8c08660f44433e701c55e1e0e7db5465f,https://review.opendev.org/402743,Ceilometer-api / Gnocchi-api WSGI refactor,Ceilometer-api / Gnocchi-api WSGI refactor  - now using wsgi apps for both apis - bumped gnocchi package version due to python-openssl bugs  Change-Id: I63636ca8c08660f44433e701c55e1e0e7db5465f,integration,,,,,,
openstack%2Fcookbook-openstack-telemetry~master~I63636ca8c08660f44433e701c55e1e0e7db5465f,https://review.opendev.org/402743,Ceilometer-api / Gnocchi-api WSGI refactor,Ceilometer-api / Gnocchi-api WSGI refactor  - now using wsgi apps for both apis - bumped gnocchi package version due to python-openssl bugs  Change-Id: I63636ca8c08660f44433e701c55e1e0e7db5465f,objective,,,,,,
openstack%2Fcinder~master~I2f9f5dc352fe509ef7f36e08248a311db6b526bb,https://review.opendev.org/406911,Refactor api test_common to use ddt library,Refactor api test_common to use ddt library  Change-Id: I2f9f5dc352fe509ef7f36e08248a311db6b526bb,objective,,,,,,
openstack%2Freno~master~If92f6ff5bce955bbdcb748cee52ad71210ae313b,https://review.opendev.org/407208,refactor existing implementation into a class,"refactor existing implementation into a class  As part of the re-implementation work using dulwich I want to create a Scanner class, to replace some of the module-level functions in the scanner module now. This patch moves existing code around into something like what I would expect that API to look like, without changing the implementation details.  The class API is still subject to change in the future, but this should make it a little easier to review those implementation changes.  Change-Id: If92f6ff5bce955bbdcb748cee52ad71210ae313b Signed-off-by: Doug Hellmann <doug@doughellmann.com>",integration,,,,,,
openstack%2Freno~master~If92f6ff5bce955bbdcb748cee52ad71210ae313b,https://review.opendev.org/407208,refactor existing implementation into a class,"refactor existing implementation into a class  As part of the re-implementation work using dulwich I want to create a Scanner class, to replace some of the module-level functions in the scanner module now. This patch moves existing code around into something like what I would expect that API to look like, without changing the implementation details.  The class API is still subject to change in the future, but this should make it a little easier to review those implementation changes.  Change-Id: If92f6ff5bce955bbdcb748cee52ad71210ae313b Signed-off-by: Doug Hellmann <doug@doughellmann.com>",objective,,,,,,
openstack%2Fmanila~master~I78aeb7e273abc86922de2e69e4c6b0a2e75d0c1c,https://review.opendev.org/376354,[api-ref] Refactor Manila scheduler stats API,[api-ref] Refactor Manila scheduler stats API  This patch makes the scheduler stats API codes to be more readable and maintainable.  Change-Id: I78aeb7e273abc86922de2e69e4c6b0a2e75d0c1c,quality,,,,,,
openstack%2Fmanila~master~I78aeb7e273abc86922de2e69e4c6b0a2e75d0c1c,https://review.opendev.org/376354,[api-ref] Refactor Manila scheduler stats API,[api-ref] Refactor Manila scheduler stats API  This patch makes the scheduler stats API codes to be more readable and maintainable.  Change-Id: I78aeb7e273abc86922de2e69e4c6b0a2e75d0c1c,integration,,,,,,
openstack%2Fmanila~master~I78aeb7e273abc86922de2e69e4c6b0a2e75d0c1c,https://review.opendev.org/376354,[api-ref] Refactor Manila scheduler stats API,[api-ref] Refactor Manila scheduler stats API  This patch makes the scheduler stats API codes to be more readable and maintainable.  Change-Id: I78aeb7e273abc86922de2e69e4c6b0a2e75d0c1c,objective,,,,,,
openstack%2Fmanila~master~If34bfb99852bcca61b65edc14ec98c859e995344,https://review.opendev.org/376233,[api-ref] Refactor Manila snapshot API,[api-ref] Refactor Manila snapshot API  This patch makes the Manila snapshot API to be more readable and maintainable.  Change-Id: If34bfb99852bcca61b65edc14ec98c859e995344,quality,,,,,,
openstack%2Fmanila~master~If34bfb99852bcca61b65edc14ec98c859e995344,https://review.opendev.org/376233,[api-ref] Refactor Manila snapshot API,[api-ref] Refactor Manila snapshot API  This patch makes the Manila snapshot API to be more readable and maintainable.  Change-Id: If34bfb99852bcca61b65edc14ec98c859e995344,integration,,,,,,
openstack%2Fmanila~master~If34bfb99852bcca61b65edc14ec98c859e995344,https://review.opendev.org/376233,[api-ref] Refactor Manila snapshot API,[api-ref] Refactor Manila snapshot API  This patch makes the Manila snapshot API to be more readable and maintainable.  Change-Id: If34bfb99852bcca61b65edc14ec98c859e995344,objective,,,,,,
openstack%2Fnova~master~I58f2d9d166446cd762a2fd4ad9d6b4bf5fff0c1d,https://review.opendev.org/393438,Refactor two nearly useless secgroup tests,"Refactor two nearly useless secgroup tests  There are two tests that masquerade as ""compute api tests"" to validate some instance security group associations. However, those are just there because it's a convenient place to create instances with a full complement of things. They depend on behaviors we're about to move, and are also slated to be irrelevant when we remove nova-network. In the meantime, move them closer to the other tests for the bits they are exercising to get them out of the way of the following patch.  Change-Id: I58f2d9d166446cd762a2fd4ad9d6b4bf5fff0c1d",integration,,,,,,
openstack%2Fnova~master~I58f2d9d166446cd762a2fd4ad9d6b4bf5fff0c1d,https://review.opendev.org/393438,Refactor two nearly useless secgroup tests,"Refactor two nearly useless secgroup tests  There are two tests that masquerade as ""compute api tests"" to validate some instance security group associations. However, those are just there because it's a convenient place to create instances with a full complement of things. They depend on behaviors we're about to move, and are also slated to be irrelevant when we remove nova-network. In the meantime, move them closer to the other tests for the bits they are exercising to get them out of the way of the following patch.  Change-Id: I58f2d9d166446cd762a2fd4ad9d6b4bf5fff0c1d",objective,,,,,,
openstack%2Fnetworking-sfc~master~Ia0020933f546d9c7fe74d98e25c02cf2531abf5d,https://review.opendev.org/387593,refactor parameter validation,refactor parameter validation  This change makes parameter validation more robust by eliminating custom validation functions and using neutron-lib facilities instead. Also it minimizes usage of neutron.api imports.  Change-Id: Ia0020933f546d9c7fe74d98e25c02cf2531abf5d,quality,,,,,,
openstack%2Fnetworking-sfc~master~Ia0020933f546d9c7fe74d98e25c02cf2531abf5d,https://review.opendev.org/387593,refactor parameter validation,refactor parameter validation  This change makes parameter validation more robust by eliminating custom validation functions and using neutron-lib facilities instead. Also it minimizes usage of neutron.api imports.  Change-Id: Ia0020933f546d9c7fe74d98e25c02cf2531abf5d,objective,,,,,,
x%2Fmogan~master~Ifadfca06b16447a70cb02b204f2f7974686610e2,https://review.opendev.org/384367,Refactor extra_spec,"Refactor extra_spec  use PATCH for extra spec actions, api ref will be updated soon.  Change-Id: Ifadfca06b16447a70cb02b204f2f7974686610e2",integration,,,,,,
openstack%2Fceilometer~master~I93d9520ab2a3247c1877e568416efacecb49d888,https://review.opendev.org/372190,Refactor Ceilometer resource API,Refactor Ceilometer resource API  This patch refactors Ceilometer resource API to make it be readable and maintainable.  Change-Id: I93d9520ab2a3247c1877e568416efacecb49d888,quality,,,,,,
openstack%2Fceilometer~master~I93d9520ab2a3247c1877e568416efacecb49d888,https://review.opendev.org/372190,Refactor Ceilometer resource API,Refactor Ceilometer resource API  This patch refactors Ceilometer resource API to make it be readable and maintainable.  Change-Id: I93d9520ab2a3247c1877e568416efacecb49d888,integration,,,,,,
openstack%2Fceilometer~master~I93d9520ab2a3247c1877e568416efacecb49d888,https://review.opendev.org/372190,Refactor Ceilometer resource API,Refactor Ceilometer resource API  This patch refactors Ceilometer resource API to make it be readable and maintainable.  Change-Id: I93d9520ab2a3247c1877e568416efacecb49d888,objective,,,,,,
openstack%2Fdragonflow~master~Ib5ceecf7187e3a89d132f2f592cbd444edbabb45,https://review.opendev.org/380046,Refactor redis driver and fix the db interface,"Refactor redis driver and fix the db interface  1. Redis driver brings a new db api: process_ha, it is called in api-nb module but it is not abstracted in db api layer.  2. Change some private method name in redis driver.  3. Remove check_connection in redis driver as it is not used.  Change-Id: Ib5ceecf7187e3a89d132f2f592cbd444edbabb45",integration,,,,,,
openstack%2Fdragonflow~master~Ib5ceecf7187e3a89d132f2f592cbd444edbabb45,https://review.opendev.org/380046,Refactor redis driver and fix the db interface,"Refactor redis driver and fix the db interface  1. Redis driver brings a new db api: process_ha, it is called in api-nb module but it is not abstracted in db api layer.  2. Change some private method name in redis driver.  3. Remove check_connection in redis driver as it is not used.  Change-Id: Ib5ceecf7187e3a89d132f2f592cbd444edbabb45",objective,,,,,,
x%2Fcraton~master~I7da8e9620c2fb07ebd3953cc6d76d47c08651fe7,https://review.opendev.org/378977,Refactor REST API support to remove boilerplate,"Refactor REST API support to remove boilerplate  This change removes the following boilerplate:  * Most filter setup, along with output to a JSON response, is now   captured in the new craton.api.v1.base.filtered_context decorator.  * Provides standard exception to HTTP status code mapping using the   new craton.api.v1.base.http_codes decorator.  There are additional opportunities for boilerplate removal, especially in scenarios where we have multiple ways of looking up a specific cell or region; but this boilerplate is not addressed in this fix.  In addition, this change now returns 204 upon DELETE in the API; and some minor PEP 8 cleanups.  Change-Id: I7da8e9620c2fb07ebd3953cc6d76d47c08651fe7 Partial-Bug: 1623095 Closes-Bug: 1628050",integration,,,,,,
x%2Fcraton~master~I7da8e9620c2fb07ebd3953cc6d76d47c08651fe7,https://review.opendev.org/378977,Refactor REST API support to remove boilerplate,"Refactor REST API support to remove boilerplate  This change removes the following boilerplate:  * Most filter setup, along with output to a JSON response, is now   captured in the new craton.api.v1.base.filtered_context decorator.  * Provides standard exception to HTTP status code mapping using the   new craton.api.v1.base.http_codes decorator.  There are additional opportunities for boilerplate removal, especially in scenarios where we have multiple ways of looking up a specific cell or region; but this boilerplate is not addressed in this fix.  In addition, this change now returns 204 upon DELETE in the API; and some minor PEP 8 cleanups.  Change-Id: I7da8e9620c2fb07ebd3953cc6d76d47c08651fe7 Partial-Bug: 1623095 Closes-Bug: 1628050",objective,,,,,,
openstack%2Fdragonflow~master~I7e9a7f9337c703673b7817ad47de1223c1b01ec0,https://review.opendev.org/373933,Refactor OvsdbSwitchApi,"Refactor OvsdbSwitchApi  Current OvsdbSwitchApi provides ovs command sometimes, and outputs result directly sometimes. It makes it hard to use. Also, OvsdbSwitchApi uses neutron framework to execute ovs command sometimes, and uses idlutils directly sometimes. Using idlutils directly will not reconnect ovsdb, if timeout.  This patch does following things: 1) Create a dedicated ovsdb api, which is a sub class of OvsdbIdl from neutron 2) Make OvsdbSwitchApi execute ovs command, and remove explicit execute() call from consumers 3) Remove directly using idlutils in OvsdbSwitchApi 4) Remove obselete methods in OvsdbSwitchApi 5) Remove duplicated command class, which already have defination in neutron  Change-Id: I7e9a7f9337c703673b7817ad47de1223c1b01ec0 Closes-Bug: #1622879",integration,,,,,,
openstack%2Fdragonflow~master~I7e9a7f9337c703673b7817ad47de1223c1b01ec0,https://review.opendev.org/373933,Refactor OvsdbSwitchApi,"Refactor OvsdbSwitchApi  Current OvsdbSwitchApi provides ovs command sometimes, and outputs result directly sometimes. It makes it hard to use. Also, OvsdbSwitchApi uses neutron framework to execute ovs command sometimes, and uses idlutils directly sometimes. Using idlutils directly will not reconnect ovsdb, if timeout.  This patch does following things: 1) Create a dedicated ovsdb api, which is a sub class of OvsdbIdl from neutron 2) Make OvsdbSwitchApi execute ovs command, and remove explicit execute() call from consumers 3) Remove directly using idlutils in OvsdbSwitchApi 4) Remove obselete methods in OvsdbSwitchApi 5) Remove duplicated command class, which already have defination in neutron  Change-Id: I7e9a7f9337c703673b7817ad47de1223c1b01ec0 Closes-Bug: #1622879",objective,,,,,,
openstack%2Fmanila~master~I802f09baee7dda91999983947aca8406a57d445e,https://review.opendev.org/376107,[api-ref] Refactor Manila security service API,[api-ref] Refactor Manila security service API  This patch make security service api reference to be more readable and maintainable.  Change-Id: I802f09baee7dda91999983947aca8406a57d445e,quality,,,,,,
openstack%2Fmanila~master~I802f09baee7dda91999983947aca8406a57d445e,https://review.opendev.org/376107,[api-ref] Refactor Manila security service API,[api-ref] Refactor Manila security service API  This patch make security service api reference to be more readable and maintainable.  Change-Id: I802f09baee7dda91999983947aca8406a57d445e,integration,,,,,,
openstack%2Fmanila~master~I802f09baee7dda91999983947aca8406a57d445e,https://review.opendev.org/376107,[api-ref] Refactor Manila security service API,[api-ref] Refactor Manila security service API  This patch make security service api reference to be more readable and maintainable.  Change-Id: I802f09baee7dda91999983947aca8406a57d445e,objective,,,,,,
openstack%2Fmanila~master~I0a275b3ab4dc8e7ba5675562599bd853f03fa30e,https://review.opendev.org/373923,[api-ref] Refactor Manila quota set API,Refactor Manila quota set API  This patch refactors Manila quota set API to make it be readable and maintainable.  Change-Id: I0a275b3ab4dc8e7ba5675562599bd853f03fa30e,quality,,,,,,
openstack%2Fmanila~master~I0a275b3ab4dc8e7ba5675562599bd853f03fa30e,https://review.opendev.org/373923,[api-ref] Refactor Manila quota set API,Refactor Manila quota set API  This patch refactors Manila quota set API to make it be readable and maintainable.  Change-Id: I0a275b3ab4dc8e7ba5675562599bd853f03fa30e,integration,,,,,,
openstack%2Fmanila~master~I0a275b3ab4dc8e7ba5675562599bd853f03fa30e,https://review.opendev.org/373923,[api-ref] Refactor Manila quota set API,Refactor Manila quota set API  This patch refactors Manila quota set API to make it be readable and maintainable.  Change-Id: I0a275b3ab4dc8e7ba5675562599bd853f03fa30e,objective,,,,,,
openstack%2Fmanila~master~I0e214f59e193f861e4959dfef951854bea530b7b,https://review.opendev.org/368581,[api-ref] Refactor limits and services API,[api-ref] Refactor limits and services API  This patch refactors limits and services API to make it clear to understand and maintain.  Change-Id: I0e214f59e193f861e4959dfef951854bea530b7b,quality,,,,,,
openstack%2Fmanila~master~I0e214f59e193f861e4959dfef951854bea530b7b,https://review.opendev.org/368581,[api-ref] Refactor limits and services API,[api-ref] Refactor limits and services API  This patch refactors limits and services API to make it clear to understand and maintain.  Change-Id: I0e214f59e193f861e4959dfef951854bea530b7b,integration,,,,,,
openstack%2Fmanila~master~I0e214f59e193f861e4959dfef951854bea530b7b,https://review.opendev.org/368581,[api-ref] Refactor limits and services API,[api-ref] Refactor limits and services API  This patch refactors limits and services API to make it clear to understand and maintain.  Change-Id: I0e214f59e193f861e4959dfef951854bea530b7b,objective,,,,,,
openstack%2Fmanila~master~I35b8b135acc02238daf7c2fb9f42bf276806f7d8,https://review.opendev.org/368561,[api-ref] Refactor manila extension API,[api-ref] Refactor manila extension API  This patch refactors manila extension API to make it clear to understand and maintain.  Change-Id: I35b8b135acc02238daf7c2fb9f42bf276806f7d8,quality,,,,,,
openstack%2Fmanila~master~I35b8b135acc02238daf7c2fb9f42bf276806f7d8,https://review.opendev.org/368561,[api-ref] Refactor manila extension API,[api-ref] Refactor manila extension API  This patch refactors manila extension API to make it clear to understand and maintain.  Change-Id: I35b8b135acc02238daf7c2fb9f42bf276806f7d8,integration,,,,,,
openstack%2Fmanila~master~I35b8b135acc02238daf7c2fb9f42bf276806f7d8,https://review.opendev.org/368561,[api-ref] Refactor manila extension API,[api-ref] Refactor manila extension API  This patch refactors manila extension API to make it clear to understand and maintain.  Change-Id: I35b8b135acc02238daf7c2fb9f42bf276806f7d8,objective,,,,,,
openstack%2Fkeystone~master~Ic5e4a00321d7999a060a7c6bc992f005e7aaaaeb,https://review.opendev.org/369849,Refactor Keystone admin-tenant API v2,Refactor Keystone admin-tenant API v2  This patch modifies parameters names in admin-tenant.inc  Change-Id: Ic5e4a00321d7999a060a7c6bc992f005e7aaaaeb,integration,,,,,,
openstack%2Fkeystone~master~I02e331c1673d7df87b27758d1329d6f9cc9caea9,https://review.opendev.org/369808,Refactor Keystone admin-endpoint API,Refactor Keystone admin-endpoint API  This patch moves content of admin-endpoints_parameters.yaml to parameters.yaml and modifies some parameters names.  Change-Id: I02e331c1673d7df87b27758d1329d6f9cc9caea9,integration,,,,,,
openstack%2Fkeystone~master~I02e331c1673d7df87b27758d1329d6f9cc9caea9,https://review.opendev.org/369808,Refactor Keystone admin-endpoint API,Refactor Keystone admin-endpoint API  This patch moves content of admin-endpoints_parameters.yaml to parameters.yaml and modifies some parameters names.  Change-Id: I02e331c1673d7df87b27758d1329d6f9cc9caea9,objective,,,,,,
openstack%2Fceilometer~master~Ib680988cc16791525bcbfd45868461a7ba693b2c,https://review.opendev.org/370510,Refactor Ceilometer event API,Refactor Ceilometer event API  This patch refactors Ceilometer event API to make it be maintainable and readable.  Change-Id: Ib680988cc16791525bcbfd45868461a7ba693b2c,quality,,,,,,
openstack%2Fceilometer~master~Ib680988cc16791525bcbfd45868461a7ba693b2c,https://review.opendev.org/370510,Refactor Ceilometer event API,Refactor Ceilometer event API  This patch refactors Ceilometer event API to make it be maintainable and readable.  Change-Id: Ib680988cc16791525bcbfd45868461a7ba693b2c,integration,,,,,,
openstack%2Fceilometer~master~Ib680988cc16791525bcbfd45868461a7ba693b2c,https://review.opendev.org/370510,Refactor Ceilometer event API,Refactor Ceilometer event API  This patch refactors Ceilometer event API to make it be maintainable and readable.  Change-Id: Ib680988cc16791525bcbfd45868461a7ba693b2c,objective,,,,,,
openstack%2Fceilometer~master~I321e01ee87ea122f740fdbadc4258983b41faf00,https://review.opendev.org/369985,Refactor Ceilometer alarm API,Refactor Ceilometer alarm API  This patch refactors Ceilometer alarm API to make it be maintainable and readable.  Change-Id: I321e01ee87ea122f740fdbadc4258983b41faf00,quality,,,,,,
openstack%2Fceilometer~master~I321e01ee87ea122f740fdbadc4258983b41faf00,https://review.opendev.org/369985,Refactor Ceilometer alarm API,Refactor Ceilometer alarm API  This patch refactors Ceilometer alarm API to make it be maintainable and readable.  Change-Id: I321e01ee87ea122f740fdbadc4258983b41faf00,integration,,,,,,
openstack%2Fceilometer~master~I321e01ee87ea122f740fdbadc4258983b41faf00,https://review.opendev.org/369985,Refactor Ceilometer alarm API,Refactor Ceilometer alarm API  This patch refactors Ceilometer alarm API to make it be maintainable and readable.  Change-Id: I321e01ee87ea122f740fdbadc4258983b41faf00,objective,,,,,,
openstack%2Fneutron~master~Ic45c95d90f3aecfcb731453fb3fd62e6ed92893b,https://review.opendev.org/369846,Refactor for floating IP updating checks,"Refactor for floating IP updating checks  1. Will not fill the API fip updating dict with tenant_id and id anymore, floatingip_db will be passed around functions. We need to make the `fip` dict come from the API as it orginal is.  2. Refactor some redundant log messages for fip's port tenant_id check and IP version check.  Change-Id: Ic45c95d90f3aecfcb731453fb3fd62e6ed92893b Partial-bug: #1607746",integration,,,,,,
openstack%2Fneutron~master~Ic45c95d90f3aecfcb731453fb3fd62e6ed92893b,https://review.opendev.org/369846,Refactor for floating IP updating checks,"Refactor for floating IP updating checks  1. Will not fill the API fip updating dict with tenant_id and id anymore, floatingip_db will be passed around functions. We need to make the `fip` dict come from the API as it orginal is.  2. Refactor some redundant log messages for fip's port tenant_id check and IP version check.  Change-Id: Ic45c95d90f3aecfcb731453fb3fd62e6ed92893b Partial-bug: #1607746",objective,,,,,,
x%2Fnetworking-mlnx~master~I5ace63e6d1d61ad3c11c0c40e0df5a5dc6cd9365,https://review.opendev.org/366070,DB: Refactor networking-mlnx db,DB: Refactor networking-mlnx db  This patch to the following: 1. removes unused db api 2. change the sdn_journal.data to text 3. add MONITORING state sdn_journal.state 4. add api to get all rows with monitroing state  Change-Id: I5ace63e6d1d61ad3c11c0c40e0df5a5dc6cd9365,integration,,,,,,
x%2Fnetworking-mlnx~master~I5ace63e6d1d61ad3c11c0c40e0df5a5dc6cd9365,https://review.opendev.org/366070,DB: Refactor networking-mlnx db,DB: Refactor networking-mlnx db  This patch to the following: 1. removes unused db api 2. change the sdn_journal.data to text 3. add MONITORING state sdn_journal.state 4. add api to get all rows with monitroing state  Change-Id: I5ace63e6d1d61ad3c11c0c40e0df5a5dc6cd9365,objective,,,,,,
openstack%2Fironic-python-agent~master~Ice1e7d45ea90c9fd8220c4b94e691b6015e23074,https://review.opendev.org/750097,Refactor API version negotiation code,Refactor API version negotiation code  Makes sure heartbeats can send versions higher than one required for tokens while also making sure we never send a version we don't know.  Also makes code easier to understand.  Change-Id: Ice1e7d45ea90c9fd8220c4b94e691b6015e23074,integration,,,,,,
openstack%2Fironic-python-agent~master~Ice1e7d45ea90c9fd8220c4b94e691b6015e23074,https://review.opendev.org/750097,Refactor API version negotiation code,Refactor API version negotiation code  Makes sure heartbeats can send versions higher than one required for tokens while also making sure we never send a version we don't know.  Also makes code easier to understand.  Change-Id: Ice1e7d45ea90c9fd8220c4b94e691b6015e23074,quality,,,,,,
openstack%2Fironic-python-agent~master~Ice1e7d45ea90c9fd8220c4b94e691b6015e23074,https://review.opendev.org/750097,Refactor API version negotiation code,Refactor API version negotiation code  Makes sure heartbeats can send versions higher than one required for tokens while also making sure we never send a version we don't know.  Also makes code easier to understand.  Change-Id: Ice1e7d45ea90c9fd8220c4b94e691b6015e23074,objective,,,,,,
x%2Ffuel-ccp-tests~master~Ie5590a71fa215cab2089fa7f1592ff61a00f9b93,https://review.opendev.org/354788,Refactoring k8s models,"Refactoring k8s models    1. Unfortunately, not all methods allows 'namespace' parameter.   2. Some resources had wrong api calls.   3. Some resources had wrong parameters.    In this review 'namespace' parameter was moved into each resource   class it needed.  Change-Id: Ie5590a71fa215cab2089fa7f1592ff61a00f9b93",integration,,,,,,
x%2Ffuel-ccp-tests~master~Ie5590a71fa215cab2089fa7f1592ff61a00f9b93,https://review.opendev.org/354788,Refactoring k8s models,"Refactoring k8s models    1. Unfortunately, not all methods allows 'namespace' parameter.   2. Some resources had wrong api calls.   3. Some resources had wrong parameters.    In this review 'namespace' parameter was moved into each resource   class it needed.  Change-Id: Ie5590a71fa215cab2089fa7f1592ff61a00f9b93",objective,,,,,,
openstack%2Fglance-specs~master~I041071dc758972813cd0bfc534715b56013cc13a,https://review.opendev.org/315025,Refactor glance_store's public API,Refactor glance_store's public API  Change-Id: I041071dc758972813cd0bfc534715b56013cc13a,integration,,,,,,
openstack%2Fneutron~stable%2Fmitaka~Ie96b52dbe3a1f32cd4c11de8d8a5eff663fbf7f6,https://review.opendev.org/327671,Refactor the rpc callback version discovery mechanism,"Refactor the rpc callback version discovery mechanism  The previous version depended on the AgentDbMixin to be loaded by any plugin, and also introduced an __init__ on the mixin which was problematic: mixins are expected to be classes which add methods to another class, but to implement no constructor. One of the plugins had one of the elements of MRO not calling to super().__init__ and hence not triggering this __init__ method.  This change requires the plugins using the rpc callback mechanism to provide the AgentDbMixin which is used to refresh cache of known resource consumers (agents) and versions on demand, this way we make it more clear that the rpc_callback api is currently designed to be used with agents only, despite of its extensibility to other areas.  Change-Id: Ie96b52dbe3a1f32cd4c11de8d8a5eff663fbf7f6 Related-Bug: #1584204 (cherry picked from commit 1d43dd217a31c38caf8ad3a695c0c262d63bb724)",integration,,,,,,
openstack%2Fneutron~stable%2Fmitaka~Ie96b52dbe3a1f32cd4c11de8d8a5eff663fbf7f6,https://review.opendev.org/327671,Refactor the rpc callback version discovery mechanism,"Refactor the rpc callback version discovery mechanism  The previous version depended on the AgentDbMixin to be loaded by any plugin, and also introduced an __init__ on the mixin which was problematic: mixins are expected to be classes which add methods to another class, but to implement no constructor. One of the plugins had one of the elements of MRO not calling to super().__init__ and hence not triggering this __init__ method.  This change requires the plugins using the rpc callback mechanism to provide the AgentDbMixin which is used to refresh cache of known resource consumers (agents) and versions on demand, this way we make it more clear that the rpc_callback api is currently designed to be used with agents only, despite of its extensibility to other areas.  Change-Id: Ie96b52dbe3a1f32cd4c11de8d8a5eff663fbf7f6 Related-Bug: #1584204 (cherry picked from commit 1d43dd217a31c38caf8ad3a695c0c262d63bb724)",objective,,,,,,
openstack%2Fkeystonemiddleware~master~I8bbf2530b183ff8b78983bae7232ade5b810cc66,https://review.opendev.org/334293,Refactor audit api tests into their own file,Refactor audit api tests into their own file  These tests can be refactored futher to not involve the middleware at all.  Change-Id: I8bbf2530b183ff8b78983bae7232ade5b810cc66,integration,,,,,,
openstack%2Fkeystonemiddleware~master~I8bbf2530b183ff8b78983bae7232ade5b810cc66,https://review.opendev.org/334293,Refactor audit api tests into their own file,Refactor audit api tests into their own file  These tests can be refactored futher to not involve the middleware at all.  Change-Id: I8bbf2530b183ff8b78983bae7232ade5b810cc66,objective,,,,,,
openstack%2Fkeystonemiddleware~master~I60e524f1e03bfa4592756fc1da861b687ba2ee85,https://review.opendev.org/334292,Refactor create_event onto the api object.,Refactor create_event onto the api object.  There are a number of methods on the api object that already handle request specifics. Move the create_event method over to the api so that it can be tested independantly of the middleware.  Change-Id: I60e524f1e03bfa4592756fc1da861b687ba2ee85,integration,,,,,,
openstack%2Fkeystonemiddleware~master~I60e524f1e03bfa4592756fc1da861b687ba2ee85,https://review.opendev.org/334292,Refactor create_event onto the api object.,Refactor create_event onto the api object.  There are a number of methods on the api object that already handle request specifics. Move the create_event method over to the api so that it can be tested independantly of the middleware.  Change-Id: I60e524f1e03bfa4592756fc1da861b687ba2ee85,objective,,,,,,
openstack%2Fmurano~master~I0abfc555d1a481b20dc971c3a801fdf7e88aed2f,https://review.opendev.org/333234,Refactor API params tuples to sets,"Refactor API params tuples to sets  SUPPORTED_PARAMS, LIST_PARAMS and ORDER_VALUES are used only to check whether some value is inside of them.  This patchset makes them sets instead of tuples.  Change-Id: I0abfc555d1a481b20dc971c3a801fdf7e88aed2f",integration,,,,,,
openstack%2Fmurano~master~I0abfc555d1a481b20dc971c3a801fdf7e88aed2f,https://review.opendev.org/333234,Refactor API params tuples to sets,"Refactor API params tuples to sets  SUPPORTED_PARAMS, LIST_PARAMS and ORDER_VALUES are used only to check whether some value is inside of them.  This patchset makes them sets instead of tuples.  Change-Id: I0abfc555d1a481b20dc971c3a801fdf7e88aed2f",objective,,,,,,
x%2Fvmware-nsx~master~Id1fcfb0b7fd363442615271530b9040329b792c5,https://review.opendev.org/323222,NSX-v QoS - fix refactor integration to use the correct api,NSX-v QoS - fix refactor integration to use the correct api  Commit b3ca00f7a603d3f1763c7a031baf476b85f790bc used the wrong api to get the Qos policy rules  Change-Id: Id1fcfb0b7fd363442615271530b9040329b792c5,integration,,,,,,
openstack%2Fpython-muranoclient~master~I1fe086d2f29569ca73908da49e0ee77fd450fced,https://review.opendev.org/318561,Further refactor of Glare API urls,Further refactor of Glare API urls  This patch makes addressing to urls within file more convenient  Change-Id: I1fe086d2f29569ca73908da49e0ee77fd450fced Related-Bug: #1576192,integration,,,,,,
openstack%2Fpython-muranoclient~master~I1fe086d2f29569ca73908da49e0ee77fd450fced,https://review.opendev.org/318561,Further refactor of Glare API urls,Further refactor of Glare API urls  This patch makes addressing to urls within file more convenient  Change-Id: I1fe086d2f29569ca73908da49e0ee77fd450fced Related-Bug: #1576192,objective,,,,,,
openstack%2Fcloudkitty~master~Iade2b11e8a4b1fe5199b303c1ba537d89083154f,https://review.opendev.org/318146,Refactor storage-init command,Refactor storage-init command  Use internal API to get a reference to the storage backend and remove the need to use stevedore.  Change-Id: Iade2b11e8a4b1fe5199b303c1ba537d89083154f,integration,,,,,,
openstack%2Fcloudkitty~master~Iade2b11e8a4b1fe5199b303c1ba537d89083154f,https://review.opendev.org/318146,Refactor storage-init command,Refactor storage-init command  Use internal API to get a reference to the storage backend and remove the need to use stevedore.  Change-Id: Iade2b11e8a4b1fe5199b303c1ba537d89083154f,objective,,,,,,
openstack%2Fcloudkitty~master~I1a2810c2d5f73aa5758583dd588c7c31997689ba,https://review.opendev.org/318147,Refactor writer command,Refactor writer command  Make use of the internal storage API to remove the need of manual stevedore loading.  Change-Id: I1a2810c2d5f73aa5758583dd588c7c31997689ba,integration,,,,,,
openstack%2Fcloudkitty~master~I1a2810c2d5f73aa5758583dd588c7c31997689ba,https://review.opendev.org/318147,Refactor writer command,Refactor writer command  Make use of the internal storage API to remove the need of manual stevedore loading.  Change-Id: I1a2810c2d5f73aa5758583dd588c7c31997689ba,objective,,,,,,
openstack%2Ftrove~master~I66fcb2bce8c6cbc99c9ff071c242e4741500056d,https://review.opendev.org/309190,Refactor scenario tests to facilitate multi-group,"Refactor scenario tests to facilitate multi-group  The scenario tests need to have the group classes broken up to allow interleaving of the different parts of the tests so that the gate can finish in a reasonable amount of time.  The runners, however, need to be the same for each main group, thus allowing state to be preserved between groups of the same feature.  The creation of runners was refactored to allow for this.  The module tests were also modified to use the new paradym, which allowed the removal of the global varaibles in the runner.  Dependencies on tests.api were also removed.  Change-Id: I66fcb2bce8c6cbc99c9ff071c242e4741500056d Partial-Bug: #1571092",integration,,,,,,
openstack%2Ftrove~master~I66fcb2bce8c6cbc99c9ff071c242e4741500056d,https://review.opendev.org/309190,Refactor scenario tests to facilitate multi-group,"Refactor scenario tests to facilitate multi-group  The scenario tests need to have the group classes broken up to allow interleaving of the different parts of the tests so that the gate can finish in a reasonable amount of time.  The runners, however, need to be the same for each main group, thus allowing state to be preserved between groups of the same feature.  The creation of runners was refactored to allow for this.  The module tests were also modified to use the new paradym, which allowed the removal of the global varaibles in the runner.  Dependencies on tests.api were also removed.  Change-Id: I66fcb2bce8c6cbc99c9ff071c242e4741500056d Partial-Bug: #1571092",testing,,,,,,
openstack%2Fheat~master~Ie9cf4daba7e6bf61f4cac3388494e8c9efefa4d7,https://review.opendev.org/295159,Convergence: Refactor worker,"Convergence: Refactor worker  Refactor the worker service; move the check resource code to its own class and keep the convergence worker API clean.  This refactor will help us contain the convergence logic in a separate class file instead of in RCP API. In future, the RPC API will only have the new API added to it.  Change-Id: Ie9cf4daba7e6bf61f4cac3388494e8c9efefa4d7",integration,,,,,,
openstack%2Fheat~master~Ie9cf4daba7e6bf61f4cac3388494e8c9efefa4d7,https://review.opendev.org/295159,Convergence: Refactor worker,"Convergence: Refactor worker  Refactor the worker service; move the check resource code to its own class and keep the convergence worker API clean.  This refactor will help us contain the convergence logic in a separate class file instead of in RCP API. In future, the RPC API will only have the new API added to it.  Change-Id: Ie9cf4daba7e6bf61f4cac3388494e8c9efefa4d7",objective,,,,,,
x%2Fgroup-based-policy~stable%2Fkilo~Ie9a3a57d2186fd693e9bc1e03501f0038e316b41,https://review.opendev.org/312914,Refactor for create_floatingip call,"Refactor for create_floatingip call  The current implementation for create_floatingip results in the L3 API being called twice. The first pass causes additional attributes to be populated, which are used in the second call. This patch converts this to a single call, which gets the parameters needed and continues, rather than call itself recursively.  Change-Id: Ie9a3a57d2186fd693e9bc1e03501f0038e316b41 Closes-Bug: #1561638 (cherry picked from commit 256eac720f6a81777d576607af689b9ec216af6f) (cherry picked from commit 5809617fd30d82cd8b60ce9d300d933c4d7cb408) (cherry picked from commit 99540fdcfaf7a1b7f579bb9a484bccece0c5a4ea)",integration,,,,,,
x%2Fgroup-based-policy~stable%2Fkilo~Ie9a3a57d2186fd693e9bc1e03501f0038e316b41,https://review.opendev.org/312914,Refactor for create_floatingip call,"Refactor for create_floatingip call  The current implementation for create_floatingip results in the L3 API being called twice. The first pass causes additional attributes to be populated, which are used in the second call. This patch converts this to a single call, which gets the parameters needed and continues, rather than call itself recursively.  Change-Id: Ie9a3a57d2186fd693e9bc1e03501f0038e316b41 Closes-Bug: #1561638 (cherry picked from commit 256eac720f6a81777d576607af689b9ec216af6f) (cherry picked from commit 5809617fd30d82cd8b60ce9d300d933c4d7cb408) (cherry picked from commit 99540fdcfaf7a1b7f579bb9a484bccece0c5a4ea)",objective,,,,,,
openstack%2Fwatcher~master~I6c38a3c1a2b4dc47388876e4c0ba61b7447690bd,https://review.opendev.org/294555,Refactored Watcher API service,Refactored Watcher API service  This patchset introduces the use of oslo.service to run the Watcher API service.  Change-Id: I6c38a3c1a2b4dc47388876e4c0ba61b7447690bd Related-Bug: #1541850,integration,,,,,,
x%2Fdistil~master~I4edd64cb511d16f1e5243968693ad7e73db43f06,https://review.opendev.org/313943,Refactor Database layer,Refactor Database layer  Misc changes which include below improvements:  1. Using oslo.db to get a clean db API layer 2. Using alembic to support db migration 3. Fix all the PEP 8 issues for new code 4. A new API /health which is also used to verify the new DB API  Change-Id: I4edd64cb511d16f1e5243968693ad7e73db43f06,integration,,,,,,
x%2Fdistil~master~I4edd64cb511d16f1e5243968693ad7e73db43f06,https://review.opendev.org/313943,Refactor Database layer,Refactor Database layer  Misc changes which include below improvements:  1. Using oslo.db to get a clean db API layer 2. Using alembic to support db migration 3. Fix all the PEP 8 issues for new code 4. A new API /health which is also used to verify the new DB API  Change-Id: I4edd64cb511d16f1e5243968693ad7e73db43f06,objective,,,,,,
x%2Fgroup-based-policy~stable%2Fliberty~Ie9a3a57d2186fd693e9bc1e03501f0038e316b41,https://review.opendev.org/312803,Refactor for create_floatingip call,"Refactor for create_floatingip call  The current implementation for create_floatingip results in the L3 API being called twice. The first pass causes additional attributes to be populated, which are used in the second call. This patch converts this to a single call, which gets the parameters needed and continues, rather than call itself recursively.  Change-Id: Ie9a3a57d2186fd693e9bc1e03501f0038e316b41 Closes-Bug: #1561638 (cherry picked from commit 256eac720f6a81777d576607af689b9ec216af6f) (cherry picked from commit 5809617fd30d82cd8b60ce9d300d933c4d7cb408)",integration,,,,,,
x%2Fgroup-based-policy~stable%2Fliberty~Ie9a3a57d2186fd693e9bc1e03501f0038e316b41,https://review.opendev.org/312803,Refactor for create_floatingip call,"Refactor for create_floatingip call  The current implementation for create_floatingip results in the L3 API being called twice. The first pass causes additional attributes to be populated, which are used in the second call. This patch converts this to a single call, which gets the parameters needed and continues, rather than call itself recursively.  Change-Id: Ie9a3a57d2186fd693e9bc1e03501f0038e316b41 Closes-Bug: #1561638 (cherry picked from commit 256eac720f6a81777d576607af689b9ec216af6f) (cherry picked from commit 5809617fd30d82cd8b60ce9d300d933c4d7cb408)",objective,,,,,,
x%2Fgroup-based-policy~stable%2Fmitaka~Ie9a3a57d2186fd693e9bc1e03501f0038e316b41,https://review.opendev.org/312798,Refactor for create_floatingip call,"Refactor for create_floatingip call  The current implementation for create_floatingip results in the L3 API being called twice. The first pass causes additional attributes to be populated, which are used in the second call. This patch converts this to a single call, which gets the parameters needed and continues, rather than call itself recursively.  Change-Id: Ie9a3a57d2186fd693e9bc1e03501f0038e316b41 Closes-Bug: #1561638 (cherry picked from commit 256eac720f6a81777d576607af689b9ec216af6f)",integration,,,,,,
x%2Fgroup-based-policy~stable%2Fmitaka~Ie9a3a57d2186fd693e9bc1e03501f0038e316b41,https://review.opendev.org/312798,Refactor for create_floatingip call,"Refactor for create_floatingip call  The current implementation for create_floatingip results in the L3 API being called twice. The first pass causes additional attributes to be populated, which are used in the second call. This patch converts this to a single call, which gets the parameters needed and continues, rather than call itself recursively.  Change-Id: Ie9a3a57d2186fd693e9bc1e03501f0038e316b41 Closes-Bug: #1561638 (cherry picked from commit 256eac720f6a81777d576607af689b9ec216af6f)",objective,,,,,,
openstack%2Fnova~master~Ibd0542c86f573a397bbbe658fb4c5723f964ded9,https://review.opendev.org/260980,"HyperV: Refactor livemigr, avoiding getting disk paths remotely","HyperV: Refactor livemigr, avoiding getting disk paths remotely  During live migration, if passthrough disks are attached to instances, we need to create a planned VM, setting the right disk paths according to the destination host so that the volumes will still be accessible after the instance is migrated.  At the moment, we retrieve the disk paths remotely via WMI. Due to the fact that some WMI API methods are broken, for the FC implementation we had to use the hbaapi.dll functions directly, using ctypes.  As this can't work remotely, this patch slightly changes the live migration workflow. The planned VM is created during the pre-livemigration step on the destination host, updating the virtual disk resources.  Co-Authored-By: Alin Balutoiu <abalutoiu@cloudbasesolutions.com>  Partially-implements: blueprint hyperv-fibre-channel Depends-On: I29bbca19f274c1f6f092a16c2585fd33ff78c971 Change-Id: Ibd0542c86f573a397bbbe658fb4c5723f964ded9",integration,,,,,,
openstack%2Fnova~master~Ibd0542c86f573a397bbbe658fb4c5723f964ded9,https://review.opendev.org/260980,"HyperV: Refactor livemigr, avoiding getting disk paths remotely","HyperV: Refactor livemigr, avoiding getting disk paths remotely  During live migration, if passthrough disks are attached to instances, we need to create a planned VM, setting the right disk paths according to the destination host so that the volumes will still be accessible after the instance is migrated.  At the moment, we retrieve the disk paths remotely via WMI. Due to the fact that some WMI API methods are broken, for the FC implementation we had to use the hbaapi.dll functions directly, using ctypes.  As this can't work remotely, this patch slightly changes the live migration workflow. The planned VM is created during the pre-livemigration step on the destination host, updating the virtual disk resources.  Co-Authored-By: Alin Balutoiu <abalutoiu@cloudbasesolutions.com>  Partially-implements: blueprint hyperv-fibre-channel Depends-On: I29bbca19f274c1f6f092a16c2585fd33ff78c971 Change-Id: Ibd0542c86f573a397bbbe658fb4c5723f964ded9",objective,,,,,,
openstack%2Fpython-muranoclient~master~Ia7ad77e6cec9ed0ac6fb73fd2621f2eb6fb7f503,https://review.opendev.org/309109,Refactor urls to Glare API,Refactor urls to Glare API  This commit gathers in dictionary all the hardcoded urls in file.  Change-Id: Ia7ad77e6cec9ed0ac6fb73fd2621f2eb6fb7f503,integration,,,,,,
x%2Fdistil~master~I4d456f9228e879234898177d1f2d791d2ffbbf46,https://review.opendev.org/310342,Refactor Distil API to support new endpoints,Refactor Distil API to support new endpoints  Change-Id: I4d456f9228e879234898177d1f2d791d2ffbbf46,integration,,,,,,
x%2Fgroup-based-policy~master~Ie9a3a57d2186fd693e9bc1e03501f0038e316b41,https://review.opendev.org/297307,Refactor for create_floatingip call,"Refactor for create_floatingip call  The current implementation for create_floatingip results in the L3 API being called twice. The first pass causes additional attributes to be populated, which are used in the second call. This patch converts this to a single call, which gets the parameters needed and continues, rather than call itself recursively.  Change-Id: Ie9a3a57d2186fd693e9bc1e03501f0038e316b41 Closes-Bug: #1561638",integration,,,,,,
x%2Fgroup-based-policy~master~Ie9a3a57d2186fd693e9bc1e03501f0038e316b41,https://review.opendev.org/297307,Refactor for create_floatingip call,"Refactor for create_floatingip call  The current implementation for create_floatingip results in the L3 API being called twice. The first pass causes additional attributes to be populated, which are used in the second call. This patch converts this to a single call, which gets the parameters needed and continues, rather than call itself recursively.  Change-Id: Ie9a3a57d2186fd693e9bc1e03501f0038e316b41 Closes-Bug: #1561638",objective,,,,,,
openstack%2Fsahara-specs~master~I16918a30a862b42edd7a982caf555be618199ac3,https://review.opendev.org/298368,add refactor-sahara.service.api spec,"add refactor-sahara.service.api spec  The HTTP API calls that sahara receives are processed by the ``sahara.api`` package, the functions of this module then call upon the ``sahara.service.api`` and ``sahara.service.edp.api`` modules to perform processing before being passed to the conductor. To help accomodate future API changes, these modules should be refactored to create a more unified package for future implementors.  Partial-Implements: bp v2-api-experimental-impl Change-Id: I16918a30a862b42edd7a982caf555be618199ac3",integration,,,,,,
openstack%2Fsahara-specs~master~I16918a30a862b42edd7a982caf555be618199ac3,https://review.opendev.org/298368,add refactor-sahara.service.api spec,"add refactor-sahara.service.api spec  The HTTP API calls that sahara receives are processed by the ``sahara.api`` package, the functions of this module then call upon the ``sahara.service.api`` and ``sahara.service.edp.api`` modules to perform processing before being passed to the conductor. To help accomodate future API changes, these modules should be refactored to create a more unified package for future implementors.  Partial-Implements: bp v2-api-experimental-impl Change-Id: I16918a30a862b42edd7a982caf555be618199ac3",objective,,,,,,
openstack%2Fopenstacksdk~master~I634ac93b913e4fe9a3a812b384c8539d9266f2c0,https://review.opendev.org/289998,Refactor Resource to better serve Proxy,"[WIP] Refactor Resource to better serve Proxy  Through a series of attempts we haven't been able to sufficiently solve the issue of what were called ""path_args"" in the past, somewhat of a relic of the time before we had the Proxy layer. ""path_args"" made a lot of sense back when there was only the Resource layer, when the SDK's usage was almost entirely through the classmethods on Resource, back when command-line example scripts were all we had to go on.  As things have grown in the year-plus since that time, we have bolted a great higher-level interface on a lower-level interface that was stuck in an older use-case. It was most recently a problem when we had resource.prop types that accepeted Resource types, which both there and elsewhere meant it became significantly harder - if not impossible - to have nested Resources. An example of this is how ServerInterface is a Resource that depends on Server.  This new approach strips Resource down to a public API of only create, get, update, delete, head, find, and list methods. Resource subclasses are still constructed in the same manner, though the naming of what were ""props"" is now slightly different, but more clear. Additionally, through that change comes a more clear user experience for URI parameters, formerly known as, ""path_args"". The changes here pave the way for more clarity on query parameters, although they haven't been fully explored.  As the changing of this class has pretty far reaching effects, it will exist temporarily in the ""resource2"" module. The first change will be to introduce the module itself as a standalone, and then we will change each service independent of the others. Subsequent changes should not be too disruptive, mostly in the form of renaming things like resource.prop to resource.Body, and the like.  There is a fairly major side effect of the implementation of this class that is behaviorally different from the initial Resource implementation. Previously, any-and-all data sent into a Resource initializer would be tracked internally on the Resource instance and then sent to the server *even if it did not correspond to a resource.prop on the class*. Ultimately this would have become a problem as servers are becoming more strict about what they receive, but this implementation makes no allowance for so-called loose data to be entered. If there is no component attribute for an argument to be sent to the server, or one received from the server, it will not exist as an attribute of the Resource. Currently, said data is just dropped entirely, but it could be logged or perhaps a strict/loose mode could be engaged to warn or otherwise fail when unexpected data is entered. Ultimately, this behavior had to happen. In the near term it may mean that the SDK doesn't work exactly as it had in previous versions, but that will just mean updating Resource definitions to match what is truly expected or given by the server.  A relatively major change that comes from this refactoring is a deconstruction of the unit tests that previously existed. While resource.prop now lives on as resource2._BaseComponent, the unit tests were started over from scratch as they were too tightly coupled to the Resource class rather than being tested as an independent unit. All of the code that is being refactored as a part of this change is now being tested as independent of any other code as is possible.  Change-Id: If4d07b8d617f53be5a86c0c8733166e68e9d21ad  need a second exception so this can work  Change-Id: Ic80b5e4b6c5a994acaf3fec1b5253e672e800e63  pep8 and exception change  Change-Id: Icc872b73e2e924c0aff7fd9b8335be4d347fcc9e  initial unit tests  Change-Id: Ie3a3c1e59da80f5732dfd0977f815161ce17ff8d  43% coverage  Change-Id: I634ac93b913e4fe9a3a812b384c8539d9266f2c0",integration,,,,,,
openstack%2Fopenstacksdk~master~I634ac93b913e4fe9a3a812b384c8539d9266f2c0,https://review.opendev.org/289998,Refactor Resource to better serve Proxy,"[WIP] Refactor Resource to better serve Proxy  Through a series of attempts we haven't been able to sufficiently solve the issue of what were called ""path_args"" in the past, somewhat of a relic of the time before we had the Proxy layer. ""path_args"" made a lot of sense back when there was only the Resource layer, when the SDK's usage was almost entirely through the classmethods on Resource, back when command-line example scripts were all we had to go on.  As things have grown in the year-plus since that time, we have bolted a great higher-level interface on a lower-level interface that was stuck in an older use-case. It was most recently a problem when we had resource.prop types that accepeted Resource types, which both there and elsewhere meant it became significantly harder - if not impossible - to have nested Resources. An example of this is how ServerInterface is a Resource that depends on Server.  This new approach strips Resource down to a public API of only create, get, update, delete, head, find, and list methods. Resource subclasses are still constructed in the same manner, though the naming of what were ""props"" is now slightly different, but more clear. Additionally, through that change comes a more clear user experience for URI parameters, formerly known as, ""path_args"". The changes here pave the way for more clarity on query parameters, although they haven't been fully explored.  As the changing of this class has pretty far reaching effects, it will exist temporarily in the ""resource2"" module. The first change will be to introduce the module itself as a standalone, and then we will change each service independent of the others. Subsequent changes should not be too disruptive, mostly in the form of renaming things like resource.prop to resource.Body, and the like.  There is a fairly major side effect of the implementation of this class that is behaviorally different from the initial Resource implementation. Previously, any-and-all data sent into a Resource initializer would be tracked internally on the Resource instance and then sent to the server *even if it did not correspond to a resource.prop on the class*. Ultimately this would have become a problem as servers are becoming more strict about what they receive, but this implementation makes no allowance for so-called loose data to be entered. If there is no component attribute for an argument to be sent to the server, or one received from the server, it will not exist as an attribute of the Resource. Currently, said data is just dropped entirely, but it could be logged or perhaps a strict/loose mode could be engaged to warn or otherwise fail when unexpected data is entered. Ultimately, this behavior had to happen. In the near term it may mean that the SDK doesn't work exactly as it had in previous versions, but that will just mean updating Resource definitions to match what is truly expected or given by the server.  A relatively major change that comes from this refactoring is a deconstruction of the unit tests that previously existed. While resource.prop now lives on as resource2._BaseComponent, the unit tests were started over from scratch as they were too tightly coupled to the Resource class rather than being tested as an independent unit. All of the code that is being refactored as a part of this change is now being tested as independent of any other code as is possible.  Change-Id: If4d07b8d617f53be5a86c0c8733166e68e9d21ad  need a second exception so this can work  Change-Id: Ic80b5e4b6c5a994acaf3fec1b5253e672e800e63  pep8 and exception change  Change-Id: Icc872b73e2e924c0aff7fd9b8335be4d347fcc9e  initial unit tests  Change-Id: Ie3a3c1e59da80f5732dfd0977f815161ce17ff8d  43% coverage  Change-Id: I634ac93b913e4fe9a3a812b384c8539d9266f2c0",testing,,,,,,
openstack%2Fopenstacksdk~master~I634ac93b913e4fe9a3a812b384c8539d9266f2c0,https://review.opendev.org/289998,Refactor Resource to better serve Proxy,"[WIP] Refactor Resource to better serve Proxy  Through a series of attempts we haven't been able to sufficiently solve the issue of what were called ""path_args"" in the past, somewhat of a relic of the time before we had the Proxy layer. ""path_args"" made a lot of sense back when there was only the Resource layer, when the SDK's usage was almost entirely through the classmethods on Resource, back when command-line example scripts were all we had to go on.  As things have grown in the year-plus since that time, we have bolted a great higher-level interface on a lower-level interface that was stuck in an older use-case. It was most recently a problem when we had resource.prop types that accepeted Resource types, which both there and elsewhere meant it became significantly harder - if not impossible - to have nested Resources. An example of this is how ServerInterface is a Resource that depends on Server.  This new approach strips Resource down to a public API of only create, get, update, delete, head, find, and list methods. Resource subclasses are still constructed in the same manner, though the naming of what were ""props"" is now slightly different, but more clear. Additionally, through that change comes a more clear user experience for URI parameters, formerly known as, ""path_args"". The changes here pave the way for more clarity on query parameters, although they haven't been fully explored.  As the changing of this class has pretty far reaching effects, it will exist temporarily in the ""resource2"" module. The first change will be to introduce the module itself as a standalone, and then we will change each service independent of the others. Subsequent changes should not be too disruptive, mostly in the form of renaming things like resource.prop to resource.Body, and the like.  There is a fairly major side effect of the implementation of this class that is behaviorally different from the initial Resource implementation. Previously, any-and-all data sent into a Resource initializer would be tracked internally on the Resource instance and then sent to the server *even if it did not correspond to a resource.prop on the class*. Ultimately this would have become a problem as servers are becoming more strict about what they receive, but this implementation makes no allowance for so-called loose data to be entered. If there is no component attribute for an argument to be sent to the server, or one received from the server, it will not exist as an attribute of the Resource. Currently, said data is just dropped entirely, but it could be logged or perhaps a strict/loose mode could be engaged to warn or otherwise fail when unexpected data is entered. Ultimately, this behavior had to happen. In the near term it may mean that the SDK doesn't work exactly as it had in previous versions, but that will just mean updating Resource definitions to match what is truly expected or given by the server.  A relatively major change that comes from this refactoring is a deconstruction of the unit tests that previously existed. While resource.prop now lives on as resource2._BaseComponent, the unit tests were started over from scratch as they were too tightly coupled to the Resource class rather than being tested as an independent unit. All of the code that is being refactored as a part of this change is now being tested as independent of any other code as is possible.  Change-Id: If4d07b8d617f53be5a86c0c8733166e68e9d21ad  need a second exception so this can work  Change-Id: Ic80b5e4b6c5a994acaf3fec1b5253e672e800e63  pep8 and exception change  Change-Id: Icc872b73e2e924c0aff7fd9b8335be4d347fcc9e  initial unit tests  Change-Id: Ie3a3c1e59da80f5732dfd0977f815161ce17ff8d  43% coverage  Change-Id: I634ac93b913e4fe9a3a812b384c8539d9266f2c0",quality,,,,,,
openstack%2Fopenstacksdk~master~I634ac93b913e4fe9a3a812b384c8539d9266f2c0,https://review.opendev.org/289998,Refactor Resource to better serve Proxy,"[WIP] Refactor Resource to better serve Proxy  Through a series of attempts we haven't been able to sufficiently solve the issue of what were called ""path_args"" in the past, somewhat of a relic of the time before we had the Proxy layer. ""path_args"" made a lot of sense back when there was only the Resource layer, when the SDK's usage was almost entirely through the classmethods on Resource, back when command-line example scripts were all we had to go on.  As things have grown in the year-plus since that time, we have bolted a great higher-level interface on a lower-level interface that was stuck in an older use-case. It was most recently a problem when we had resource.prop types that accepeted Resource types, which both there and elsewhere meant it became significantly harder - if not impossible - to have nested Resources. An example of this is how ServerInterface is a Resource that depends on Server.  This new approach strips Resource down to a public API of only create, get, update, delete, head, find, and list methods. Resource subclasses are still constructed in the same manner, though the naming of what were ""props"" is now slightly different, but more clear. Additionally, through that change comes a more clear user experience for URI parameters, formerly known as, ""path_args"". The changes here pave the way for more clarity on query parameters, although they haven't been fully explored.  As the changing of this class has pretty far reaching effects, it will exist temporarily in the ""resource2"" module. The first change will be to introduce the module itself as a standalone, and then we will change each service independent of the others. Subsequent changes should not be too disruptive, mostly in the form of renaming things like resource.prop to resource.Body, and the like.  There is a fairly major side effect of the implementation of this class that is behaviorally different from the initial Resource implementation. Previously, any-and-all data sent into a Resource initializer would be tracked internally on the Resource instance and then sent to the server *even if it did not correspond to a resource.prop on the class*. Ultimately this would have become a problem as servers are becoming more strict about what they receive, but this implementation makes no allowance for so-called loose data to be entered. If there is no component attribute for an argument to be sent to the server, or one received from the server, it will not exist as an attribute of the Resource. Currently, said data is just dropped entirely, but it could be logged or perhaps a strict/loose mode could be engaged to warn or otherwise fail when unexpected data is entered. Ultimately, this behavior had to happen. In the near term it may mean that the SDK doesn't work exactly as it had in previous versions, but that will just mean updating Resource definitions to match what is truly expected or given by the server.  A relatively major change that comes from this refactoring is a deconstruction of the unit tests that previously existed. While resource.prop now lives on as resource2._BaseComponent, the unit tests were started over from scratch as they were too tightly coupled to the Resource class rather than being tested as an independent unit. All of the code that is being refactored as a part of this change is now being tested as independent of any other code as is possible.  Change-Id: If4d07b8d617f53be5a86c0c8733166e68e9d21ad  need a second exception so this can work  Change-Id: Ic80b5e4b6c5a994acaf3fec1b5253e672e800e63  pep8 and exception change  Change-Id: Icc872b73e2e924c0aff7fd9b8335be4d347fcc9e  initial unit tests  Change-Id: Ie3a3c1e59da80f5732dfd0977f815161ce17ff8d  43% coverage  Change-Id: I634ac93b913e4fe9a3a812b384c8539d9266f2c0",objective,,,,,,
openstack%2Fsenlin~master~I8a59b3ab94dab664da29f85a5b7d2c7043ffeab6,https://review.opendev.org/298129,Refactor API version range support,"Refactor API version range support  This patch refactors the API version check so that the min/max versions are defined only for OpenStack APIs. Previously, these definitions are placed in a global scope which is incorrect.  partial-bp: api-microversioning Change-Id: I8a59b3ab94dab664da29f85a5b7d2c7043ffeab6",integration,,,,,,
openstack%2Fsenlin~master~I8a59b3ab94dab664da29f85a5b7d2c7043ffeab6,https://review.opendev.org/298129,Refactor API version range support,"Refactor API version range support  This patch refactors the API version check so that the min/max versions are defined only for OpenStack APIs. Previously, these definitions are placed in a global scope which is incorrect.  partial-bp: api-microversioning Change-Id: I8a59b3ab94dab664da29f85a5b7d2c7043ffeab6",objective,,,,,,
openstack%2Fcompute-hyperv~master~Ibd0542c86f573a397bbbe658fb4c5723f964ded9,https://review.opendev.org/286765,"HyperV: Refactor livemigr, avoiding getting disk paths remotely","HyperV: Refactor livemigr, avoiding getting disk paths remotely  During live migration, if passthrough disks are attached to instances, we need to create a planned VM, setting the right disk paths according to the destination host so that the volumes will still be accessible after the instance is migrated.  At the moment, we retrieve the disk paths remotely via WMI. Due to the fact that some WMI API methods are broken, for the FC implementation we had to use the hbaapi.dll functions directly, using ctypes.  As this can't work remotely, this patch slightly changes the live migration workflow. The planned VM is created during the pre-livemigration step on the destination host, updating the virtual disk resources.  Co-Authored-By: Alin Balutoiu <abalutoiu@cloudbasesolutions.com>  Partially-implements: blueprint hyperv-fibre-channel Depends-On: I29bbca19f274c1f6f092a16c2585fd33ff78c971 Change-Id: Ibd0542c86f573a397bbbe658fb4c5723f964ded9",integration,,,,,,
openstack%2Fcompute-hyperv~master~Ibd0542c86f573a397bbbe658fb4c5723f964ded9,https://review.opendev.org/286765,"HyperV: Refactor livemigr, avoiding getting disk paths remotely","HyperV: Refactor livemigr, avoiding getting disk paths remotely  During live migration, if passthrough disks are attached to instances, we need to create a planned VM, setting the right disk paths according to the destination host so that the volumes will still be accessible after the instance is migrated.  At the moment, we retrieve the disk paths remotely via WMI. Due to the fact that some WMI API methods are broken, for the FC implementation we had to use the hbaapi.dll functions directly, using ctypes.  As this can't work remotely, this patch slightly changes the live migration workflow. The planned VM is created during the pre-livemigration step on the destination host, updating the virtual disk resources.  Co-Authored-By: Alin Balutoiu <abalutoiu@cloudbasesolutions.com>  Partially-implements: blueprint hyperv-fibre-channel Depends-On: I29bbca19f274c1f6f092a16c2585fd33ff78c971 Change-Id: Ibd0542c86f573a397bbbe658fb4c5723f964ded9",objective,,,,,,
x%2Fpython-oneviewclient~master~I943d1444c9a0315ff1061f20432d7255df75e468,https://review.opendev.org/285402,Fixing URL of index variable and refactoring,"Fixing URL of index variable and refactoring   This patch fixes the problem related to the URL of the server  profile template, that was not the same as used in REST API of  OneView. Also, some refactoring in the client.py module,  methods *by_uuid, that could be simplified.  Change-Id: I943d1444c9a0315ff1061f20432d7255df75e468 Closes-Bug: #1549994",integration,,,,,,
x%2Fpython-oneviewclient~master~I943d1444c9a0315ff1061f20432d7255df75e468,https://review.opendev.org/285402,Fixing URL of index variable and refactoring,"Fixing URL of index variable and refactoring   This patch fixes the problem related to the URL of the server  profile template, that was not the same as used in REST API of  OneView. Also, some refactoring in the client.py module,  methods *by_uuid, that could be simplified.  Change-Id: I943d1444c9a0315ff1061f20432d7255df75e468 Closes-Bug: #1549994",objective,,,,,,
openstack%2Fsenlin~master~I799b08f038af91b0641d04c68fe897c7d116e84b,https://review.opendev.org/285778,Refactor cluster create,Refactor cluster create  This patch refactors the cluster create api to use the action crate method.  Change-Id: I799b08f038af91b0641d04c68fe897c7d116e84b,integration,,,,,,
openstack%2Fmurano~master~If02c7e5d7d39574d0621e0e8dc27d1f501a31984,https://review.opendev.org/276016,Major refactoring of how OS clients are created and managed,Major refactoring of how OS clients are created and managed  * Single universal ClientManager class was dropped in favor of    of individual in-context methods to create OS clients without    ClientManager restrictions. * Environment class was renamed to ExecutionSession to avoid    common confusion with io.murano.Environment * execution_session_local module was introduced to simplify    keep of per-execution session (per-deployment) data. This    is similar to thread-locals with the difference that there can    be many threads in single session. * All OS-clients related code was migrated to keystone client    sessions and API v3 (except for GLARE and Mistral that doesn't    support sessions). This increases performance and solves    authentication problems that could be caused by token expiration    even with trusts enabled. * [DEFAULT]/home_region setting was introduced instead of    [murano]/region_for_services to configure what region    should be used by the clients by default (where Murano API    resides). All client factories respect this setting.  Change-Id: If02c7e5d7d39574d0621e0e8dc27d1f501a31984,integration,,,,,,
openstack%2Fmurano~master~If02c7e5d7d39574d0621e0e8dc27d1f501a31984,https://review.opendev.org/276016,Major refactoring of how OS clients are created and managed,Major refactoring of how OS clients are created and managed  * Single universal ClientManager class was dropped in favor of    of individual in-context methods to create OS clients without    ClientManager restrictions. * Environment class was renamed to ExecutionSession to avoid    common confusion with io.murano.Environment * execution_session_local module was introduced to simplify    keep of per-execution session (per-deployment) data. This    is similar to thread-locals with the difference that there can    be many threads in single session. * All OS-clients related code was migrated to keystone client    sessions and API v3 (except for GLARE and Mistral that doesn't    support sessions). This increases performance and solves    authentication problems that could be caused by token expiration    even with trusts enabled. * [DEFAULT]/home_region setting was introduced instead of    [murano]/region_for_services to configure what region    should be used by the clients by default (where Murano API    resides). All client factories respect this setting.  Change-Id: If02c7e5d7d39574d0621e0e8dc27d1f501a31984,quality,,,,,,
openstack%2Fsenlin~master~I067196aa64215706ff1ff437a3f6c500683181e4,https://review.opendev.org/280090,Refactor controllers in API layer,Refactor controllers in API layer  We have quite some duplicated logics in the resource controllers at API layer. This patch abstracts the duplicated code into a base class.  Change-Id: I067196aa64215706ff1ff437a3f6c500683181e4,quality,,,,,,
openstack%2Fsenlin~master~I067196aa64215706ff1ff437a3f6c500683181e4,https://review.opendev.org/280090,Refactor controllers in API layer,Refactor controllers in API layer  We have quite some duplicated logics in the resource controllers at API layer. This patch abstracts the duplicated code into a base class.  Change-Id: I067196aa64215706ff1ff437a3f6c500683181e4,objective,,,,,,
openstack%2Fpuppet-mistral~master~I979e21caa71ee35337dc01b225878701868e966a,https://review.opendev.org/277207,Refactor puppet-mistral,"Refactor puppet-mistral  The module was written in a way that was not consistent with other Puppet OpenStack modules, the interface was very different.  This patch: * add db.pp * update logging.pp with usual parameters * drop useless parameters in keystone/auth.pp * cleanup params.pp * drop services.pp, which is useless * Update unit tests * Add coordination support in init.pp * Some alignment issues * Add more doc in README * Stop including ::mistral in all classes * Include mistral::policy in mistral::api  This is a non-backward compatible change, but since the module has no release and no stable branch, also very new, this is not something we need to care at this stage. People using this module at this stage will have to update their manifests otherwise their Puppet catalog will fail.  Change-Id: I979e21caa71ee35337dc01b225878701868e966a",integration,,,,,,
openstack%2Fpuppet-mistral~master~I979e21caa71ee35337dc01b225878701868e966a,https://review.opendev.org/277207,Refactor puppet-mistral,"Refactor puppet-mistral  The module was written in a way that was not consistent with other Puppet OpenStack modules, the interface was very different.  This patch: * add db.pp * update logging.pp with usual parameters * drop useless parameters in keystone/auth.pp * cleanup params.pp * drop services.pp, which is useless * Update unit tests * Add coordination support in init.pp * Some alignment issues * Add more doc in README * Stop including ::mistral in all classes * Include mistral::policy in mistral::api  This is a non-backward compatible change, but since the module has no release and no stable branch, also very new, this is not something we need to care at this stage. People using this module at this stage will have to update their manifests otherwise their Puppet catalog will fail.  Change-Id: I979e21caa71ee35337dc01b225878701868e966a",quality,,,,,,
openstack%2Fwatcher~master~I7600ff8a28d524b56c7dd4903ac4d203634ae412,https://review.opendev.org/265288,Refactored existing tempest API tests,Refactored existing tempest API tests  We must set up Tempest for Watcher (http://docs.openstack.org/developer/tempest/configuration.html) to run integration tests inside devstack environment.  This patchset is a refactoring of the stale Tempest tests to now use the latest Tempest coding standards (like using plugins and credentials factory).  Change-Id: I7600ff8a28d524b56c7dd4903ac4d203634ae412,integration,,,,,,
openstack%2Fwatcher~master~I7600ff8a28d524b56c7dd4903ac4d203634ae412,https://review.opendev.org/265288,Refactored existing tempest API tests,Refactored existing tempest API tests  We must set up Tempest for Watcher (http://docs.openstack.org/developer/tempest/configuration.html) to run integration tests inside devstack environment.  This patchset is a refactoring of the stale Tempest tests to now use the latest Tempest coding standards (like using plugins and credentials factory).  Change-Id: I7600ff8a28d524b56c7dd4903ac4d203634ae412,testing,,,,,,
openstack%2Fsenlin~master~I579de8701c69ef6e231762b9eb3192dc3208a9de,https://review.opendev.org/268170,Refactor modules used by senlin-api,"Refactor modules used by senlin-api  This patch moves wsgi into api module, merge JSON serializers and deserializers into the same module for easier maintenance.  Change-Id: I579de8701c69ef6e231762b9eb3192dc3208a9de",integration,,,,,,
openstack%2Fsenlin~master~I579de8701c69ef6e231762b9eb3192dc3208a9de,https://review.opendev.org/268170,Refactor modules used by senlin-api,"Refactor modules used by senlin-api  This patch moves wsgi into api module, merge JSON serializers and deserializers into the same module for easier maintenance.  Change-Id: I579de8701c69ef6e231762b9eb3192dc3208a9de",quality,,,,,,
openstack%2Fironic~master~Ic655e7af533497bda5e8e72d3bd90c27394681a7,https://review.opendev.org/262097,Refactor objects into a magic registry,"Refactor objects into a magic registry  This adds a register hook to the objects base class that allows us to late-import objects classes into ironic.objects. This is useful to allow object classes to depend on other objects.  For example, this will allow us to do the Port.node_uuid munging that we currently do in the API layer, in the objects layer instead.  This is completely taken from Nova, much thanks to comstud and dansmith and whoever else worked on that.  Change-Id: Ic655e7af533497bda5e8e72d3bd90c27394681a7",integration,,,,,,
openstack%2Fironic~master~Ic655e7af533497bda5e8e72d3bd90c27394681a7,https://review.opendev.org/262097,Refactor objects into a magic registry,"Refactor objects into a magic registry  This adds a register hook to the objects base class that allows us to late-import objects classes into ironic.objects. This is useful to allow object classes to depend on other objects.  For example, this will allow us to do the Port.node_uuid munging that we currently do in the API layer, in the objects layer instead.  This is completely taken from Nova, much thanks to comstud and dansmith and whoever else worked on that.  Change-Id: Ic655e7af533497bda5e8e72d3bd90c27394681a7",objective,,,,,,
openstack%2Fpython-ironicclient~master~Ic77a86196d5bcd956f0a3ae517200824a4d70aa8,https://review.opendev.org/252150,"Refactoring and removing duplicate code of ""base.Manager"" heirs without changing the API","Refactoring and removing duplicate code of ""base.Manager"" heirs without changing the API  This commit does refactoring regarding the base.Manager and the specific managers that inherit from it (Chassis, Node, Port and Driver).  The specific managers had a lot of duplicate code in methods like: get, create and vendor_passthru, they were literally equal, what does not make sense once we already had the base.Manager inheritance to avoid this type of problem.  This change moves the duplicate code to the parent (base.Manager) and make the specific managers simpler by making the base.Manager more useful regarding code reuse for these methods.  Change-Id: Ic77a86196d5bcd956f0a3ae517200824a4d70aa8 Closes-Bug: #1517631",integration,,,,,,
openstack%2Fpython-ironicclient~master~Ic77a86196d5bcd956f0a3ae517200824a4d70aa8,https://review.opendev.org/252150,"Refactoring and removing duplicate code of ""base.Manager"" heirs without changing the API","Refactoring and removing duplicate code of ""base.Manager"" heirs without changing the API  This commit does refactoring regarding the base.Manager and the specific managers that inherit from it (Chassis, Node, Port and Driver).  The specific managers had a lot of duplicate code in methods like: get, create and vendor_passthru, they were literally equal, what does not make sense once we already had the base.Manager inheritance to avoid this type of problem.  This change moves the duplicate code to the parent (base.Manager) and make the specific managers simpler by making the base.Manager more useful regarding code reuse for these methods.  Change-Id: Ic77a86196d5bcd956f0a3ae517200824a4d70aa8 Closes-Bug: #1517631",quality,,,,,,
openstack%2Fos-win~master~I3f58c911e6cf0206d6fbc9d62217f1534eaa1cbb,https://review.opendev.org/243296,Hyper-V: refactors utilsfactory,"Hyper-V: refactors utilsfactory  The Hyper-V API can change from a version to another (e.g. new features), requiring a new Utils class to be added for specific versions.  Refactors utilsfactory module. In this way, a new utils class can be added without adding a new parameter when retrieving the suitable class for windows version.  Change-Id: I3f58c911e6cf0206d6fbc9d62217f1534eaa1cbb Partially-Implements: blueprint hyper-v-uefi-secureboot",integration,,,,,,
openstack%2Fos-win~master~I3f58c911e6cf0206d6fbc9d62217f1534eaa1cbb,https://review.opendev.org/243296,Hyper-V: refactors utilsfactory,"Hyper-V: refactors utilsfactory  The Hyper-V API can change from a version to another (e.g. new features), requiring a new Utils class to be added for specific versions.  Refactors utilsfactory module. In this way, a new utils class can be added without adding a new parameter when retrieving the suitable class for windows version.  Change-Id: I3f58c911e6cf0206d6fbc9d62217f1534eaa1cbb Partially-Implements: blueprint hyper-v-uefi-secureboot",objective,,,,,,
openstack%2Fnova-specs~master~I3cae9495373c4334fedb18b64d907f3a6ac5ab92,https://review.opendev.org/222423,Servicegroup foundational refactoring for Control Plane,"Servicegroup foundational refactoring for Control Plane  At present, there are various interfaces through which services data can be manipulated - admin interface(nova-manage), extensions (contrib/services.py), servicegroup API layer. Having different interfaces to manipulate the source of truth can lead to severe data inconsistency for something as useful as stored in nova.services. The proposal is to follow a common path, while interacting with services data, for all the three interfaces mentioned above. This common path will go through the servicegroup layer, who's primary purpose is to manage and check for service liveliness. Doing so will help to overcome the tight coupling between nova and services database and also have a consistent view of services data, service liveliness, etc.  Change-Id: I3cae9495373c4334fedb18b64d907f3a6ac5ab92 Previously-approved: liberty Implements: blueprint servicegroup-api-control-plane",quality,,,,,,
openstack%2Fnova-specs~master~I3cae9495373c4334fedb18b64d907f3a6ac5ab92,https://review.opendev.org/222423,Servicegroup foundational refactoring for Control Plane,"Servicegroup foundational refactoring for Control Plane  At present, there are various interfaces through which services data can be manipulated - admin interface(nova-manage), extensions (contrib/services.py), servicegroup API layer. Having different interfaces to manipulate the source of truth can lead to severe data inconsistency for something as useful as stored in nova.services. The proposal is to follow a common path, while interacting with services data, for all the three interfaces mentioned above. This common path will go through the servicegroup layer, who's primary purpose is to manage and check for service liveliness. Doing so will help to overcome the tight coupling between nova and services database and also have a consistent view of services data, service liveliness, etc.  Change-Id: I3cae9495373c4334fedb18b64d907f3a6ac5ab92 Previously-approved: liberty Implements: blueprint servicegroup-api-control-plane",objective,,,,,,
openstack%2Fpython-ironicclient~master~I1295c3e0d5ca228253874719befd7ed842d505fa,https://review.opendev.org/251613,"Revert ""Refactoring and removing duplicate code of ""base.Manager"" heirs""","Revert ""Refactoring and removing duplicate code of ""base.Manager"" heirs""  This reverts commit 46b279bb36b2647bf04097fe271586fca76f5ed0.  The patch being reverted has broken the API compatibility. Until a fix for this issue has been created, the patch should be reverted.  Change-Id: I1295c3e0d5ca228253874719befd7ed842d505fa Closes-Bug: #1521429",objective,,,,,,
openstack%2Fmanila~master~Ib34e166ab65513f8f02215c6569175fc9a913244,https://review.opendev.org/246555,Refactor authorize() method in wsgi.py,Refactor authorize() method in wsgi.py  Almost every API method written in Manila performs a policy check against relevant policies in etc/policy.json. A method - authorize() was introduced in manila/api/openstack/wsgi.py in commit e4428f5e6c324a674c76f81340e1c94a956b4c6c to perform these policy checks.  This patch refactors the authorize() method as a decorator for consistency and easy usage in APIs that choose to implement the policy check prior to any core logic.  Prior unit tests are modified for the APIs impacted through this change.  Change-Id: Ib34e166ab65513f8f02215c6569175fc9a913244 Closes-Bug: #1515397,integration,,,,,,
openstack%2Fmanila~master~Ib34e166ab65513f8f02215c6569175fc9a913244,https://review.opendev.org/246555,Refactor authorize() method in wsgi.py,Refactor authorize() method in wsgi.py  Almost every API method written in Manila performs a policy check against relevant policies in etc/policy.json. A method - authorize() was introduced in manila/api/openstack/wsgi.py in commit e4428f5e6c324a674c76f81340e1c94a956b4c6c to perform these policy checks.  This patch refactors the authorize() method as a decorator for consistency and easy usage in APIs that choose to implement the policy check prior to any core logic.  Prior unit tests are modified for the APIs impacted through this change.  Change-Id: Ib34e166ab65513f8f02215c6569175fc9a913244 Closes-Bug: #1515397,objective,,,,,,
openstack%2Fopenstack-health~master~Ifde87132b66053b4a86b5d96c337a76e5554713e,https://review.opendev.org/244651,Refactor project api and ui to make them generic,"Refactor project api and ui make it generic  As part of providing a mechanism to let users group dashboard information by other run metadata keys (project, voting, etc.), a few changes were needed both on the ui and api.  On the api, the changes consist on making the endpoint accept any run metadata key, and not only projects. On the ui, the changes consist on renaming and adapting ProjectController to become GroupController: a generic controller that is going to handle this top-level grouping.  Change-Id: Ifde87132b66053b4a86b5d96c337a76e5554713e",integration,,,,,,
openstack%2Fopenstack-health~master~Ifde87132b66053b4a86b5d96c337a76e5554713e,https://review.opendev.org/244651,Refactor project api and ui to make them generic,"Refactor project api and ui make it generic  As part of providing a mechanism to let users group dashboard information by other run metadata keys (project, voting, etc.), a few changes were needed both on the ui and api.  On the api, the changes consist on making the endpoint accept any run metadata key, and not only projects. On the ui, the changes consist on renaming and adapting ProjectController to become GroupController: a generic controller that is going to handle this top-level grouping.  Change-Id: Ifde87132b66053b4a86b5d96c337a76e5554713e",objective,,,,,,
x%2Fevoque~master~I3ac8143308a114abf1792d2aafac66c8bddd3629,https://review.opendev.org/243104,Refactor Evoque API,Refactor Evoque API  Change-Id: I3ac8143308a114abf1792d2aafac66c8bddd3629 see: https://pecan.readthedocs.org/en/latest/quick_start.html#base-application-template,integration,,,,,,
openstack%2Fmonasca-api~master~Ib4920219607ba1a92bfbe7e10cbc4709c593e572,https://review.opendev.org/231830,Code refactor for monasca-api resources,Code refactor for monasca-api resources  - refactored variables - pulled method calls into variable to boost readability  Change-Id: Ib4920219607ba1a92bfbe7e10cbc4709c593e572,integration,,,,,,
openstack%2Fmonasca-api~master~Ib4920219607ba1a92bfbe7e10cbc4709c593e572,https://review.opendev.org/231830,Code refactor for monasca-api resources,Code refactor for monasca-api resources  - refactored variables - pulled method calls into variable to boost readability  Change-Id: Ib4920219607ba1a92bfbe7e10cbc4709c593e572,quality,,,,,,
x%2Fvmware-nsx~master~Idec72c464a4a2771f089b840aae129d42816a35f,https://review.opendev.org/229640,refactor NSX v3 UTs,"refactor NSX v3 UTs  this patch contains a major refactor of the nsx v3 tests which have nsx rest api calls in their execution stack. in particular it removes the global module level patching that's current done as this type of global patching has intermittent failures when testr runs tests in parallel. these failures become more prevalent when the psec code + tests are added. thus this patch is needed for the psec drop I have.  NB: as noted in the code, most of the module level patching / mocking magic can go away once we move the current functional logic to a rest resource model.  Change-Id: Idec72c464a4a2771f089b840aae129d42816a35f",integration,,,,,,
x%2Fvmware-nsx~master~Idec72c464a4a2771f089b840aae129d42816a35f,https://review.opendev.org/229640,refactor NSX v3 UTs,"refactor NSX v3 UTs  this patch contains a major refactor of the nsx v3 tests which have nsx rest api calls in their execution stack. in particular it removes the global module level patching that's current done as this type of global patching has intermittent failures when testr runs tests in parallel. these failures become more prevalent when the psec code + tests are added. thus this patch is needed for the psec drop I have.  NB: as noted in the code, most of the module level patching / mocking magic can go away once we move the current functional logic to a rest resource model.  Change-Id: Idec72c464a4a2771f089b840aae129d42816a35f",testing,,,,,,
openstack%2Fpuppet-placement~stable%2Ftrain~I152fb025027480a4a5151d5372dd03618c482b95,https://review.opendev.org/733722,Refactor placement::api,Refactor placement::api  This patch refactors placement::api class with generic_service class to make service/package management more simple.  Note that it also fixes incorrect stop of httpd service on non-Debian system.  Conflicts:         manifests/api.pp  Backport note: This backports doesn't include deprecation part because we shouldn't deprecate parameteres in stable branches.  Change-Id: I152fb025027480a4a5151d5372dd03618c482b95 (cherry picked from commit 425180f5b8789852cba3511e16218fcb9c4607e2) (cherry picked from commit dbafc9438384318cb66438f098858d608e042785),integration,,,,,,
openstack%2Fpuppet-placement~stable%2Ftrain~I152fb025027480a4a5151d5372dd03618c482b95,https://review.opendev.org/733722,Refactor placement::api,Refactor placement::api  This patch refactors placement::api class with generic_service class to make service/package management more simple.  Note that it also fixes incorrect stop of httpd service on non-Debian system.  Conflicts:         manifests/api.pp  Backport note: This backports doesn't include deprecation part because we shouldn't deprecate parameteres in stable branches.  Change-Id: I152fb025027480a4a5151d5372dd03618c482b95 (cherry picked from commit 425180f5b8789852cba3511e16218fcb9c4607e2) (cherry picked from commit dbafc9438384318cb66438f098858d608e042785),objective,,,,,,
openstack%2Fneutron~master~Ia9d8638b9268b5aa8512cbb9d001413751f82649,https://review.opendev.org/214218,QoS agent extension and driver refactoring,QoS agent extension and driver refactoring  Cache QoS policies to reduce resource pull RPC calls to server.  Support delete per rule_type or delete all rules.  Moved some code common to all drivers into base qos driver abstract class.  Partially-Implements: quantum-qos-api Change-Id: Ia9d8638b9268b5aa8512cbb9d001413751f82649,integration,,,,,,
openstack%2Fneutron~master~Ia9d8638b9268b5aa8512cbb9d001413751f82649,https://review.opendev.org/214218,QoS agent extension and driver refactoring,QoS agent extension and driver refactoring  Cache QoS policies to reduce resource pull RPC calls to server.  Support delete per rule_type or delete all rules.  Moved some code common to all drivers into base qos driver abstract class.  Partially-Implements: quantum-qos-api Change-Id: Ia9d8638b9268b5aa8512cbb9d001413751f82649,objective,,,,,,
openstack%2Fneutron~master~Icc3a9599c6d7a4de9c56b452dfab7909c8d0a576,https://review.opendev.org/214055,Qos SR-IOV: Refactor extension delete to get mac and pci slot,Qos SR-IOV: Refactor extension delete to get mac and pci slot  This patch pair the mac and pci_slot for a device (VF) instead of searching the pci_slot when calling extension delete. It is also change the port_id to be mac before pass it to the agent extension. This is required because mac is the key identifer for the VF port and on extention port delete api will allow to remove it from the know_port list of the qos_extension.  Change-Id: Icc3a9599c6d7a4de9c56b452dfab7909c8d0a576,integration,,,,,,
openstack%2Fneutron~master~Icc3a9599c6d7a4de9c56b452dfab7909c8d0a576,https://review.opendev.org/214055,Qos SR-IOV: Refactor extension delete to get mac and pci slot,Qos SR-IOV: Refactor extension delete to get mac and pci slot  This patch pair the mac and pci_slot for a device (VF) instead of searching the pci_slot when calling extension delete. It is also change the port_id to be mac before pass it to the agent extension. This is required because mac is the key identifer for the VF port and on extention port delete api will allow to remove it from the know_port list of the qos_extension.  Change-Id: Icc3a9599c6d7a4de9c56b452dfab7909c8d0a576,objective,,,,,,
openstack%2Fcompute-hyperv~master~I1ea398473947a0d9afea08c08fea09dc09afea09,https://review.opendev.org/216680,Hyper-V: refactors utilsfactory,"Hyper-V: refactors utilsfactory  The Hyper-V API can change from a version to another (e.g. new features), requiring a new Utils class to be added for specific versions.  Refactors utilsfactory module. In this way, a new utils class can be added without adding a new parameter when retrieving the suitable class for windows version.  Change-Id: I1ea398473947a0d9afea08c08fea09dc09afea09",integration,,,,,,
openstack%2Fcompute-hyperv~master~I1ea398473947a0d9afea08c08fea09dc09afea09,https://review.opendev.org/216680,Hyper-V: refactors utilsfactory,"Hyper-V: refactors utilsfactory  The Hyper-V API can change from a version to another (e.g. new features), requiring a new Utils class to be added for specific versions.  Refactors utilsfactory module. In this way, a new utils class can be added without adding a new parameter when retrieving the suitable class for windows version.  Change-Id: I1ea398473947a0d9afea08c08fea09dc09afea09",objective,,,,,,
openstack%2Fdragonflow~master~I4207300fbff22bdd4d74e179f906cd106b2d5a12,https://review.opendev.org/218653,Refactor pluggable DB module,Refactor pluggable DB module  Replace the applicative API with a simple to implement API for key/value DB's. Use NB API layer to do the key and value parsing into values and implement the various objects used in the applications.  Change-Id: I4207300fbff22bdd4d74e179f906cd106b2d5a12,integration,,,,,,
openstack%2Fdragonflow~master~I4207300fbff22bdd4d74e179f906cd106b2d5a12,https://review.opendev.org/218653,Refactor pluggable DB module,Refactor pluggable DB module  Replace the applicative API with a simple to implement API for key/value DB's. Use NB API layer to do the key and value parsing into values and implement the various objects used in the applications.  Change-Id: I4207300fbff22bdd4d74e179f906cd106b2d5a12,objective,,,,,,
osf%2Frefstack~master~I5da363a2daa84846ed862e5316c22f1b9cf8d2ec,https://review.opendev.org/217116,Refactoring error handling in Refstack API,Refactoring error handling in Refstack API  All exited refstack excetions should be transformed to valid HTTPError with descriptive messages  Closes-Bug: #1485715 Change-Id: I5da363a2daa84846ed862e5316c22f1b9cf8d2ec,integration,,,,,,
osf%2Frefstack~master~I5da363a2daa84846ed862e5316c22f1b9cf8d2ec,https://review.opendev.org/217116,Refactoring error handling in Refstack API,Refactoring error handling in Refstack API  All exited refstack excetions should be transformed to valid HTTPError with descriptive messages  Closes-Bug: #1485715 Change-Id: I5da363a2daa84846ed862e5316c22f1b9cf8d2ec,objective,,,,,,
openstack%2Fdesignate~master~I8d67cebeecc8261e715849aefeafd20f0d60d304,https://review.opendev.org/170612,Refactor notify logic into backends,"WIP: Refactor notify logic into backends  The idea here is, like many things, the time and frequency of sending NOTIFYs is not the same for every backend. So we let the backends decide when to send their NOTIFYs. Ideally this makes the Pool Manager code simpler and the backend code easier to understand, and avoids sending some unnecessary NOTIFYs.  This requires a change to MiniDNS' rpcapi to make notify_zone_changed and get_serial_number take a host and port, instead of a nameserver object.  Change-Id: I8d67cebeecc8261e715849aefeafd20f0d60d304",integration,,,,,,
openstack%2Fdesignate~master~I8d67cebeecc8261e715849aefeafd20f0d60d304,https://review.opendev.org/170612,Refactor notify logic into backends,"WIP: Refactor notify logic into backends  The idea here is, like many things, the time and frequency of sending NOTIFYs is not the same for every backend. So we let the backends decide when to send their NOTIFYs. Ideally this makes the Pool Manager code simpler and the backend code easier to understand, and avoids sending some unnecessary NOTIFYs.  This requires a change to MiniDNS' rpcapi to make notify_zone_changed and get_serial_number take a host and port, instead of a nameserver object.  Change-Id: I8d67cebeecc8261e715849aefeafd20f0d60d304",objective,,,,,,
openstack%2Faodh~master~I62b7efe9cada1ce72bd878b6690a0850279cf797,https://review.opendev.org/212604,Refactor api tests (_update_alarm),Refactor api tests (_update_alarm)  This patch fixs a input of the helper function '_update_alarm()' which used to require alarm data as it's input although it just referred 'alarm_id'.  This patch also delete unecessary '_get_alarm()'.  Change-Id: I62b7efe9cada1ce72bd878b6690a0850279cf797,integration,,,,,,
openstack%2Faodh~master~I62b7efe9cada1ce72bd878b6690a0850279cf797,https://review.opendev.org/212604,Refactor api tests (_update_alarm),Refactor api tests (_update_alarm)  This patch fixs a input of the helper function '_update_alarm()' which used to require alarm data as it's input although it just referred 'alarm_id'.  This patch also delete unecessary '_get_alarm()'.  Change-Id: I62b7efe9cada1ce72bd878b6690a0850279cf797,quality,,,,,,
openstack%2Faodh~master~I62b7efe9cada1ce72bd878b6690a0850279cf797,https://review.opendev.org/212604,Refactor api tests (_update_alarm),Refactor api tests (_update_alarm)  This patch fixs a input of the helper function '_update_alarm()' which used to require alarm data as it's input although it just referred 'alarm_id'.  This patch also delete unecessary '_get_alarm()'.  Change-Id: I62b7efe9cada1ce72bd878b6690a0850279cf797,testing,,,,,,
openstack%2Fyaql~master~Ibe3a1345546d1c44df55d02e6e3408ac0325e99a,https://review.opendev.org/208676,Contexts interface refactoring,"Contexts interface refactoring  * Added methods to retrieve context keys, check data/function    presence, delete data/function * Recursion was eliminated * collect_functions() was moved to the base class and uses inheritors    get_functions() API * Bugs in MultiContext were fixed * Unit tests were added  Change-Id: Ibe3a1345546d1c44df55d02e6e3408ac0325e99a",integration,,,,,,
openstack%2Fyaql~master~Ibe3a1345546d1c44df55d02e6e3408ac0325e99a,https://review.opendev.org/208676,Contexts interface refactoring,"Contexts interface refactoring  * Added methods to retrieve context keys, check data/function    presence, delete data/function * Recursion was eliminated * collect_functions() was moved to the base class and uses inheritors    get_functions() API * Bugs in MultiContext were fixed * Unit tests were added  Change-Id: Ibe3a1345546d1c44df55d02e6e3408ac0325e99a",objective,,,,,,
openstack%2Faodh~master~I371ea06f176f65b648068382071176235c9b480c,https://review.opendev.org/210832,Refactor api tests for alarm history,Refactor api tests for alarm history  This patch fixs a input of the helper function '_get_alarm_history()' which used to get alarm data although it just referred 'alarm_id'.  This patch also delete unecessary '_get_alarm()'.  Change-Id: I371ea06f176f65b648068382071176235c9b480c,integration,,,,,,
openstack%2Faodh~master~I371ea06f176f65b648068382071176235c9b480c,https://review.opendev.org/210832,Refactor api tests for alarm history,Refactor api tests for alarm history  This patch fixs a input of the helper function '_get_alarm_history()' which used to get alarm data although it just referred 'alarm_id'.  This patch also delete unecessary '_get_alarm()'.  Change-Id: I371ea06f176f65b648068382071176235c9b480c,objective,,,,,,
openstack%2Fpython-novaclient~master~I44e35e181515923a677b336ed48bc705cf673134,https://review.opendev.org/207355,Refactor and update test_instances and test_volumes_api,Refactor and update test_instances and test_volumes_api  Deduplicate code in test_instances.py and test_volumes_api.py. Update test_attach_volume method. Add method wait_for_volume_status to base.py. Add method get_volume_property to base.py  Change-Id: I44e35e181515923a677b336ed48bc705cf673134,integration,,,,,,
openstack%2Fpython-novaclient~master~I44e35e181515923a677b336ed48bc705cf673134,https://review.opendev.org/207355,Refactor and update test_instances and test_volumes_api,Refactor and update test_instances and test_volumes_api  Deduplicate code in test_instances.py and test_volumes_api.py. Update test_attach_volume method. Add method wait_for_volume_status to base.py. Add method get_volume_property to base.py  Change-Id: I44e35e181515923a677b336ed48bc705cf673134,quality,,,,,,
openstack%2Ffreezer~master~I4ff143e0ddd981f6bb441eb8238a950301448714,https://review.opendev.org/207102,Refactoring api interface on freezer_ui,Refactoring api interface on freezer_ui  Refactoring freezer key in endpoint discovery Add new class to handle nested values from API  Change-Id: I4ff143e0ddd981f6bb441eb8238a950301448714,integration,,,,,,
openstack%2Ffreezer~master~I68850f9236f228c2ba99db2c3f3fb3a412f5ee4c,https://review.opendev.org/203370,Refactoring logging and translations on freezer_api,Refactoring logging and translations on freezer_api  Refactoring logging to use oslo.log to have standard OpenStack logging. Refactoring log messages to enable i18n translations. Refactoring Exception messages to enable i18n translations.  New requirement oslo.log.  Change-Id: I68850f9236f228c2ba99db2c3f3fb3a412f5ee4c,integration,,,,,,
openstack%2Ffreezer~master~I68850f9236f228c2ba99db2c3f3fb3a412f5ee4c,https://review.opendev.org/203370,Refactoring logging and translations on freezer_api,Refactoring logging and translations on freezer_api  Refactoring logging to use oslo.log to have standard OpenStack logging. Refactoring log messages to enable i18n translations. Refactoring Exception messages to enable i18n translations.  New requirement oslo.log.  Change-Id: I68850f9236f228c2ba99db2c3f3fb3a412f5ee4c,objective,,,,,,
openstack%2Ffreezer~master~I533c7d075c55d019d55990ea9e9053db920fda45,https://review.opendev.org/203377,Refactor api imports to OpenStack Hacking compliant,Refactor api imports to OpenStack Hacking compliant  http://docs.openstack.org/developer/hacking/  Change-Id: I533c7d075c55d019d55990ea9e9053db920fda45,integration,,,,,,
openstack%2Fcloudkitty~master~Ibb9dc1e0c7ead75922d777a669e0270b632c4631,https://review.opendev.org/185675,Refactored meta collector API,Refactored meta collector API  Global improvement of the API. Added support for policy engine. Added new policy rights to manage the collector mappings. Updated documentation. Added contrib script to do simple API tests.  Change-Id: Ibb9dc1e0c7ead75922d777a669e0270b632c4631,integration,,,,,,
openstack%2Fcloudkitty~master~Ibb9dc1e0c7ead75922d777a669e0270b632c4631,https://review.opendev.org/185675,Refactored meta collector API,Refactored meta collector API  Global improvement of the API. Added support for policy engine. Added new policy rights to manage the collector mappings. Updated documentation. Added contrib script to do simple API tests.  Change-Id: Ibb9dc1e0c7ead75922d777a669e0270b632c4631,quality,,,,,,
openstack%2Fcloudkitty~master~Ibb9dc1e0c7ead75922d777a669e0270b632c4631,https://review.opendev.org/185675,Refactored meta collector API,Refactored meta collector API  Global improvement of the API. Added support for policy engine. Added new policy rights to manage the collector mappings. Updated documentation. Added contrib script to do simple API tests.  Change-Id: Ibb9dc1e0c7ead75922d777a669e0270b632c4631,objective,,,,,,
openstack%2Fnova~master~I42ffac6b323a809ee80a1e8dedf729de46106b47,https://review.opendev.org/197770,Refactor test_servers to use instance objects,"Refactor test_servers to use instance objects  This does a major refactor of code in test_servers to use instance objects and generally mock things at the compute/api layer instead of all the way down in the database layer.  It removes a few tests and conditions that were just testing DB semantics from the highest levels.  This will be needed when we drop the flavor compatibility code from the instance object, as these tests were mocking out the DB layer with old-style instance structures.  Change-Id: I42ffac6b323a809ee80a1e8dedf729de46106b47",integration,,,,,,
openstack%2Fnova~master~I42ffac6b323a809ee80a1e8dedf729de46106b47,https://review.opendev.org/197770,Refactor test_servers to use instance objects,"Refactor test_servers to use instance objects  This does a major refactor of code in test_servers to use instance objects and generally mock things at the compute/api layer instead of all the way down in the database layer.  It removes a few tests and conditions that were just testing DB semantics from the highest levels.  This will be needed when we drop the flavor compatibility code from the instance object, as these tests were mocking out the DB layer with old-style instance structures.  Change-Id: I42ffac6b323a809ee80a1e8dedf729de46106b47",objective,,,,,,
x%2Fvmware-nsx~master~Ia927ebcc1f03a3b5c22ddf43b8e81d66212ecb40,https://review.opendev.org/204649,Refactoring out common client api methods,WIP: Refactoring out common client api methods  Added the following method to handle the requests sent to NSX:     - create_resource     - update_resource     - get_resource     - delete_resource  Change-Id: Ia927ebcc1f03a3b5c22ddf43b8e81d66212ecb40,integration,,,,,,
openstack%2Fglance~master~Icf73841fbd10204db689b2b28451434ebaf10087,https://review.opendev.org/178997,Refactoring of image-members v2 API implementation.,"Complete refactoring of Glance image-members v2 API implementation.  The refactoring is motivated by multiple issues in the current code: - Exceptions thrown by image lookup as well as member lookup are handled in the same try-except block and handled as if it was only the image lookup that failed. - Does not take into account that in v2, trying to do any operation on a public image members should throw 403 Forbidden error. As a result, the current response messages for operations on a public image show an ""Unauthorized"" error message even for admin rather than the more accurate ""Public images do not have any members"" error message. - The show() method returns 404 when 403 is appropriate due to the way it does exception handling.  Change-Id: Icf73841fbd10204db689b2b28451434ebaf10087 Closes-Bug: #1444129 Closes-Bug: #1450370",integration,,,,,,
openstack%2Fglance~master~Icf73841fbd10204db689b2b28451434ebaf10087,https://review.opendev.org/178997,Refactoring of image-members v2 API implementation.,"Complete refactoring of Glance image-members v2 API implementation.  The refactoring is motivated by multiple issues in the current code: - Exceptions thrown by image lookup as well as member lookup are handled in the same try-except block and handled as if it was only the image lookup that failed. - Does not take into account that in v2, trying to do any operation on a public image members should throw 403 Forbidden error. As a result, the current response messages for operations on a public image show an ""Unauthorized"" error message even for admin rather than the more accurate ""Public images do not have any members"" error message. - The show() method returns 404 when 403 is appropriate due to the way it does exception handling.  Change-Id: Icf73841fbd10204db689b2b28451434ebaf10087 Closes-Bug: #1444129 Closes-Bug: #1450370",objective,,,,,,
openstack%2Fnova-specs~master~I6d017d34e6d07ae6fb45b22780c5bd26e3ead23b,https://review.opendev.org/190322,Servicegroup foundational refactoring for Control Plane,"Servicegroup foundational refactoring for Control Plane  At present, there are various interfaces through which services data can be manipulated - admin interface(nova-manage), extensions (contrib/services.py), servicegroup API layer. Having different interfaces to manipulate the source of truth can lead to severe data inconsistency for something as useful as stored in nova.services. The proposal is to follow a common path, while interacting with services data, for all the three interfaces mentioned above. This common path will go through the servicegroup layer, who's primary purpose is the manage and check for service liveliness. Doing so will help to overcome the tight coupling between nova and services database and also have a consistent view of services data, service liveliness, etc.  Change-Id: I6d017d34e6d07ae6fb45b22780c5bd26e3ead23b Implements: blueprint servicegroup-api-control-plane",integration,,,,,,
openstack%2Fnova-specs~master~I6d017d34e6d07ae6fb45b22780c5bd26e3ead23b,https://review.opendev.org/190322,Servicegroup foundational refactoring for Control Plane,"Servicegroup foundational refactoring for Control Plane  At present, there are various interfaces through which services data can be manipulated - admin interface(nova-manage), extensions (contrib/services.py), servicegroup API layer. Having different interfaces to manipulate the source of truth can lead to severe data inconsistency for something as useful as stored in nova.services. The proposal is to follow a common path, while interacting with services data, for all the three interfaces mentioned above. This common path will go through the servicegroup layer, who's primary purpose is the manage and check for service liveliness. Doing so will help to overcome the tight coupling between nova and services database and also have a consistent view of services data, service liveliness, etc.  Change-Id: I6d017d34e6d07ae6fb45b22780c5bd26e3ead23b Implements: blueprint servicegroup-api-control-plane",objective,,,,,,
x%2Fcloudcafe~master~Ic65317dc53cc0dff0d0aa4af08cf9acdd805afca,https://review.opendev.org/196737,Volumes API refactor   * Added v1/2 common models   * Added v1/2 common client   * Bugfix in datasets   * Added dataset tagging on create,Volumes API refactor   * Added v1/2 common models   * Added v1/2 common client   * Bugfix in datasets   * Added dataset tagging on create  Change-Id: Ic65317dc53cc0dff0d0aa4af08cf9acdd805afca,integration,,,,,,
openstack%2Fcinder~master~I0345c07ac490b6bd738c0fdac0b621bb9156f899,https://review.opendev.org/187624,Refactor API create_volume flow,Refactor API create_volume flow  This commit refactors the code to be more compliant with DRY rule. I've also changed some comments to be more readable and correct.  Change-Id: I0345c07ac490b6bd738c0fdac0b621bb9156f899,integration,,,,,,
openstack%2Fcinder~master~I0345c07ac490b6bd738c0fdac0b621bb9156f899,https://review.opendev.org/187624,Refactor API create_volume flow,Refactor API create_volume flow  This commit refactors the code to be more compliant with DRY rule. I've also changed some comments to be more readable and correct.  Change-Id: I0345c07ac490b6bd738c0fdac0b621bb9156f899,quality,,,,,,
openstack%2Fironic~master~I16be0c787993240e55ceb13b29bcb18c21151722,https://review.opendev.org/190121,Refactor node's and driver's vendor passthru to a common place,"Refactor node's and driver's vendor passthru to a common place  This patch is refactoring the node's and driver's vendor passthru in the API to a common place (utils.py). Historically this code was duplicated because each endpoint supported different things (driver's vendor passhtru endpoing being always synchrounous and node's being always asyncronous), since now both endpoints supports the same features and the code is almost the same it makes sense to have it in a common place, so changing once will affect both.  Related-Blueprint: ipxe-dynamic-config Change-Id: I16be0c787993240e55ceb13b29bcb18c21151722",integration,,,,,,
openstack%2Fironic~master~I16be0c787993240e55ceb13b29bcb18c21151722,https://review.opendev.org/190121,Refactor node's and driver's vendor passthru to a common place,"Refactor node's and driver's vendor passthru to a common place  This patch is refactoring the node's and driver's vendor passthru in the API to a common place (utils.py). Historically this code was duplicated because each endpoint supported different things (driver's vendor passhtru endpoing being always synchrounous and node's being always asyncronous), since now both endpoints supports the same features and the code is almost the same it makes sense to have it in a common place, so changing once will affect both.  Related-Blueprint: ipxe-dynamic-config Change-Id: I16be0c787993240e55ceb13b29bcb18c21151722",objective,,,,,,
openstack%2Fnova~master~I7b256fe3e2f0d55e654a1bbf7cdf423420e72294,https://review.opendev.org/135020,Refactor show_port() in neutron api,"(WIP)Refactor show_port() in neutron api  Refactor show_port() in neutron api code, in order to reduce the duplicated exception handling.  Change-Id: I7b256fe3e2f0d55e654a1bbf7cdf423420e72294",integration,,,,,,
openstack%2Fnova~master~I7b256fe3e2f0d55e654a1bbf7cdf423420e72294,https://review.opendev.org/135020,Refactor show_port() in neutron api,"(WIP)Refactor show_port() in neutron api  Refactor show_port() in neutron api code, in order to reduce the duplicated exception handling.  Change-Id: I7b256fe3e2f0d55e654a1bbf7cdf423420e72294",quality,,,,,,
openstack%2Fec2-api~master~Ifcb9b4541156449da1ff74d171a3ac35266577b9,https://review.opendev.org/185338,Refactor internal API of update subnet routes,Refactor internal API of update subnet routes  Refactor internal API of update subnet routes. 1 Prepare code to easy add vpn routes processing 2 Prevent updating routes for explicitly associated subnets in case of default VPC route table reassociation. 3 Make sequence of API parameters more natural.  Change-Id: Ifcb9b4541156449da1ff74d171a3ac35266577b9,integration,,,,,,
openstack%2Fec2-api~master~Ifcb9b4541156449da1ff74d171a3ac35266577b9,https://review.opendev.org/185338,Refactor internal API of update subnet routes,Refactor internal API of update subnet routes  Refactor internal API of update subnet routes. 1 Prepare code to easy add vpn routes processing 2 Prevent updating routes for explicitly associated subnets in case of default VPC route table reassociation. 3 Make sequence of API parameters more natural.  Change-Id: Ifcb9b4541156449da1ff74d171a3ac35266577b9,objective,,,,,,
x%2Fbansho~master~Ic8f4f196157073ddba1e0f3d00f2f2cca8ea28ad,https://review.opendev.org/184619,Refactored Surveil API Client,Refactored Surveil API Client  Change-Id: Ic8f4f196157073ddba1e0f3d00f2f2cca8ea28ad,integration,,,,,,
openstack%2Fpuppet-placement~master~I152fb025027480a4a5151d5372dd03618c482b95,https://review.opendev.org/732016,Refactor placement::api,Refactor placement::api  This patch refactors placement::api class with generic_service class to make service/package management more simple.  Note that it also fixes incorrect stop of httpd service on non-Debian system.  Change-Id: I152fb025027480a4a5151d5372dd03618c482b95,integration,,,,,,
openstack%2Fpuppet-placement~stable%2Fussuri~I152fb025027480a4a5151d5372dd03618c482b95,https://review.opendev.org/733480,Refactor placement::api,Refactor placement::api  This patch refactors placement::api class with generic_service class to make service/package management more simple.  Note that it also fixes incorrect stop of httpd service on non-Debian system.  Change-Id: I152fb025027480a4a5151d5372dd03618c482b95 (cherry picked from commit 425180f5b8789852cba3511e16218fcb9c4607e2),integration,,,,,,
x%2Fterracotta~master~Ie72942c96ccdab378a48b8f593f66b5c346a82d2,https://review.opendev.org/179736,Refactor db operstaions for terracotta,Refactor db operstaions for terracotta  Add db adstraction api for db operstaions and using sqlalchemy to implement ORM.  Change-Id: Ie72942c96ccdab378a48b8f593f66b5c346a82d2,integration,,,,,,
x%2Fterracotta~master~Id77ce5b6e4225a7fe6554575ae899ac7fd86a00b,https://review.opendev.org/179731,Refactor api service,Refactor api service  Change-Id: Id77ce5b6e4225a7fe6554575ae899ac7fd86a00b,integration,,,,,,
x%2Fvmware-nsx~master~If367af129773ec20341df516b4f6015c8dd830ce,https://review.opendev.org/169301,Refactoring of security-groups operation,Refactoring of security-groups operation  Mostly eliminates nsx-api calls within a database transactions  Change-Id: If367af129773ec20341df516b4f6015c8dd830ce,integration,,,,,,
opendev%2Fstoryboard~master~I304ee74625551923b0ca26f62978ef592267233b,https://review.opendev.org/150052,Refactor Tasks to work as a Subcontroller,Refactor Tasks to work as a Subcontroller  Tasks are always attached to Stories so it makes sense to have list of stories available through /stories/<story_id>/tasks endpoint. However current web-ui treats Tasks as a first-level API resource so they should be also available at /tasks  Change-Id: I304ee74625551923b0ca26f62978ef592267233b,integration,,,,,,
opendev%2Fstoryboard~master~I304ee74625551923b0ca26f62978ef592267233b,https://review.opendev.org/150052,Refactor Tasks to work as a Subcontroller,Refactor Tasks to work as a Subcontroller  Tasks are always attached to Stories so it makes sense to have list of stories available through /stories/<story_id>/tasks endpoint. However current web-ui treats Tasks as a first-level API resource so they should be also available at /tasks  Change-Id: I304ee74625551923b0ca26f62978ef592267233b,objective,,,,,,
openstack%2Fkeystone~master~I6fe0fb581f156d14fc6be3772436cc03d909c4a6,https://review.opendev.org/162338,Refactor: make Fernet token creation/validation API agnostic,"Refactor: make Fernet token creation/validation API agnostic  A lot of the Fernet token create / validate logic ended up in the v3 token provider methods, but there's nothing really API-specific about it, so it should be moved somewhere such that it's available for use by the v2 token provider code, which will just utilize a subset of the available functionality (no domain scoped tokens, etc).  As a result of this change, everything about the implementation details of Fernet tokens end up in the token_formatters module.  Change-Id: I6fe0fb581f156d14fc6be3772436cc03d909c4a6",integration,,,,,,
openstack%2Fkeystone~master~I6fe0fb581f156d14fc6be3772436cc03d909c4a6,https://review.opendev.org/162338,Refactor: make Fernet token creation/validation API agnostic,"Refactor: make Fernet token creation/validation API agnostic  A lot of the Fernet token create / validate logic ended up in the v3 token provider methods, but there's nothing really API-specific about it, so it should be moved somewhere such that it's available for use by the v2 token provider code, which will just utilize a subset of the available functionality (no domain scoped tokens, etc).  As a result of this change, everything about the implementation details of Fernet tokens end up in the token_formatters module.  Change-Id: I6fe0fb581f156d14fc6be3772436cc03d909c4a6",objective,,,,,,
openstack%2Fkeystone~master~I7e7effa769d2c25a3ea6dafa7ab4d34c055193de,https://review.opendev.org/161876,Refactor: remove dep on trust_api / v3 token helper,"Refactor: remove Fernet formatter's dep on trust_api / v3 token helper  This removes the token formatter's dependency on both trust_api and the v3 token data helper, leaving token formatters with nothing to deal with other than primitive data. The responsibility of managing token_data objects is left entirely to the core token provider.  Change-Id: I7e7effa769d2c25a3ea6dafa7ab4d34c055193de",integration,,,,,,
openstack%2Fkeystone~master~I7e7effa769d2c25a3ea6dafa7ab4d34c055193de,https://review.opendev.org/161876,Refactor: remove dep on trust_api / v3 token helper,"Refactor: remove Fernet formatter's dep on trust_api / v3 token helper  This removes the token formatter's dependency on both trust_api and the v3 token data helper, leaving token formatters with nothing to deal with other than primitive data. The responsibility of managing token_data objects is left entirely to the core token provider.  Change-Id: I7e7effa769d2c25a3ea6dafa7ab4d34c055193de",objective,,,,,,
openstack%2Fmistral~master~Ia2719a4dca0402fd1ce34a3b8ebfffe16f1fd876,https://review.opendev.org/162021,Refactor task output: DB API methods for action executions,"Refactor task output: DB API methods for action executions  * DB API methods for action executions * Field ""definition_name"" in ActionExecution * Minor refactoring  Change-Id: Ia2719a4dca0402fd1ce34a3b8ebfffe16f1fd876",integration,,,,,,
openstack%2Fneutron-vpnaas~master~I600f1e2e1445df25aa1b2203bcb7c24cb74083b7,https://review.opendev.org/160179,VPNaaS: device driver and agent refactoring,"VPNaaS: device driver and agent refactoring part 1  This is part of a multi-commit refactoring of the VPN agent to remove dependency on the L3 agent.  Currently, the reference implementation of the VPN device driver must use the L3 agent to obtain the router_info needed to complete actions, such as adding and deleting NAT rules.  To break this dependency, the plan is to save the router_info, when create_router() is called, so that the device driver can then directly access the router, without going through the L3 agent (and VPNService).  For the first step of the refactoring, this commit will pass the router_info object to the device driver's create_router() call, instead of just the router ID. Because this affects an internal API for all device drivers, it is presented as a separate commit.  Change-Id: I600f1e2e1445df25aa1b2203bcb7c24cb74083b7 Partially-Implements: blueprint restructure-l3-agent",integration,,,,,,
openstack%2Fneutron-vpnaas~master~I600f1e2e1445df25aa1b2203bcb7c24cb74083b7,https://review.opendev.org/160179,VPNaaS: device driver and agent refactoring,"VPNaaS: device driver and agent refactoring part 1  This is part of a multi-commit refactoring of the VPN agent to remove dependency on the L3 agent.  Currently, the reference implementation of the VPN device driver must use the L3 agent to obtain the router_info needed to complete actions, such as adding and deleting NAT rules.  To break this dependency, the plan is to save the router_info, when create_router() is called, so that the device driver can then directly access the router, without going through the L3 agent (and VPNService).  For the first step of the refactoring, this commit will pass the router_info object to the device driver's create_router() call, instead of just the router ID. Because this affects an internal API for all device drivers, it is presented as a separate commit.  Change-Id: I600f1e2e1445df25aa1b2203bcb7c24cb74083b7 Partially-Implements: blueprint restructure-l3-agent",objective,,,,,,
openstack%2Fneutron~master~I0da6071037f9728cc20403324e36c32116bcf00d,https://review.opendev.org/154464,Refactor the ProcessMonitor API,"Refactor the ProcessMonitor API  Refactor the ProcessMonitor API to reduce coupling to ProcessManager, and stop replicating the whole API and behavior of ProcessManager.  We introduced an abstract MonitoredProcess class to reduce coupling, and allow other kinds of external processes to be monitored too.  Partially Implements: blueprint agent-child-processes-status Co-Authored-By: Mike Kolesnik <mkolesni@redhat.com>  Change-Id: I0da6071037f9728cc20403324e36c32116bcf00d",integration,,,,,,
openstack%2Fneutron~master~I0da6071037f9728cc20403324e36c32116bcf00d,https://review.opendev.org/154464,Refactor the ProcessMonitor API,"Refactor the ProcessMonitor API  Refactor the ProcessMonitor API to reduce coupling to ProcessManager, and stop replicating the whole API and behavior of ProcessManager.  We introduced an abstract MonitoredProcess class to reduce coupling, and allow other kinds of external processes to be monitored too.  Partially Implements: blueprint agent-child-processes-status Co-Authored-By: Mike Kolesnik <mkolesni@redhat.com>  Change-Id: I0da6071037f9728cc20403324e36c32116bcf00d",quality,,,,,,
openstack%2Ffuel-web~master~Idf51fb8e5fe4473feb977ca2e13719c06b6370f5,https://review.opendev.org/159866,OSWL utils infrastructure was refactored,OSWL utils infrastructure was refactored  Description of collected resources and their attributes expanded to cover different versions of api for OS components. Corresponding statistics.utils functions updated to support new format. Unit tests updated and expanded.  Change-Id: Idf51fb8e5fe4473feb977ca2e13719c06b6370f5 Implements: blueprint openstack-workload-statistic,integration,,,,,,
openstack%2Ffuel-web~master~Idf51fb8e5fe4473feb977ca2e13719c06b6370f5,https://review.opendev.org/159866,OSWL utils infrastructure was refactored,OSWL utils infrastructure was refactored  Description of collected resources and their attributes expanded to cover different versions of api for OS components. Corresponding statistics.utils functions updated to support new format. Unit tests updated and expanded.  Change-Id: Idf51fb8e5fe4473feb977ca2e13719c06b6370f5 Implements: blueprint openstack-workload-statistic,testing,,,,,,
openstack%2Fmistral~master~I0032bea573d9200025f9f7dd951e93cb6f1661bb,https://review.opendev.org/159102,Refactoring task output: full redesign of DB models,Refactoring task output: full redesign of DB models  * Created a Execution hierarcy mapped on a single table:   - ActionExecution   - WorkflowExecution   - TaskExecution * Created necessary associations within Execution hierarchy * Created necessary methods for Execution objects on DB API * Created Definition hierarchy mapped on separate tables:   - WorkbookDefinition   - WorkflowDefinition   - ActionDefinition * Renamed attributes   - 'wf_name' -> 'workflow_name'   - 'wf_spec' -> 'spec' * Fixed all unit tests  TODO: * Complete renaming throughout the code * Thorough testing of the new DB model * Further refactoring of workflow engine  WIP  Change-Id: I0032bea573d9200025f9f7dd951e93cb6f1661bb,integration,,,,,,
openstack%2Fmistral~master~I0032bea573d9200025f9f7dd951e93cb6f1661bb,https://review.opendev.org/159102,Refactoring task output: full redesign of DB models,Refactoring task output: full redesign of DB models  * Created a Execution hierarcy mapped on a single table:   - ActionExecution   - WorkflowExecution   - TaskExecution * Created necessary associations within Execution hierarchy * Created necessary methods for Execution objects on DB API * Created Definition hierarchy mapped on separate tables:   - WorkbookDefinition   - WorkflowDefinition   - ActionDefinition * Renamed attributes   - 'wf_name' -> 'workflow_name'   - 'wf_spec' -> 'spec' * Fixed all unit tests  TODO: * Complete renaming throughout the code * Thorough testing of the new DB model * Further refactoring of workflow engine  WIP  Change-Id: I0032bea573d9200025f9f7dd951e93cb6f1661bb,objective,,,,,,
x%2Fgroup-based-policy-specs~master~I658320e0aa6d0be51c05365841175615a297cbf3,https://review.opendev.org/153126,Refactor GBP with the Neutron RESTful APIs,Add refactor neutron RESTful API  Refactor the resource mapping driver with the neutron RESTful APIs.  Change-Id: I658320e0aa6d0be51c05365841175615a297cbf3,integration,,,,,,
openstack%2Fhorizon~master~Icd2512da3902d8dcf6d28af3d09fc4ee0bf1f33a,https://review.opendev.org/158936,Refactor REST API tests for common code patterns,Refactor REST API tests for common code patterns  Move common patterns out into a helper class and refactor tests to use that base helper.  Change-Id: Icd2512da3902d8dcf6d28af3d09fc4ee0bf1f33a,integration,,,,,,
openstack%2Fhorizon~master~Icd2512da3902d8dcf6d28af3d09fc4ee0bf1f33a,https://review.opendev.org/158936,Refactor REST API tests for common code patterns,Refactor REST API tests for common code patterns  Move common patterns out into a helper class and refactor tests to use that base helper.  Change-Id: Icd2512da3902d8dcf6d28af3d09fc4ee0bf1f33a,testing,,,,,,
openstack%2Fmanila~master~I3fc0d09adf84a3708f110a89a7c8c760f4ce3588,https://review.opendev.org/153622,Manila NetApp cDOT driver refactoring,"Manila NetApp cDOT driver refactoring  The Manila cDOT driver is a single file exceeding 1200 lines.  It contains multiple things (driver code, protocol helpers, ZAPI invocation code, options) that should be split apart to allow for easier maintenance and readability and add the potential for code sharing when we reintroduce a 7-mode driver, add a single-SVM cDOT driver, etc.  We recently refactored NetApp's DOT Cinder drivers into a 4-layer structure (interface, library, client, API) that separates concerns and achieves the goals set forth above.  This commit satisfies a plan to do the same thing in Manila.  The implementation steps are:  1. Update directory structure to match that of the Cinder NetApp drivers 2. Create driver interface shim 3. Move driver code to library (with base & C-mode classes, to allow for    7-mode code sharing later) 4. Move protocol helpers to separate files (already organized by base &    C-mode classes) 5. Split out ZAPI code to client layer (with base & C-mode classes, to    allow for 7-mode code sharing later) 6. Implement NetApp driver factory as in Cinder 7. Implement common NetApp options file as in Cinder 8. Implement cDOT API call optimizations 9. Update all unit tests as needed  Note that this patch appears to treble the total number of code lines. This is due to the addition of many more unit tests plus a large amount of fake controller API data to feed the API client tests.  Implements: blueprint netapp-manila-cdot-driver-refactoring Closes-Bug: #1410317 Partial-Bug: #1396953 Closes-Bug: #1370965 Closes-Bug: #1418690 Closes-Bug: #1418696  Change-Id: I3fc0d09adf84a3708f110a89a7c8c760f4ce3588",integration,,,,,,
openstack%2Fmanila~master~I3fc0d09adf84a3708f110a89a7c8c760f4ce3588,https://review.opendev.org/153622,Manila NetApp cDOT driver refactoring,"Manila NetApp cDOT driver refactoring  The Manila cDOT driver is a single file exceeding 1200 lines.  It contains multiple things (driver code, protocol helpers, ZAPI invocation code, options) that should be split apart to allow for easier maintenance and readability and add the potential for code sharing when we reintroduce a 7-mode driver, add a single-SVM cDOT driver, etc.  We recently refactored NetApp's DOT Cinder drivers into a 4-layer structure (interface, library, client, API) that separates concerns and achieves the goals set forth above.  This commit satisfies a plan to do the same thing in Manila.  The implementation steps are:  1. Update directory structure to match that of the Cinder NetApp drivers 2. Create driver interface shim 3. Move driver code to library (with base & C-mode classes, to allow for    7-mode code sharing later) 4. Move protocol helpers to separate files (already organized by base &    C-mode classes) 5. Split out ZAPI code to client layer (with base & C-mode classes, to    allow for 7-mode code sharing later) 6. Implement NetApp driver factory as in Cinder 7. Implement common NetApp options file as in Cinder 8. Implement cDOT API call optimizations 9. Update all unit tests as needed  Note that this patch appears to treble the total number of code lines. This is due to the addition of many more unit tests plus a large amount of fake controller API data to feed the API client tests.  Implements: blueprint netapp-manila-cdot-driver-refactoring Closes-Bug: #1410317 Partial-Bug: #1396953 Closes-Bug: #1370965 Closes-Bug: #1418690 Closes-Bug: #1418696  Change-Id: I3fc0d09adf84a3708f110a89a7c8c760f4ce3588",quality,,,,,,
openstack%2Fmanila~master~I3fc0d09adf84a3708f110a89a7c8c760f4ce3588,https://review.opendev.org/153622,Manila NetApp cDOT driver refactoring,"Manila NetApp cDOT driver refactoring  The Manila cDOT driver is a single file exceeding 1200 lines.  It contains multiple things (driver code, protocol helpers, ZAPI invocation code, options) that should be split apart to allow for easier maintenance and readability and add the potential for code sharing when we reintroduce a 7-mode driver, add a single-SVM cDOT driver, etc.  We recently refactored NetApp's DOT Cinder drivers into a 4-layer structure (interface, library, client, API) that separates concerns and achieves the goals set forth above.  This commit satisfies a plan to do the same thing in Manila.  The implementation steps are:  1. Update directory structure to match that of the Cinder NetApp drivers 2. Create driver interface shim 3. Move driver code to library (with base & C-mode classes, to allow for    7-mode code sharing later) 4. Move protocol helpers to separate files (already organized by base &    C-mode classes) 5. Split out ZAPI code to client layer (with base & C-mode classes, to    allow for 7-mode code sharing later) 6. Implement NetApp driver factory as in Cinder 7. Implement common NetApp options file as in Cinder 8. Implement cDOT API call optimizations 9. Update all unit tests as needed  Note that this patch appears to treble the total number of code lines. This is due to the addition of many more unit tests plus a large amount of fake controller API data to feed the API client tests.  Implements: blueprint netapp-manila-cdot-driver-refactoring Closes-Bug: #1410317 Partial-Bug: #1396953 Closes-Bug: #1370965 Closes-Bug: #1418690 Closes-Bug: #1418696  Change-Id: I3fc0d09adf84a3708f110a89a7c8c760f4ce3588",testing,,,,,,
openstack%2Fmanila~master~I3fc0d09adf84a3708f110a89a7c8c760f4ce3588,https://review.opendev.org/153622,Manila NetApp cDOT driver refactoring,"Manila NetApp cDOT driver refactoring  The Manila cDOT driver is a single file exceeding 1200 lines.  It contains multiple things (driver code, protocol helpers, ZAPI invocation code, options) that should be split apart to allow for easier maintenance and readability and add the potential for code sharing when we reintroduce a 7-mode driver, add a single-SVM cDOT driver, etc.  We recently refactored NetApp's DOT Cinder drivers into a 4-layer structure (interface, library, client, API) that separates concerns and achieves the goals set forth above.  This commit satisfies a plan to do the same thing in Manila.  The implementation steps are:  1. Update directory structure to match that of the Cinder NetApp drivers 2. Create driver interface shim 3. Move driver code to library (with base & C-mode classes, to allow for    7-mode code sharing later) 4. Move protocol helpers to separate files (already organized by base &    C-mode classes) 5. Split out ZAPI code to client layer (with base & C-mode classes, to    allow for 7-mode code sharing later) 6. Implement NetApp driver factory as in Cinder 7. Implement common NetApp options file as in Cinder 8. Implement cDOT API call optimizations 9. Update all unit tests as needed  Note that this patch appears to treble the total number of code lines. This is due to the addition of many more unit tests plus a large amount of fake controller API data to feed the API client tests.  Implements: blueprint netapp-manila-cdot-driver-refactoring Closes-Bug: #1410317 Partial-Bug: #1396953 Closes-Bug: #1370965 Closes-Bug: #1418690 Closes-Bug: #1418696  Change-Id: I3fc0d09adf84a3708f110a89a7c8c760f4ce3588",objective,,,,,,
openstack%2Fmagnetodb~master~I1acbd28928920d86ef04d7559499acf06ec0c73f,https://review.opendev.org/145247,Monitoring API URLs refactoring,(WIP) Monitoring API URLs refactoring  /monitoring/projects/{project_id} for table detailes in specified project.  Change-Id: I1acbd28928920d86ef04d7559499acf06ec0c73f Implements: blueprint bp/monitoring-api-url-refactoring,integration,,,,,,
openstack%2Frally~master~I44155575621c715af1109690ed2788663a4c36c3,https://review.opendev.org/149597,Refactor rally.api,"[WIP] Refactor rally.api  * Move API methods to classes, make them @staticmethod * Move rally-manage stuff to rally.api  TODO: restructure unit tests  Change-Id: I44155575621c715af1109690ed2788663a4c36c3",integration,,,,,,
openstack%2Frally~master~I44155575621c715af1109690ed2788663a4c36c3,https://review.opendev.org/149597,Refactor rally.api,"[WIP] Refactor rally.api  * Move API methods to classes, make them @staticmethod * Move rally-manage stuff to rally.api  TODO: restructure unit tests  Change-Id: I44155575621c715af1109690ed2788663a4c36c3",objective,,,,,,
opendev%2Fstoryboard~master~Id7bb2ef883b30a82c071aabe361e9a3aaa5b5dae,https://review.opendev.org/149622,Refactor db api tests,Refactor db api tests  The tests are now located in separate files under tests.api package. The base class in now a separate file also.  Change-Id: Id7bb2ef883b30a82c071aabe361e9a3aaa5b5dae,integration,,,,,,
opendev%2Fstoryboard~master~Id7bb2ef883b30a82c071aabe361e9a3aaa5b5dae,https://review.opendev.org/149622,Refactor db api tests,Refactor db api tests  The tests are now located in separate files under tests.api package. The base class in now a separate file also.  Change-Id: Id7bb2ef883b30a82c071aabe361e9a3aaa5b5dae,testing,,,,,,
openstack%2Fnova~master~I5de095ac1f7f38fd37cc9d6010a876995f0f8841,https://review.opendev.org/145059,XenAPI: Refactor message strings to remove locals,XenAPI: Refactor message strings to remove locals  This commit is a small refactor to the XenAPI glance plugin removing the use of locals() to improve the readability.  Change-Id: I5de095ac1f7f38fd37cc9d6010a876995f0f8841,integration,,,,,,
openstack%2Fnova~master~I5de095ac1f7f38fd37cc9d6010a876995f0f8841,https://review.opendev.org/145059,XenAPI: Refactor message strings to remove locals,XenAPI: Refactor message strings to remove locals  This commit is a small refactor to the XenAPI glance plugin removing the use of locals() to improve the readability.  Change-Id: I5de095ac1f7f38fd37cc9d6010a876995f0f8841,objective,,,,,,
openstack%2Fmagnetodb~master~Ibc9987c697f46beb295e3fc27c721a0b42188f68,https://review.opendev.org/143126,Fix rate limiting after API url refactoring,"Fix rate limiting after API url refactoring  The tenant_id used to be the second element in the url, now it is the third element. Rate limiting middleware was not updated accordingly.  Change-Id: Ibc9987c697f46beb295e3fc27c721a0b42188f68 Closes-Bug: #1404282",integration,,,,,,
openstack%2Fmagnetodb~master~Ibc9987c697f46beb295e3fc27c721a0b42188f68,https://review.opendev.org/143126,Fix rate limiting after API url refactoring,"Fix rate limiting after API url refactoring  The tenant_id used to be the second element in the url, now it is the third element. Rate limiting middleware was not updated accordingly.  Change-Id: Ibc9987c697f46beb295e3fc27c721a0b42188f68 Closes-Bug: #1404282",objective,,,,,,
openstack%2Fzaqar~master~I3068b6fffde2d4d88a6009ca2ed703b38b791273,https://review.opendev.org/140919,Slighty refactoring for the cross api spec,"Slighty refactoring for the cross api spec  An API package has been created in common to store the API base class, request and response classes, API validation and schemas.  The processing of the requests and responses will be added in a follow up patch.  Change-Id: I3068b6fffde2d4d88a6009ca2ed703b38b791273 Partial-Implements: blueprint cross-transport-api-spec",integration,,,,,,
openstack%2Fzaqar~master~I3068b6fffde2d4d88a6009ca2ed703b38b791273,https://review.opendev.org/140919,Slighty refactoring for the cross api spec,"Slighty refactoring for the cross api spec  An API package has been created in common to store the API base class, request and response classes, API validation and schemas.  The processing of the requests and responses will be added in a follow up patch.  Change-Id: I3068b6fffde2d4d88a6009ca2ed703b38b791273 Partial-Implements: blueprint cross-transport-api-spec",objective,,,,,,
openstack%2Fcue~master~Ia3fee13c713ea6a887875004933436e64dbd121d,https://review.opendev.org/141232,API to DB Object Refactoring,"API to DB Object Refactoring  This change incorporates object abstraction for DB objects as used in the Ironic and Nova openstack projects.  As part of the refactoring, a new module ""cue/objects"" has been created.  This module provides generalized access to DB objects.  As part of this patch, The API has also been updated to access DB objects through the ""cue/objects"" module.  * updating affected tests.  Change-Id: Ia3fee13c713ea6a887875004933436e64dbd121d",integration,,,,,,
openstack%2Fcue~master~Ia3fee13c713ea6a887875004933436e64dbd121d,https://review.opendev.org/141232,API to DB Object Refactoring,"API to DB Object Refactoring  This change incorporates object abstraction for DB objects as used in the Ironic and Nova openstack projects.  As part of the refactoring, a new module ""cue/objects"" has been created.  This module provides generalized access to DB objects.  As part of this patch, The API has also been updated to access DB objects through the ""cue/objects"" module.  * updating affected tests.  Change-Id: Ia3fee13c713ea6a887875004933436e64dbd121d",objective,,,,,,
openstack%2Fmagnetodb~master~I096b087740b4f6375cd950f75c4787926e626f84,https://review.opendev.org/139035,Fixes doc according to API refactoring,Fixes doc according to API refactoring  Change-Id: I096b087740b4f6375cd950f75c4787926e626f84 Partially implements: blueprint api-uri-format-change,quality,,,,,,
openstack%2Fmistral~master~Ic24383bc7e6c059088e98eeeeab28ae7bda2de6a,https://review.opendev.org/137625,Refactor API tests for v2,Refactor API tests for v2  - Separated v1 and v2 api tests for workbooks and executions; - Added more tests scenarios; - Optimize methods realization for v2 tests.  Change-Id: Ic24383bc7e6c059088e98eeeeab28ae7bda2de6a Closes-Bug: #1384564,integration,,,,,,
openstack%2Fmistral~master~Ic24383bc7e6c059088e98eeeeab28ae7bda2de6a,https://review.opendev.org/137625,Refactor API tests for v2,Refactor API tests for v2  - Separated v1 and v2 api tests for workbooks and executions; - Added more tests scenarios; - Optimize methods realization for v2 tests.  Change-Id: Ic24383bc7e6c059088e98eeeeab28ae7bda2de6a Closes-Bug: #1384564,objective,,,,,,
x%2Fcompass-core~dev%2Fexperimental~I9efdf6c2b1c769defc8098ba62b1e2e556f6a227,https://review.opendev.org/136496,refactor switch machines api,refactor switch machines api  change to show all switch machines  Change-Id: I9efdf6c2b1c769defc8098ba62b1e2e556f6a227,integration,,,,,,
openstack%2Fnova~master~I87e475acdaabacdcceaaf73b3ad831292644d3c7,https://review.opendev.org/120668,Refactoring of contrib.test_networks tests,Refactoring of contrib.test_networks tests  Some simple refactoring of contrib.test_networks tests in order to make it easier to share unittests between v2 and the v2.1 API in a following changeset  Partially implements blueprint v2-on-v3-api  Change-Id: I87e475acdaabacdcceaaf73b3ad831292644d3c7,integration,,,,,,
openstack%2Fnova~master~I87e475acdaabacdcceaaf73b3ad831292644d3c7,https://review.opendev.org/120668,Refactoring of contrib.test_networks tests,Refactoring of contrib.test_networks tests  Some simple refactoring of contrib.test_networks tests in order to make it easier to share unittests between v2 and the v2.1 API in a following changeset  Partially implements blueprint v2-on-v3-api  Change-Id: I87e475acdaabacdcceaaf73b3ad831292644d3c7,objective,,,,,,
openstack%2Fheat~master~I891aeea3fe5d7cb22be27e05ab72857af668e4ed,https://review.opendev.org/127945,Refactor cinder volume v2 API changes,Refactor cinder volume v2 API changes  The handling of name and description for v2 API is duplicated for handle_create and handle_update methods. This patch defines a new method which handles the differences in parameter names thereby avoiding duplication and keeping the changes restricted to this method to the extent possible.  Change-Id: I891aeea3fe5d7cb22be27e05ab72857af668e4ed,integration,,,,,,
openstack%2Fheat~master~I891aeea3fe5d7cb22be27e05ab72857af668e4ed,https://review.opendev.org/127945,Refactor cinder volume v2 API changes,Refactor cinder volume v2 API changes  The handling of name and description for v2 API is duplicated for handle_create and handle_update methods. This patch defines a new method which handles the differences in parameter names thereby avoiding duplication and keeping the changes restricted to this method to the extent possible.  Change-Id: I891aeea3fe5d7cb22be27e05ab72857af668e4ed,quality,,,,,,
openstack%2Fmagnetodb~master~Icf4edc5647f3a0fa5b87b51b133939a77d35ff97,https://review.opendev.org/125404,API level refactoring,API level refactoring  Change-Id: Icf4edc5647f3a0fa5b87b51b133939a77d35ff97,integration,,,,,,
openstack%2Fmistral-extra~master~Idc7d59500d0c10390f0e1078fe30c99b714c83eb,https://review.opendev.org/118987,Relayouting examples and refactoring OpenStack examples for v2,Relayouting examples and refactoring OpenStack examples for v2  Change-Id: Idc7d59500d0c10390f0e1078fe30c99b714c83eb Note: Needs proper testing once v2 API and client are ready.,integration,,,,,,
openstack%2Fmistral-extra~master~Idc7d59500d0c10390f0e1078fe30c99b714c83eb,https://review.opendev.org/118987,Relayouting examples and refactoring OpenStack examples for v2,Relayouting examples and refactoring OpenStack examples for v2  Change-Id: Idc7d59500d0c10390f0e1078fe30c99b714c83eb Note: Needs proper testing once v2 API and client are ready.,objective,,,,,,
openstack%2Foslo.vmware~master~Ifdd43a9d1d32cb6d8957b9805b56729eb9270daf,https://review.opendev.org/116504,Refactoring to reduce noise in log files,Refactoring to reduce noise in log files  Currently lot of unnecessary log lines are generated during API invocation and image transfer. This patch makes log printing statement changes to reduce noise in log files.  Change-Id: Ifdd43a9d1d32cb6d8957b9805b56729eb9270daf,integration,,,,,,
openstack%2Foslo.vmware~master~Ifdd43a9d1d32cb6d8957b9805b56729eb9270daf,https://review.opendev.org/116504,Refactoring to reduce noise in log files,Refactoring to reduce noise in log files  Currently lot of unnecessary log lines are generated during API invocation and image transfer. This patch makes log printing statement changes to reduce noise in log files.  Change-Id: Ifdd43a9d1d32cb6d8957b9805b56729eb9270daf,objective,,,,,,
openstack%2Fneutron~master~I44251db399cd73390a9d1931a7f253662002ba10,https://review.opendev.org/82775,Refactor plugin setup helpers out of test.base,Refactor plugin setup helpers out of test.base  Helper methods for plugin and notification setup were previously defined on neutron.tests.base.BaseTestCase.  The imports required to support these helpers were preventing the api tests from consuming tempest due to configuration conflicts that resulted between neutron and tempest.  This change moves the helpers to a new module in tests/unit so that BaseTestCase can be safely used across all types of tests.  Implements: blueprint neutron-testing-refactor  Change-Id: I44251db399cd73390a9d1931a7f253662002ba10,integration,,,,,,
openstack%2Fneutron~master~I44251db399cd73390a9d1931a7f253662002ba10,https://review.opendev.org/82775,Refactor plugin setup helpers out of test.base,Refactor plugin setup helpers out of test.base  Helper methods for plugin and notification setup were previously defined on neutron.tests.base.BaseTestCase.  The imports required to support these helpers were preventing the api tests from consuming tempest due to configuration conflicts that resulted between neutron and tempest.  This change moves the helpers to a new module in tests/unit so that BaseTestCase can be safely used across all types of tests.  Implements: blueprint neutron-testing-refactor  Change-Id: I44251db399cd73390a9d1931a7f253662002ba10,objective,,,,,,
openstack%2Fnova~master~Idc3a2a2c2bde714075404f54b8d4d66abaa52d9b,https://review.opendev.org/116984,Refactor the servers API to use NetworkRequest,Refactor the servers API to use NetworkRequest  This makes the servers API v2 and v3 use the NetworkRequest object during the construction of the requested_networks list.  Change-Id: Idc3a2a2c2bde714075404f54b8d4d66abaa52d9b,integration,,,,,,
openstack%2Fnova~master~Idc3a2a2c2bde714075404f54b8d4d66abaa52d9b,https://review.opendev.org/116984,Refactor the servers API to use NetworkRequest,Refactor the servers API to use NetworkRequest  This makes the servers API v2 and v3 use the NetworkRequest object during the construction of the requested_networks list.  Change-Id: Idc3a2a2c2bde714075404f54b8d4d66abaa52d9b,objective,,,,,,
openstack%2Fpython-openstackclient~master~I4ced6df4b76f018d01000d28b4281ad9f252ffcc,https://review.opendev.org/69878,Refactor role list subcommand for identity v3 api,"Refactor role list subcommand for identity v3 api  Currently parts of user list and group list command are actually functioning as role listing, which is quite counter intuitive and misleading.  This refactor change move role related logic to a single place of role list command. It now allows role grants listing for user/group + domain/project combinations.  If no user or group specified, it will list all roles in the system, which is the default behaviour.  Change-Id: I4ced6df4b76f018d01000d28b4281ad9f252ffcc",integration,,,,,,
openstack%2Fpython-openstackclient~master~I4ced6df4b76f018d01000d28b4281ad9f252ffcc,https://review.opendev.org/69878,Refactor role list subcommand for identity v3 api,"Refactor role list subcommand for identity v3 api  Currently parts of user list and group list command are actually functioning as role listing, which is quite counter intuitive and misleading.  This refactor change move role related logic to a single place of role list command. It now allows role grants listing for user/group + domain/project combinations.  If no user or group specified, it will list all roles in the system, which is the default behaviour.  Change-Id: I4ced6df4b76f018d01000d28b4281ad9f252ffcc",objective,,,,,,
openstack%2Fpython-openstackclient~master~I4ced6df4b76f018d01000d28b4281ad9f252ffcc,https://review.opendev.org/69878,Refactor role list subcommand for identity v3 api,"Refactor role list subcommand for identity v3 api  Currently parts of user list and group list command are actually functioning as role listing, which is quite counter intuitive and misleading.  This refactor change move role related logic to a single place of role list command. It now allows role grants listing for user/group + domain/project combinations.  If no user or group specified, it will list all roles in the system, which is the default behaviour.  Change-Id: I4ced6df4b76f018d01000d28b4281ad9f252ffcc",quality,,,,,,
stackforge%2Fopenstack-sdk-dotnet~master~Ibf22961dfc5f957d7acfa9f3159e6bd092459db9,https://review.opendev.org/97990,Adding intial compute service client. Adding support for listing and getting flavor information Added unit tests for the new compute service client Refactoring the StorageServiceClinetContext to be a generic ServiceClientContext Created a base class for service clients in order to maximize code reuse.,Adding intial compute service client. Adding support for listing and getting flavor information Added unit tests for the new compute service client Refactoring the StorageServiceClinetContext to be a generic ServiceClientContext Created a base class for service clients in order to maximize code reuse.  Partially implements blueprint support-compute-api Change-Id: Ibf22961dfc5f957d7acfa9f3159e6bd092459db9,integration,,,,,,
stackforge%2Fopenstack-sdk-dotnet~master~Ibf22961dfc5f957d7acfa9f3159e6bd092459db9,https://review.opendev.org/97990,Adding intial compute service client. Adding support for listing and getting flavor information Added unit tests for the new compute service client Refactoring the StorageServiceClinetContext to be a generic ServiceClientContext Created a base class for service clients in order to maximize code reuse.,Adding intial compute service client. Adding support for listing and getting flavor information Added unit tests for the new compute service client Refactoring the StorageServiceClinetContext to be a generic ServiceClientContext Created a base class for service clients in order to maximize code reuse.  Partially implements blueprint support-compute-api Change-Id: Ibf22961dfc5f957d7acfa9f3159e6bd092459db9,objective,,,,,,
stackforge%2Fopenstack-sdk-dotnet~master~Ibf22961dfc5f957d7acfa9f3159e6bd092459db9,https://review.opendev.org/97990,Adding intial compute service client. Adding support for listing and getting flavor information Added unit tests for the new compute service client Refactoring the StorageServiceClinetContext to be a generic ServiceClientContext Created a base class for service clients in order to maximize code reuse.,Adding intial compute service client. Adding support for listing and getting flavor information Added unit tests for the new compute service client Refactoring the StorageServiceClinetContext to be a generic ServiceClientContext Created a base class for service clients in order to maximize code reuse.  Partially implements blueprint support-compute-api Change-Id: Ibf22961dfc5f957d7acfa9f3159e6bd092459db9,testing,,,,,,
stackforge%2Fopenstack-sdk-dotnet~master~Ibf22961dfc5f957d7acfa9f3159e6bd092459db9,https://review.opendev.org/97990,Adding intial compute service client. Adding support for listing and getting flavor information Added unit tests for the new compute service client Refactoring the StorageServiceClinetContext to be a generic ServiceClientContext Created a base class for service clients in order to maximize code reuse.,Adding intial compute service client. Adding support for listing and getting flavor information Added unit tests for the new compute service client Refactoring the StorageServiceClinetContext to be a generic ServiceClientContext Created a base class for service clients in order to maximize code reuse.  Partially implements blueprint support-compute-api Change-Id: Ibf22961dfc5f957d7acfa9f3159e6bd092459db9,objective,,,,,,
openstack%2Fmurano-dashboard~master~Ic3a433c8467fda94ac7dd3800c29fc1c2b9f3464,https://review.opendev.org/93939,Refactor Packages and AppCatalog pagination,"Refactor Packages and AppCatalog pagination  Move function for getting list of Application packages to a separate module - muranodashboard.api.packages, so both Packages and AppCatalog views can reuse it. That `package_list()` function obtains packages generator with a call to `muranoclient.packages.filter()` and paginate the results, adding `has_more_data` flag (as it is done for Glance, see http://tinyurl.com/lkbnsed).  Also move muranoclient-specific functions from muranodashboard.environments.api to muranodashboard.api.base module.  Implements: blueprint app-catalog-pagination Change-Id: Ic3a433c8467fda94ac7dd3800c29fc1c2b9f3464",integration,,,,,,
openstack%2Fmurano-dashboard~master~Ic3a433c8467fda94ac7dd3800c29fc1c2b9f3464,https://review.opendev.org/93939,Refactor Packages and AppCatalog pagination,"Refactor Packages and AppCatalog pagination  Move function for getting list of Application packages to a separate module - muranodashboard.api.packages, so both Packages and AppCatalog views can reuse it. That `package_list()` function obtains packages generator with a call to `muranoclient.packages.filter()` and paginate the results, adding `has_more_data` flag (as it is done for Glance, see http://tinyurl.com/lkbnsed).  Also move muranoclient-specific functions from muranodashboard.environments.api to muranodashboard.api.base module.  Implements: blueprint app-catalog-pagination Change-Id: Ic3a433c8467fda94ac7dd3800c29fc1c2b9f3464",objective,,,,,,
openstack%2Fceilometer~master~I2d4a5175734cafce6a439ad736c47691e6e7e847,https://review.opendev.org/94483,refactor sql backend to improve write speed,refactor sql backend to improve write speed  - drop sourceassoc table as its data is not accessible via api - drop resource table since data can be retreive from sample table  Change-Id: I2d4a5175734cafce6a439ad736c47691e6e7e847 Implements: blueprint big-data-sql Closes-Bug: #1305332 Closes-Bug: #1257908,integration,,,,,,
openstack%2Fceilometer~master~I2d4a5175734cafce6a439ad736c47691e6e7e847,https://review.opendev.org/94483,refactor sql backend to improve write speed,refactor sql backend to improve write speed  - drop sourceassoc table as its data is not accessible via api - drop resource table since data can be retreive from sample table  Change-Id: I2d4a5175734cafce6a439ad736c47691e6e7e847 Implements: blueprint big-data-sql Closes-Bug: #1305332 Closes-Bug: #1257908,objective,,,,,,
openstack%2Fheat~master~I1bce5516b0a8c97d6c08607922968454d94b4406,https://review.opendev.org/88640,Refactor boolean conversion into a separate function,"Refactor boolean conversion into a separate function  A method to convert API parameters to boolean values will be useful for parsing the show_deleted API parameter, so create a separate function named extract_bool.  blueprint stack-list-soft-deleted  Change-Id: I1bce5516b0a8c97d6c08607922968454d94b4406",integration,,,,,,
openstack%2Fheat~master~I1bce5516b0a8c97d6c08607922968454d94b4406,https://review.opendev.org/88640,Refactor boolean conversion into a separate function,"Refactor boolean conversion into a separate function  A method to convert API parameters to boolean values will be useful for parsing the show_deleted API parameter, so create a separate function named extract_bool.  blueprint stack-list-soft-deleted  Change-Id: I1bce5516b0a8c97d6c08607922968454d94b4406",quality,,,,,,
openstack%2Ftempest~master~If1d0990ac9467b6e9778e4444b2ec5fc0f1e44e7,https://review.opendev.org/84852,orchestration api refactor access to stack outputs,"orchestration api refactor access to stack outputs  Refactor test_server_cfn_init access to stack outputs so it uses a new wrapper which gets the stack and returns the requested output.  This provides a useful function which can be used in other tests which parse the stack output.  Since we no longer need to get the stack in test_server_cfn_init, remove the gets and duplicate checks for CREATE_COMPLETE.  Change-Id: If1d0990ac9467b6e9778e4444b2ec5fc0f1e44e7",integration,,,,,,
openstack%2Ftempest~master~If1d0990ac9467b6e9778e4444b2ec5fc0f1e44e7,https://review.opendev.org/84852,orchestration api refactor access to stack outputs,"orchestration api refactor access to stack outputs  Refactor test_server_cfn_init access to stack outputs so it uses a new wrapper which gets the stack and returns the requested output.  This provides a useful function which can be used in other tests which parse the stack output.  Since we no longer need to get the stack in test_server_cfn_init, remove the gets and duplicate checks for CREATE_COMPLETE.  Change-Id: If1d0990ac9467b6e9778e4444b2ec5fc0f1e44e7",objective,,,,,,
openstack%2Fnova-specs~master~Iadeeb183b651fa424b31a3349338036c6c51858d,https://review.opendev.org/84307,Propose: VMware spawn refactor,Propose: VMware spawn refactor  A structured refactor of the vmwareapi spawn method to improve maintainability of the vmware driver.  Goal: break up spawn method into reusable components  Phase 1: break out the API call steps in Spawn into smaller tested components Phase 2: rewrite spawn to use the smaller components  related to blueprint vmware-spawn-refactor  Change-Id: Iadeeb183b651fa424b31a3349338036c6c51858d,integration,,,,,,
openstack%2Fnova-specs~master~Iadeeb183b651fa424b31a3349338036c6c51858d,https://review.opendev.org/84307,Propose: VMware spawn refactor,Propose: VMware spawn refactor  A structured refactor of the vmwareapi spawn method to improve maintainability of the vmware driver.  Goal: break up spawn method into reusable components  Phase 1: break out the API call steps in Spawn into smaller tested components Phase 2: rewrite spawn to use the smaller components  related to blueprint vmware-spawn-refactor  Change-Id: Iadeeb183b651fa424b31a3349338036c6c51858d,quality,,,,,,
openstack%2Fnova-specs~master~Iadeeb183b651fa424b31a3349338036c6c51858d,https://review.opendev.org/84307,Propose: VMware spawn refactor,Propose: VMware spawn refactor  A structured refactor of the vmwareapi spawn method to improve maintainability of the vmware driver.  Goal: break up spawn method into reusable components  Phase 1: break out the API call steps in Spawn into smaller tested components Phase 2: rewrite spawn to use the smaller components  related to blueprint vmware-spawn-refactor  Change-Id: Iadeeb183b651fa424b31a3349338036c6c51858d,objective,,,,,,
openstack%2Fnova-specs~master~Iadeeb183b651fa424b31a3349338036c6c51858d,https://review.opendev.org/84307,Propose: VMware spawn refactor,Propose: VMware spawn refactor  A structured refactor of the vmwareapi spawn method to improve maintainability of the vmware driver.  Goal: break up spawn method into reusable components  Phase 1: break out the API call steps in Spawn into smaller tested components Phase 2: rewrite spawn to use the smaller components  related to blueprint vmware-spawn-refactor  Change-Id: Iadeeb183b651fa424b31a3349338036c6c51858d,testing,,,,,,
openstack%2Fnova~master~Ia507e80dfd1e0b7552c5d50e84ac9e642ca8c9fe,https://review.opendev.org/85109,Refactor Network API,"Refactor Network API  Base network API class to have all the methods that can be implemented by specific network api's.   * Move common logic and decorators to network/base_api.py  * Base class base_api.NetworkAPI with current methods from    nova & neutron, that will raise NotImplementedError()  * Refactor some tests with mock  When this get merged, every review adding new methods to neutron or nova network, must have the same methods added to the base NetworkAPI.  Implements: bp refactor-network-api  Change-Id: Ia507e80dfd1e0b7552c5d50e84ac9e642ca8c9fe",integration,,,,,,
openstack%2Fnova~master~Ia507e80dfd1e0b7552c5d50e84ac9e642ca8c9fe,https://review.opendev.org/85109,Refactor Network API,"Refactor Network API  Base network API class to have all the methods that can be implemented by specific network api's.   * Move common logic and decorators to network/base_api.py  * Base class base_api.NetworkAPI with current methods from    nova & neutron, that will raise NotImplementedError()  * Refactor some tests with mock  When this get merged, every review adding new methods to neutron or nova network, must have the same methods added to the base NetworkAPI.  Implements: bp refactor-network-api  Change-Id: Ia507e80dfd1e0b7552c5d50e84ac9e642ca8c9fe",objective,,,,,,
openstack%2Fceilometer~master~I244eabc64f985d5a7ab5e166c72bcdb88b7e3372,https://review.opendev.org/84002,Refactor the DB implementation of Capabilities API,"Refactor the DB implementation of Capabilities API  Replace the update of DEFAULT_CAPABILITIES into the __init__ function in the Connection class of base.py instead of the Connection class of each DB driver.  The AVAILABLE_CAPABILITIES dict was divided into two case of MongoDB and DB2 drivers, the common capabilities are listed in pymongo_base.py in COMMON_AVAILABLE_CAPABILTIES, which is updated with the capabilities dict of the two affected DB drivers using pymongo.  Change-Id: I244eabc64f985d5a7ab5e166c72bcdb88b7e3372",integration,,,,,,
openstack%2Fceilometer~master~I244eabc64f985d5a7ab5e166c72bcdb88b7e3372,https://review.opendev.org/84002,Refactor the DB implementation of Capabilities API,"Refactor the DB implementation of Capabilities API  Replace the update of DEFAULT_CAPABILITIES into the __init__ function in the Connection class of base.py instead of the Connection class of each DB driver.  The AVAILABLE_CAPABILITIES dict was divided into two case of MongoDB and DB2 drivers, the common capabilities are listed in pymongo_base.py in COMMON_AVAILABLE_CAPABILTIES, which is updated with the capabilities dict of the two affected DB drivers using pymongo.  Change-Id: I244eabc64f985d5a7ab5e166c72bcdb88b7e3372",objective,,,,,,
openstack%2Fmistral~master~I4b8684ebded9eb993749f2503380e078087edd7d,https://review.opendev.org/81941,Refactor the local engine to use an in process executor,Refactor the local engine to use an in process executor  This is work in progress. Review is submitted for feedbacks. Refactored launch script to start the API and executor on the same process so the transport for a oslo.messaging fake driver can be shared.  A transport attribute is added to the abstract engine as a class attribute to reference the transport object.  Change-Id: I4b8684ebded9eb993749f2503380e078087edd7d Implements: blueprint mistral-inproc-executor,integration,,,,,,
openstack%2Fnova-specs~master~I0daf506437d74b06bbbcda13925c0d61f187c19c,https://review.opendev.org/84268,Refactor Network API,Refactor Network API  To have a common API network base with all required methods so neutron / nova network api can inherit from.  bp refactor-network-api  Change-Id: I0daf506437d74b06bbbcda13925c0d61f187c19c,integration,,,,,,
openstack%2Fkeystone~master~I7db24040689245a616332b08744f40ab8381579d,https://review.opendev.org/82397,Refactor LDAP API,"Refactor LDAP API  The fake LDAP API must emulate the python-ldap API as much as possible otherwise much of the LDAP testing is invalid. The python-ldap API only accepts utf-8 encoded strings. However, the fake LDAP API accepts any Python type therefore properly handling type conversion into and out of the LDAP API is not exercised by the fake LDAP API during testing. Currently type conversion is done inside the LdapWrapper which calls the python-ldap API, this means unicode issues only appear when testing with a live LDAP server.  LdapWrapper and FakeLdap logically are two different providers of the same API, as such they should behave identically. Which LDAP API is used at run time a configurable option.  We need a mechanism by which we can substitute an LDAP API and then wrap the calls to that API with type conversions. Type conversion wrapping replaces the Python types used in Keystone with the types needed for the LDAP API, calls the LDAP API, and then type converts the results back from LDAP to those used by Keystone.  This patch establishes an LDAP API interface (LDAPHandler), modifies fake LDAP to support it, replaces LdapWrapper with the interface (invoking python-ldap) and adds another LDAPHandler instance which will be the common location for type conversions prior to calling the configured LDAP interface. See the LDAPHandler class definition for details).  This patch is exclusively a refactoring patch anticipating a subsequent patch to properly handle unicode values. There is no significant change in functionality with this patch, it is just refactoring to more cleanly seperate API boundaries. A few tests which exercised unicode were disabled in this patch because they will not work until the next patch which adds back in correct unicode handling. The idea here is to separate out the refactoring needed to support unicode from the actual unicode changes, this should make reviewing easier.  Change-Id: I7db24040689245a616332b08744f40ab8381579d",integration,,,,,,
openstack%2Fkeystone~master~I7db24040689245a616332b08744f40ab8381579d,https://review.opendev.org/82397,Refactor LDAP API,"Refactor LDAP API  The fake LDAP API must emulate the python-ldap API as much as possible otherwise much of the LDAP testing is invalid. The python-ldap API only accepts utf-8 encoded strings. However, the fake LDAP API accepts any Python type therefore properly handling type conversion into and out of the LDAP API is not exercised by the fake LDAP API during testing. Currently type conversion is done inside the LdapWrapper which calls the python-ldap API, this means unicode issues only appear when testing with a live LDAP server.  LdapWrapper and FakeLdap logically are two different providers of the same API, as such they should behave identically. Which LDAP API is used at run time a configurable option.  We need a mechanism by which we can substitute an LDAP API and then wrap the calls to that API with type conversions. Type conversion wrapping replaces the Python types used in Keystone with the types needed for the LDAP API, calls the LDAP API, and then type converts the results back from LDAP to those used by Keystone.  This patch establishes an LDAP API interface (LDAPHandler), modifies fake LDAP to support it, replaces LdapWrapper with the interface (invoking python-ldap) and adds another LDAPHandler instance which will be the common location for type conversions prior to calling the configured LDAP interface. See the LDAPHandler class definition for details).  This patch is exclusively a refactoring patch anticipating a subsequent patch to properly handle unicode values. There is no significant change in functionality with this patch, it is just refactoring to more cleanly seperate API boundaries. A few tests which exercised unicode were disabled in this patch because they will not work until the next patch which adds back in correct unicode handling. The idea here is to separate out the refactoring needed to support unicode from the actual unicode changes, this should make reviewing easier.  Change-Id: I7db24040689245a616332b08744f40ab8381579d",objective,,,,,,
opendev%2Fstoryboard~master~I4e032536d5389606d6edd7c0eb80c58ccc159447,https://review.opendev.org/83027,DB api refactoring,"DB api refactoring  This change does not create anything new.  The db api file was growing too large, so now it is a module with separate files corresponding to each db model.  Change-Id: I4e032536d5389606d6edd7c0eb80c58ccc159447",integration,,,,,,
opendev%2Fstoryboard~master~I4e032536d5389606d6edd7c0eb80c58ccc159447,https://review.opendev.org/83027,DB api refactoring,"DB api refactoring  This change does not create anything new.  The db api file was growing too large, so now it is a module with separate files corresponding to each db model.  Change-Id: I4e032536d5389606d6edd7c0eb80c58ccc159447",objective,,,,,,
stackforge-attic%2Fmurano-tests~master~Ia0c854aa9a3db4a90ac5f14cb02a9036c5aa01f3,https://review.opendev.org/80524,Refactor api configuration script,Refactor api configuration script  Change-Id: Ia0c854aa9a3db4a90ac5f14cb02a9036c5aa01f3,integration,,,,,,
openstack%2Fnova~master~I4bc4e3f990e36d422beee2a7a9f5fa413044052a,https://review.opendev.org/72368,Refactor xenapi/host.py to new call_xenapi pattern,"Refactor xenapi/host.py to new call_xenapi pattern  Update all calls to call_xenapi to the new calling pattern.  This code calls out to the ""host"" object that this change adding into the collection of session objects.  An expensive call to host.get_record has been changed to the cheaper call of get_uuid.  Change-Id: I4bc4e3f990e36d422beee2a7a9f5fa413044052a",integration,,,,,,
openstack%2Fnova~master~I4bc4e3f990e36d422beee2a7a9f5fa413044052a,https://review.opendev.org/72368,Refactor xenapi/host.py to new call_xenapi pattern,"Refactor xenapi/host.py to new call_xenapi pattern  Update all calls to call_xenapi to the new calling pattern.  This code calls out to the ""host"" object that this change adding into the collection of session objects.  An expensive call to host.get_record has been changed to the cheaper call of get_uuid.  Change-Id: I4bc4e3f990e36d422beee2a7a9f5fa413044052a",quality,,,,,,
openstack%2Ffuel-web~master~I9ffcbca56ca0aeb6d0fda2918a159c32532f0838,https://review.opendev.org/72937,Added task object and REST handlers refactored,Added task object and API handlers refactored  Change-Id: I9ffcbca56ca0aeb6d0fda2918a159c32532f0838,integration,,,,,,
openstack%2Ffuel-web~master~I9ffcbca56ca0aeb6d0fda2918a159c32532f0838,https://review.opendev.org/72937,Added task object and REST handlers refactored,Added task object and API handlers refactored  Change-Id: I9ffcbca56ca0aeb6d0fda2918a159c32532f0838,objective,,,,,,
openstack%2Fnova~master~I1b417c469bbb2542a3fde40064142bde2b4dd400,https://review.opendev.org/72370,Refactor pool.py to remove calls to call_xenapi,Refactor pool.py to remove calls to call_xenapi  In addition adding the Pool XenAPI object that is needed by pool.py  Change-Id: I1b417c469bbb2542a3fde40064142bde2b4dd400,integration,,,,,,
openstack%2Fnova~master~I1b417c469bbb2542a3fde40064142bde2b4dd400,https://review.opendev.org/72370,Refactor pool.py to remove calls to call_xenapi,Refactor pool.py to remove calls to call_xenapi  In addition adding the Pool XenAPI object that is needed by pool.py  Change-Id: I1b417c469bbb2542a3fde40064142bde2b4dd400,objective,,,,,,
openstack%2Fnova~master~Ie1885c439f3d119032dd1c7c7af070142987ba7f,https://review.opendev.org/70961,Refactoring metadata/base,Adding update_metadata API to metadata service  Refactored routing logic in metadata/base.py. Added an API to metadata service to update metdata of an instance.  Change-Id: Ie1885c439f3d119032dd1c7c7af070142987ba7f Implements: blueprint metadata-service-callbacks,integration,,,,,,
openstack%2Fnova~master~Ie1885c439f3d119032dd1c7c7af070142987ba7f,https://review.opendev.org/70961,Refactoring metadata/base,Adding update_metadata API to metadata service  Refactored routing logic in metadata/base.py. Added an API to metadata service to update metdata of an instance.  Change-Id: Ie1885c439f3d119032dd1c7c7af070142987ba7f Implements: blueprint metadata-service-callbacks,objective,,,,,,
openstack%2Fneutron~master~I7d3bc088762f53473892480b2e238fe60c2c0b74,https://review.opendev.org/73143,Rename/refactoring of NVP api client to NSX,Rename/refactoring of NVP api client to NSX  Partial-implements blueprint nicira-plugin-renaming  Change-Id: I7d3bc088762f53473892480b2e238fe60c2c0b74,integration,,,,,,
opendev%2Fstoryboard~master~If8743db33da753be067c47b56aba0812f6bdf913,https://review.opendev.org/72357,Refactor REST API to work on top of DB API,"Refactor REST API to work on top of DB API  Refactored REST API for Stories and Projects to work on top of DB API layer. REST API is no longer ""infected"" by SQLA objects. REST and DB layers now communicate with dictionaries.  Details: * Moved wsme model to corresponding controller files * Added func tests for '/stories' and '/projects' * Got rid of magic code (SQLA->wsme, wsme->SQLA)  Change-Id: If8743db33da753be067c47b56aba0812f6bdf913",integration,,,,,,
opendev%2Fstoryboard~master~If8743db33da753be067c47b56aba0812f6bdf913,https://review.opendev.org/72357,Refactor REST API to work on top of DB API,"Refactor REST API to work on top of DB API  Refactored REST API for Stories and Projects to work on top of DB API layer. REST API is no longer ""infected"" by SQLA objects. REST and DB layers now communicate with dictionaries.  Details: * Moved wsme model to corresponding controller files * Added func tests for '/stories' and '/projects' * Got rid of magic code (SQLA->wsme, wsme->SQLA)  Change-Id: If8743db33da753be067c47b56aba0812f6bdf913",objective,,,,,,
openstack%2Fsolum~master~Ic636b2b04b4d352d6092f2305ce9c03e4c556857,https://review.opendev.org/67876,Refactored api unit tests for DRY,Refactored api unit tests for DRY  Reduced repetition of mock.patch calls  Change-Id: Ic636b2b04b4d352d6092f2305ce9c03e4c556857 Closes-Bug: #1260417,integration,,,,,,
openstack%2Fsolum~master~Ic636b2b04b4d352d6092f2305ce9c03e4c556857,https://review.opendev.org/67876,Refactored api unit tests for DRY,Refactored api unit tests for DRY  Reduced repetition of mock.patch calls  Change-Id: Ic636b2b04b4d352d6092f2305ce9c03e4c556857 Closes-Bug: #1260417,quality,,,,,,
openstack%2Fglance~master~I140e932e9cc531900cee503e20d3549549b13d27,https://review.opendev.org/64087,Refactor tests.unit.utils:FakeDB.reset,"Refactor tests.unit.utils:FakeDB.reset  glance.tests.unit.utils:FakeDB uses glance.db.simple.api which has already implemented reset() functionality, the redundant code in FakeDB should be removed.  Change-Id: I140e932e9cc531900cee503e20d3549549b13d27 Closes-Bug: #1264204",integration,,,,,,
openstack%2Fglance~master~I140e932e9cc531900cee503e20d3549549b13d27,https://review.opendev.org/64087,Refactor tests.unit.utils:FakeDB.reset,"Refactor tests.unit.utils:FakeDB.reset  glance.tests.unit.utils:FakeDB uses glance.db.simple.api which has already implemented reset() functionality, the redundant code in FakeDB should be removed.  Change-Id: I140e932e9cc531900cee503e20d3549549b13d27 Closes-Bug: #1264204",objective,,,,,,
openstack%2Fnova~master~Id7f8b48da1499ded3418ceebe4680e066420e2a3,https://review.opendev.org/62403,Refactor time conversion helper function for objects in db api,"Refactor time conversion helper function for objects in db api  Refactor the code to use common time conversion code for objects. Strip timezone info out from datetimes, which is no need for database.  This is a part of: blueprint make-instance-action-use-objects  Change-Id: Id7f8b48da1499ded3418ceebe4680e066420e2a3",integration,,,,,,
openstack%2Fnova~master~Id7f8b48da1499ded3418ceebe4680e066420e2a3,https://review.opendev.org/62403,Refactor time conversion helper function for objects in db api,"Refactor time conversion helper function for objects in db api  Refactor the code to use common time conversion code for objects. Strip timezone info out from datetimes, which is no need for database.  This is a part of: blueprint make-instance-action-use-objects  Change-Id: Id7f8b48da1499ded3418ceebe4680e066420e2a3",objective,,,,,,
openstack%2Fironic~master~I9623a378f8743d4146a9b389d28d4f8b02aaf0e0,https://review.opendev.org/60299,Refactor /node/<uuid>/state,"Refactor /node/<uuid>/state  * Ironic now have a periodic task that checks the current power state of the nodes[1] and keep the db updated, so the API does not need to call rpcapi.get_node_power_state every time someone GET /nodes/<uuid>/state we can just rely on the db for it.  * The API will now return all the states in one request, before it was needed two requests to to get all the currents and targets (GET /node/<uuid>/state/power and /node/<uuid>/state/provision)  * Rename /node/<uuid>/state to /node/<uuid>/states (plural) since it returns information about both states (power and provision)  [1] https://review.openstack.org/#/c/56530/  Change-Id: I9623a378f8743d4146a9b389d28d4f8b02aaf0e0",integration,,,,,,
openstack%2Fironic~master~I9623a378f8743d4146a9b389d28d4f8b02aaf0e0,https://review.opendev.org/60299,Refactor /node/<uuid>/state,"Refactor /node/<uuid>/state  * Ironic now have a periodic task that checks the current power state of the nodes[1] and keep the db updated, so the API does not need to call rpcapi.get_node_power_state every time someone GET /nodes/<uuid>/state we can just rely on the db for it.  * The API will now return all the states in one request, before it was needed two requests to to get all the currents and targets (GET /node/<uuid>/state/power and /node/<uuid>/state/provision)  * Rename /node/<uuid>/state to /node/<uuid>/states (plural) since it returns information about both states (power and provision)  [1] https://review.openstack.org/#/c/56530/  Change-Id: I9623a378f8743d4146a9b389d28d4f8b02aaf0e0",objective,,,,,,
x%2Fcloudcafe~master~I690409930fc50822289500ae898f27a6c791f120,https://review.opendev.org/55373,"Image API v2.0 Image Model, Client and Tests - Refactoring .","Image API v2.0 Image Model, Client and Tests - Refactoring .  Refactors image model:  - added Images class  - corrected the key name - change 'member_id' to 'member' in '_obj_to_json' method  Refactors image client:  - fixed serialization and deserialization issues in 'list_images()' method  Refactors member(s) tests:  - fixed string to date object conversion issues.  Change-Id: I690409930fc50822289500ae898f27a6c791f120",integration,,,,,,
x%2Fcloudcafe~master~I690409930fc50822289500ae898f27a6c791f120,https://review.opendev.org/55373,"Image API v2.0 Image Model, Client and Tests - Refactoring .","Image API v2.0 Image Model, Client and Tests - Refactoring .  Refactors image model:  - added Images class  - corrected the key name - change 'member_id' to 'member' in '_obj_to_json' method  Refactors image client:  - fixed serialization and deserialization issues in 'list_images()' method  Refactors member(s) tests:  - fixed string to date object conversion issues.  Change-Id: I690409930fc50822289500ae898f27a6c791f120",objective,,,,,,
x%2Ftuskar-ui~master~I097a3e9017f64c69762fc5bdcb44396386be948a,https://review.opendev.org/53815,Refactor the cached api calls into @cached_property,Refactor the cached api calls into @cached_property  We have a lot of repeating code in the tuskar_ui.api that deals with caching the api calls from properties. I made a @cached_property decorator that handles that all in one place instead.  Change-Id: I097a3e9017f64c69762fc5bdcb44396386be948a,integration,,,,,,
x%2Ftuskar-ui~master~I097a3e9017f64c69762fc5bdcb44396386be948a,https://review.opendev.org/53815,Refactor the cached api calls into @cached_property,Refactor the cached api calls into @cached_property  We have a lot of repeating code in the tuskar_ui.api that deals with caching the api calls from properties. I made a @cached_property decorator that handles that all in one place instead.  Change-Id: I097a3e9017f64c69762fc5bdcb44396386be948a,quality,,,,,,
openstack%2Ftrove~master~If20004f1b69e41e8243a3f58eec184f1f457affe,https://review.opendev.org/45238,Task manager refactoring done,Manager API class removed and rpc fake impl used now for integration testing  Change-Id: If20004f1b69e41e8243a3f58eec184f1f457affe Implements: blueprit trove-task-manager-client-refactoring,integration,,,,,,
openstack%2Fglance~master~I050ff212d73ace8e84dcd800245b608210d6b29a,https://review.opendev.org/39309,Scrubber refactoring,Scrubber refactoring  * Adding lock protection to prevent race condition between glance-api and glance-scrubber service. * Adding multiple locations image support.  Implement bp: glance-scrubber-refactoring  Change-Id: I050ff212d73ace8e84dcd800245b608210d6b29a Signed-off-by: Zhi Yan Liu <zhiyanl@cn.ibm.com>,integration,,,,,,
openstack%2Fglance~master~I050ff212d73ace8e84dcd800245b608210d6b29a,https://review.opendev.org/39309,Scrubber refactoring,Scrubber refactoring  * Adding lock protection to prevent race condition between glance-api and glance-scrubber service. * Adding multiple locations image support.  Implement bp: glance-scrubber-refactoring  Change-Id: I050ff212d73ace8e84dcd800245b608210d6b29a Signed-off-by: Zhi Yan Liu <zhiyanl@cn.ibm.com>,objective,,,,,,
openstack%2Fbarbican~master~I33c20959f145f1c8f22725f62fb410033080b64f,https://review.opendev.org/43333,Refactor plugin API methods,"Refactor plugin API methods  * Supported method now must respond to an enumeration * Modified encrypt/generate_data_encryption_key to use supports * Refactor a bunch of confusing kek_meta_tenant, kek_metadata, * kek_meta_dto things * Modify plugins to support new method signatures in abstract base class * Unit tests for more error conditions  Change-Id: I33c20959f145f1c8f22725f62fb410033080b64f Implements: bp/crypto-refine-is-supported",integration,,,,,,
openstack%2Fbarbican~master~I33c20959f145f1c8f22725f62fb410033080b64f,https://review.opendev.org/43333,Refactor plugin API methods,"Refactor plugin API methods  * Supported method now must respond to an enumeration * Modified encrypt/generate_data_encryption_key to use supports * Refactor a bunch of confusing kek_meta_tenant, kek_metadata, * kek_meta_dto things * Modify plugins to support new method signatures in abstract base class * Unit tests for more error conditions  Change-Id: I33c20959f145f1c8f22725f62fb410033080b64f Implements: bp/crypto-refine-is-supported",objective,,,,,,
openstack%2Fnova~master~If0994934edb2ab19004353f9a4089ce525ed31dd,https://review.opendev.org/39466,Refactor integrated tests to support V2 and V3 API testing Part 2,Refactor integrated tests to support V2 and V3 API testing Part 2  This changeset moves the APISampleTestBase class out into its own file so the V3 versions of the tests can cleanly import it separate from the V2 code.  Partially implements v3-api-unittests Partially implements v3-api-specification  Change-Id: If0994934edb2ab19004353f9a4089ce525ed31dd,integration,,,,,,
openstack%2Fnova~master~If0994934edb2ab19004353f9a4089ce525ed31dd,https://review.opendev.org/39466,Refactor integrated tests to support V2 and V3 API testing Part 2,Refactor integrated tests to support V2 and V3 API testing Part 2  This changeset moves the APISampleTestBase class out into its own file so the V3 versions of the tests can cleanly import it separate from the V2 code.  Partially implements v3-api-unittests Partially implements v3-api-specification  Change-Id: If0994934edb2ab19004353f9a4089ce525ed31dd,testing,,,,,,
openstack%2Fcyborg~master~I783c3d0d257c16bf6c92c118f7b16f7f180f7026,https://review.opendev.org/696089,Refactor v2 arq api,Refactor v2 arq api  Change-Id: I783c3d0d257c16bf6c92c118f7b16f7f180f7026,integration,,,,,,
openstack%2Fsahara~master~I074c68bb008e35da2c27b54224d6c0cc5d120b81,https://review.opendev.org/40572,Tests module refactoring,Tests module refactoring  Target API for tests is Conudctor Manager now.  Change-Id: I074c68bb008e35da2c27b54224d6c0cc5d120b81,integration,,,,,,
openstack%2Fsahara~master~I074c68bb008e35da2c27b54224d6c0cc5d120b81,https://review.opendev.org/40572,Tests module refactoring,Tests module refactoring  Target API for tests is Conudctor Manager now.  Change-Id: I074c68bb008e35da2c27b54224d6c0cc5d120b81,testing,,,,,,
openstack%2Fnova~master~Ie88b089dfe536a56f5a46e9c92ff90c6a1fef793,https://review.opendev.org/38642,Refactor EC2 API error handling code,"Refactor EC2 API error handling code.  Implements blueprint ec2-error-codes  Redundant logging code was united in new __init__.py:ec2_error_ex() helper function and all standard EC2 error responses are now uniformly logged on DEBUG log level because they are just responses to invalid client requests, not nova errors.  Unexpected client/server errors are logged on ERROR/CRITICAL level and their exception name is used as error code - no more useless UnknownError. Error descriptions are supressed for unexpected server errors as they might contain sensitive information. New unit tests are provided.  The code for consturcting EC2 error response which was duplicated in __init__.py:ec2_error and faults.py:Fault was moved to faults.py:ec2_error_response.  __init__.py:exception_to_ec2code helper function now always returns exception name as an EC2 error code since there are no exceptions with ec2_code attribute yet. These will be added in the follwing patch as required by referenced blueprint.  This code cleanup serves as a base for future fix of current terrible EC2 error behavior.  Change-Id: Ie88b089dfe536a56f5a46e9c92ff90c6a1fef793",integration,,,,,,
openstack%2Fnova~master~Ie88b089dfe536a56f5a46e9c92ff90c6a1fef793,https://review.opendev.org/38642,Refactor EC2 API error handling code,"Refactor EC2 API error handling code.  Implements blueprint ec2-error-codes  Redundant logging code was united in new __init__.py:ec2_error_ex() helper function and all standard EC2 error responses are now uniformly logged on DEBUG log level because they are just responses to invalid client requests, not nova errors.  Unexpected client/server errors are logged on ERROR/CRITICAL level and their exception name is used as error code - no more useless UnknownError. Error descriptions are supressed for unexpected server errors as they might contain sensitive information. New unit tests are provided.  The code for consturcting EC2 error response which was duplicated in __init__.py:ec2_error and faults.py:Fault was moved to faults.py:ec2_error_response.  __init__.py:exception_to_ec2code helper function now always returns exception name as an EC2 error code since there are no exceptions with ec2_code attribute yet. These will be added in the follwing patch as required by referenced blueprint.  This code cleanup serves as a base for future fix of current terrible EC2 error behavior.  Change-Id: Ie88b089dfe536a56f5a46e9c92ff90c6a1fef793",quality,,,,,,
openstack%2Fneutron~master~I400ad8f544ec8bdc7d2efb597c995f284ff05829,https://review.opendev.org/29750,Service Type Framework refactoring,Service Type Framework refactoring  implements blueprint service-type-framework-cleanup  * Defines Db logic and API for ServiceProvider - read-only entity that admins provide in configuration. * ServiceType entity which maps to ServiceOfferings in new terms is removed for now. * Routed service insertion mixin is updated with new namings.  Not adding migration since service types were not used in grizzly.  Change-Id: I400ad8f544ec8bdc7d2efb597c995f284ff05829,integration,,,,,,
openstack%2Fneutron~master~I400ad8f544ec8bdc7d2efb597c995f284ff05829,https://review.opendev.org/29750,Service Type Framework refactoring,Service Type Framework refactoring  implements blueprint service-type-framework-cleanup  * Defines Db logic and API for ServiceProvider - read-only entity that admins provide in configuration. * ServiceType entity which maps to ServiceOfferings in new terms is removed for now. * Routed service insertion mixin is updated with new namings.  Not adding migration since service types were not used in grizzly.  Change-Id: I400ad8f544ec8bdc7d2efb597c995f284ff05829,objective,,,,,,
openstack%2Fceilometer~master~Id11215edae79e5bd007fb28590f9c4cca25aacc9,https://review.opendev.org/38300,Refactored API V2 tests to use testscenarios,Refactored API V2 tests to use testscenarios  Related to blueprint db-tests-with-scenarios  Change-Id: Id11215edae79e5bd007fb28590f9c4cca25aacc9,integration,,,,,,
openstack%2Fceilometer~master~Id11215edae79e5bd007fb28590f9c4cca25aacc9,https://review.opendev.org/38300,Refactored API V2 tests to use testscenarios,Refactored API V2 tests to use testscenarios  Related to blueprint db-tests-with-scenarios  Change-Id: Id11215edae79e5bd007fb28590f9c4cca25aacc9,testing,,,,,,
openstack%2Fceilometer~master~Id44ac158b8ff39c3d414c511f1bb2b3c948db0d2,https://review.opendev.org/38299,Refactored API V1 tests to use testscenarios,Refactored API V1 tests to use testscenarios  Related to blueprint db-tests-with-scenarios  Change-Id: Id44ac158b8ff39c3d414c511f1bb2b3c948db0d2,integration,,,,,,
openstack%2Fceilometer~master~Id44ac158b8ff39c3d414c511f1bb2b3c948db0d2,https://review.opendev.org/38299,Refactored API V1 tests to use testscenarios,Refactored API V1 tests to use testscenarios  Related to blueprint db-tests-with-scenarios  Change-Id: Id44ac158b8ff39c3d414c511f1bb2b3c948db0d2,testing,,,,,,
openstack%2Fnova~master~I5883f74c613888ed5f112ac1b7b1521f43644768,https://review.opendev.org/35312,Refactor compute_api reboot tests to be unit-y,"Refactor compute_api reboot tests to be unit-y  This follows previous efforts to unittest-ify the reboot tests for compute_api. This makes the cells testing much cleaner, and will massively simplify testing with objects.  Related to blueprint compute-api-objects  Change-Id: I5883f74c613888ed5f112ac1b7b1521f43644768",testing,,,,,,
x%2Fcloudcafe~master~I706fb867e9d892dceb994eeb9052d45d9c649fbf,https://review.opendev.org/30385,"Blockstorage behaviors refactor and versioning * Implemented exception-raising behaviors for volumes_api. * Removed blockstorage provider. * Added volume and snapshot statuses model. * Refactored response models. * Versioned volumes_api as v1, added stub for v2 * Cleaned up rax auth extensions * Fixed VolumeTypeList model * Added default_volume_type config property","* Implemented exception-raising behaviors for volumes_api. * Removed blockstorage provider. * Added volume and snapshot statuses model. * Refactored response models. * Versioned volumes_api as v1, added stub for v2 * Cleaned up auth  Change-Id: I706fb867e9d892dceb994eeb9052d45d9c649fbf",integration,,,,,,
x%2Fcloudcafe~master~I706fb867e9d892dceb994eeb9052d45d9c649fbf,https://review.opendev.org/30385,"Blockstorage behaviors refactor and versioning * Implemented exception-raising behaviors for volumes_api. * Removed blockstorage provider. * Added volume and snapshot statuses model. * Refactored response models. * Versioned volumes_api as v1, added stub for v2 * Cleaned up rax auth extensions * Fixed VolumeTypeList model * Added default_volume_type config property","* Implemented exception-raising behaviors for volumes_api. * Removed blockstorage provider. * Added volume and snapshot statuses model. * Refactored response models. * Versioned volumes_api as v1, added stub for v2 * Cleaned up auth  Change-Id: I706fb867e9d892dceb994eeb9052d45d9c649fbf",testing,,,,,,
openstack%2Fnova~master~I0563feaa97d768a96f950c148b1dbf51c356c4ac,https://review.opendev.org/21133,Refactor server password metadata to avoid direct db usage,"Refactor server password metadata to avoid direct db usage  This refactors the set_password() method in the server_password API extension to merely format the metadata and return it, leaving the job of updating the database to the caller. In the API extension case, the update can be done immediately against the database as before. In the case of the xenapi virt driver making the call, virtapi can be used to update the instance's system_metadata, thereby avoiding a direct database access by the compute manager.  Related to blueprint no-db-compute  Change-Id: I0563feaa97d768a96f950c148b1dbf51c356c4ac",integration,,,,,,
openstack%2Fnova~master~I0563feaa97d768a96f950c148b1dbf51c356c4ac,https://review.opendev.org/21133,Refactor server password metadata to avoid direct db usage,"Refactor server password metadata to avoid direct db usage  This refactors the set_password() method in the server_password API extension to merely format the metadata and return it, leaving the job of updating the database to the caller. In the API extension case, the update can be done immediately against the database as before. In the case of the xenapi virt driver making the call, virtapi can be used to update the instance's system_metadata, thereby avoiding a direct database access by the compute manager.  Related to blueprint no-db-compute  Change-Id: I0563feaa97d768a96f950c148b1dbf51c356c4ac",objective,,,,,,
openstack%2Fnova~master~I49466f7ab54dd6dbf0fc78bab3d2df44392ba3ee,https://review.opendev.org/20546,Refactoring/cleanup of compute and db apis,Refactoring/cleanup of compute api  Refactor host check and remove unused conf imports.  Change-Id: I49466f7ab54dd6dbf0fc78bab3d2df44392ba3ee,integration,,,,,,
openstack%2Fnova~master~I49466f7ab54dd6dbf0fc78bab3d2df44392ba3ee,https://review.opendev.org/20546,Refactoring/cleanup of compute and db apis,Refactoring/cleanup of compute api  Refactor host check and remove unused conf imports.  Change-Id: I49466f7ab54dd6dbf0fc78bab3d2df44392ba3ee,objective,,,,,,
openstack%2Fnova~master~I900719c02b7c6b48d44ca68903813a1dcd023f9f,https://review.opendev.org/20648,Nova Hyper-V driver refactoring,"Nova Hyper-V driver refactoring  Blueprint: bp/bp/hyper-v-testing-serialization-improvements  This patchset contains a major refactoring of the Hyper-V driver.  The main reason for this refactoring is to provide proper component abstraction and decoupling, thus replacing almost entirely the remaining pre-Essex code previously available. This leads to a considerable semplification of the testing framework, which is now entirely based on stubs and mocks (mox), without any serialized stub / mock.  From an architectural perspective, the main driver class delegates operations to ""ops"" classes (e.g. VMOps, VolumeOps, etc) which contain the main logic and delegate OS specific actions to ""utils"" classes (e.g. VMUtils, LiveMigrationUtils, etc) where the WMI and Win32 API OS specific code resides.  Additional attention has been put also into a better PEP8 code formatting, including compliance with not mandatory checks like E121 through E128.  Change-Id: I900719c02b7c6b48d44ca68903813a1dcd023f9f",integration,,,,,,
openstack%2Fnova~master~I900719c02b7c6b48d44ca68903813a1dcd023f9f,https://review.opendev.org/20648,Nova Hyper-V driver refactoring,"Nova Hyper-V driver refactoring  Blueprint: bp/bp/hyper-v-testing-serialization-improvements  This patchset contains a major refactoring of the Hyper-V driver.  The main reason for this refactoring is to provide proper component abstraction and decoupling, thus replacing almost entirely the remaining pre-Essex code previously available. This leads to a considerable semplification of the testing framework, which is now entirely based on stubs and mocks (mox), without any serialized stub / mock.  From an architectural perspective, the main driver class delegates operations to ""ops"" classes (e.g. VMOps, VolumeOps, etc) which contain the main logic and delegate OS specific actions to ""utils"" classes (e.g. VMUtils, LiveMigrationUtils, etc) where the WMI and Win32 API OS specific code resides.  Additional attention has been put also into a better PEP8 code formatting, including compliance with not mandatory checks like E121 through E128.  Change-Id: I900719c02b7c6b48d44ca68903813a1dcd023f9f",quality,,,,,,
openstack%2Fnova~master~Ifd25d12335ac96a15dfea4c5ab7f315ff7ddfd8b,https://review.opendev.org/19108,Refactor: extract method: driver_dict_from_config,"Refactor: extract method: to_driver_registry  Related to blueprint xenapi-volume-drivers  Extract method to create driver registries, so that it could be re-used in xenapi for a similar purpose.  Change-Id: Ifd25d12335ac96a15dfea4c5ab7f315ff7ddfd8b",integration,,,,,,
openstack%2Fnova~master~Ifd25d12335ac96a15dfea4c5ab7f315ff7ddfd8b,https://review.opendev.org/19108,Refactor: extract method: driver_dict_from_config,"Refactor: extract method: to_driver_registry  Related to blueprint xenapi-volume-drivers  Extract method to create driver registries, so that it could be re-used in xenapi for a similar purpose.  Change-Id: Ifd25d12335ac96a15dfea4c5ab7f315ff7ddfd8b",objective,,,,,,
openstack%2Fnova~master~Ib7045e49211d9300e9cb6ca0bfe80e569d635c9b,https://review.opendev.org/18876,Refactor EC2 keypairs exception,"Refactor EC2 keypairs exception  According to the following document:  http://docs.amazonwebservices.com/AWSEC2/latest/APIReference/api-error-codes.html  The EC2 API sends specific error codes when keypair listing or keypair generation fails, specifically the error codes are  InvalidKeyPair.Duplicate - duplicate keypair InvalidKeyPair.Format - keypair format invalid InvalidKeyPair.NotFound - keypair not found ResourceLimitExceeded - keypair quota exceeded  Refactored create_key_pair and describe_key_pair so that it throws the correct EC2 error codes according to the public EC2 API specs.  Also removed some duplicate exceptions as well.  Change-Id: Ib7045e49211d9300e9cb6ca0bfe80e569d635c9b Signed-off-by: Chuck Short <chuck.short@canonical.com>",integration,,,,,,
openstack%2Fnova~master~Ib7045e49211d9300e9cb6ca0bfe80e569d635c9b,https://review.opendev.org/18876,Refactor EC2 keypairs exception,"Refactor EC2 keypairs exception  According to the following document:  http://docs.amazonwebservices.com/AWSEC2/latest/APIReference/api-error-codes.html  The EC2 API sends specific error codes when keypair listing or keypair generation fails, specifically the error codes are  InvalidKeyPair.Duplicate - duplicate keypair InvalidKeyPair.Format - keypair format invalid InvalidKeyPair.NotFound - keypair not found ResourceLimitExceeded - keypair quota exceeded  Refactored create_key_pair and describe_key_pair so that it throws the correct EC2 error codes according to the public EC2 API specs.  Also removed some duplicate exceptions as well.  Change-Id: Ib7045e49211d9300e9cb6ca0bfe80e569d635c9b Signed-off-by: Chuck Short <chuck.short@canonical.com>",testing,,,,,,
openstack%2Fnova~master~I2c8252de7978e8fddd800e903f18a73ee9a95034,https://review.opendev.org/19095,Refactor work with TaskLog in sqlalchemy.api,Refactor work with TaskLog in sqlalchemy.api  Add _task_log_get_query() private method It is used to remove from task_log_get() and task_log_get_all() session. parametr and save performance.  task_log_get() method Remove session parameter from public method.  task_log_get_all() method Remove session parameter from public method.  task_log_begin_task() Remove session parameter from public method. Remove unused return value.  task_log_end_task() Remove session parameter from public method. Use 1 db request instead of 2. Remove unused return value.  blueprint db-session-cleanup  Change-Id: I2c8252de7978e8fddd800e903f18a73ee9a95034,integration,,,,,,
openstack%2Fnova~master~I2c8252de7978e8fddd800e903f18a73ee9a95034,https://review.opendev.org/19095,Refactor work with TaskLog in sqlalchemy.api,Refactor work with TaskLog in sqlalchemy.api  Add _task_log_get_query() private method It is used to remove from task_log_get() and task_log_get_all() session. parametr and save performance.  task_log_get() method Remove session parameter from public method.  task_log_get_all() method Remove session parameter from public method.  task_log_begin_task() Remove session parameter from public method. Remove unused return value.  task_log_end_task() Remove session parameter from public method. Use 1 db request instead of 2. Remove unused return value.  blueprint db-session-cleanup  Change-Id: I2c8252de7978e8fddd800e903f18a73ee9a95034,objective,,,,,,
openstack%2Fglance~master~I36542fd9b1d536d6266898766317abe110bb71a2,https://review.opendev.org/16341,Refactor where store drivers are initialized,Refactor where store drivers are initialized  The call to create_stores was happening in the v1 and v2 API controllers. This moves that call and the verification that the default_store exists into the necessary binaries.  Change-Id: I36542fd9b1d536d6266898766317abe110bb71a2,integration,,,,,,
openstack%2Fglance~master~I36542fd9b1d536d6266898766317abe110bb71a2,https://review.opendev.org/16341,Refactor where store drivers are initialized,Refactor where store drivers are initialized  The call to create_stores was happening in the v1 and v2 API controllers. This moves that call and the verification that the default_store exists into the necessary binaries.  Change-Id: I36542fd9b1d536d6266898766317abe110bb71a2,objective,,,,,,
openstack%2Fheat~master~I549295ebdd9a41ca4c184c0ff242c805399656c5,https://review.opendev.org/16295,Refactor unit tests for ReST API,Refactor unit tests for ReST API  This makes it easier to add tests for different controllers.  Change-Id: I549295ebdd9a41ca4c184c0ff242c805399656c5 Signed-off-by: Zane Bitter <zbitter@redhat.com>,integration,,,,,,
openstack%2Fheat~master~I549295ebdd9a41ca4c184c0ff242c805399656c5,https://review.opendev.org/16295,Refactor unit tests for ReST API,Refactor unit tests for ReST API  This makes it easier to add tests for different controllers.  Change-Id: I549295ebdd9a41ca4c184c0ff242c805399656c5 Signed-off-by: Zane Bitter <zbitter@redhat.com>,testing,,,,,,
openstack%2Fnova~master~I84fdeafdba0275ab4b25f8857563bd7b1494bb69,https://review.opendev.org/15702,Refactor scheduling filters,"Refactor scheduling filters  This breaks out the module/class loading from scheduling filters, as it will be used by scheduling weights as well as cell scheduling.  This creates a base plugin loading class.  nova-api extension loading could also benefit from this code.  Base filter code is also moved into nova/filters.py where cells scheduling can use it.  Change-Id: I84fdeafdba0275ab4b25f8857563bd7b1494bb69",integration,,,,,,
openstack%2Fnova~master~I84fdeafdba0275ab4b25f8857563bd7b1494bb69,https://review.opendev.org/15702,Refactor scheduling filters,"Refactor scheduling filters  This breaks out the module/class loading from scheduling filters, as it will be used by scheduling weights as well as cell scheduling.  This creates a base plugin loading class.  nova-api extension loading could also benefit from this code.  Base filter code is also moved into nova/filters.py where cells scheduling can use it.  Change-Id: I84fdeafdba0275ab4b25f8857563bd7b1494bb69",objective,,,,,,
openstack%2Fcinder~master~I42be05675cd73f89a03c84105ec512d7ee4f3c3a,https://review.opendev.org/14131,Scheduler API clean up and refactor,"Scheduler API clean up and refactor  Unlike Nova scheduler, which has to consider serving compute and volume scheduling, Cinder scheduler only serves volume scheduling, so there's no need to keep generic interface 'schedule'. Instead, 'schedule_create_volume' is added (if missing) to manager/driver class and chance/simple scheduler driver implementation.  Also this patch changes the interface between API service and scheduler to allow more information about volume is passed to scheduler for advanced scheduling.  Change-Id: I42be05675cd73f89a03c84105ec512d7ee4f3c3a",integration,,,,,,
openstack%2Fcinder~master~I42be05675cd73f89a03c84105ec512d7ee4f3c3a,https://review.opendev.org/14131,Scheduler API clean up and refactor,"Scheduler API clean up and refactor  Unlike Nova scheduler, which has to consider serving compute and volume scheduling, Cinder scheduler only serves volume scheduling, so there's no need to keep generic interface 'schedule'. Instead, 'schedule_create_volume' is added (if missing) to manager/driver class and chance/simple scheduler driver implementation.  Also this patch changes the interface between API service and scheduler to allow more information about volume is passed to scheduler for advanced scheduling.  Change-Id: I42be05675cd73f89a03c84105ec512d7ee4f3c3a",objective,,,,,,
openstack%2Fnova~master~Ib54d079cbad823abd85dcca9e5cd813887169fb0,https://review.opendev.org/10740,Simple refactor of some db api tests.,Simple refactor of some db api tests.  A few tests were using context.elevated instead of just passing the correct project id to the instance_create function.  Change-Id: Ib54d079cbad823abd85dcca9e5cd813887169fb0,integration,,,,,,
openstack%2Fnova~master~Ib54d079cbad823abd85dcca9e5cd813887169fb0,https://review.opendev.org/10740,Simple refactor of some db api tests.,Simple refactor of some db api tests.  A few tests were using context.elevated instead of just passing the correct project id to the instance_create function.  Change-Id: Ib54d079cbad823abd85dcca9e5cd813887169fb0,testing,,,,,,
openstack%2Fnova~master~I856d3d0c73c34e570112f1345d306308ef20a9ae,https://review.opendev.org/9455,Refactor instance_usage_audit. Add audit tasklog.,Refactor instance_usage_audit. Add audit tasklog.  The instance usage audit cronjob that generates periodic compute.instance.exists notifications is not particularly scalable. It is run on one server and takes longer as the number of instances grows.  This change moves the generation of those events to a periodic task in the compute manager. It also adds an api extention that can be used by administrators to check for errors generating these events.  Change-Id: I856d3d0c73c34e570112f1345d306308ef20a9ae,integration,,,,,,
openstack%2Fnova~master~I856d3d0c73c34e570112f1345d306308ef20a9ae,https://review.opendev.org/9455,Refactor instance_usage_audit. Add audit tasklog.,Refactor instance_usage_audit. Add audit tasklog.  The instance usage audit cronjob that generates periodic compute.instance.exists notifications is not particularly scalable. It is run on one server and takes longer as the number of instances grows.  This change moves the generation of those events to a periodic task in the compute manager. It also adds an api extention that can be used by administrators to check for errors generating these events.  Change-Id: I856d3d0c73c34e570112f1345d306308ef20a9ae,objective,,,,,,
openstack%2Fnova~master~Ibb1485515ff073dd0265969fdcfbfc2665b93fb7,https://review.opendev.org/9411,refactor xenapi/connection => xenapi/driver,refactor xenapi/connection => xenapi/driver  Part of bp:virt-driver-cleanup  Make the xenapi driver consistent in naming as a driver instead of a connection.  Change-Id: Ibb1485515ff073dd0265969fdcfbfc2665b93fb7,integration,,,,,,
openstack%2Fnova~master~Ibb1485515ff073dd0265969fdcfbfc2665b93fb7,https://review.opendev.org/9411,refactor xenapi/connection => xenapi/driver,refactor xenapi/connection => xenapi/driver  Part of bp:virt-driver-cleanup  Make the xenapi driver consistent in naming as a driver instead of a connection.  Change-Id: Ibb1485515ff073dd0265969fdcfbfc2665b93fb7,quality,,,,,,
openstack%2Fnova~master~I7c7e7c391086cf2fc32e8cb85d557005d417042f,https://review.opendev.org/9410,refactor vmwareapi_conn => vmwareapi/driver,refactor vmwareapi_conn => vmwareapi/driver  Part of bp:virt-driver-cleanup  Make the vmwareapi driver consistent in naming as a driver instead of a connection.  Get all the vmware driver parts into the same directory  Change-Id: I7c7e7c391086cf2fc32e8cb85d557005d417042f,integration,,,,,,
openstack%2Fnova~master~I7c7e7c391086cf2fc32e8cb85d557005d417042f,https://review.opendev.org/9410,refactor vmwareapi_conn => vmwareapi/driver,refactor vmwareapi_conn => vmwareapi/driver  Part of bp:virt-driver-cleanup  Make the vmwareapi driver consistent in naming as a driver instead of a connection.  Get all the vmware driver parts into the same directory  Change-Id: I7c7e7c391086cf2fc32e8cb85d557005d417042f,quality,,,,,,
openstack%2Fnova~master~I9a7fa67bd12ced877c83e48e31f5ef7263be6815,https://review.opendev.org/6409,Refactor nova.rpc config handling.,"Refactor nova.rpc config handling.  This patch does a couple of things:  1) Remove the dependency of nova.rpc on nova.flags.  This is a step toward decoupling nova.rpc from the rest of nova so that it can be moved to openstack-common.  2) Refactor nova.rpc so that a configuration object is passed around as needed instead of depending on nova.flags.FLAGS.  This was done by avoiding changing the nova.rpc API as much as possible so that existing usage of nova.rpc would not have to be touched.  So, instead, a config object gets registered, cached, and then passed into the rpc implementations as needed.  Getting rid of this global config reference in nova.rpc will require changing the public API and I wanted to avoid doing that until there was a better reason than this.  Change-Id: I9a7fa67bd12ced877c83e48e31f5ef7263be6815",integration,,,,,,
openstack%2Fnova~master~I9a7fa67bd12ced877c83e48e31f5ef7263be6815,https://review.opendev.org/6409,Refactor nova.rpc config handling.,"Refactor nova.rpc config handling.  This patch does a couple of things:  1) Remove the dependency of nova.rpc on nova.flags.  This is a step toward decoupling nova.rpc from the rest of nova so that it can be moved to openstack-common.  2) Refactor nova.rpc so that a configuration object is passed around as needed instead of depending on nova.flags.FLAGS.  This was done by avoiding changing the nova.rpc API as much as possible so that existing usage of nova.rpc would not have to be touched.  So, instead, a config object gets registered, cached, and then passed into the rpc implementations as needed.  Getting rid of this global config reference in nova.rpc will require changing the public API and I wanted to avoid doing that until there was a better reason than this.  Change-Id: I9a7fa67bd12ced877c83e48e31f5ef7263be6815",quality,,,,,,
openstack%2Fnova~master~Ia0739efcab0ca362c5bb89cd45c920bf762098f3,https://review.opendev.org/3266,Refactor compute api messaging calls to compute manager,"Refactor compute api messaging calls to compute manager  API's calls to compute manager all use instance_uuid now.  That allows us to refactor _cast_compute_message and make everything use it.  This removes an extra DB call in a lot of cases where we already had the instance object, but then passed an instance_uuid into _cast_compute_message with no host, where it would look the object up again.  Change-Id: Ia0739efcab0ca362c5bb89cd45c920bf762098f3",integration,,,,,,
openstack%2Fnova~master~Ia0739efcab0ca362c5bb89cd45c920bf762098f3,https://review.opendev.org/3266,Refactor compute api messaging calls to compute manager,"Refactor compute api messaging calls to compute manager  API's calls to compute manager all use instance_uuid now.  That allows us to refactor _cast_compute_message and make everything use it.  This removes an extra DB call in a lot of cases where we already had the instance object, but then passed an instance_uuid into _cast_compute_message with no host, where it would look the object up again.  Change-Id: Ia0739efcab0ca362c5bb89cd45c920bf762098f3",objective,,,,,,
openstack%2Fnova~master~Idc3a872870ae15165747a04ecd1b48e889bd90fd,https://review.opendev.org/1907,Refactor a few things inside the xenapi unit tests.,"Refactor a few things inside the xenapi unit tests.  There were a couple of places where basically the same code was being used to create a simulated VDI record -- these have been brought together into _make_fake_vdi.  fake_fetch_image was stubbing out parse_xmlrpc_value, which looks like it was a workaround for the fact that the task result wasn't being populated properly.  I've fixed the latter, and removed the former.  This moved the JSON handling into xenapi.fake.  There were a couple of implementations of host_call_plugin, which contained a lot of duplicated code.  In particular, they both made a simulated VDI record, even when the plugin function being called didn't require that. I have brought the two implementations together into fake.SessionBase, with overrides in the subclasses for those things that are specific to a given test.  I have also made the baseclass strict about flagging unsimulated plugin calls, and added explicit handling for agent.version, and a couple of methods from glance and migration.  Change-Id: Idc3a872870ae15165747a04ecd1b48e889bd90fd",integration,,,,,,
openstack%2Fnova~master~Idc3a872870ae15165747a04ecd1b48e889bd90fd,https://review.opendev.org/1907,Refactor a few things inside the xenapi unit tests.,"Refactor a few things inside the xenapi unit tests.  There were a couple of places where basically the same code was being used to create a simulated VDI record -- these have been brought together into _make_fake_vdi.  fake_fetch_image was stubbing out parse_xmlrpc_value, which looks like it was a workaround for the fact that the task result wasn't being populated properly.  I've fixed the latter, and removed the former.  This moved the JSON handling into xenapi.fake.  There were a couple of implementations of host_call_plugin, which contained a lot of duplicated code.  In particular, they both made a simulated VDI record, even when the plugin function being called didn't require that. I have brought the two implementations together into fake.SessionBase, with overrides in the subclasses for those things that are specific to a given test.  I have also made the baseclass strict about flagging unsimulated plugin calls, and added explicit handling for agent.version, and a couple of methods from glance and migration.  Change-Id: Idc3a872870ae15165747a04ecd1b48e889bd90fd",objective,,,,,,
openstack%2Fnova~master~Idc3a872870ae15165747a04ecd1b48e889bd90fd,https://review.opendev.org/1907,Refactor a few things inside the xenapi unit tests.,"Refactor a few things inside the xenapi unit tests.  There were a couple of places where basically the same code was being used to create a simulated VDI record -- these have been brought together into _make_fake_vdi.  fake_fetch_image was stubbing out parse_xmlrpc_value, which looks like it was a workaround for the fact that the task result wasn't being populated properly.  I've fixed the latter, and removed the former.  This moved the JSON handling into xenapi.fake.  There were a couple of implementations of host_call_plugin, which contained a lot of duplicated code.  In particular, they both made a simulated VDI record, even when the plugin function being called didn't require that. I have brought the two implementations together into fake.SessionBase, with overrides in the subclasses for those things that are specific to a given test.  I have also made the baseclass strict about flagging unsimulated plugin calls, and added explicit handling for agent.version, and a couple of methods from glance and migration.  Change-Id: Idc3a872870ae15165747a04ecd1b48e889bd90fd",testing,,,,,,
openstack%2Fnova~master~Idc3a872870ae15165747a04ecd1b48e889bd90fd,https://review.opendev.org/1907,Refactor a few things inside the xenapi unit tests.,"Refactor a few things inside the xenapi unit tests.  There were a couple of places where basically the same code was being used to create a simulated VDI record -- these have been brought together into _make_fake_vdi.  fake_fetch_image was stubbing out parse_xmlrpc_value, which looks like it was a workaround for the fact that the task result wasn't being populated properly.  I've fixed the latter, and removed the former.  This moved the JSON handling into xenapi.fake.  There were a couple of implementations of host_call_plugin, which contained a lot of duplicated code.  In particular, they both made a simulated VDI record, even when the plugin function being called didn't require that. I have brought the two implementations together into fake.SessionBase, with overrides in the subclasses for those things that are specific to a given test.  I have also made the baseclass strict about flagging unsimulated plugin calls, and added explicit handling for agent.version, and a couple of methods from glance and migration.  Change-Id: Idc3a872870ae15165747a04ecd1b48e889bd90fd",quality,,,,,,
openstack%2Fnova~master~Id41e48434ff3a38e524a1c64757a21bd461c06b8,https://review.opendev.org/1373,Refactor metadata code out of ec2/cloud.py,Refactor metadata code out of ec2/cloud.py  part 2 of blueprint separate-metadata-api  Change-Id: Id41e48434ff3a38e524a1c64757a21bd461c06b8,objective,,,,,,
openstack%2Fkeystone~stable%2Fdiablo~I23d58fa7417886cceb09d740efa99bc276b435d8,https://review.opendev.org/1343,Refactored version attributes,Refactored version attributes  - Promoted the api version status from 'alpha' to 'beta' - Adopted openstack release names in lieu of arbitrary version #'s  Change-Id: I23d58fa7417886cceb09d740efa99bc276b435d8,integration,,,,,,
openstack%2Fkeystone~stable%2Fdiablo~I23d58fa7417886cceb09d740efa99bc276b435d8,https://review.opendev.org/1343,Refactored version attributes,Refactored version attributes  - Promoted the api version status from 'alpha' to 'beta' - Adopted openstack release names in lieu of arbitrary version #'s  Change-Id: I23d58fa7417886cceb09d740efa99bc276b435d8,objective,,,,,,
openstack%2Fnova~master~I9279c4e5781f049ab9e0e995f6aeda48f17c5831,https://review.opendev.org/1010,Refactoring of extensions,Refactoring of extensions  This is a refactoring of API extensions.  Changes include better use of Python idioms and improved support for loading extensions.  Change-Id: I9279c4e5781f049ab9e0e995f6aeda48f17c5831,integration,,,,,,
openstack%2Fkeystone~master~I23d58fa7417886cceb09d740efa99bc276b435d8,https://review.opendev.org/965,Refactored version attributes,Refactored version attributes  - Promoted the api version status from 'alpha' to 'beta' - Adopted openstack release names in lieu of arbitrary version #'s  Change-Id: I23d58fa7417886cceb09d740efa99bc276b435d8,integration,,,,,,
openstack%2Fnova~master~Ie8abd19af727d665f5b137d34b3d63126eb5d0aa,https://review.opendev.org/912,Refactoring image and server metadata api tests,Refactoring image and server metadata api tests  Change-Id: Ie8abd19af727d665f5b137d34b3d63126eb5d0aa,integration,,,,,,
openstack%2Fnova~master~Ie8abd19af727d665f5b137d34b3d63126eb5d0aa,https://review.opendev.org/912,Refactoring image and server metadata api tests,Refactoring image and server metadata api tests  Change-Id: Ie8abd19af727d665f5b137d34b3d63126eb5d0aa,testing,,,,,,
openstack%2Fglance~master~I81e6c74815cf15adebb526b31614fd2e63982c3d,https://review.opendev.org/730,Refactoring registry api controllers,Refactoring registry api controllers  Break up images and members controllers in the registry api and restructure it to be more like the glance api. This is in preparation for the future split.  Change-Id: I81e6c74815cf15adebb526b31614fd2e63982c3d,integration,,,,,,
openstack%2Fglance~master~I81e6c74815cf15adebb526b31614fd2e63982c3d,https://review.opendev.org/730,Refactoring registry api controllers,Refactoring registry api controllers  Break up images and members controllers in the registry api and restructure it to be more like the glance api. This is in preparation for the future split.  Change-Id: I81e6c74815cf15adebb526b31614fd2e63982c3d,objective,,,,,,
openstack%2Ftripleo-heat-templates~master~I4794418546363888e7a555a16b45b7a4417f1ef8,https://review.opendev.org/777259,Refactor Service VIPs redis and ovn_dbs,"Refactor Service VIPs redis and ovn_dbs  With this change a Heat resource is no longer used to create an undercloud neutron API port resource for the redis and ovn_dbs service virtual IPs. Instead an external deploy task at step 0 in the individual service template uses the ""tripleo_service_vip"" ansible module to mange a neutron API port resource for each service.  The interfaces to control the IP address and service network (RedisVirtualFixedIPs, OVNDBsVirtualFixedIPs and ServiceNetMap) remains the same.  NOTE: If the neutron service is not available the       tripleo_service_vip ansible module will ""echo""       the IP provided in %service%VirtualFixedIPs.  Related: blueprint network-data-v2-ports Depends-On: https://review.opendev.org/777257 Change-Id: I4794418546363888e7a555a16b45b7a4417f1ef8",integration,,,,,,
openstack%2Ftripleo-heat-templates~master~I4794418546363888e7a555a16b45b7a4417f1ef8,https://review.opendev.org/777259,Refactor Service VIPs redis and ovn_dbs,"Refactor Service VIPs redis and ovn_dbs  With this change a Heat resource is no longer used to create an undercloud neutron API port resource for the redis and ovn_dbs service virtual IPs. Instead an external deploy task at step 0 in the individual service template uses the ""tripleo_service_vip"" ansible module to mange a neutron API port resource for each service.  The interfaces to control the IP address and service network (RedisVirtualFixedIPs, OVNDBsVirtualFixedIPs and ServiceNetMap) remains the same.  NOTE: If the neutron service is not available the       tripleo_service_vip ansible module will ""echo""       the IP provided in %service%VirtualFixedIPs.  Related: blueprint network-data-v2-ports Depends-On: https://review.opendev.org/777257 Change-Id: I4794418546363888e7a555a16b45b7a4417f1ef8",objective,,,,,,
openstack%2Fcharm-cinder~master~I863a64f243854ab2467f2042489485e35412727f,https://review.opendev.org/706075,Refresh and refactor README,Refresh and refactor README  Refresh and streamline the README.  Remove scenario involving separation of Cinder components as I cannot locate charms cinder-api and cinder-volume. Add cinder-ceph charm to the Ceph scenario.  I am unsure about the relation involving: cinder:image-service glance:image-service  Add Bugs section  Change-Id: I863a64f243854ab2467f2042489485e35412727f,integration,,,,,,
openstack%2Fcharm-cinder~master~I863a64f243854ab2467f2042489485e35412727f,https://review.opendev.org/706075,Refresh and refactor README,Refresh and refactor README  Refresh and streamline the README.  Remove scenario involving separation of Cinder components as I cannot locate charms cinder-api and cinder-volume. Add cinder-ceph charm to the Ceph scenario.  I am unsure about the relation involving: cinder:image-service glance:image-service  Add Bugs section  Change-Id: I863a64f243854ab2467f2042489485e35412727f,quality,,,,,,
starlingx%2Fansible-playbooks~master~Ife65cd95c0f7c0ec431a9298965acab50aac11d7,https://review.opendev.org/693215,Refactor Ansible sysinv data collection,Refactor Ansible sysinv data collection  Refactor the sysinv data collection so it uses the new sysinv-db-data API instead of scraping CLI command output.  Story: 2006590 Task: 36892 Depends-On: https://review.opendev.org/693213/ Signed-off-by: Kristine Bujold <kristine.bujold@windriver.com> Change-Id: Ife65cd95c0f7c0ec431a9298965acab50aac11d7,integration,,,,,,
starlingx%2Fansible-playbooks~master~Ife65cd95c0f7c0ec431a9298965acab50aac11d7,https://review.opendev.org/693215,Refactor Ansible sysinv data collection,Refactor Ansible sysinv data collection  Refactor the sysinv data collection so it uses the new sysinv-db-data API instead of scraping CLI command output.  Story: 2006590 Task: 36892 Depends-On: https://review.opendev.org/693213/ Signed-off-by: Kristine Bujold <kristine.bujold@windriver.com> Change-Id: Ife65cd95c0f7c0ec431a9298965acab50aac11d7,objective,,,,,,
x%2Fnetworking-mlnx~master~I79f9f356d0630e3efb2fa2624c3d9c2bad3d31fa,https://review.opendev.org/693695,Remove internal DB dependencies and refactoring,"Remove internal DB dependencies and refactoring  This change performs some refactoring:  - remove internal DB dpenedency (eswitch_db, device_db)   removing libvirt dependency altoghether  - Introduce EmbSwitch object to manage port operations on an   embedded switch  - Introduce EswitchManager object to manage muliple embeddes   switches.  - spearate infiniband specific functionality and move it to   utils module.  - eswitchd API was modified to use PCI address as port identifier   to reduce mac address dependency.  Change-Id: I79f9f356d0630e3efb2fa2624c3d9c2bad3d31fa",integration,,,,,,
x%2Fnetworking-mlnx~master~I79f9f356d0630e3efb2fa2624c3d9c2bad3d31fa,https://review.opendev.org/693695,Remove internal DB dependencies and refactoring,"Remove internal DB dependencies and refactoring  This change performs some refactoring:  - remove internal DB dpenedency (eswitch_db, device_db)   removing libvirt dependency altoghether  - Introduce EmbSwitch object to manage port operations on an   embedded switch  - Introduce EswitchManager object to manage muliple embeddes   switches.  - spearate infiniband specific functionality and move it to   utils module.  - eswitchd API was modified to use PCI address as port identifier   to reduce mac address dependency.  Change-Id: I79f9f356d0630e3efb2fa2624c3d9c2bad3d31fa",objective,,,,,,
starlingx%2Fconfig~master~I619b73c0a631fa60c66d1b9391b147e1ad5610d4,https://review.opendev.org/690964,Refactor Interface API unit tests,Refactor Interface API unit tests  The interface API unit tests are refactored to use the BaseHostTestCase Class.  Story: 2004515 Task: 37248  Change-Id: I619b73c0a631fa60c66d1b9391b147e1ad5610d4 Signed-off-by: Teresa Ho <teresa.ho@windriver.com>,integration,,,,,,
starlingx%2Fconfig~master~I619b73c0a631fa60c66d1b9391b147e1ad5610d4,https://review.opendev.org/690964,Refactor Interface API unit tests,Refactor Interface API unit tests  The interface API unit tests are refactored to use the BaseHostTestCase Class.  Story: 2004515 Task: 37248  Change-Id: I619b73c0a631fa60c66d1b9391b147e1ad5610d4 Signed-off-by: Teresa Ho <teresa.ho@windriver.com>,testing,,,,,,
openstack%2Fnova~master~Ice6d5b4757134b7d1b36514744a8f958528a6a47,https://review.opendev.org/642183,Refactor ComputeManager.remove_volume_connection,"Refactor ComputeManager.remove_volume_connection  This change does two things:  First is a simple refactor to allow passing a BDM to _remove_volume_connection. The interface on the public remove_volume_connection cannot be easily changed since it's an RPC API call.  Second, the new private method gains a delete_attachment kwarg which will tell the method whether or not to delete a v3-style attachment, i.e. bdm.attachment_id is not None.  This is prep work for an upcoming change that is going to call the new private method locally rather than over RPC.  Change-Id: Ice6d5b4757134b7d1b36514744a8f958528a6a47",integration,,,,,,
openstack%2Fnova~master~Ice6d5b4757134b7d1b36514744a8f958528a6a47,https://review.opendev.org/642183,Refactor ComputeManager.remove_volume_connection,"Refactor ComputeManager.remove_volume_connection  This change does two things:  First is a simple refactor to allow passing a BDM to _remove_volume_connection. The interface on the public remove_volume_connection cannot be easily changed since it's an RPC API call.  Second, the new private method gains a delete_attachment kwarg which will tell the method whether or not to delete a v3-style attachment, i.e. bdm.attachment_id is not None.  This is prep work for an upcoming change that is going to call the new private method locally rather than over RPC.  Change-Id: Ice6d5b4757134b7d1b36514744a8f958528a6a47",objective,,,,,,
openstack%2Fcinder~master~Iecd909ef4e24d5597dcccb80a671a27f361e4b4d,https://review.opendev.org/674698,Refactor API utilities into api_utils.py,"Refactor API utilities into api_utils.py  This collects up utils that are only used in the API code, and moves them from cinder/utils.py to here, for better code organization.  Change-Id: Iecd909ef4e24d5597dcccb80a671a27f361e4b4d",integration,,,,,,
openstack%2Fcinder~master~Iecd909ef4e24d5597dcccb80a671a27f361e4b4d,https://review.opendev.org/674698,Refactor API utilities into api_utils.py,"Refactor API utilities into api_utils.py  This collects up utils that are only used in the API code, and moves them from cinder/utils.py to here, for better code organization.  Change-Id: Iecd909ef4e24d5597dcccb80a671a27f361e4b4d",quality,,,,,,
openstack%2Fglance~master~Ia65b8f1069927a45aadee5fcf8a80ac5b917ab1e,https://review.opendev.org/206975,Refactoring exceptions,"Refactoring exceptions  Merge of exception, remove unused exceptions, make more humanreadable view.  Change-Id: Ia65b8f1069927a45aadee5fcf8a80ac5b917ab1e",quality,,,,,,
openstack%2Fpython-solumclient~master~I4a26f146fd89edc1c5d297590431c34405e90765,https://review.opendev.org/182039,Refactor plan creation out of app-create,Refactor plan creation out of app-create  The work of collecting and verifying planfile contents is causing the app-create code to bloat. This is one approach to reducing that complexity.  Change-Id: I4a26f146fd89edc1c5d297590431c34405e90765,quality,,,,,,
openstack%2Fpython-solumclient~master~I4a26f146fd89edc1c5d297590431c34405e90765,https://review.opendev.org/182039,Refactor plan creation out of app-create,Refactor plan creation out of app-create  The work of collecting and verifying planfile contents is causing the app-create code to bloat. This is one approach to reducing that complexity.  Change-Id: I4a26f146fd89edc1c5d297590431c34405e90765,objective,,,,,,
openstack%2Foslo.config~master~Id2e194fbdf7310c3cf704f1a1b96f07292420d3b,https://review.opendev.org/134671,"Refactor config opts, deriving from common base (WIP)","Refactor config opts, deriving from common base (WIP)  Start to shift the functionality of the config opts class into a base class that allows for other implementations of config opts that can provide there own implementations of the base abstract methods (perhaps providing a '_do_get' that fetchs from a remote source, or from a dictionary, or from elsewhere).  This is a first step at decoupling oslo.config from being so tied to CLI and config file parsing, extraction... so that in the future more flexible and alternative sources can easily co-exist.  Change-Id: Id2e194fbdf7310c3cf704f1a1b96f07292420d3b",quality,,,,,,
openstack%2Foslo.config~master~Id2e194fbdf7310c3cf704f1a1b96f07292420d3b,https://review.opendev.org/134671,"Refactor config opts, deriving from common base (WIP)","Refactor config opts, deriving from common base (WIP)  Start to shift the functionality of the config opts class into a base class that allows for other implementations of config opts that can provide there own implementations of the base abstract methods (perhaps providing a '_do_get' that fetchs from a remote source, or from a dictionary, or from elsewhere).  This is a first step at decoupling oslo.config from being so tied to CLI and config file parsing, extraction... so that in the future more flexible and alternative sources can easily co-exist.  Change-Id: Id2e194fbdf7310c3cf704f1a1b96f07292420d3b",objective,,,,,,
openstack%2Fcookbook-openstack-compute~master~If00994ccacad8de96c6f55fb3231985f98587f12,https://review.opendev.org/175102,Refactor code in nova-setup recipe,"Refactor code in nova-setup recipe           This is a work in progress.  I figured the refactor          request was to make the code more readable.           This first patch includes a small refactor of a set of          options added to the nova-manage network-create command.          If this is the direction the community wants me to go,          I will continue.  Change-Id: If00994ccacad8de96c6f55fb3231985f98587f12 Closes-Bug: #1412604",quality,,,,,,
openstack%2Ffuel-web~master~Id690021697d16bf320d844f0d318293d1d1b3731,https://review.opendev.org/86477,Refactor DeploymentSerializer slightly,"Refactor DeploymentSerializer slightly  ""DRY"" set_primary_controller so that it can be reused in a couple  of other changes sets  Make set_deployment_pirorities readable by replacing ""prior"" with  ""priority"" since prior means previous and leads to confusion reading  the code  Change-Id: Id690021697d16bf320d844f0d318293d1d1b3731",quality,,,,,,
openstack%2Ffuel-web~master~Id690021697d16bf320d844f0d318293d1d1b3731,https://review.opendev.org/86477,Refactor DeploymentSerializer slightly,"Refactor DeploymentSerializer slightly  ""DRY"" set_primary_controller so that it can be reused in a couple  of other changes sets  Make set_deployment_pirorities readable by replacing ""prior"" with  ""priority"" since prior means previous and leads to confusion reading  the code  Change-Id: Id690021697d16bf320d844f0d318293d1d1b3731",objective,,,,,,
openstack%2Frally~master~Iec8ba0828d887f40739de41ad9057b079bc333c9,https://review.opendev.org/144696,Refactoring structure of rally/verification,Refactoring structure of rally/verification  Removing verifiers directory to make the code more readable and to reduce unnecessary complexity  Change-Id: Iec8ba0828d887f40739de41ad9057b079bc333c9,quality,,,,,,
openstack%2Frally~master~Iec8ba0828d887f40739de41ad9057b079bc333c9,https://review.opendev.org/144696,Refactoring structure of rally/verification,Refactoring structure of rally/verification  Removing verifiers directory to make the code more readable and to reduce unnecessary complexity  Change-Id: Iec8ba0828d887f40739de41ad9057b079bc333c9,objective,,,,,,
opendev%2Fsystem-config~master~If2e05e62ec444b04780ff76d3b3d566cf4987734,https://review.opendev.org/131483,"Revert ""refactor of hideci for readability and modularity""","Revert ""refactor of hideci for readability and modularity""  This reverts commit f160dcf90c2850b1bf04948253d006c01e34c15b.  This does not work with the new change screen.  Change-Id: If2e05e62ec444b04780ff76d3b3d566cf4987734",quality,,,,,,
opendev%2Fsystem-config~master~If2e05e62ec444b04780ff76d3b3d566cf4987734,https://review.opendev.org/131483,"Revert ""refactor of hideci for readability and modularity""","Revert ""refactor of hideci for readability and modularity""  This reverts commit f160dcf90c2850b1bf04948253d006c01e34c15b.  This does not work with the new change screen.  Change-Id: If2e05e62ec444b04780ff76d3b3d566cf4987734",objective,,,,,,
openstack%2Fkeystone~master~I8564ae5153b367f022788c45011da3e1cca98237,https://review.opendev.org/139836,Refactor downgrade_assignment_table for complexity,"Refactor downgrade_assignment_table for complexity  The downgrade_assignment_table was the most ""complex"" in keystone. It was refactored to move the embedded functions out. This allows max-complexity to be reduced.  Change-Id: I8564ae5153b367f022788c45011da3e1cca98237",quality,,,,,,
openstack%2Fkeystone~master~I8564ae5153b367f022788c45011da3e1cca98237,https://review.opendev.org/139836,Refactor downgrade_assignment_table for complexity,"Refactor downgrade_assignment_table for complexity  The downgrade_assignment_table was the most ""complex"" in keystone. It was refactored to move the embedded functions out. This allows max-complexity to be reduced.  Change-Id: I8564ae5153b367f022788c45011da3e1cca98237",objective,,,,,,
openstack%2Fkeystone~master~Id484674a4f4d8a4d4687e9597d471f858d015ecc,https://review.opendev.org/139835,Refactor _authenticate_token for complexity,"Refactor _authenticate_token for complexity  The _authenticate_token method was the most ""complex"" in keystone. It was refactored to extract a complex piece of the method (checking any trust info) into a new method. This allows the max-complexity to be reduced.  Change-Id: Id484674a4f4d8a4d4687e9597d471f858d015ecc",quality,,,,,,
openstack%2Fkeystone~master~Id484674a4f4d8a4d4687e9597d471f858d015ecc,https://review.opendev.org/139835,Refactor _authenticate_token for complexity,"Refactor _authenticate_token for complexity  The _authenticate_token method was the most ""complex"" in keystone. It was refactored to extract a complex piece of the method (checking any trust info) into a new method. This allows the max-complexity to be reduced.  Change-Id: Id484674a4f4d8a4d4687e9597d471f858d015ecc",objective,,,,,,
openstack%2Fkeystone~master~I427774d4951c490184072f4b2a2ed0d7448b42f7,https://review.opendev.org/119363,Refactor assignment expansion related functions,Refactor assignment expansion related functions  Separated the assignment expansion related code into functions in order to improve readability. The functionality has not changed whatsoever.  Change-Id: I427774d4951c490184072f4b2a2ed0d7448b42f7,quality,,,,,,
openstack%2Fkeystone~master~I427774d4951c490184072f4b2a2ed0d7448b42f7,https://review.opendev.org/119363,Refactor assignment expansion related functions,Refactor assignment expansion related functions  Separated the assignment expansion related code into functions in order to improve readability. The functionality has not changed whatsoever.  Change-Id: I427774d4951c490184072f4b2a2ed0d7448b42f7,objective,,,,,,
openstack%2Fneutron~master~I1069c69990ddc394c195f39f23284b02fb7af560,https://review.opendev.org/121701,WIP Refactor l2_pop code in linuxbridge,WIP Refactor l2_pop code in linuxbridge  A previous refactor introduced a namedtupled for sending ip and mac address information for a port instead of a regular tuple.  This commit will take advantage of that to break the position dependence of the code in linuxbridge which uses that information for maintainability.  It will also add a little bit of readability to the code.  Change-Id: I1069c69990ddc394c195f39f23284b02fb7af560,quality,,,,,,
openstack%2Fneutron~master~I1069c69990ddc394c195f39f23284b02fb7af560,https://review.opendev.org/121701,WIP Refactor l2_pop code in linuxbridge,WIP Refactor l2_pop code in linuxbridge  A previous refactor introduced a namedtupled for sending ip and mac address information for a port instead of a regular tuple.  This commit will take advantage of that to break the position dependence of the code in linuxbridge which uses that information for maintainability.  It will also add a little bit of readability to the code.  Change-Id: I1069c69990ddc394c195f39f23284b02fb7af560,objective,,,,,,
openstack%2Ftrove~master~Ia5e707598719fd778de35802af0a6cf2fe63bf52,https://review.opendev.org/53346,Trove instance model refactoring,"Trove instance model refactoring  For better trove pluggability we need to have a modular, low coupled code. This commit goal is decoupling instance model code.  The main made changes: 1) Using single model for trove instance and different views (not model per view) 2) Separating Manager(Controller in MVC terms) code level (model only return and save state, business logic was moved to manager) 3) Instance model interface refactoring and optimization (if you want to get state or save state you need only request corresponding method or attribute, all ather logic for loading and saving, caching attribute is hidden on Model level) 4) Adaptation trove code and tests to new model  Change-Id: Ia5e707598719fd778de35802af0a6cf2fe63bf52 Implements: blueprint trove-refactoring-for-better-pluggability",quality,,,,,,
openstack%2Ftrove~master~Ia5e707598719fd778de35802af0a6cf2fe63bf52,https://review.opendev.org/53346,Trove instance model refactoring,"Trove instance model refactoring  For better trove pluggability we need to have a modular, low coupled code. This commit goal is decoupling instance model code.  The main made changes: 1) Using single model for trove instance and different views (not model per view) 2) Separating Manager(Controller in MVC terms) code level (model only return and save state, business logic was moved to manager) 3) Instance model interface refactoring and optimization (if you want to get state or save state you need only request corresponding method or attribute, all ather logic for loading and saving, caching attribute is hidden on Model level) 4) Adaptation trove code and tests to new model  Change-Id: Ia5e707598719fd778de35802af0a6cf2fe63bf52 Implements: blueprint trove-refactoring-for-better-pluggability",objective,,,,,,
openstack%2Fpython-keystoneclient~master~I8c03f7291b6a2addd46c26b236d3f9b5f3521e9d,https://review.opendev.org/67015,Refactor keyring store logic,Refactor keyring store logic  Simplify the token processing code a little. This is an attempt to reduce the complexity of the following Auth Token review by removing logic changes from it.  Change-Id: I8c03f7291b6a2addd46c26b236d3f9b5f3521e9d,quality,,,,,,
openstack%2Fpython-keystoneclient~master~I8c03f7291b6a2addd46c26b236d3f9b5f3521e9d,https://review.opendev.org/67015,Refactor keyring store logic,Refactor keyring store logic  Simplify the token processing code a little. This is an attempt to reduce the complexity of the following Auth Token review by removing logic changes from it.  Change-Id: I8c03f7291b6a2addd46c26b236d3f9b5f3521e9d,objective,,,,,,
opendev%2Fpypi-mirror~master~I1e70c14a4b9f04bf3fad9aeef98c9ce230469019,https://review.opendev.org/56784,Refactor run-mirror to make it readable,Refactor run-mirror to make it readable  First stab at refactoring to unspaghetti things.  Change-Id: I1e70c14a4b9f04bf3fad9aeef98c9ce230469019,quality,,,,,,
x%2Fgroup-based-policy~stable%2Fnewton~I8fd5bbcc4b019283b339673f975a7af7f0cfd550,https://review.opendev.org/706549,Refactor static path code,"Refactor static path code  The static path code is refactored to improve readability, and will be used in subsequent patches adding support for baremetal VNIC types.  Change-Id: I8fd5bbcc4b019283b339673f975a7af7f0cfd550",quality,,,,,,
openstack%2Fkolla-ansible~master~Ifc3fc4103ff643a4e72104f89bb0ce791c239f71,https://review.opendev.org/642296,genpwd: Refactor to reduce cyclomatic complexity,genpwd: Refactor to reduce cyclomatic complexity  Before refactoring:  radon cc -s kolla_ansible/cmd/genpwd.py  kolla_ansible/cmd/genpwd.py     F 57:0 genpwd - C (13)     F 39:0 generate_RSA - A (1)     F 94:0 main - A (1)  After refactoring:  radon cc -s kolla_ansible/cmd/genpwd.py  kolla_ansible/cmd/genpwd.py     F 149:0 genpwd - A (3)     M 54:4 SecretGenerator.get_by_key_name - A (3)     C 67:0 SecretGeneratorRegular - A (3)     C 77:0 SecretGeneratorRsa - A (3)     M 102:4 SecretGeneratorRsa.skip - A (3)     C 41:0 SecretGenerator - A (2)     M 70:4 SecretGeneratorRegular.generate - A (2)     C 110:0 SecretGeneratorHmac - A (2)     C 124:0 SecretGeneratorUuid - A (2)     C 140:0 SecretGeneratorFernet - A (2)     F 158:0 genpwd_file - A (1)     F 168:0 main - A (1)     M 43:4 SecretGenerator.keys - A (1)     M 47:4 SecretGenerator.generate - A (1)     M 51:4 SecretGenerator.skip - A (1)     M 85:4 SecretGeneratorRsa.generate - A (1)     M 116:4 SecretGeneratorHmac.generate - A (1)     M 136:4 SecretGeneratorUuid.generate - A (1)     M 145:4 SecretGeneratorFernet.generate - A (1)  Calculated using radon==3.0.1  Change-Id: Ifc3fc4103ff643a4e72104f89bb0ce791c239f71 Signed-off-by: Maciej Kucia <maciej@kucia.net>,quality,,,,,,
openstack%2Fkolla-ansible~master~I58ea0c240ebd1a0e726ca5598220aa11ace6660f,https://review.opendev.org/636033,genpwd: Refactor to reduce cyclomatic complexity,genpwd: Refactor to reduce cyclomatic complexity  Before refactoring:  radon cc -s kolla_ansible/cmd/genpwd.py  kolla_ansible/cmd/genpwd.py     F 57:0 genpwd - C (13)     F 39:0 generate_RSA - A (1)     F 94:0 main - A (1)  After refactoring:  radon cc -s kolla_ansible/cmd/genpwd.py  kolla_ansible/cmd/genpwd.py     F 138:0 get_schema_for_key - A (4)     F 57:0 rsa_skip - A (3)     F 146:0 genpwd - A (3)     F 65:0 regular_password_generate - A (2)     F 39:0 rsa_generate - A (1)     F 72:0 hmac_generate - A (1)     F 80:0 password_not_empty - A (1)     F 153:0 genpwd_file - A (1)     F 163:0 main - A (1)  Calculated using radon==3.0.1  Change-Id: I58ea0c240ebd1a0e726ca5598220aa11ace6660f Signed-off-by: Maciej Kucia <maciej@kucia.net>,quality,,,,,,
openstack%2Fopenstack-helm-images~master~I50449b9662719b1a1eedc4cbff8bf1e70fe64a9d,https://review.opendev.org/642389,In progress -- Refactor of loci upload,"In progress -- Refactor of loci upload  TODO: - Verify zuul change id name - Add new playbook - Reuse infra roles  Maybe too complex, so I will compare this with the standard approach.  Change-Id: I50449b9662719b1a1eedc4cbff8bf1e70fe64a9d",quality,,,,,,
openstack%2Fcharm-neutron-api~master~Ic7706216cc14ab11b2f9fd1611baa75dd48b8626,https://review.opendev.org/531359,Refactor vip resource creation for iface'less use,Refactor vip resource creation for iface'less use  Pacemaker VIP resources are able to automatically detect and configure correct iface and netmask parameters based on local configuration of the unit.  Switch to using hash based naming in VIP resources and drop configuration of nic and cidr_netmask params.  The hash is based on the first 7 chars of an sha1 hash of the VIP which is deterministic and still readable (base of gits short hash default).  This supports deployment in container based environments where interface -> subnet connectivity may not be consistent between container instances within an application.  NOTE: this change is somewhat bumpy as the original iface named VIP resource will be stopped and deleted prior to the creation of the new short hash named VIP resource.  Closes-Bug: 1727824  Change-Id: Ic7706216cc14ab11b2f9fd1611baa75dd48b8626,objective,,,,,,
openstack%2Fcharm-neutron-api~master~Ic7706216cc14ab11b2f9fd1611baa75dd48b8626,https://review.opendev.org/531359,Refactor vip resource creation for iface'less use,Refactor vip resource creation for iface'less use  Pacemaker VIP resources are able to automatically detect and configure correct iface and netmask parameters based on local configuration of the unit.  Switch to using hash based naming in VIP resources and drop configuration of nic and cidr_netmask params.  The hash is based on the first 7 chars of an sha1 hash of the VIP which is deterministic and still readable (base of gits short hash default).  This supports deployment in container based environments where interface -> subnet connectivity may not be consistent between container instances within an application.  NOTE: this change is somewhat bumpy as the original iface named VIP resource will be stopped and deleted prior to the creation of the new short hash named VIP resource.  Closes-Bug: 1727824  Change-Id: Ic7706216cc14ab11b2f9fd1611baa75dd48b8626,integration,,,,,,
openstack%2Fcharm-neutron-api~master~Ic7706216cc14ab11b2f9fd1611baa75dd48b8626,https://review.opendev.org/531359,Refactor vip resource creation for iface'less use,Refactor vip resource creation for iface'less use  Pacemaker VIP resources are able to automatically detect and configure correct iface and netmask parameters based on local configuration of the unit.  Switch to using hash based naming in VIP resources and drop configuration of nic and cidr_netmask params.  The hash is based on the first 7 chars of an sha1 hash of the VIP which is deterministic and still readable (base of gits short hash default).  This supports deployment in container based environments where interface -> subnet connectivity may not be consistent between container instances within an application.  NOTE: this change is somewhat bumpy as the original iface named VIP resource will be stopped and deleted prior to the creation of the new short hash named VIP resource.  Closes-Bug: 1727824  Change-Id: Ic7706216cc14ab11b2f9fd1611baa75dd48b8626,objective,,,,,,
jjb%2Fjenkins-job-builder~master~Ieebc778416998f3c3427f957c942391f2f5475dd,https://review.opendev.org/185037,Refactor err reporting of incorrect YAML structure,Refactor err reporting of incorrect YAML structure  This improves the error reporting of incorrect structure of the YAML -- when the missing indent is detected. It adds the information about the file name with problematic structure.  Code which is extracting the expected single item from a collection has been extracted to `get_the_only_one_subitem` function to increase the readability.  Added tests for missing indent exception.  Change-Id: Ieebc778416998f3c3427f957c942391f2f5475dd,quality,,,,,,
jjb%2Fjenkins-job-builder~master~Ieebc778416998f3c3427f957c942391f2f5475dd,https://review.opendev.org/185037,Refactor err reporting of incorrect YAML structure,Refactor err reporting of incorrect YAML structure  This improves the error reporting of incorrect structure of the YAML -- when the missing indent is detected. It adds the information about the file name with problematic structure.  Code which is extracting the expected single item from a collection has been extracted to `get_the_only_one_subitem` function to increase the readability.  Added tests for missing indent exception.  Change-Id: Ieebc778416998f3c3427f957c942391f2f5475dd,objective,,,,,,
openstack%2Fblazar~master~I35eb93179f539772f4ca85d9a5df4ea7c14d92f9,https://review.opendev.org/610485,Trivial refactor in instance_plugin.py,Trivial refactor in instance_plugin.py  This patch refactors instance['reservation_id'] to just reservation_id for code readability.  Change-Id: I35eb93179f539772f4ca85d9a5df4ea7c14d92f9,quality,,,,,,
openstack%2Fcinder~master~I9e33313b4e9fd7a7701ae37cc9731885c8ea55cc,https://review.opendev.org/606310,Refactor of _clone_image_volume,"Refactor of _clone_image_volume  This patch makes _clone_image_volume more readable, and plus negative case for it.  Note that, the change doesn't have any functional change on the original method.  trivial_fix  Change-Id: I9e33313b4e9fd7a7701ae37cc9731885c8ea55cc",quality,,,,,,
openstack%2Fhorizon~stable%2Fqueens~Id5b7a06c50e397c8c27447322d7f64f2d65c06b6,https://review.opendev.org/559971,Refactor futurist calls,"Refactor futurist calls  After futurist calls were introduced, the code became difficult to understand. For example, local variables are used something like global. To keep the code easier to understand, the usage of local variables should be more scoped.  This commit introduces a wrapper function for futurist.ThreadPoolExecutor and converts inline functions into normal methods. I believe it improves the code readability a lot.  Change-Id: Id5b7a06c50e397c8c27447322d7f64f2d65c06b6 (cherry picked from commit 56ae087995a5c2afe9d8c5ef6eeaf365c7c5987e)",quality,,,,,,
openstack%2Fhorizon~stable%2Fqueens~Id5b7a06c50e397c8c27447322d7f64f2d65c06b6,https://review.opendev.org/559971,Refactor futurist calls,"Refactor futurist calls  After futurist calls were introduced, the code became difficult to understand. For example, local variables are used something like global. To keep the code easier to understand, the usage of local variables should be more scoped.  This commit introduces a wrapper function for futurist.ThreadPoolExecutor and converts inline functions into normal methods. I believe it improves the code readability a lot.  Change-Id: Id5b7a06c50e397c8c27447322d7f64f2d65c06b6 (cherry picked from commit 56ae087995a5c2afe9d8c5ef6eeaf365c7c5987e)",objective,,,,,,
openstack%2Fcinder~master~Icc9bf6c8b6932f50f5c87012b8eed404b50e8157,https://review.opendev.org/417257,Refactor quota modules,Refactor quota modules  Split and encapsulate quota and quota_utils modules for better readability.  quota_driver option no longer requires full path to module. If option is set to cinder.quota.DriverName it's changed to cinder.quota.driver.DriverName during engine initialization.  Change-Id: Icc9bf6c8b6932f50f5c87012b8eed404b50e8157,quality,,,,,,
openstack%2Fcinder~master~Icc9bf6c8b6932f50f5c87012b8eed404b50e8157,https://review.opendev.org/417257,Refactor quota modules,Refactor quota modules  Split and encapsulate quota and quota_utils modules for better readability.  quota_driver option no longer requires full path to module. If option is set to cinder.quota.DriverName it's changed to cinder.quota.driver.DriverName during engine initialization.  Change-Id: Icc9bf6c8b6932f50f5c87012b8eed404b50e8157,objective,,,,,,
openstack%2Fdiskimage-builder~master~Ic2ae0acae054cc9d7a016d6aac16015733470bba,https://review.opendev.org/464315,Refactor and commented 'config_tree_to_digraph' and 'create_graph',Refactor and commented 'config_tree_to_digraph' and 'create_graph'  These methods are complex and were not commented in an appropriate way.  Change-Id: Ic2ae0acae054cc9d7a016d6aac16015733470bba Signed-off-by: Andreas Florath <andreas@florath.net>,quality,,,,,,
openstack%2Fdiskimage-builder~master~Ic2ae0acae054cc9d7a016d6aac16015733470bba,https://review.opendev.org/464315,Refactor and commented 'config_tree_to_digraph' and 'create_graph',Refactor and commented 'config_tree_to_digraph' and 'create_graph'  These methods are complex and were not commented in an appropriate way.  Change-Id: Ic2ae0acae054cc9d7a016d6aac16015733470bba Signed-off-by: Andreas Florath <andreas@florath.net>,objective,,,,,,
openstack%2Fdragonflow~master~Ic90307b9dfddf2add79149f8edd0ca55d97618ad,https://review.opendev.org/435674,refactor some fip methods for df,"refactor some fip methods for df  1. The update/delete_floatingip code looks a bit complex in df_local_controller, we could do some optimize work;  2. Change some methods to inner methods for dnat app;  3. Adjust corresponding UT code.  Change-Id: Ic90307b9dfddf2add79149f8edd0ca55d97618ad",quality,,,,,,
openstack%2Fdragonflow~master~Ic90307b9dfddf2add79149f8edd0ca55d97618ad,https://review.opendev.org/435674,refactor some fip methods for df,"refactor some fip methods for df  1. The update/delete_floatingip code looks a bit complex in df_local_controller, we could do some optimize work;  2. Change some methods to inner methods for dnat app;  3. Adjust corresponding UT code.  Change-Id: Ic90307b9dfddf2add79149f8edd0ca55d97618ad",objective,,,,,,
openstack%2Fmanila~master~Ic3271a40b780dd02b2a766f22d4101523022c3f8,https://review.opendev.org/421129,[api-ref] Refactor share migration documentation,[api-ref] Refactor share migration documentation  This patch make share migration documentation be more readable and maintainable.  Change-Id: Ic3271a40b780dd02b2a766f22d4101523022c3f8,quality,,,,,,
openstack%2Fmanila~master~Ic3271a40b780dd02b2a766f22d4101523022c3f8,https://review.opendev.org/421129,[api-ref] Refactor share migration documentation,[api-ref] Refactor share migration documentation  This patch make share migration documentation be more readable and maintainable.  Change-Id: Ic3271a40b780dd02b2a766f22d4101523022c3f8,quality,,,,,,
openstack%2Fmanila~master~I5dd3404e31a1d0a47033b9c5bb4a24eed37f5c93,https://review.opendev.org/421118,[api-ref] Refactor share metadata documentation,[api-ref] Refactor share metadata documentation  This patch make share metadata documentation be more readable and maintainable.  Change-Id: I5dd3404e31a1d0a47033b9c5bb4a24eed37f5c93,quality,,,,,,
openstack%2Fmanila~master~I5dd3404e31a1d0a47033b9c5bb4a24eed37f5c93,https://review.opendev.org/421118,[api-ref] Refactor share metadata documentation,[api-ref] Refactor share metadata documentation  This patch make share metadata documentation be more readable and maintainable.  Change-Id: I5dd3404e31a1d0a47033b9c5bb4a24eed37f5c93,quality,,,,,,
openstack%2Fneutron-fwaas~master~I03236f831d774200e63b848d9d610e7176f9f484,https://review.opendev.org/434593,Refactor netlink-conntrack,Refactor netlink-conntrack  This patch makes the netlink-conntrack driver be more readable and maintainable.  Change-Id: I03236f831d774200e63b848d9d610e7176f9f484 Co-Authored-By: Nguyen Phuong An <AnNP@vn.fujitsu.com> Partial-Bug: #1664294,quality,,,,,,
openstack%2Fdiskimage-builder~master~I0ca6a4ae3a2684d473b44e5f332ee4225ee30f8c,https://review.opendev.org/322671,Refactor: block-device handling (partitioning),"Refactor: block-device handling (partitioning)  Block device handling can be somewhat complex - especially when taking things like md, lvm or encryption into account.  This patch implements minimal and compatible partitioning handling.  Change-Id: I0ca6a4ae3a2684d473b44e5f332ee4225ee30f8c Signed-off-by: Andreas Florath <andreas@florath.net>",quality,,,,,,
openstack%2Fdiskimage-builder~master~I0ca6a4ae3a2684d473b44e5f332ee4225ee30f8c,https://review.opendev.org/322671,Refactor: block-device handling (partitioning),"Refactor: block-device handling (partitioning)  Block device handling can be somewhat complex - especially when taking things like md, lvm or encryption into account.  This patch implements minimal and compatible partitioning handling.  Change-Id: I0ca6a4ae3a2684d473b44e5f332ee4225ee30f8c Signed-off-by: Andreas Florath <andreas@florath.net>",objective,,,,,,
openstack%2Fdiskimage-builder~master~I3213baee071ae2ee7bc73a0658351afc89f80cb3,https://review.opendev.org/322397,Refactor: block-device handling (image creation),"Refactor: block-device handling (image creation)  Block device handling can be somewhat complex - especially when taking things like md, lvm or encryption into account.  This patch refactors the creation of the local loop images.  Change-Id: I3213baee071ae2ee7bc73a0658351afc89f80cb3 Signed-off-by: Andreas Florath <andreas@florath.net>",quality,,,,,,
openstack%2Fdiskimage-builder~master~I3213baee071ae2ee7bc73a0658351afc89f80cb3,https://review.opendev.org/322397,Refactor: block-device handling (image creation),"Refactor: block-device handling (image creation)  Block device handling can be somewhat complex - especially when taking things like md, lvm or encryption into account.  This patch refactors the creation of the local loop images.  Change-Id: I3213baee071ae2ee7bc73a0658351afc89f80cb3 Signed-off-by: Andreas Florath <andreas@florath.net>",objective,,,,,,
openstack%2Fswift~feature%2Fcrypto~I538c3b1cea75975df99c41dcc4094c1e764cb994,https://review.opendev.org/309466,crypto - Refactor server side copy as middleware,"crypto - Refactor server side copy as middleware  Rewrite server side copy and 'object post as copy' feature as middleware to simplify the PUT method in the object controller code. COPY is no longer a verb implemented as public method in Proxy application.  The server side copy middleware is inserted to the left of dlo, slo and versioned_writes middlewares in the proxy server pipeline. As a result, dlo and slo copy_hooks are no longer required. SLO manifests are now validated when copied so when copying a manifest to another account the referenced segments must be readable in that account for the manifest copy to succeed (previously this validation was not made, meaning the manifest was copied but could be unusable if the segments were not readable).  With this change, there should be no change in functionality or existing behavior. This is asserted with (almost) no changes required to existing functional tests.  Some notes (for operators): * Middleware required to be auto-inserted before slo and dlo and   versioned_writes * Turning off server side copy is not configurable. * object_post_as_copy is no longer a configurable option of proxy server   but of this middleware. However, for smooth upgrade, config option set   in proxy server app is also read.  DocImpact: Introducing server side copy as middleware  Change-Id: I538c3b1cea75975df99c41dcc4094c1e764cb994 Co-Authored-By: Alistair Coles <alistair.coles@hpe.com> Co-Authored-By: Thiago da Silva <thiago@redhat.com>",quality,,,,,,
openstack%2Fswift~feature%2Fcrypto~I538c3b1cea75975df99c41dcc4094c1e764cb994,https://review.opendev.org/309466,crypto - Refactor server side copy as middleware,"crypto - Refactor server side copy as middleware  Rewrite server side copy and 'object post as copy' feature as middleware to simplify the PUT method in the object controller code. COPY is no longer a verb implemented as public method in Proxy application.  The server side copy middleware is inserted to the left of dlo, slo and versioned_writes middlewares in the proxy server pipeline. As a result, dlo and slo copy_hooks are no longer required. SLO manifests are now validated when copied so when copying a manifest to another account the referenced segments must be readable in that account for the manifest copy to succeed (previously this validation was not made, meaning the manifest was copied but could be unusable if the segments were not readable).  With this change, there should be no change in functionality or existing behavior. This is asserted with (almost) no changes required to existing functional tests.  Some notes (for operators): * Middleware required to be auto-inserted before slo and dlo and   versioned_writes * Turning off server side copy is not configurable. * object_post_as_copy is no longer a configurable option of proxy server   but of this middleware. However, for smooth upgrade, config option set   in proxy server app is also read.  DocImpact: Introducing server side copy as middleware  Change-Id: I538c3b1cea75975df99c41dcc4094c1e764cb994 Co-Authored-By: Alistair Coles <alistair.coles@hpe.com> Co-Authored-By: Thiago da Silva <thiago@redhat.com>",objective,,,,,,
openstack%2Fswift~feature%2Fcrypto~I538c3b1cea75975df99c41dcc4094c1e764cb994,https://review.opendev.org/309466,crypto - Refactor server side copy as middleware,"crypto - Refactor server side copy as middleware  Rewrite server side copy and 'object post as copy' feature as middleware to simplify the PUT method in the object controller code. COPY is no longer a verb implemented as public method in Proxy application.  The server side copy middleware is inserted to the left of dlo, slo and versioned_writes middlewares in the proxy server pipeline. As a result, dlo and slo copy_hooks are no longer required. SLO manifests are now validated when copied so when copying a manifest to another account the referenced segments must be readable in that account for the manifest copy to succeed (previously this validation was not made, meaning the manifest was copied but could be unusable if the segments were not readable).  With this change, there should be no change in functionality or existing behavior. This is asserted with (almost) no changes required to existing functional tests.  Some notes (for operators): * Middleware required to be auto-inserted before slo and dlo and   versioned_writes * Turning off server side copy is not configurable. * object_post_as_copy is no longer a configurable option of proxy server   but of this middleware. However, for smooth upgrade, config option set   in proxy server app is also read.  DocImpact: Introducing server side copy as middleware  Change-Id: I538c3b1cea75975df99c41dcc4094c1e764cb994 Co-Authored-By: Alistair Coles <alistair.coles@hpe.com> Co-Authored-By: Thiago da Silva <thiago@redhat.com>",testing,,,,,,
openstack%2Fsolum~master~I8b7c12326f032c57390499f1e3fdc7bc724c4913,https://review.opendev.org/279895,Refactor trigger controller,Refactor trigger controller  The post method of trigger controller is currently a bit complex. Breaks down the code into conceptually meaningful sub-methods and thus simplifies it.  Change-Id: I8b7c12326f032c57390499f1e3fdc7bc724c4913 Closes-Bug: #1495686,quality,,,,,,
openstack%2Fsolum~master~I8b7c12326f032c57390499f1e3fdc7bc724c4913,https://review.opendev.org/279895,Refactor trigger controller,Refactor trigger controller  The post method of trigger controller is currently a bit complex. Breaks down the code into conceptually meaningful sub-methods and thus simplifies it.  Change-Id: I8b7c12326f032c57390499f1e3fdc7bc724c4913 Closes-Bug: #1495686,objective,,,,,,
openstack%2Fvitrage-tempest-plugin~master~Id65ee5b6e1c92d8ea25a2cb0e6dd41d01d924cde,https://review.opendev.org/641646,small refactoring,small refactoring  make the code cleaner and more readable  Change-Id: Id65ee5b6e1c92d8ea25a2cb0e6dd41d01d924cde,quality,,,,,,
openstack%2Fplacement~master~If815d98a92e411b8006f147cd5ccf419e90f06fc,https://review.opendev.org/639888,Refactor _get_trees_matching_all(),"Refactor _get_trees_matching_all()  _get_trees_matching_all() is used to get allocation candidates, but it is difficult to read using specific indexes like p[0]. This patch makes it more readable adding a new helper class, `RPCandidateList`, which have several explanatory functions.  This is also a preparation for adding crisp debug logs coming in a following patch.  Change-Id: If815d98a92e411b8006f147cd5ccf419e90f06fc",quality,,,,,,
openstack%2Fplacement~master~If815d98a92e411b8006f147cd5ccf419e90f06fc,https://review.opendev.org/639888,Refactor _get_trees_matching_all(),"Refactor _get_trees_matching_all()  _get_trees_matching_all() is used to get allocation candidates, but it is difficult to read using specific indexes like p[0]. This patch makes it more readable adding a new helper class, `RPCandidateList`, which have several explanatory functions.  This is also a preparation for adding crisp debug logs coming in a following patch.  Change-Id: If815d98a92e411b8006f147cd5ccf419e90f06fc",objective,,,,,,
zuul%2Fzuul~master~I8c7c03b5efa80ea884249ffdee31c7819a336bfc,https://review.opendev.org/624895,web: refactor build page using a container,web: refactor build page using a container  This change updates the build page component to use a container for build information rendering. This enable decoupling the network logic from the actual rendering.  Change-Id: I8c7c03b5efa80ea884249ffdee31c7819a336bfc,quality,,,,,,
zuul%2Fzuul~master~I8c7c03b5efa80ea884249ffdee31c7819a336bfc,https://review.opendev.org/624895,web: refactor build page using a container,web: refactor build page using a container  This change updates the build page component to use a container for build information rendering. This enable decoupling the network logic from the actual rendering.  Change-Id: I8c7c03b5efa80ea884249ffdee31c7819a336bfc,objective,,,,,,
openstack%2Fnova~master~I05c9168569c4c3eeeb83695a053b2fd94240157c,https://review.opendev.org/620327,libvirt: Refactor handling of PCIe root ports,"libvirt: Refactor handling of PCIe root ports  Add a separate method, _guest_needs_pcie(), to check for the prerequsites for adding PCIe root port entries.  And simplify the monster 'if' conditional into multiple readable ones.  While at it, add a TODO note about an assumption (which can become invalid in the future) we're making about machine types.  Change-Id: I05c9168569c4c3eeeb83695a053b2fd94240157c Suggested-by: Andrea Bolognani <abologna@redhat.com> Signed-off-by: Kashyap Chamarthy <kchamart@redhat.com>",quality,,,,,,
openstack%2Fnova~master~I05c9168569c4c3eeeb83695a053b2fd94240157c,https://review.opendev.org/620327,libvirt: Refactor handling of PCIe root ports,"libvirt: Refactor handling of PCIe root ports  Add a separate method, _guest_needs_pcie(), to check for the prerequsites for adding PCIe root port entries.  And simplify the monster 'if' conditional into multiple readable ones.  While at it, add a TODO note about an assumption (which can become invalid in the future) we're making about machine types.  Change-Id: I05c9168569c4c3eeeb83695a053b2fd94240157c Suggested-by: Andrea Bolognani <abologna@redhat.com> Signed-off-by: Kashyap Chamarthy <kchamart@redhat.com>",objective,,,,,,
openstack%2Fnova~master~I05c9168569c4c3eeeb83695a053b2fd94240157c,https://review.opendev.org/620327,libvirt: Refactor handling of PCIe root ports,"libvirt: Refactor handling of PCIe root ports  Add a separate method, _guest_needs_pcie(), to check for the prerequsites for adding PCIe root port entries.  And simplify the monster 'if' conditional into multiple readable ones.  While at it, add a TODO note about an assumption (which can become invalid in the future) we're making about machine types.  Change-Id: I05c9168569c4c3eeeb83695a053b2fd94240157c Suggested-by: Andrea Bolognani <abologna@redhat.com> Signed-off-by: Kashyap Chamarthy <kchamart@redhat.com>",objective,,,,,,
openstack%2Ftripleo-common~master~Iaf140bb473194876bcdaeac85fdddc1c0d96347d,https://review.opendev.org/611237,Refactor image uploader class structure,"Refactor image uploader class structure  - Static methods are now class methods - secure_registries and insecure_registries are now class attributes,   so don't need to be passed as arguments for class methods - The abstract class ImageUploader is gone, it wasn't adding value   since all implementations extend BaseImageUploader - The upload_image static method is now an instance method, and its   only argument is an UploadTask object - Values calculated in source_target_names are now calculated when the   UploadTask is created  The result should be more maintainable and understandable. It should now be easier to pass more values to upload_image without requiring disruptive changes.  Change-Id: Iaf140bb473194876bcdaeac85fdddc1c0d96347d",quality,,,,,,
openstack%2Ftripleo-common~master~Iaf140bb473194876bcdaeac85fdddc1c0d96347d,https://review.opendev.org/611237,Refactor image uploader class structure,"Refactor image uploader class structure  - Static methods are now class methods - secure_registries and insecure_registries are now class attributes,   so don't need to be passed as arguments for class methods - The abstract class ImageUploader is gone, it wasn't adding value   since all implementations extend BaseImageUploader - The upload_image static method is now an instance method, and its   only argument is an UploadTask object - Values calculated in source_target_names are now calculated when the   UploadTask is created  The result should be more maintainable and understandable. It should now be easier to pass more values to upload_image without requiring disruptive changes.  Change-Id: Iaf140bb473194876bcdaeac85fdddc1c0d96347d",objective,,,,,,
openstack%2Fplacement~master~Ife303d018a26ddcf8ea41d5950dc774c5e898a56,https://review.opendev.org/602667,max-complexity=>16: refactor GET /a_c qs parsing,"max-complexity=>16: refactor GET /a_c qs parsing  Before this patch, the project's max-complexity of 17 was perpetrated by RequestGroup.dict_from_request, the request querystring parsing method used for GET /allocation_candidates. This refactor-only patch splits that method into smaller chunks, the most complex of which now comes in at 8.  There is no functional change, hence no deltas to tests.  Change-Id: Ife303d018a26ddcf8ea41d5950dc774c5e898a56",quality,,,,,,
openstack%2Fplacement~master~Ife303d018a26ddcf8ea41d5950dc774c5e898a56,https://review.opendev.org/602667,max-complexity=>16: refactor GET /a_c qs parsing,"max-complexity=>16: refactor GET /a_c qs parsing  Before this patch, the project's max-complexity of 17 was perpetrated by RequestGroup.dict_from_request, the request querystring parsing method used for GET /allocation_candidates. This refactor-only patch splits that method into smaller chunks, the most complex of which now comes in at 8.  There is no functional change, hence no deltas to tests.  Change-Id: Ife303d018a26ddcf8ea41d5950dc774c5e898a56",objective,,,,,,
jjb%2Fjenkins-job-builder~master~I7e601edb2a269a2f74c6aec6ee2aa5bb50275720,https://review.opendev.org/593286,ci-skip: Refactor to improve readability,ci-skip: Refactor to improve readability  Change-Id: I7e601edb2a269a2f74c6aec6ee2aa5bb50275720 Signed-off-by: Tan Heng Yeow <E0032242@u.nus.edu>,quality,,,,,,
openstack%2Ftripleo-heat-templates~stable%2Fqueens~I2399a72709d240f84e3463c5c3b56942462d1e5c,https://review.opendev.org/576520,Upgrades: Refactor playbooks to set facts,Upgrades: Refactor playbooks to set facts  To not to redefine variable multiple times in each service we run check only once and we set fact. To increase readability of generated playbook we add block per strep in services.  Change-Id: I2399a72709d240f84e3463c5c3b56942462d1e5c (cherry picked from commit 56bec75c02b56bab79f35bc94c9110ee93eab82f),quality,,,,,,
openstack%2Ftripleo-heat-templates~stable%2Fqueens~I2399a72709d240f84e3463c5c3b56942462d1e5c,https://review.opendev.org/576520,Upgrades: Refactor playbooks to set facts,Upgrades: Refactor playbooks to set facts  To not to redefine variable multiple times in each service we run check only once and we set fact. To increase readability of generated playbook we add block per strep in services.  Change-Id: I2399a72709d240f84e3463c5c3b56942462d1e5c (cherry picked from commit 56bec75c02b56bab79f35bc94c9110ee93eab82f),objective,,,,,,
jjb%2Fjenkins-job-builder~master~I3d56a18b140e6660c91e144f5bd27db3d8fbded3,https://review.opendev.org/591242,ant: Refactor code to improve readability,ant: Refactor code to improve readability  Change-Id: I3d56a18b140e6660c91e144f5bd27db3d8fbded3,quality,,,,,,
airship%2Fcharts~master~Ia83d5fd1c91283ae189aa4c34a2603ef11e42ca0,https://review.opendev.org/774090,(refactor) Refactor Ansible for standard-container,(refactor) Refactor Ansible for standard-container  This patchset moves role tasks into 1 main.yaml file that will use a conditional variable to determine which task to play during the playbook call. Reduces the number of files and readability.  Change-Id: Ia83d5fd1c91283ae189aa4c34a2603ef11e42ca0,quality,,,,,,
airship%2Fcharts~master~Ia83d5fd1c91283ae189aa4c34a2603ef11e42ca0,https://review.opendev.org/774090,(refactor) Refactor Ansible for standard-container,(refactor) Refactor Ansible for standard-container  This patchset moves role tasks into 1 main.yaml file that will use a conditional variable to determine which task to play during the playbook call. Reduces the number of files and readability.  Change-Id: Ia83d5fd1c91283ae189aa4c34a2603ef11e42ca0,objective,,,,,,
openstack%2Fnova~master~I95eb1c8470a567408696132ae656305be53dc5bb,https://review.opendev.org/579113,Refactor policies to policy in InstanceGroup DB model,"Refactor the policies to policy  A group can only have 1 policy associated it, but now we have ONE to MANY model in group model, this patch change it to ONE to ONE Model.  We also adapt create method to new model, and raise a SaveException when we pass the policies to save method, because now we don't support to update a policy of the group.  Related to blueprint complex-anti-affinity-policies  Change-Id: I95eb1c8470a567408696132ae656305be53dc5bb",quality,,,,,,
openstack%2Fnova~master~I95eb1c8470a567408696132ae656305be53dc5bb,https://review.opendev.org/579113,Refactor policies to policy in InstanceGroup DB model,"Refactor the policies to policy  A group can only have 1 policy associated it, but now we have ONE to MANY model in group model, this patch change it to ONE to ONE Model.  We also adapt create method to new model, and raise a SaveException when we pass the policies to save method, because now we don't support to update a policy of the group.  Related to blueprint complex-anti-affinity-policies  Change-Id: I95eb1c8470a567408696132ae656305be53dc5bb",integration,,,,,,
openstack%2Fnova~master~I95eb1c8470a567408696132ae656305be53dc5bb,https://review.opendev.org/579113,Refactor policies to policy in InstanceGroup DB model,"Refactor the policies to policy  A group can only have 1 policy associated it, but now we have ONE to MANY model in group model, this patch change it to ONE to ONE Model.  We also adapt create method to new model, and raise a SaveException when we pass the policies to save method, because now we don't support to update a policy of the group.  Related to blueprint complex-anti-affinity-policies  Change-Id: I95eb1c8470a567408696132ae656305be53dc5bb",objective,,,,,,
openstack%2Ftripleo-heat-templates~master~I2399a72709d240f84e3463c5c3b56942462d1e5c,https://review.opendev.org/562294,Upgrades: Refactor playbooks to set facts,Upgrades: Refactor playbooks to set facts  To not to redefine variable multiple times in each service we run check only once and we set fact. To increase readability of generated playbook we add block per strep in services.  Change-Id: I2399a72709d240f84e3463c5c3b56942462d1e5c,quality,,,,,,
openstack%2Ftripleo-heat-templates~master~I2399a72709d240f84e3463c5c3b56942462d1e5c,https://review.opendev.org/562294,Upgrades: Refactor playbooks to set facts,Upgrades: Refactor playbooks to set facts  To not to redefine variable multiple times in each service we run check only once and we set fact. To increase readability of generated playbook we add block per strep in services.  Change-Id: I2399a72709d240f84e3463c5c3b56942462d1e5c,objective,,,,,,
airship%2Farmada~master~Ib086f103bbb1e27fe8228ccf5f0d40526796e1e5,https://review.opendev.org/570628,refactor(keystone): reduce keystoneauth usage complexity,"RFC,WIP: refactor(keystone): reduce keystoneauth usage complexity  This patch set refactors and fixes the use of the keystoneauth to load the session from cfg.CONF. This removes the unnecessary wrapping of utility function into a class, but it also removes hand selection of fields (but not other fields) to form the keystoneauth object.  Lastly, the need to read envvar should be handled only in the CLI and should be accounted for by the CLI framework, not the server utility function, as this method was only invoked once in the documentation handler and nowhere else in the code base.  Change-Id: Ib086f103bbb1e27fe8228ccf5f0d40526796e1e5 Signed-off-by: Tin Lam <tin@irrational.io>",quality,,,,,,
airship%2Farmada~master~Ib086f103bbb1e27fe8228ccf5f0d40526796e1e5,https://review.opendev.org/570628,refactor(keystone): reduce keystoneauth usage complexity,"RFC,WIP: refactor(keystone): reduce keystoneauth usage complexity  This patch set refactors and fixes the use of the keystoneauth to load the session from cfg.CONF. This removes the unnecessary wrapping of utility function into a class, but it also removes hand selection of fields (but not other fields) to form the keystoneauth object.  Lastly, the need to read envvar should be handled only in the CLI and should be accounted for by the CLI framework, not the server utility function, as this method was only invoked once in the documentation handler and nowhere else in the code base.  Change-Id: Ib086f103bbb1e27fe8228ccf5f0d40526796e1e5 Signed-off-by: Tin Lam <tin@irrational.io>",objective,,,,,,
openstack%2Fnova~master~I297f30aa6eb01fe3b53fd8c9b7853949be31156d,https://review.opendev.org/533797,Refactor WSGI apps and utils to limit imports,"WIP: Refactor WSGI apps and utils to limit imports  The file nova/api/openstack/__init__.py had imported a lot of modules, notably nova.utils. This means that any code which runs within that package, notably the placement service, imports all those modules, even if it is not going to use them. This results in scripts/binaries that are heavier than they need to be and in some cases including modules, like eventlet, that it would feel safe to not have in the stack.  Unfortunately we cannot sinply rename nova/api/openstack/__init__.py to another name because it contains FaultWrapper and FaultWrapper is referred to, by package path, from the paste.ini file and that file is out there in config land, and something we prefer not to change. Therefore alternate methods of cleaning up were explored and this has led to some useful changes:  Fault wrapper is the only consumer of walk_class_hierarchy so there is no reason for it it to be in nova.utils.  nova.wsgi contains a mismash of WSGI middleware and applications, which need only a small number of imports, and Server classes which are more complex and not required by the WSGI wares.  Therefore nova.wsgi was split into nova.wsgi and nova.api.wsgi. The name choices may not be ideal, but they were chosen to limit the cascades of changes that are needed across code and tests.  TODO: This is currently passing unit tests locally, but not pep8 and I haven't even tried the full functional suite yet. Also need to investigate what a placement service will load now. This will have had some impact, but probably not as much as desired, yet.  Change-Id: I297f30aa6eb01fe3b53fd8c9b7853949be31156d Partial-Bug: https://bugs.launchpad.net/nova/+bug/1743120",quality,,,,,,
openstack%2Fnova~master~I297f30aa6eb01fe3b53fd8c9b7853949be31156d,https://review.opendev.org/533797,Refactor WSGI apps and utils to limit imports,"WIP: Refactor WSGI apps and utils to limit imports  The file nova/api/openstack/__init__.py had imported a lot of modules, notably nova.utils. This means that any code which runs within that package, notably the placement service, imports all those modules, even if it is not going to use them. This results in scripts/binaries that are heavier than they need to be and in some cases including modules, like eventlet, that it would feel safe to not have in the stack.  Unfortunately we cannot sinply rename nova/api/openstack/__init__.py to another name because it contains FaultWrapper and FaultWrapper is referred to, by package path, from the paste.ini file and that file is out there in config land, and something we prefer not to change. Therefore alternate methods of cleaning up were explored and this has led to some useful changes:  Fault wrapper is the only consumer of walk_class_hierarchy so there is no reason for it it to be in nova.utils.  nova.wsgi contains a mismash of WSGI middleware and applications, which need only a small number of imports, and Server classes which are more complex and not required by the WSGI wares.  Therefore nova.wsgi was split into nova.wsgi and nova.api.wsgi. The name choices may not be ideal, but they were chosen to limit the cascades of changes that are needed across code and tests.  TODO: This is currently passing unit tests locally, but not pep8 and I haven't even tried the full functional suite yet. Also need to investigate what a placement service will load now. This will have had some impact, but probably not as much as desired, yet.  Change-Id: I297f30aa6eb01fe3b53fd8c9b7853949be31156d Partial-Bug: https://bugs.launchpad.net/nova/+bug/1743120",objective,,,,,,
openstack%2Fnova~master~I297f30aa6eb01fe3b53fd8c9b7853949be31156d,https://review.opendev.org/533797,Refactor WSGI apps and utils to limit imports,"WIP: Refactor WSGI apps and utils to limit imports  The file nova/api/openstack/__init__.py had imported a lot of modules, notably nova.utils. This means that any code which runs within that package, notably the placement service, imports all those modules, even if it is not going to use them. This results in scripts/binaries that are heavier than they need to be and in some cases including modules, like eventlet, that it would feel safe to not have in the stack.  Unfortunately we cannot sinply rename nova/api/openstack/__init__.py to another name because it contains FaultWrapper and FaultWrapper is referred to, by package path, from the paste.ini file and that file is out there in config land, and something we prefer not to change. Therefore alternate methods of cleaning up were explored and this has led to some useful changes:  Fault wrapper is the only consumer of walk_class_hierarchy so there is no reason for it it to be in nova.utils.  nova.wsgi contains a mismash of WSGI middleware and applications, which need only a small number of imports, and Server classes which are more complex and not required by the WSGI wares.  Therefore nova.wsgi was split into nova.wsgi and nova.api.wsgi. The name choices may not be ideal, but they were chosen to limit the cascades of changes that are needed across code and tests.  TODO: This is currently passing unit tests locally, but not pep8 and I haven't even tried the full functional suite yet. Also need to investigate what a placement service will load now. This will have had some impact, but probably not as much as desired, yet.  Change-Id: I297f30aa6eb01fe3b53fd8c9b7853949be31156d Partial-Bug: https://bugs.launchpad.net/nova/+bug/1743120",testing,,,,,,
openstack%2Fnova~master~I716b279f719eb1fe26401a776344b976eca6587a,https://review.opendev.org/516778,begin refactor AllocCandidates._get_by_filters(),"begin refactor AllocCandidates._get_by_filters()  The AllocationCandidates._get_by_filters() method is a long, complex mega-method. We want to detangle it and make the code in it understandable and readable. The first step in this refactoring involves renaming a few poorly-named variables, adding more code comments, and breaking out the SQL for the most common code path (where no providers share resources with other providers) into a separate module-level function.  Change-Id: I716b279f719eb1fe26401a776344b976eca6587a",quality,,,,,,
openstack%2Fnova~master~I716b279f719eb1fe26401a776344b976eca6587a,https://review.opendev.org/516778,begin refactor AllocCandidates._get_by_filters(),"begin refactor AllocCandidates._get_by_filters()  The AllocationCandidates._get_by_filters() method is a long, complex mega-method. We want to detangle it and make the code in it understandable and readable. The first step in this refactoring involves renaming a few poorly-named variables, adding more code comments, and breaking out the SQL for the most common code path (where no providers share resources with other providers) into a separate module-level function.  Change-Id: I716b279f719eb1fe26401a776344b976eca6587a",objective,,,,,,
openstack%2Fheat~master~Iaa4cdfceea67a17af1e17512cc28eb54dd52907d,https://review.opendev.org/516623,Refactor the format_validate_parameter fuction to reduce complexity,"Refactor the format_validate_parameter fuction to reduce complexity  Adding a if condition to format_validate_parameter function, is failing the pep validation, because of complexity is going beyond the 20 limit. Separating the constraints from the base makes it, simpler.  Change-Id: Iaa4cdfceea67a17af1e17512cc28eb54dd52907d",quality,,,,,,
openstack%2Fheat~master~Iaa4cdfceea67a17af1e17512cc28eb54dd52907d,https://review.opendev.org/516623,Refactor the format_validate_parameter fuction to reduce complexity,"Refactor the format_validate_parameter fuction to reduce complexity  Adding a if condition to format_validate_parameter function, is failing the pep validation, because of complexity is going beyond the 20 limit. Separating the constraints from the base makes it, simpler.  Change-Id: Iaa4cdfceea67a17af1e17512cc28eb54dd52907d",objective,,,,,,
openstack%2Ftripleo-heat-templates~stable%2Fpike~I33e2f296526c957cb5f96dff19682a4e60c6a0f0,https://review.opendev.org/518546,Refactor cellv2 host discovery logic to avoid races,Refactor cellv2 host discovery logic to avoid races  The compute service list is polled until all expected hosts are reported or a timeout occurs (600s).  Adds a cellv2_discovery flag to puppet services. Used to generate a list of hosts that should have cellv2 host mappings.  Adds a canonical fqdn and that should match the fqdn reported by a host.  Adds the ability to upload a config script for docker config instead of using complex bash on-liners.  Closes-bug: 1720821 Change-Id: I33e2f296526c957cb5f96dff19682a4e60c6a0f0 (cherry picked from commit 02617682aa53fc55cf21338ad85d18444c5ccc59),objective,,,,,,
openstack%2Ftripleo-heat-templates~stable%2Fpike~I33e2f296526c957cb5f96dff19682a4e60c6a0f0,https://review.opendev.org/518546,Refactor cellv2 host discovery logic to avoid races,Refactor cellv2 host discovery logic to avoid races  The compute service list is polled until all expected hosts are reported or a timeout occurs (600s).  Adds a cellv2_discovery flag to puppet services. Used to generate a list of hosts that should have cellv2 host mappings.  Adds a canonical fqdn and that should match the fqdn reported by a host.  Adds the ability to upload a config script for docker config instead of using complex bash on-liners.  Closes-bug: 1720821 Change-Id: I33e2f296526c957cb5f96dff19682a4e60c6a0f0 (cherry picked from commit 02617682aa53fc55cf21338ad85d18444c5ccc59),objective,,,,,,
openstack%2Ftripleo-heat-templates~stable%2Fpike~I33e2f296526c957cb5f96dff19682a4e60c6a0f0,https://review.opendev.org/518546,Refactor cellv2 host discovery logic to avoid races,Refactor cellv2 host discovery logic to avoid races  The compute service list is polled until all expected hosts are reported or a timeout occurs (600s).  Adds a cellv2_discovery flag to puppet services. Used to generate a list of hosts that should have cellv2 host mappings.  Adds a canonical fqdn and that should match the fqdn reported by a host.  Adds the ability to upload a config script for docker config instead of using complex bash on-liners.  Closes-bug: 1720821 Change-Id: I33e2f296526c957cb5f96dff19682a4e60c6a0f0 (cherry picked from commit 02617682aa53fc55cf21338ad85d18444c5ccc59),objective,,,,,,
openstack%2Fnova~master~I2cb9bbc8ebac43135c1b318441f3a71f996d78f0,https://review.opendev.org/349582,Refactor init_instance:resume_guests_state,"Refactor init_instance:resume_guests_state  In the init instance, the resume_guests_state part was too complex with our related patch and necessary refactor this to any new method. The related patch attached in comment  Change-Id: I2cb9bbc8ebac43135c1b318441f3a71f996d78f0",quality,,,,,,
openstack%2Fnova~master~I2cb9bbc8ebac43135c1b318441f3a71f996d78f0,https://review.opendev.org/349582,Refactor init_instance:resume_guests_state,"Refactor init_instance:resume_guests_state  In the init instance, the resume_guests_state part was too complex with our related patch and necessary refactor this to any new method. The related patch attached in comment  Change-Id: I2cb9bbc8ebac43135c1b318441f3a71f996d78f0",objective,,,,,,
openstack%2Fheat~master~Ifdb500df121e60431023c43ff0633b790c4052fe,https://review.opendev.org/505304,Refactor FloatingIP add_dependencies() method,"Refactor FloatingIP add_dependencies() method  This method is approaching the complexity limits in the pep8 gate, so refactor it to allow us to continue making changes.  Change-Id: Ifdb500df121e60431023c43ff0633b790c4052fe",quality,,,,,,
openstack%2Fheat~master~Ifdb500df121e60431023c43ff0633b790c4052fe,https://review.opendev.org/505304,Refactor FloatingIP add_dependencies() method,"Refactor FloatingIP add_dependencies() method  This method is approaching the complexity limits in the pep8 gate, so refactor it to allow us to continue making changes.  Change-Id: Ifdb500df121e60431023c43ff0633b790c4052fe",objective,,,,,,
openstack%2Fshade~master~I0b79217b89fdd636cbf8da241cd7e1af24f07371,https://review.opendev.org/502345,Refactor the create endpoint code,"Refactor the create endpoint code, easing readability  Change-Id: I0b79217b89fdd636cbf8da241cd7e1af24f07371",quality,,,,,,
openstack%2Fnova~master~I7701c15207f4d386d46d8b0121bb44e12084f09b,https://review.opendev.org/493701,"[Trivial] docstrings, typos, minor refactoring","[Trivial] docstrings, typos, minor refactoring  As I was reading code trying to understand how PCI devices are handled, I fixed some typos, added some docstrings, and did some minor refactoring for readability/maintainability.  Change-Id: I7701c15207f4d386d46d8b0121bb44e12084f09b",quality,,,,,,
openstack%2Fnova~master~I7701c15207f4d386d46d8b0121bb44e12084f09b,https://review.opendev.org/493701,"[Trivial] docstrings, typos, minor refactoring","[Trivial] docstrings, typos, minor refactoring  As I was reading code trying to understand how PCI devices are handled, I fixed some typos, added some docstrings, and did some minor refactoring for readability/maintainability.  Change-Id: I7701c15207f4d386d46d8b0121bb44e12084f09b",quality,,,,,,
openstack%2Fnova~master~I7701c15207f4d386d46d8b0121bb44e12084f09b,https://review.opendev.org/493701,"[Trivial] docstrings, typos, minor refactoring","[Trivial] docstrings, typos, minor refactoring  As I was reading code trying to understand how PCI devices are handled, I fixed some typos, added some docstrings, and did some minor refactoring for readability/maintainability.  Change-Id: I7701c15207f4d386d46d8b0121bb44e12084f09b",objective,,,,,,
x%2Fvalet~master~I4654bcb4eacd5d64f76e262fe4c29553796e3f06,https://review.opendev.org/490888,Refactor valet_plugins,"Refactor valet_plugins  Part of support nested stacks and updates story  To add nested stack support to Valet, make up for missing Heat resource Orchestration IDs in nested resources by generating a subset of Heat stack lifecycle scheduler hints for each resource in advance, store them as opaque metadata in Valet, then leverage the metadata at Nova scheduling time. Make additional accommodations in anticipation of complexities brought about by adding support for stack updates.  To add a minimally viable amount of Heat `stack-update` support to Valet, significantly restrict the number of update use cases using a set of acceptance criteria. Skip holistic placement at `stack-update` time in favor of Valet's existing re-plan mechanism, placing or replacing resources one at a time, albeit still in consideration of other resources in the same stack hierarchy.  Change-Id: I4654bcb4eacd5d64f76e262fe4c29553796e3f06 Story: #2001139",quality,,,,,,
x%2Fvalet~master~I4654bcb4eacd5d64f76e262fe4c29553796e3f06,https://review.opendev.org/490888,Refactor valet_plugins,"Refactor valet_plugins  Part of support nested stacks and updates story  To add nested stack support to Valet, make up for missing Heat resource Orchestration IDs in nested resources by generating a subset of Heat stack lifecycle scheduler hints for each resource in advance, store them as opaque metadata in Valet, then leverage the metadata at Nova scheduling time. Make additional accommodations in anticipation of complexities brought about by adding support for stack updates.  To add a minimally viable amount of Heat `stack-update` support to Valet, significantly restrict the number of update use cases using a set of acceptance criteria. Skip holistic placement at `stack-update` time in favor of Valet's existing re-plan mechanism, placing or replacing resources one at a time, albeit still in consideration of other resources in the same stack hierarchy.  Change-Id: I4654bcb4eacd5d64f76e262fe4c29553796e3f06 Story: #2001139",objective,,,,,,
x%2Fvalet~master~I4654bcb4eacd5d64f76e262fe4c29553796e3f06,https://review.opendev.org/490888,Refactor valet_plugins,"Refactor valet_plugins  Part of support nested stacks and updates story  To add nested stack support to Valet, make up for missing Heat resource Orchestration IDs in nested resources by generating a subset of Heat stack lifecycle scheduler hints for each resource in advance, store them as opaque metadata in Valet, then leverage the metadata at Nova scheduling time. Make additional accommodations in anticipation of complexities brought about by adding support for stack updates.  To add a minimally viable amount of Heat `stack-update` support to Valet, significantly restrict the number of update use cases using a set of acceptance criteria. Skip holistic placement at `stack-update` time in favor of Valet's existing re-plan mechanism, placing or replacing resources one at a time, albeit still in consideration of other resources in the same stack hierarchy.  Change-Id: I4654bcb4eacd5d64f76e262fe4c29553796e3f06 Story: #2001139",objective,,,,,,
x%2Fvalet~master~Ifed5b0f8172e522caf7e520f8131f23d4d336f4f,https://review.opendev.org/490657,Refactor Optimizer,"Refactor Optimizer and Resource Manager  Part of Support Nested Stacks and Updates story  To add nested stack support to Valet, make up for missing Heat resource Orchestration IDs in nested resources by generating a subset of Heat stack lifecycle scheduler hints for each resource in advance, store them as opaque metadata in Valet, then leverage the metadata at Nova scheduling time. Make additional accommodations in anticipation of complexities brought about by adding support for stack updates.  Change-Id: Ifed5b0f8172e522caf7e520f8131f23d4d336f4f Story: #2001139 Task: #4855",quality,,,,,,
x%2Fvalet~master~Ifed5b0f8172e522caf7e520f8131f23d4d336f4f,https://review.opendev.org/490657,Refactor Optimizer,"Refactor Optimizer and Resource Manager  Part of Support Nested Stacks and Updates story  To add nested stack support to Valet, make up for missing Heat resource Orchestration IDs in nested resources by generating a subset of Heat stack lifecycle scheduler hints for each resource in advance, store them as opaque metadata in Valet, then leverage the metadata at Nova scheduling time. Make additional accommodations in anticipation of complexities brought about by adding support for stack updates.  Change-Id: Ifed5b0f8172e522caf7e520f8131f23d4d336f4f Story: #2001139 Task: #4855",objective,,,,,,
x%2Fvalet~master~Ifed5b0f8172e522caf7e520f8131f23d4d336f4f,https://review.opendev.org/490657,Refactor Optimizer,"Refactor Optimizer and Resource Manager  Part of Support Nested Stacks and Updates story  To add nested stack support to Valet, make up for missing Heat resource Orchestration IDs in nested resources by generating a subset of Heat stack lifecycle scheduler hints for each resource in advance, store them as opaque metadata in Valet, then leverage the metadata at Nova scheduling time. Make additional accommodations in anticipation of complexities brought about by adding support for stack updates.  Change-Id: Ifed5b0f8172e522caf7e520f8131f23d4d336f4f Story: #2001139 Task: #4855",objective,,,,,,
openstack%2Fheat~master~I3a01798911e3b038f17f00ab0e6bcb5ec5954e0a,https://review.opendev.org/486819,Refactor network calculation,Refactor codes to reduce the complexity  Refactor the codes of networks calculation to reduce the complexity.  Change-Id: I3a01798911e3b038f17f00ab0e6bcb5ec5954e0a,quality,,,,,,
openstack%2Fptgbot~master~Iacbbe14e8cff9b06887b9bf76dc1f186c38ae2d2,https://review.opendev.org/478955,Refactor ethercalc-specific code out of db,"Refactor ethercalc-specific code out of db  Move ethercalc-related code out of the DB module, before we start making it a lot more complex.  Change-Id: Iacbbe14e8cff9b06887b9bf76dc1f186c38ae2d2",quality,,,,,,
openstack%2Fptgbot~master~Iacbbe14e8cff9b06887b9bf76dc1f186c38ae2d2,https://review.opendev.org/478955,Refactor ethercalc-specific code out of db,"Refactor ethercalc-specific code out of db  Move ethercalc-related code out of the DB module, before we start making it a lot more complex.  Change-Id: Iacbbe14e8cff9b06887b9bf76dc1f186c38ae2d2",integration,,,,,,
openstack%2Fptgbot~master~Iacbbe14e8cff9b06887b9bf76dc1f186c38ae2d2,https://review.opendev.org/478955,Refactor ethercalc-specific code out of db,"Refactor ethercalc-specific code out of db  Move ethercalc-related code out of the DB module, before we start making it a lot more complex.  Change-Id: Iacbbe14e8cff9b06887b9bf76dc1f186c38ae2d2",objective,,,,,,
openstack%2Fironic-ui~master~Ied1ad3f7b0d34ea42df4f94d3661d7775dc71573,https://review.opendev.org/474741,Refactor BasePortController,Refactor BasePortController  Move the LocalLinkConnection object into a separate external LocalLinkConnectionMgr class. I believe replacing the inline object with an external class makes the controller code more readable and maintainable.  Change-Id: Ied1ad3f7b0d34ea42df4f94d3661d7775dc71573,quality,,,,,,
openstack%2Fironic-ui~master~Ied1ad3f7b0d34ea42df4f94d3661d7775dc71573,https://review.opendev.org/474741,Refactor BasePortController,Refactor BasePortController  Move the LocalLinkConnection object into a separate external LocalLinkConnectionMgr class. I believe replacing the inline object with an external class makes the controller code more readable and maintainable.  Change-Id: Ied1ad3f7b0d34ea42df4f94d3661d7775dc71573,objective,,,,,,
openstack%2Fpatrole~master~I6f6a57d5014e0e2aa373c1b099a6bcc371bec165,https://review.opendev.org/473551,Refactor policy parser init so that validate service is in helper,Refactor policy parser init so that validate service is in helper  Refactor the rbac_policy_parser __init__ function so that service validation is done in its own helper to make the code more readable.  Change-Id: I6f6a57d5014e0e2aa373c1b099a6bcc371bec165,quality,,,,,,
openstack%2Fpatrole~master~I6f6a57d5014e0e2aa373c1b099a6bcc371bec165,https://review.opendev.org/473551,Refactor policy parser init so that validate service is in helper,Refactor policy parser init so that validate service is in helper  Refactor the rbac_policy_parser __init__ function so that service validation is done in its own helper to make the code more readable.  Change-Id: I6f6a57d5014e0e2aa373c1b099a6bcc371bec165,objective,,,,,,
openstack%2Fcharms.openstack~master~Ifd171b5a47b814cee6c7e53d9a6bae52833caed2,https://review.opendev.org/466361,Refactor of charm.py -> charm/*.py and tests,"Refactor of charm.py -> charm/*.py and tests  The charm.py file had got too big and complex for efficient maintenance.  This refactor tries to break down the charm.py file into logical parts (core, classes, defaults, utils) and also provide tests for those parts.  Change-Id: Ifd171b5a47b814cee6c7e53d9a6bae52833caed2",quality,,,,,,
openstack%2Fcharms.openstack~master~Ifd171b5a47b814cee6c7e53d9a6bae52833caed2,https://review.opendev.org/466361,Refactor of charm.py -> charm/*.py and tests,"Refactor of charm.py -> charm/*.py and tests  The charm.py file had got too big and complex for efficient maintenance.  This refactor tries to break down the charm.py file into logical parts (core, classes, defaults, utils) and also provide tests for those parts.  Change-Id: Ifd171b5a47b814cee6c7e53d9a6bae52833caed2",testing,,,,,,
openstack%2Fcharms.openstack~master~Ifd171b5a47b814cee6c7e53d9a6bae52833caed2,https://review.opendev.org/466361,Refactor of charm.py -> charm/*.py and tests,"Refactor of charm.py -> charm/*.py and tests  The charm.py file had got too big and complex for efficient maintenance.  This refactor tries to break down the charm.py file into logical parts (core, classes, defaults, utils) and also provide tests for those parts.  Change-Id: Ifd171b5a47b814cee6c7e53d9a6bae52833caed2",objective,,,,,,
openstack%2Fironic~master~I52c1a48829a04e5b497680ef25ed80e0af998cbd,https://review.opendev.org/463609,Refactor install-guide: update node enrollment,"Refactor install-guide: update node enrollment  * Document how to choose a driver and figure out its properties   separately from the main flow for simplicity. * Rewrite the documentation to recommend using ""enroll"" state, as it's   our feature, and it's more complex to use anyway. * Add documentation on changing hardware interfaces. * Use bash coloring for command examples. * Various small fixes.  Related-Bug: #1524745 Change-Id: I52c1a48829a04e5b497680ef25ed80e0af998cbd",objective,,,,,,
openstack%2Fironic~master~I52c1a48829a04e5b497680ef25ed80e0af998cbd,https://review.opendev.org/463609,Refactor install-guide: update node enrollment,"Refactor install-guide: update node enrollment  * Document how to choose a driver and figure out its properties   separately from the main flow for simplicity. * Rewrite the documentation to recommend using ""enroll"" state, as it's   our feature, and it's more complex to use anyway. * Add documentation on changing hardware interfaces. * Use bash coloring for command examples. * Various small fixes.  Related-Bug: #1524745 Change-Id: I52c1a48829a04e5b497680ef25ed80e0af998cbd",quality,,,,,,
openstack%2Fironic~master~I52c1a48829a04e5b497680ef25ed80e0af998cbd,https://review.opendev.org/463609,Refactor install-guide: update node enrollment,"Refactor install-guide: update node enrollment  * Document how to choose a driver and figure out its properties   separately from the main flow for simplicity. * Rewrite the documentation to recommend using ""enroll"" state, as it's   our feature, and it's more complex to use anyway. * Add documentation on changing hardware interfaces. * Use bash coloring for command examples. * Various small fixes.  Related-Bug: #1524745 Change-Id: I52c1a48829a04e5b497680ef25ed80e0af998cbd",objective,,,,,,
openstack%2Fsenlin~master~I9bf1bd62a1566b42248475fcc8cce2a86ee813a9,https://review.opendev.org/462036,Refactor VDU server profile,Refactor VDU server profile  This patch refactors the VDU server profile to kill PEP8 errors and reduce network validation complexities (it has reached 23).  Change-Id: I9bf1bd62a1566b42248475fcc8cce2a86ee813a9,quality,,,,,,
openstack%2Fsenlin~master~I9bf1bd62a1566b42248475fcc8cce2a86ee813a9,https://review.opendev.org/462036,Refactor VDU server profile,Refactor VDU server profile  This patch refactors the VDU server profile to kill PEP8 errors and reduce network validation complexities (it has reached 23).  Change-Id: I9bf1bd62a1566b42248475fcc8cce2a86ee813a9,objective,,,,,,
openstack%2Fcinder~master~I26f8427b38ee08c5da7224df6423956ee9a744d2,https://review.opendev.org/449526,[BugFix][Devref] Refactor attach/detach v2 devref,[Devref] Refactor attach/detach v2 devref  Refactor attach/detach v2 devref to make it more readable.  Change-Id: I26f8427b38ee08c5da7224df6423956ee9a744d2,quality,,,,,,
openstack%2Fopenstack-ansible~master~Ie189f1aa55970b14930058717be512e472ef1d36,https://review.opendev.org/436659,[Docs] Refactor galera ops page,[Docs] Refactor galera ops page  A few readability issues should be fixed now.  Change-Id: Ie189f1aa55970b14930058717be512e472ef1d36,quality,,,,,,
openstack%2Fcinder~master~I208d291cd2e8ad7cdc2b62165eb1ac41292b8272,https://review.opendev.org/374520,Refactor of getting qemu-img version,"Refactor of getting qemu-img version  Calling qemu-img --version will get version of qemu-img directly, this patch will make code more readable and simple.  TrivialFix  Change-Id: I208d291cd2e8ad7cdc2b62165eb1ac41292b8272",quality,,,,,,
openstack%2Fcinder~master~I208d291cd2e8ad7cdc2b62165eb1ac41292b8272,https://review.opendev.org/374520,Refactor of getting qemu-img version,"Refactor of getting qemu-img version  Calling qemu-img --version will get version of qemu-img directly, this patch will make code more readable and simple.  TrivialFix  Change-Id: I208d291cd2e8ad7cdc2b62165eb1ac41292b8272",objective,,,,,,
openstack%2Fmanila~master~I44adb4a3a4ffd3d2271ef23abfa2cead700ae77a,https://review.opendev.org/421651,[api-ref] Refactor share network documentation,[api-ref] Refactor share network documentation  This patch makes share network documentation be more readable and maintainable.  Change-Id: I44adb4a3a4ffd3d2271ef23abfa2cead700ae77a,quality,,,,,,
openstack%2Fmanila~master~I44adb4a3a4ffd3d2271ef23abfa2cead700ae77a,https://review.opendev.org/421651,[api-ref] Refactor share network documentation,[api-ref] Refactor share network documentation  This patch makes share network documentation be more readable and maintainable.  Change-Id: I44adb4a3a4ffd3d2271ef23abfa2cead700ae77a,quality,,,,,,
openstack%2Fdragonflow~master~I78380cbe3f44b3390f3f1212233d5f75281ca5fb,https://review.opendev.org/421698,Small refactor of dnat app,"Small refactor of dnat app  Since the floating IP must not be in local controller when the local port is first added, there is no need to assocaite floatingip at add_local_port.  There is aslo other changes to make code more readable.  Change-Id: I78380cbe3f44b3390f3f1212233d5f75281ca5fb",quality,,,,,,
openstack%2Fdragonflow~master~I78380cbe3f44b3390f3f1212233d5f75281ca5fb,https://review.opendev.org/421698,Small refactor of dnat app,"Small refactor of dnat app  Since the floating IP must not be in local controller when the local port is first added, there is no need to assocaite floatingip at add_local_port.  There is aslo other changes to make code more readable.  Change-Id: I78380cbe3f44b3390f3f1212233d5f75281ca5fb",objective,,,,,,
openstack%2Fdiskimage-builder~feature%2Fv2~Ib626b36a00f8a5dc3dbde8df3e2619a2438eaaf1,https://review.opendev.org/367076,Refactor: block-device handling (local loop),"Refactor: block-device handling (local loop)  Block device handling can be somewhat complex - especially when taking things like md, lvm or encryption into account.  This patch factors out the creation and deletion of the local loop image device handling into a python library.  The main propose of this patch is to implement the needed infrastructure.  Based on this, more advanced functions can be added. Example: (advanced) partitioning, LVM, handling different boot scenarios (BIOS, UEFI, ...), possibility of handling multiple images (local loop image, iSCSI, physical hard disk, ...), handling of different filesystems for different partitions / LVs.  Change-Id: Ib626b36a00f8a5dc3dbde8df3e2619a2438eaaf1 Signed-off-by: Andreas Florath <andreas@florath.net>",quality,,,,,,
openstack%2Fdiskimage-builder~feature%2Fv2~Ib626b36a00f8a5dc3dbde8df3e2619a2438eaaf1,https://review.opendev.org/367076,Refactor: block-device handling (local loop),"Refactor: block-device handling (local loop)  Block device handling can be somewhat complex - especially when taking things like md, lvm or encryption into account.  This patch factors out the creation and deletion of the local loop image device handling into a python library.  The main propose of this patch is to implement the needed infrastructure.  Based on this, more advanced functions can be added. Example: (advanced) partitioning, LVM, handling different boot scenarios (BIOS, UEFI, ...), possibility of handling multiple images (local loop image, iSCSI, physical hard disk, ...), handling of different filesystems for different partitions / LVs.  Change-Id: Ib626b36a00f8a5dc3dbde8df3e2619a2438eaaf1 Signed-off-by: Andreas Florath <andreas@florath.net>",objective,,,,,,
openstack%2Fdiskimage-builder~feature%2Fv2~Ib626b36a00f8a5dc3dbde8df3e2619a2438eaaf1,https://review.opendev.org/367076,Refactor: block-device handling (local loop),"Refactor: block-device handling (local loop)  Block device handling can be somewhat complex - especially when taking things like md, lvm or encryption into account.  This patch factors out the creation and deletion of the local loop image device handling into a python library.  The main propose of this patch is to implement the needed infrastructure.  Based on this, more advanced functions can be added. Example: (advanced) partitioning, LVM, handling different boot scenarios (BIOS, UEFI, ...), possibility of handling multiple images (local loop image, iSCSI, physical hard disk, ...), handling of different filesystems for different partitions / LVs.  Change-Id: Ib626b36a00f8a5dc3dbde8df3e2619a2438eaaf1 Signed-off-by: Andreas Florath <andreas@florath.net>",objective,,,,,,
openstack%2Fheat~master~I772a3cefc6cccf06990409d7ff8aa3db64f21e6b,https://review.opendev.org/361898,Minor encrypt/decrypt unittest refactor,"Minor encrypt/decrypt unittest refactor  Move encrypt/decrypt functions out of DBAPICryptParamsPropsTest._test_db_encrypt_decrypt(). This makes it less complex in the eyes of pep8, which will benefit a future commit.  Change-Id: I772a3cefc6cccf06990409d7ff8aa3db64f21e6b",quality,,,,,,
openstack%2Fheat~master~I772a3cefc6cccf06990409d7ff8aa3db64f21e6b,https://review.opendev.org/361898,Minor encrypt/decrypt unittest refactor,"Minor encrypt/decrypt unittest refactor  Move encrypt/decrypt functions out of DBAPICryptParamsPropsTest._test_db_encrypt_decrypt(). This makes it less complex in the eyes of pep8, which will benefit a future commit.  Change-Id: I772a3cefc6cccf06990409d7ff8aa3db64f21e6b",objective,,,,,,
openstack%2Fheat~master~I772a3cefc6cccf06990409d7ff8aa3db64f21e6b,https://review.opendev.org/361898,Minor encrypt/decrypt unittest refactor,"Minor encrypt/decrypt unittest refactor  Move encrypt/decrypt functions out of DBAPICryptParamsPropsTest._test_db_encrypt_decrypt(). This makes it less complex in the eyes of pep8, which will benefit a future commit.  Change-Id: I772a3cefc6cccf06990409d7ff8aa3db64f21e6b",testing,,,,,,
openstack%2Ffuel-nailgun-extension-iac~master~Icdaf42d70cee088422dee805958a5228c4b09dfd,https://review.opendev.org/399610,Refactored filter_changes in fuelclient_audit,Refactored filter_changes in fuelclient_audit  Improved code readability  Change-Id: Icdaf42d70cee088422dee805958a5228c4b09dfd,quality,,,,,,
openstack%2Fnova-powervm~stable%2Fnewton~I1eadc930d9a55a5fb92f7cd6ffdd37965bb187b6,https://review.opendev.org/391581,Refactor events into own class,Refactor events into own class  The eventing model needs to be updated to handle delayed events (and in future needs more logic to handle resumes on target during LPM).  There is going to be additional complexity in events.  This change set moves it out into its own class so as not to keep growing the already long driver.py file.  Change-Id: I1eadc930d9a55a5fb92f7cd6ffdd37965bb187b6 Partial-Bug: 1617746,quality,,,,,,
openstack%2Fnova-powervm~stable%2Fnewton~I1eadc930d9a55a5fb92f7cd6ffdd37965bb187b6,https://review.opendev.org/391581,Refactor events into own class,Refactor events into own class  The eventing model needs to be updated to handle delayed events (and in future needs more logic to handle resumes on target during LPM).  There is going to be additional complexity in events.  This change set moves it out into its own class so as not to keep growing the already long driver.py file.  Change-Id: I1eadc930d9a55a5fb92f7cd6ffdd37965bb187b6 Partial-Bug: 1617746,objective,,,,,,
openstack%2Fnova-powervm~stable%2Fnewton~I1eadc930d9a55a5fb92f7cd6ffdd37965bb187b6,https://review.opendev.org/391581,Refactor events into own class,Refactor events into own class  The eventing model needs to be updated to handle delayed events (and in future needs more logic to handle resumes on target during LPM).  There is going to be additional complexity in events.  This change set moves it out into its own class so as not to keep growing the already long driver.py file.  Change-Id: I1eadc930d9a55a5fb92f7cd6ffdd37965bb187b6 Partial-Bug: 1617746,objective,,,,,,
openstack%2Fnova-powervm~master~I1eadc930d9a55a5fb92f7cd6ffdd37965bb187b6,https://review.opendev.org/391048,Refactor events into own class,Refactor events into own class  The eventing model needs to be updated to handle delayed events (and in future needs more logic to handle resumes on target during LPM).  There is going to be additional complexity in events.  This change set moves it out into its own class so as not to keep growing the already long driver.py file.  Change-Id: I1eadc930d9a55a5fb92f7cd6ffdd37965bb187b6 Partially-Closes: 1617746,quality,,,,,,
openstack%2Fnova-powervm~master~I1eadc930d9a55a5fb92f7cd6ffdd37965bb187b6,https://review.opendev.org/391048,Refactor events into own class,Refactor events into own class  The eventing model needs to be updated to handle delayed events (and in future needs more logic to handle resumes on target during LPM).  There is going to be additional complexity in events.  This change set moves it out into its own class so as not to keep growing the already long driver.py file.  Change-Id: I1eadc930d9a55a5fb92f7cd6ffdd37965bb187b6 Partially-Closes: 1617746,objective,,,,,,
openstack%2Fnova-powervm~master~I1eadc930d9a55a5fb92f7cd6ffdd37965bb187b6,https://review.opendev.org/391048,Refactor events into own class,Refactor events into own class  The eventing model needs to be updated to handle delayed events (and in future needs more logic to handle resumes on target during LPM).  There is going to be additional complexity in events.  This change set moves it out into its own class so as not to keep growing the already long driver.py file.  Change-Id: I1eadc930d9a55a5fb92f7cd6ffdd37965bb187b6 Partially-Closes: 1617746,objective,,,,,,
openstack%2Fironic~master~Ia31f482c1b88c98feedd0e76414b2178ac7f1b8c,https://review.opendev.org/367142,Refactor _test_build_pxe_config_options tests,"Refactor _test_build_pxe_config_options tests  This auxiliary method to set up mocks correctly is becoming more complex than the thing it tests.  This patch splits it in two auxiliary mock setup methods, for pxe and ipxe cases respectively.  Change-Id: Ia31f482c1b88c98feedd0e76414b2178ac7f1b8c",quality,,,,,,
openstack%2Fironic~master~Ia31f482c1b88c98feedd0e76414b2178ac7f1b8c,https://review.opendev.org/367142,Refactor _test_build_pxe_config_options tests,"Refactor _test_build_pxe_config_options tests  This auxiliary method to set up mocks correctly is becoming more complex than the thing it tests.  This patch splits it in two auxiliary mock setup methods, for pxe and ipxe cases respectively.  Change-Id: Ia31f482c1b88c98feedd0e76414b2178ac7f1b8c",testing,,,,,,
openstack%2Fironic~master~Ia31f482c1b88c98feedd0e76414b2178ac7f1b8c,https://review.opendev.org/367142,Refactor _test_build_pxe_config_options tests,"Refactor _test_build_pxe_config_options tests  This auxiliary method to set up mocks correctly is becoming more complex than the thing it tests.  This patch splits it in two auxiliary mock setup methods, for pxe and ipxe cases respectively.  Change-Id: Ia31f482c1b88c98feedd0e76414b2178ac7f1b8c",objective,,,,,,
openstack%2Fnova~stable%2Fmitaka~I96e8e0682bcc642a2a5c4b7d2851812bef60d2ff,https://review.opendev.org/322681,VMware: Refactor the image transfer,VMware: Refactor the image transfer  The image transfer is unnecessary complicated and buggy. When transferring streamOptimized images we have to update the progress of the NFC lease to prevent timeouts. This patch replaces the complex usage of blocking queues and threads with a simple read+write loop. It has the same performance and the code is much cleaner. The NFC lease is updated with the loopingcall utility.  Closes-Bug: #1546454 Closes-Bug: #1278690 Related-Bug: #1495429 Change-Id: I96e8e0682bcc642a2a5c4b7d2851812bef60d2ff,quality,,,,,,
openstack%2Fnova~stable%2Fmitaka~I96e8e0682bcc642a2a5c4b7d2851812bef60d2ff,https://review.opendev.org/322681,VMware: Refactor the image transfer,VMware: Refactor the image transfer  The image transfer is unnecessary complicated and buggy. When transferring streamOptimized images we have to update the progress of the NFC lease to prevent timeouts. This patch replaces the complex usage of blocking queues and threads with a simple read+write loop. It has the same performance and the code is much cleaner. The NFC lease is updated with the loopingcall utility.  Closes-Bug: #1546454 Closes-Bug: #1278690 Related-Bug: #1495429 Change-Id: I96e8e0682bcc642a2a5c4b7d2851812bef60d2ff,objective,,,,,,
opendev%2Fglean~master~I3f61ad96875272c0007db0f5a81dc2ce1dabd863,https://review.opendev.org/320225,Refactor side-effect functions,Refactor side-effect functions  Refactor these functions to make them much more readable.  Not intended to have any functional change.  Change-Id: I3f61ad96875272c0007db0f5a81dc2ce1dabd863,quality,,,,,,
openstack%2Foslo.vmware~master~I2b04173cd23c59162056360c03d419efbce77ba1,https://review.opendev.org/336510,Refactor the image transfer,Refactor the image transfer  The image transfer is unnecessary complicated and buggy. This patch replaces the complex usage of blocking queues and threads with a simple read+write loop. It has the same performance and the code is much cleaner. The NFC lease is updated with the loopingcall utility.  Change-Id: I2b04173cd23c59162056360c03d419efbce77ba1 Closes-Bug: #1384840,quality,,,,,,
openstack%2Foslo.vmware~master~I2b04173cd23c59162056360c03d419efbce77ba1,https://review.opendev.org/336510,Refactor the image transfer,Refactor the image transfer  The image transfer is unnecessary complicated and buggy. This patch replaces the complex usage of blocking queues and threads with a simple read+write loop. It has the same performance and the code is much cleaner. The NFC lease is updated with the loopingcall utility.  Change-Id: I2b04173cd23c59162056360c03d419efbce77ba1 Closes-Bug: #1384840,objective,,,,,,
openstack%2Fironic-python-agent~master~I619153232b9b58696369185ad5be90ccfd38a4ed,https://review.opendev.org/338763,Small refactor in the root device loop matching logic,"Small refactor root device loop matching logic  When matching the root device hints passed to Ironic and the devices present in the disk, the logic to the ""size"" attribute was different was outside the main loop. This patch refactors that uses the same loop for matching the size attribute, improving a little the readability.  Change-Id: I619153232b9b58696369185ad5be90ccfd38a4ed",quality,,,,,,
openstack%2Fironic-python-agent~master~I619153232b9b58696369185ad5be90ccfd38a4ed,https://review.opendev.org/338763,Small refactor in the root device loop matching logic,"Small refactor root device loop matching logic  When matching the root device hints passed to Ironic and the devices present in the disk, the logic to the ""size"" attribute was different was outside the main loop. This patch refactors that uses the same loop for matching the size attribute, improving a little the readability.  Change-Id: I619153232b9b58696369185ad5be90ccfd38a4ed",objective,,,,,,
openstack%2Ftacker~master~Ibd0770ebb2917d910a2115e4695b724b84e029c8,https://review.opendev.org/330664,Refactor heat driver create() handler,Refactor heat driver create() handler  It helps to improve the readability and maintanence easier.  Change-Id: Ibd0770ebb2917d910a2115e4695b724b84e029c8,quality,,,,,,
openstack%2Fnetworking-ovn~master~I52969b1e0b96160a98e0ec7cbf84748c26e14cfb,https://review.opendev.org/324956,refactor sg/sgr event handing and add test coverage,refactor sg/sgr event handing and add code coverage  This patch just renames some methods and stylictic things to improve readability. It also adds code coverage.  Change-Id: I52969b1e0b96160a98e0ec7cbf84748c26e14cfb,quality,,,,,,
openstack%2Fnetworking-ovn~master~I52969b1e0b96160a98e0ec7cbf84748c26e14cfb,https://review.opendev.org/324956,refactor sg/sgr event handing and add test coverage,refactor sg/sgr event handing and add code coverage  This patch just renames some methods and stylictic things to improve readability. It also adds code coverage.  Change-Id: I52969b1e0b96160a98e0ec7cbf84748c26e14cfb,testing,,,,,,
openstack%2Fnetworking-ovn~master~I52969b1e0b96160a98e0ec7cbf84748c26e14cfb,https://review.opendev.org/324956,refactor sg/sgr event handing and add test coverage,refactor sg/sgr event handing and add code coverage  This patch just renames some methods and stylictic things to improve readability. It also adds code coverage.  Change-Id: I52969b1e0b96160a98e0ec7cbf84748c26e14cfb,objective,,,,,,
openstack%2Fheat~master~I69970e0100b22011c92a95bd35aadf7d99c9521a,https://review.opendev.org/300881,Refactor resource update function to reduce complexity,Refactor resource update funtation to reduce complexity  Change-Id: I69970e0100b22011c92a95bd35aadf7d99c9521a,quality,,,,,,
openstack%2Fcloudkitty~master~If15f5bfa7e372825f51397ca9c77b7b9415fa981,https://review.opendev.org/251179,Refactor keystone tenant fetcher,Refactor keystone tenant fetcher  Refactor keystone tenant fetcher so that make it more robust and readable.  Change-Id: If15f5bfa7e372825f51397ca9c77b7b9415fa981,quality,,,,,,
openstack%2Fsolum~master~Id13b5f3a7700c48c4997432ea6c7f58b9de701d9,https://review.opendev.org/238714,Refactor trigger controller,Refactor trigger controller  The post method of trigger controller is currently a bit complex. Breaks down the code into conceptually meaningful sub-methods and thus simplifies it.  Change-Id: Id13b5f3a7700c48c4997432ea6c7f58b9de701d9 Closes-Bug: #1495686,quality,,,,,,
openstack%2Fsolum~master~Id13b5f3a7700c48c4997432ea6c7f58b9de701d9,https://review.opendev.org/238714,Refactor trigger controller,Refactor trigger controller  The post method of trigger controller is currently a bit complex. Breaks down the code into conceptually meaningful sub-methods and thus simplifies it.  Change-Id: Id13b5f3a7700c48c4997432ea6c7f58b9de701d9 Closes-Bug: #1495686,objective,,,,,,
openstack%2Fpython-vitrageclient~master~Ie061345f1c7b5ebe61f143b190c9378c7e12ee01,https://review.opendev.org/246927,small refactoring,small refactoring  extract methods to make it more readable  Implements: blueprint vitrage-cli Change-Id: Ie061345f1c7b5ebe61f143b190c9378c7e12ee01,quality,,,,,,
openstack%2Fpython-novaclient~master~Ib0fcaacdbef65cdcb85ecc0c304f4933bef2627c,https://review.opendev.org/232301,Refactor parsing metadata to a common function,"Refactor parsing metadata to a common function  Currently the metadata is parsed using dict(v.split('=', 1) for v in metadata) and was used in several places, it could be better if we refactor it to a common function. It will make it more readable and easier to use in the future.  Change-Id: Ib0fcaacdbef65cdcb85ecc0c304f4933bef2627c Closes-Bug: #1503939",quality,,,,,,
openstack%2Fpython-novaclient~master~Ib0fcaacdbef65cdcb85ecc0c304f4933bef2627c,https://review.opendev.org/232301,Refactor parsing metadata to a common function,"Refactor parsing metadata to a common function  Currently the metadata is parsed using dict(v.split('=', 1) for v in metadata) and was used in several places, it could be better if we refactor it to a common function. It will make it more readable and easier to use in the future.  Change-Id: Ib0fcaacdbef65cdcb85ecc0c304f4933bef2627c Closes-Bug: #1503939",objective,,,,,,
openstack%2Fhorizon~master~I6353abef58fc2a481d4379eb1a2f8289d7f1790b,https://review.opendev.org/226579,Refactor status and admin state translation code,"Refactor status and admin state translation code to improve readability  In some of the dashboard 'views.py' files, there is code that enables the detail status and, when applicable, admin state labels to be translated.  The current coding style of these sections is hard to read.  Any and all sections of code that use this style should be refactored to enhance the code readability.  This change proposes one possible method of refactoring this code.  Change-Id: I6353abef58fc2a481d4379eb1a2f8289d7f1790b Closes-Bug: #1490031",quality,,,,,,
openstack%2Fhorizon~master~I6353abef58fc2a481d4379eb1a2f8289d7f1790b,https://review.opendev.org/226579,Refactor status and admin state translation code,"Refactor status and admin state translation code to improve readability  In some of the dashboard 'views.py' files, there is code that enables the detail status and, when applicable, admin state labels to be translated.  The current coding style of these sections is hard to read.  Any and all sections of code that use this style should be refactored to enhance the code readability.  This change proposes one possible method of refactoring this code.  Change-Id: I6353abef58fc2a481d4379eb1a2f8289d7f1790b Closes-Bug: #1490031",objective,,,,,,
openstack%2Frally~master~I09873d426c99f1eda505bf0c1adab2a8c9601ead,https://review.opendev.org/237574,Refactoring task detailed command,Refactoring task detailed command  The output is classified into multiple inner methods.   - _print_iterations_data   - _print_task_info   - _print_scenario_args   - _print_summrized_result   - _print_ssrs_result   - _print_hints  Related: blueprint showing-summarized-result-in-system-readable Change-Id: I09873d426c99f1eda505bf0c1adab2a8c9601ead,quality,,,,,,
openstack%2Fos-cloud-config~master~I989321575499bf61d4f08d289230d40d374d02ed,https://review.opendev.org/214128,Refactor _extract_driver_info() to reduce complexity.,Refactor _extract_driver_info() to reduce complexity.  Split _extract_driver_info() into several tiny methods to reduce complexity. Or it will be too complex while some new drivers are added later.  Change-Id: I989321575499bf61d4f08d289230d40d374d02ed,quality,,,,,,
openstack%2Fos-cloud-config~master~I989321575499bf61d4f08d289230d40d374d02ed,https://review.opendev.org/214128,Refactor _extract_driver_info() to reduce complexity.,Refactor _extract_driver_info() to reduce complexity.  Split _extract_driver_info() into several tiny methods to reduce complexity. Or it will be too complex while some new drivers are added later.  Change-Id: I989321575499bf61d4f08d289230d40d374d02ed,objective,,,,,,
openstack%2Fmagnum~master~I4fd6ba96be9dff485cdd8bde9750f2d584c1ec63,https://review.opendev.org/235899,Refactor MagnumException to reduce complexity,Refactor MagnumException to reduce complexity  Reduce cyclomatic complexity of MagnumException to below 10. Remove exception handling and optimise the logging when the kwargs does not match the message.  Change-Id: I4fd6ba96be9dff485cdd8bde9750f2d584c1ec63 Closes-Bug: #1501331,quality,,,,,,
openstack%2Fmagnum~master~I4fd6ba96be9dff485cdd8bde9750f2d584c1ec63,https://review.opendev.org/235899,Refactor MagnumException to reduce complexity,Refactor MagnumException to reduce complexity  Reduce cyclomatic complexity of MagnumException to below 10. Remove exception handling and optimise the logging when the kwargs does not match the message.  Change-Id: I4fd6ba96be9dff485cdd8bde9750f2d584c1ec63 Closes-Bug: #1501331,objective,,,,,,
openstack%2Fmagnum~master~I45d085d0943fd18a4207fc7a9ba64f2c0f8074ea,https://review.opendev.org/235898,Refactor config setup to reduce complexity,Refactor config setup to reduce complexity  The cyclomatic complexity of the setup method was greater than 10 and reducing this complexity allows for easier understanding of the method.  Change-Id: I45d085d0943fd18a4207fc7a9ba64f2c0f8074ea Partial-Bug: #1501331,quality,,,,,,
openstack%2Fmagnum~master~I45d085d0943fd18a4207fc7a9ba64f2c0f8074ea,https://review.opendev.org/235898,Refactor config setup to reduce complexity,Refactor config setup to reduce complexity  The cyclomatic complexity of the setup method was greater than 10 and reducing this complexity allows for easier understanding of the method.  Change-Id: I45d085d0943fd18a4207fc7a9ba64f2c0f8074ea Partial-Bug: #1501331,objective,,,,,,
openstack%2Fmagnum~master~If415aa7710b586b0429ed1bc5077976791b424d1,https://review.opendev.org/235897,Refactor periodic task sync_bay_status,Refactor periodic task sync_bay_status  The cyclomatic complexity of sync_bay_status was greater than 10 and very hard to comprehend. This patch reduces the complexity and makes the task more open to refactoring and maintence.  Partial-Bug: #1501331 Change-Id: If415aa7710b586b0429ed1bc5077976791b424d1,quality,,,,,,
openstack%2Fmagnum~master~If415aa7710b586b0429ed1bc5077976791b424d1,https://review.opendev.org/235897,Refactor periodic task sync_bay_status,Refactor periodic task sync_bay_status  The cyclomatic complexity of sync_bay_status was greater than 10 and very hard to comprehend. This patch reduces the complexity and makes the task more open to refactoring and maintence.  Partial-Bug: #1501331 Change-Id: If415aa7710b586b0429ed1bc5077976791b424d1,objective,,,,,,
openstack%2Fglance~master~I26ee53334ad9df5369127ca9c567274b2067dc03,https://review.opendev.org/207430,Refactoring exceptions,"Refactoring exceptions  Merge of exception, remove unused exceptions, make more humanreadable view.  Change-Id: I26ee53334ad9df5369127ca9c567274b2067dc03",quality,,,,,,
openstack%2Fglance~master~I26ee53334ad9df5369127ca9c567274b2067dc03,https://review.opendev.org/207430,Refactoring exceptions,"Refactoring exceptions  Merge of exception, remove unused exceptions, make more humanreadable view.  Change-Id: I26ee53334ad9df5369127ca9c567274b2067dc03",objective,,,,,,
openstack%2Fironic~master~If7f1a1786219fe2b4bbadc8e56e67d3ce0c98b34,https://review.opendev.org/210209,Refactor some minor issues to improve code readability,"Refactor some minor issues to improve code readability  Working on another patch, i notice some issues of code coherence, difficult readability and unnecessary code on some classes.  This change refactors some code issues like if's statements out of cohesion, unnecessary conditions, unnecessary ""continue"" statements, and extracts method of very large methods like node.NodesController.patch(), which is a little bit complex to understand.  Change-Id: If7f1a1786219fe2b4bbadc8e56e67d3ce0c98b34",quality,,,,,,
openstack%2Fironic~master~If7f1a1786219fe2b4bbadc8e56e67d3ce0c98b34,https://review.opendev.org/210209,Refactor some minor issues to improve code readability,"Refactor some minor issues to improve code readability  Working on another patch, i notice some issues of code coherence, difficult readability and unnecessary code on some classes.  This change refactors some code issues like if's statements out of cohesion, unnecessary conditions, unnecessary ""continue"" statements, and extracts method of very large methods like node.NodesController.patch(), which is a little bit complex to understand.  Change-Id: If7f1a1786219fe2b4bbadc8e56e67d3ce0c98b34",objective,,,,,,
openstack%2Fheat~master~Idec60343b2b859b466514400de9bb1ce22879d96,https://review.opendev.org/207745,refactoring update_task,solve pep8 is too complex problem  function update_task is too complex in this fix and require small refactorings.  Change-Id: Idec60343b2b859b466514400de9bb1ce22879d96 Partial-Bug: #1475057,quality,,,,,,
openstack%2Frally~master~I910876a74231b661cdaa69fa2e76bcf2fc7f8fe8,https://review.opendev.org/208390,Refactoring cinder create_volume_backup scenario,Refactoring cinder create_volume_backup scenario  It improves code readability and gets cinder volume backups scenarios standardized.  Change-Id: I910876a74231b661cdaa69fa2e76bcf2fc7f8fe8,quality,,,,,,
openstack%2Frally~master~I910876a74231b661cdaa69fa2e76bcf2fc7f8fe8,https://review.opendev.org/208390,Refactoring cinder create_volume_backup scenario,Refactoring cinder create_volume_backup scenario  It improves code readability and gets cinder volume backups scenarios standardized.  Change-Id: I910876a74231b661cdaa69fa2e76bcf2fc7f8fe8,objective,,,,,,
openstack%2Fnova~master~Icfff9886d79f788be871bf28c8b729a57dcd94d2,https://review.opendev.org/193647,XenAPI: Refactor rotate_xen_guest_logs to avoid races,XenAPI: Refactor rotate_xen_guest_logs to avoid races  Moving console logs to a temporary file is a clear race when Nova tries to access a file it might not be there.  We need to keep the readable file in place at all times.  Atomic operations like mv are fine as if the file was opened before the mv operation Linux will keep the contents available until the file is closed by Nova's plugin.  Change-Id: Icfff9886d79f788be871bf28c8b729a57dcd94d2 Fixes-bug: 1466914,quality,,,,,,
openstack%2Fnova~master~Icfff9886d79f788be871bf28c8b729a57dcd94d2,https://review.opendev.org/193647,XenAPI: Refactor rotate_xen_guest_logs to avoid races,XenAPI: Refactor rotate_xen_guest_logs to avoid races  Moving console logs to a temporary file is a clear race when Nova tries to access a file it might not be there.  We need to keep the readable file in place at all times.  Atomic operations like mv are fine as if the file was opened before the mv operation Linux will keep the contents available until the file is closed by Nova's plugin.  Change-Id: Icfff9886d79f788be871bf28c8b729a57dcd94d2 Fixes-bug: 1466914,objective,,,,,,
openstack%2Fnova~master~Icfff9886d79f788be871bf28c8b729a57dcd94d2,https://review.opendev.org/193647,XenAPI: Refactor rotate_xen_guest_logs to avoid races,XenAPI: Refactor rotate_xen_guest_logs to avoid races  Moving console logs to a temporary file is a clear race when Nova tries to access a file it might not be there.  We need to keep the readable file in place at all times.  Atomic operations like mv are fine as if the file was opened before the mv operation Linux will keep the contents available until the file is closed by Nova's plugin.  Change-Id: Icfff9886d79f788be871bf28c8b729a57dcd94d2 Fixes-bug: 1466914,integration,,,,,,
x%2Fsahara-ci-config~master~I9a03d6f84f8db2d1cb8d14f5b8741656994931b6,https://review.opendev.org/202474,dib.sh: minor switch case refactor,"dib.sh: minor switch case refactor  Check for ${os} using a switch case, so it is - more readable - easier to expand later  Change-Id: I9a03d6f84f8db2d1cb8d14f5b8741656994931b6",quality,,,,,,
x%2Fsahara-ci-config~master~I9a03d6f84f8db2d1cb8d14f5b8741656994931b6,https://review.opendev.org/202474,dib.sh: minor switch case refactor,"dib.sh: minor switch case refactor  Check for ${os} using a switch case, so it is - more readable - easier to expand later  Change-Id: I9a03d6f84f8db2d1cb8d14f5b8741656994931b6",objective,,,,,,
openstack%2Fcongress~master~I4554900da71c327a73c3aaeaa3f22b1910cbb5bb,https://review.opendev.org/199002,Do refactor for deepsix.inpubrep(),"Do refactor for deepsix.inpubrep()  Merge the duplicate code in deepsix.inpubrep(), and make the logic more readable.  Change-Id: I4554900da71c327a73c3aaeaa3f22b1910cbb5bb",quality,,,,,,
openstack%2Fcongress~master~I4554900da71c327a73c3aaeaa3f22b1910cbb5bb,https://review.opendev.org/199002,Do refactor for deepsix.inpubrep(),"Do refactor for deepsix.inpubrep()  Merge the duplicate code in deepsix.inpubrep(), and make the logic more readable.  Change-Id: I4554900da71c327a73c3aaeaa3f22b1910cbb5bb",objective,,,,,,
openstack%2Fkeystone~master~I77fea330ee64f42c80ac7010a0c4dc4b8cbdfb07,https://review.opendev.org/188131,Revocation engine refactoring,Revocation engine refactoring  Rewritten RevokeTree.is_revoked method to be more readable and use less dynamic objects. Recursion is used.  Change-Id: I77fea330ee64f42c80ac7010a0c4dc4b8cbdfb07,quality,,,,,,
openstack%2Fkeystone~master~I77fea330ee64f42c80ac7010a0c4dc4b8cbdfb07,https://review.opendev.org/188131,Revocation engine refactoring,Revocation engine refactoring  Rewritten RevokeTree.is_revoked method to be more readable and use less dynamic objects. Recursion is used.  Change-Id: I77fea330ee64f42c80ac7010a0c4dc4b8cbdfb07,objective,,,,,,
openstack%2Fsolum~master~Ib82e5547d9ab2184df3b3e3800301925d5682284,https://review.opendev.org/187789,Refactoring heat deployer's multi-port checking code,"Refactoring heat deployer's multi-port checking code  The code which checks whether all the ports of the DU are active was coupled with the code that ran the check for du_attempts number of time. This coupling was incorrect. If the du_attempts was less than the number of ports, we would have ended up not checking all the ports.  This patch fixes this situation. We decouple the checking of the ports from trying the check du_attempts times. We also maintain a list of successful_ports so that in each du_attempt we only check those ports which have not yet been successfully reachable.  Change-Id: Ib82e5547d9ab2184df3b3e3800301925d5682284",quality,,,,,,
openstack%2Fsolum~master~Ib82e5547d9ab2184df3b3e3800301925d5682284,https://review.opendev.org/187789,Refactoring heat deployer's multi-port checking code,"Refactoring heat deployer's multi-port checking code  The code which checks whether all the ports of the DU are active was coupled with the code that ran the check for du_attempts number of time. This coupling was incorrect. If the du_attempts was less than the number of ports, we would have ended up not checking all the ports.  This patch fixes this situation. We decouple the checking of the ports from trying the check du_attempts times. We also maintain a list of successful_ports so that in each du_attempt we only check those ports which have not yet been successfully reachable.  Change-Id: Ib82e5547d9ab2184df3b3e3800301925d5682284",objective,,,,,,
openstack%2Fbandit~master~I05b80867ada9026b40f2fe6cad10bbc345733b88,https://review.opendev.org/168122,Refactored/optimized reporting code,"Refactored/optimized reporting code  I went through and cleaned up all the code in result_store. The focus was on removing redundancy, cleaning things up, and making the code more readable/maintainable. I think it's in pretty good shape now.  Change-Id: I05b80867ada9026b40f2fe6cad10bbc345733b88",quality,,,,,,
openstack%2Fbandit~master~I05b80867ada9026b40f2fe6cad10bbc345733b88,https://review.opendev.org/168122,Refactored/optimized reporting code,"Refactored/optimized reporting code  I went through and cleaned up all the code in result_store. The focus was on removing redundancy, cleaning things up, and making the code more readable/maintainable. I think it's in pretty good shape now.  Change-Id: I05b80867ada9026b40f2fe6cad10bbc345733b88",objective,,,,,,
openstack%2Fbarbican~master~Idde3b144a95ff3341db80e521217cb2d9a899311,https://review.opendev.org/163564,Refactor secrets functional tests for readability,Refactor secrets functional tests for readability  Updates to secrets functional tests to make them more readable and understandable.  Updated function names to make them more meaningful.  Change-Id: Idde3b144a95ff3341db80e521217cb2d9a899311,quality,,,,,,
openstack%2Fbarbican~master~Idde3b144a95ff3341db80e521217cb2d9a899311,https://review.opendev.org/163564,Refactor secrets functional tests for readability,Refactor secrets functional tests for readability  Updates to secrets functional tests to make them more readable and understandable.  Updated function names to make them more meaningful.  Change-Id: Idde3b144a95ff3341db80e521217cb2d9a899311,testing,,,,,,
openstack%2Fbarbican~master~Idde3b144a95ff3341db80e521217cb2d9a899311,https://review.opendev.org/163564,Refactor secrets functional tests for readability,Refactor secrets functional tests for readability  Updates to secrets functional tests to make them more readable and understandable.  Updated function names to make them more meaningful.  Change-Id: Idde3b144a95ff3341db80e521217cb2d9a899311,objective,,,,,,
openstack%2Fkeystone~master~Ia07c57ef183d188acea7fc1f731b94a8792c2875,https://review.opendev.org/161855,Refactor: remove token formatters dep on 'token_data' on create(),"Refactor: don't require token formatters to understand ""token_data""  The calling module already has to understand how token_data is composed, so there's no reason for the token formatters to work with such complex data. This patch ensures that token formatters only see primitive strings (of datetimes, audit IDs, and trust IDs), which they're free to encode however they wish.  Change-Id: Ia07c57ef183d188acea7fc1f731b94a8792c2875",objective,,,,,,
openstack%2Fkeystone~master~Ia07c57ef183d188acea7fc1f731b94a8792c2875,https://review.opendev.org/161855,Refactor: remove token formatters dep on 'token_data' on create(),"Refactor: don't require token formatters to understand ""token_data""  The calling module already has to understand how token_data is composed, so there's no reason for the token formatters to work with such complex data. This patch ensures that token formatters only see primitive strings (of datetimes, audit IDs, and trust IDs), which they're free to encode however they wish.  Change-Id: Ia07c57ef183d188acea7fc1f731b94a8792c2875",objective,,,,,,
openstack%2Fcongress~master~I4f34a9ec0233512d0fde2ffcf3182c8aa5071f44,https://review.opendev.org/157611,Slight refactor of policy engine builtin functionality,Slight refactor of policy engine builtin functionality  Move some complex functionality into its own function.  Change-Id: I4f34a9ec0233512d0fde2ffcf3182c8aa5071f44,quality,,,,,,
openstack%2Fneutron~master~I3aefbcaaa96bcd86319b2fb938b7c87f05cc882b,https://review.opendev.org/151167,Refactor Pinger class,"Refactor Pinger class  This change refactors Pinger class by: * removing testcase attribute in order to reduce coupling between   testcases and Pinger instances, * defining client namespace in Pinger.__init__ instead of assert_*   methods because it's required by daughter change.  Change-Id: I3aefbcaaa96bcd86319b2fb938b7c87f05cc882b",quality,,,,,,
openstack%2Fneutron~master~I3aefbcaaa96bcd86319b2fb938b7c87f05cc882b,https://review.opendev.org/151167,Refactor Pinger class,"Refactor Pinger class  This change refactors Pinger class by: * removing testcase attribute in order to reduce coupling between   testcases and Pinger instances, * defining client namespace in Pinger.__init__ instead of assert_*   methods because it's required by daughter change.  Change-Id: I3aefbcaaa96bcd86319b2fb938b7c87f05cc882b",testing,,,,,,
openstack%2Fneutron~master~I3aefbcaaa96bcd86319b2fb938b7c87f05cc882b,https://review.opendev.org/151167,Refactor Pinger class,"Refactor Pinger class  This change refactors Pinger class by: * removing testcase attribute in order to reduce coupling between   testcases and Pinger instances, * defining client namespace in Pinger.__init__ instead of assert_*   methods because it's required by daughter change.  Change-Id: I3aefbcaaa96bcd86319b2fb938b7c87f05cc882b",objective,,,,,,
openstack%2Ftaskflow~master~I1965e157c303c2a45b9950e9f4a921c638f57fd1,https://review.opendev.org/158096,Refactor parts of the periodic worker,Refactor segments of the periodic worker  Perform some cleanups on the periodic worker type to make it easier to later change (and have parallelism if we want).  - Deprecates providing a tombstone via __init__ since that   will restrict future enhancements we can make. - Builds the immediates and the to be scheduled lists in a   single static _prepare() function to aid in   understandability (and hopefully also reduces   complexity).  Change-Id: I1965e157c303c2a45b9950e9f4a921c638f57fd1,quality,,,,,,
openstack%2Ftaskflow~master~I1965e157c303c2a45b9950e9f4a921c638f57fd1,https://review.opendev.org/158096,Refactor parts of the periodic worker,Refactor segments of the periodic worker  Perform some cleanups on the periodic worker type to make it easier to later change (and have parallelism if we want).  - Deprecates providing a tombstone via __init__ since that   will restrict future enhancements we can make. - Builds the immediates and the to be scheduled lists in a   single static _prepare() function to aid in   understandability (and hopefully also reduces   complexity).  Change-Id: I1965e157c303c2a45b9950e9f4a921c638f57fd1,objective,,,,,,
openstack%2Fanchor~master~I25a5ac67d5128c60a7f6a6e1047c02c5ac581ee2,https://review.opendev.org/156869,Refactor controller code to use RestController,Refactor controller code to use RestController  - code becomes more readable - no longer need to manually check for http method type  Change-Id: I25a5ac67d5128c60a7f6a6e1047c02c5ac581ee2,quality,,,,,,
openstack%2Fanchor~master~I25a5ac67d5128c60a7f6a6e1047c02c5ac581ee2,https://review.opendev.org/156869,Refactor controller code to use RestController,Refactor controller code to use RestController  - code becomes more readable - no longer need to manually check for http method type  Change-Id: I25a5ac67d5128c60a7f6a6e1047c02c5ac581ee2,objective,,,,,,
openstack%2Fbarbican~master~I727b61fdca4bcedb06caba7283b8933fc6d9e0d8,https://review.opendev.org/151670,Trivial refactors to secret controller,Trivial refactors to secret controller  Did some trivial refactors to secret controller to improve readability.  Change-Id: I727b61fdca4bcedb06caba7283b8933fc6d9e0d8,quality,,,,,,
openstack%2Fbarbican~master~I6d6d3f942276bc45729cbf7cfa0d17635e1dc93d,https://review.opendev.org/148900,Refactor order validation,"Refactor order validation  The 'meta' parameter for order validation was being handled manually instead of in the JSON schema; So this was fixed. On the other hand, there was a rudimentary validation for both the type and the meta parameters in the Order's PUT controller; this was removed, as it created unnecessary complexity.  Change-Id: I6d6d3f942276bc45729cbf7cfa0d17635e1dc93d",quality,,,,,,
openstack%2Fbarbican~master~I6d6d3f942276bc45729cbf7cfa0d17635e1dc93d,https://review.opendev.org/148900,Refactor order validation,"Refactor order validation  The 'meta' parameter for order validation was being handled manually instead of in the JSON schema; So this was fixed. On the other hand, there was a rudimentary validation for both the type and the meta parameters in the Order's PUT controller; this was removed, as it created unnecessary complexity.  Change-Id: I6d6d3f942276bc45729cbf7cfa0d17635e1dc93d",objective,,,,,,
openstack%2Frally~master~If96487eb6372de3245ac30fc00427f1081c7b0b8,https://review.opendev.org/148877,Refactoring benchmark/validation.py,Refactoring benchmark/validation.py  ValidationResult() returns True as default. This patch removes mostly of the return ValidationResult() from the code and change ValidationResult to ValidationResult(True) so the code became more readable.  Change-Id: If96487eb6372de3245ac30fc00427f1081c7b0b8,quality,,,,,,
openstack%2Frally~master~If96487eb6372de3245ac30fc00427f1081c7b0b8,https://review.opendev.org/148877,Refactoring benchmark/validation.py,Refactoring benchmark/validation.py  ValidationResult() returns True as default. This patch removes mostly of the return ValidationResult() from the code and change ValidationResult to ValidationResult(True) so the code became more readable.  Change-Id: If96487eb6372de3245ac30fc00427f1081c7b0b8,objective,,,,,,
openstack%2Frally~master~I2f1c4b7fe3ce9372b6d422c1d3c00e8128f59865,https://review.opendev.org/144723,Refactoring structure of rally/verification,Refactoring structure of rally/verification  Removing the verifiers directory to make the code more readable and reduce unnecessary complexity  Change-Id: I2f1c4b7fe3ce9372b6d422c1d3c00e8128f59865,quality,,,,,,
openstack%2Ftempest~master~Iabdbd7cb50beb869409289918aa15005ebfe6e9b,https://review.opendev.org/141176,Refactor custom matchers,Refactor custom matchers  This reduces the complexity by grouping checks  Change-Id: Iabdbd7cb50beb869409289918aa15005ebfe6e9b,quality,,,,,,
openstack%2Fec2-api~master~Ief2021fb041907a83a43765165fba29574ad2bd7,https://review.opendev.org/143422,Refactor describe methods to use Describer class,Refactor describe methods to use Describer class  Except instances due their complexity  Change-Id: Ief2021fb041907a83a43765165fba29574ad2bd7,quality,,,,,,
openstack%2Fec2-api~master~Ief2021fb041907a83a43765165fba29574ad2bd7,https://review.opendev.org/143422,Refactor describe methods to use Describer class,Refactor describe methods to use Describer class  Except instances due their complexity  Change-Id: Ief2021fb041907a83a43765165fba29574ad2bd7,objective,,,,,,
openstack%2Fneutron~master~Id35a5f10cd7d2dda565bffb14fc6a2fbd7eef3ea,https://review.opendev.org/140193,Refactor process_router method in L3 agent,Refactor process_router method in L3 agent  Refactors the process_router method of the L3NATAgent class to several methods that coherently group functionallity. The aim is to make the code more readable and maintainable. There is no functional change in this patch.  Partially-Implements: bp restructure-l3-agent  Change-Id: Id35a5f10cd7d2dda565bffb14fc6a2fbd7eef3ea,quality,,,,,,
openstack%2Fneutron~master~Id35a5f10cd7d2dda565bffb14fc6a2fbd7eef3ea,https://review.opendev.org/140193,Refactor process_router method in L3 agent,Refactor process_router method in L3 agent  Refactors the process_router method of the L3NATAgent class to several methods that coherently group functionallity. The aim is to make the code more readable and maintainable. There is no functional change in this patch.  Partially-Implements: bp restructure-l3-agent  Change-Id: Id35a5f10cd7d2dda565bffb14fc6a2fbd7eef3ea,objective,,,,,,
openstack%2Fironic-inspector~master~I6e4de72ee6a3ecc825fe959b289d7e7e83e01bb9,https://review.opendev.org/140136,Refactoring: cap complexity at 15 and coverage at 90,Refactoring: cap complexity at 15 and coverage at 90  Change-Id: I6e4de72ee6a3ecc825fe959b289d7e7e83e01bb9,quality,,,,,,
openstack%2Fneutron~master~I7f8c93b0e12ee0179bb23dfbb3a3d814615b1c2e,https://review.opendev.org/112178,Refactor l2_pop code to pass mac/ip info more readably,Refactor l2_pop code to pass mac/ip/device_owner info more readably  Change-Id: I7f8c93b0e12ee0179bb23dfbb3a3d814615b1c2e Closes-Bug: #1352801,quality,,,,,,
openstack%2Fneutron~master~I0d4e508cda2537abe431f04a278ba2e1d2f5d97d,https://review.opendev.org/119394,Cleanup and refactor methods in unit/test_security_groups_rpc,"Cleanup and refactor methods in unit/test_security_groups_rpc  We had strings repeating all along the code which already were in constant form, those have been refactored. Also global configuration changes are now handled by functions to enhance code readability.  Change-Id: I0d4e508cda2537abe431f04a278ba2e1d2f5d97d",quality,,,,,,
openstack%2Fneutron~master~I0d4e508cda2537abe431f04a278ba2e1d2f5d97d,https://review.opendev.org/119394,Cleanup and refactor methods in unit/test_security_groups_rpc,"Cleanup and refactor methods in unit/test_security_groups_rpc  We had strings repeating all along the code which already were in constant form, those have been refactored. Also global configuration changes are now handled by functions to enhance code readability.  Change-Id: I0d4e508cda2537abe431f04a278ba2e1d2f5d97d",objective,,,,,,
openstack%2Frally~master~I70557e6ebb56bbe565792d9ee854d3e78428a881,https://review.opendev.org/129060,Refactor generic cleanup mechanism part 3,"WIP Improve rally generic cleanup mechanism  Current cleanup mechanism is awful. It's hardcoed, without repeat on failures, contains a lot of mistakes, in some places it is too fast (in case of deletion of VMs) in other to slow (like deletion of users). As well there is mix of cleanup mechanism and resource cleanup mechanism.  To resolve these all issues this patch introcude a cleanup engine that resolves all issues above.  It's resource based, so to add new resouce you should just a make subclass of base.Resource and probably override some of methods like (list, delete, is_deleted) and that's all.  All complexity of managing: 0) waiting unit async deletion is finished 1) repeat on failure logic 2) greaceful failure handling 3) parallelization 4) plugin support Is hidden deep inside cleanup engine  + bonus we are able to specify now single resource (without clenaping whole service)  bp benchmark-context-cleanup-refactor  Change-Id: I70557e6ebb56bbe565792d9ee854d3e78428a881",quality,,,,,,
openstack%2Frally~master~I70557e6ebb56bbe565792d9ee854d3e78428a881,https://review.opendev.org/129060,Refactor generic cleanup mechanism part 3,"WIP Improve rally generic cleanup mechanism  Current cleanup mechanism is awful. It's hardcoed, without repeat on failures, contains a lot of mistakes, in some places it is too fast (in case of deletion of VMs) in other to slow (like deletion of users). As well there is mix of cleanup mechanism and resource cleanup mechanism.  To resolve these all issues this patch introcude a cleanup engine that resolves all issues above.  It's resource based, so to add new resouce you should just a make subclass of base.Resource and probably override some of methods like (list, delete, is_deleted) and that's all.  All complexity of managing: 0) waiting unit async deletion is finished 1) repeat on failure logic 2) greaceful failure handling 3) parallelization 4) plugin support Is hidden deep inside cleanup engine  + bonus we are able to specify now single resource (without clenaping whole service)  bp benchmark-context-cleanup-refactor  Change-Id: I70557e6ebb56bbe565792d9ee854d3e78428a881",objective,,,,,,
openstack%2Frally~master~I85ab881fd65da4bb8263b4f72b9f751673ae5099,https://review.opendev.org/132437,Refactor generic cleanup mechanism part 2,"Refactor generic cleanup mechanism part 2  Current cleanup mechanism is awful. It's hardcoed, without repeat on failures, contains a lot of mistakes, in some places it is too fast (in case of deletion of VMs) in other to slow (like deletion of users). As well there is mix of cleanup mechanism and resource cleanup mechanism. To resolve these all issues this patch introcude a cleanup engine that resolves all issues above. It's resource based, so to add new resouce you should just a make subclass of base.Resource and probably override some of methods like (list, delete, is_deleted) and that's all. All complexity of managing: 0) waiting unit async deletion is finished 1) repeat on failure logic 2) greaceful failure handling 3) parallelization 4) plugin support Is hidden deep inside cleanup engine + bonus we are able to specify now single resource (without clenaping whole service)  PART 2: -------  * Write cleanup plugins for all tracked resources (on currnet moment) * Switch cleanap context to use cleanup engine isntead of ald cleanup.utils * Merge admin and user cleanup context (cause they are quite short now) * Change quotas scenairos cleanup context configuration * Fix resource names that are created by ceilometer scenarios  bp benchmark-context-cleanup-refactor  Change-Id: I85ab881fd65da4bb8263b4f72b9f751673ae5099",quality,,,,,,
openstack%2Frally~master~I85ab881fd65da4bb8263b4f72b9f751673ae5099,https://review.opendev.org/132437,Refactor generic cleanup mechanism part 2,"Refactor generic cleanup mechanism part 2  Current cleanup mechanism is awful. It's hardcoed, without repeat on failures, contains a lot of mistakes, in some places it is too fast (in case of deletion of VMs) in other to slow (like deletion of users). As well there is mix of cleanup mechanism and resource cleanup mechanism. To resolve these all issues this patch introcude a cleanup engine that resolves all issues above. It's resource based, so to add new resouce you should just a make subclass of base.Resource and probably override some of methods like (list, delete, is_deleted) and that's all. All complexity of managing: 0) waiting unit async deletion is finished 1) repeat on failure logic 2) greaceful failure handling 3) parallelization 4) plugin support Is hidden deep inside cleanup engine + bonus we are able to specify now single resource (without clenaping whole service)  PART 2: -------  * Write cleanup plugins for all tracked resources (on currnet moment) * Switch cleanap context to use cleanup engine isntead of ald cleanup.utils * Merge admin and user cleanup context (cause they are quite short now) * Change quotas scenairos cleanup context configuration * Fix resource names that are created by ceilometer scenarios  bp benchmark-context-cleanup-refactor  Change-Id: I85ab881fd65da4bb8263b4f72b9f751673ae5099",objective,,,,,,
openstack%2Ftripleo-heat-templates~master~Ie566b8b14cbd98fe29cc2368a96d45cc74ca4715,https://review.opendev.org/122384,Refactor Heat dependencies for nova compute,Refactor Heat dependencies for nova compute  Allows heat to have more control of the parallelism of the deploy and allow easy integration of the new heat dependencies required for nova compute integration as this at present is difficult understand and has unnecessary complex dependencies.  Change-Id: Ie566b8b14cbd98fe29cc2368a96d45cc74ca4715 Co-Author: Nicholas Randon,quality,,,,,,
openstack%2Ftripleo-heat-templates~master~Ie566b8b14cbd98fe29cc2368a96d45cc74ca4715,https://review.opendev.org/122384,Refactor Heat dependencies for nova compute,Refactor Heat dependencies for nova compute  Allows heat to have more control of the parallelism of the deploy and allow easy integration of the new heat dependencies required for nova compute integration as this at present is difficult understand and has unnecessary complex dependencies.  Change-Id: Ie566b8b14cbd98fe29cc2368a96d45cc74ca4715 Co-Author: Nicholas Randon,objective,,,,,,
openstack%2Fkeystone~master~I98ded2632a6130e2b664e987f08499162801be6b,https://review.opendev.org/111130,Refactor existing endpoint filter tests,Refactor existing endpoint filter tests  Refactored the existing suite of endpoint filter tests including renaming method names to aid readability and added additional comments.  Change-Id: I98ded2632a6130e2b664e987f08499162801be6b,quality,,,,,,
openstack%2Fkeystone~master~I98ded2632a6130e2b664e987f08499162801be6b,https://review.opendev.org/111130,Refactor existing endpoint filter tests,Refactor existing endpoint filter tests  Refactored the existing suite of endpoint filter tests including renaming method names to aid readability and added additional comments.  Change-Id: I98ded2632a6130e2b664e987f08499162801be6b,objective,,,,,,
openstack%2Fkeystone~master~I921a05b0164bc6afa329e98c26faf4cf4f336f2f,https://review.opendev.org/107680,Refactor set domain-id and mapping code,Refactor set domain-id and mapping code  Applied function separation refactorings to the _set_domain_id_and_mapping function in the identity/core module in an attempt to make it more readable.  Change-Id: I921a05b0164bc6afa329e98c26faf4cf4f336f2f,quality,,,,,,
openstack%2Fkeystone~master~I921a05b0164bc6afa329e98c26faf4cf4f336f2f,https://review.opendev.org/107680,Refactor set domain-id and mapping code,Refactor set domain-id and mapping code  Applied function separation refactorings to the _set_domain_id_and_mapping function in the identity/core module in an attempt to make it more readable.  Change-Id: I921a05b0164bc6afa329e98c26faf4cf4f336f2f,objective,,,,,,
openstack%2Fbarbican~master~I1bf35adebc95aadfc4be03400ddd848625569e01,https://review.opendev.org/102158,Refactor secret validation for redability,Refactor secret validation for redability  Mostly applied method extraction to the secret schema validation function in order to have it more readable.  Change-Id: I1bf35adebc95aadfc4be03400ddd848625569e01,quality,,,,,,
openstack%2Fbarbican~master~I1bf35adebc95aadfc4be03400ddd848625569e01,https://review.opendev.org/102158,Refactor secret validation for redability,Refactor secret validation for redability  Mostly applied method extraction to the secret schema validation function in order to have it more readable.  Change-Id: I1bf35adebc95aadfc4be03400ddd848625569e01,objective,,,,,,
openstack%2Fbarbican~master~I2e57cb38a4e1bca21af6272a2f4d72b7ef032845,https://review.opendev.org/100505,Refactor allow_all_content_types for readability,"Refactor allow_all_content_types for readability  The current implementation of the decorator allow_all_content_types was slightly confusing, since while iterating through the mimetypes it would call setdefault each time for the same object. So I separated that call from the iteration that sets the default values to make it clear. Also, the iteration was turned into a generator for a more pythonic approach and performance.  Change-Id: I2e57cb38a4e1bca21af6272a2f4d72b7ef032845",quality,,,,,,
openstack%2Fbarbican~master~I2e57cb38a4e1bca21af6272a2f4d72b7ef032845,https://review.opendev.org/100505,Refactor allow_all_content_types for readability,"Refactor allow_all_content_types for readability  The current implementation of the decorator allow_all_content_types was slightly confusing, since while iterating through the mimetypes it would call setdefault each time for the same object. So I separated that call from the iteration that sets the default values to make it clear. Also, the iteration was turned into a generator for a more pythonic approach and performance.  Change-Id: I2e57cb38a4e1bca21af6272a2f4d72b7ef032845",objective,,,,,,
zuul%2Fzuul-operator~master~Iaf4829daf5f89f22b200d089ef8fd4eeee3e91bf,https://review.opendev.org/718158,test: refactor run tasks to include file,test: refactor run tasks to include file  This change move tasks to dedicated files to improve the readability of the run playbooks.  Change-Id: Iaf4829daf5f89f22b200d089ef8fd4eeee3e91bf,quality,,,,,,
zuul%2Fzuul-operator~master~Iaf4829daf5f89f22b200d089ef8fd4eeee3e91bf,https://review.opendev.org/718158,test: refactor run tasks to include file,test: refactor run tasks to include file  This change move tasks to dedicated files to improve the readability of the run playbooks.  Change-Id: Iaf4829daf5f89f22b200d089ef8fd4eeee3e91bf,objective,,,,,,
opendev%2Fyaml2ical~master~I7771c7ea8cc6e85121abad6b95c78d6cabb00dcd,https://review.opendev.org/96951,Refactor/cleanup jobs.py module,"Refactor/cleanup jobs.py module  Since this is the main entry point for now, we should make it more obvious and clean it up. This includes getting rid of relative imports, cleaning up imported classes, and pulling some of the boiler plate code into more readable methods.  Change-Id: I7771c7ea8cc6e85121abad6b95c78d6cabb00dcd",quality,,,,,,
opendev%2Fyaml2ical~master~I7771c7ea8cc6e85121abad6b95c78d6cabb00dcd,https://review.opendev.org/96951,Refactor/cleanup jobs.py module,"Refactor/cleanup jobs.py module  Since this is the main entry point for now, we should make it more obvious and clean it up. This includes getting rid of relative imports, cleaning up imported classes, and pulling some of the boiler plate code into more readable methods.  Change-Id: I7771c7ea8cc6e85121abad6b95c78d6cabb00dcd",objective,,,,,,
openstack%2Fmurano~master~If71da70fa835a1ee7a271ebf7238c0a4c64d4123,https://review.opendev.org/93900,Refactor api.catalog.search() method to provide 'next_marker' value,"Refactor api.catalog.search() method to provide 'next_marker' value  That way it works like Glance (see http://tinyurl.com/jwqtj23) and allows for complex query pagination (to cycle through pages filtered by some criteria, muranoclient uses 'next_marker' pointer).  Implements: blueprint app-catalog-pagination Change-Id: If71da70fa835a1ee7a271ebf7238c0a4c64d4123",integration,,,,,,
openstack%2Fmurano~master~If71da70fa835a1ee7a271ebf7238c0a4c64d4123,https://review.opendev.org/93900,Refactor api.catalog.search() method to provide 'next_marker' value,"Refactor api.catalog.search() method to provide 'next_marker' value  That way it works like Glance (see http://tinyurl.com/jwqtj23) and allows for complex query pagination (to cycle through pages filtered by some criteria, muranoclient uses 'next_marker' pointer).  Implements: blueprint app-catalog-pagination Change-Id: If71da70fa835a1ee7a271ebf7238c0a4c64d4123",objective,,,,,,
openstack%2Fnova~master~Ic50dba5588bb968eca3ac2bf94c3eb719fa2cf6b,https://review.opendev.org/93210,xenapi: refactor volumeops attach,"xenapi: refactor volumeops attach  Refactor the attach code, so its more readable.  At the same time, only check if the VM is running when a hotplug is requested.  Change-Id: Ic50dba5588bb968eca3ac2bf94c3eb719fa2cf6b",quality,,,,,,
openstack%2Fnova~master~Ic50dba5588bb968eca3ac2bf94c3eb719fa2cf6b,https://review.opendev.org/93210,xenapi: refactor volumeops attach,"xenapi: refactor volumeops attach  Refactor the attach code, so its more readable.  At the same time, only check if the VM is running when a hotplug is requested.  Change-Id: Ic50dba5588bb968eca3ac2bf94c3eb719fa2cf6b",objective,,,,,,
openstack%2Fkeystone~master~I6f988a34e17e821b4a8544bec516845665ba2674,https://review.opendev.org/90943,Refactor create_trust for readability,"Refactor create_trust for readability  I refactored the create_trust function in the keystone.trust.controllers module in order to make it more readable. In addition, the function will now check for all the required attributes in the request and return an appropriate error message if any of them is missing or is empty.  Change-Id: I6f988a34e17e821b4a8544bec516845665ba2674",quality,,,,,,
openstack%2Fkeystone~master~I6f988a34e17e821b4a8544bec516845665ba2674,https://review.opendev.org/90943,Refactor create_trust for readability,"Refactor create_trust for readability  I refactored the create_trust function in the keystone.trust.controllers module in order to make it more readable. In addition, the function will now check for all the required attributes in the request and return an appropriate error message if any of them is missing or is empty.  Change-Id: I6f988a34e17e821b4a8544bec516845665ba2674",objective,,,,,,
openstack%2Ffuel-web~master~Id4578327f7f50c2862b4fc7776ed8b60552dde6b,https://review.opendev.org/76875,Refactor fuel-web's run_tests.sh,Refactor fuel-web's run_tests.sh  Purpose: get rid of unclear logic. It includes the following improvements:  * run tests from one place * increase code readability * function decomposition  Change-Id: Id4578327f7f50c2862b4fc7776ed8b60552dde6b Closes-Bug: #1282116,quality,,,,,,
openstack%2Ffuel-web~master~Id4578327f7f50c2862b4fc7776ed8b60552dde6b,https://review.opendev.org/76875,Refactor fuel-web's run_tests.sh,Refactor fuel-web's run_tests.sh  Purpose: get rid of unclear logic. It includes the following improvements:  * run tests from one place * increase code readability * function decomposition  Change-Id: Id4578327f7f50c2862b4fc7776ed8b60552dde6b Closes-Bug: #1282116,objective,,,,,,
openstack%2Fcookbook-openstack-image~master~I9521cfb49e38d6b59a00ed833ffbd8129e3ac1f6,https://review.opendev.org/67682,Refactor specs,"Refactor specs  Refactor the spec files to use the newer RSpec let, shared_context, and shared_example syntax to remove redundancy and improve readability.  Change-Id: I9521cfb49e38d6b59a00ed833ffbd8129e3ac1f6",quality,,,,,,
openstack%2Fcookbook-openstack-image~master~I9521cfb49e38d6b59a00ed833ffbd8129e3ac1f6,https://review.opendev.org/67682,Refactor specs,"Refactor specs  Refactor the spec files to use the newer RSpec let, shared_context, and shared_example syntax to remove redundancy and improve readability.  Change-Id: I9521cfb49e38d6b59a00ed833ffbd8129e3ac1f6",objective,,,,,,
opendev%2Felastic-recheck~master~I077d54ce885ba3bbcc0ceca4f05959f508a88e96,https://review.opendev.org/61433,refactor graphite stanzas for readability,"refactor graphite stanzas for readability  this refactors the graphite stanzas to something that's more readable, and makes it simpler to add new ones later without lots of copy / paste.  Change-Id: I077d54ce885ba3bbcc0ceca4f05959f508a88e96",quality,,,,,,
opendev%2Felastic-recheck~master~I077d54ce885ba3bbcc0ceca4f05959f508a88e96,https://review.opendev.org/61433,refactor graphite stanzas for readability,"refactor graphite stanzas for readability  this refactors the graphite stanzas to something that's more readable, and makes it simpler to add new ones later without lots of copy / paste.  Change-Id: I077d54ce885ba3bbcc0ceca4f05959f508a88e96",objective,,,,,,
x%2Fopencafe~master~Iaa4dee234b223526310b1ec1123492e8f5e296e3,https://review.opendev.org/57781,Coding standards and style refactor of runner,Coding standards and style refactor of runner  * Reordered imports * Replaced all instances of the use of % style string formatting   with python 2.6 compatible .format() string formatting. * Removed the use of  newline escapes on line breaks and stacked   paramaters where they did not increase readability. * Removed redundant try-excepts. * Refactored tag and attr checking methods to remove the use of   eval()  Change-Id: Iaa4dee234b223526310b1ec1123492e8f5e296e3,quality,,,,,,
x%2Fopencafe~master~Iaa4dee234b223526310b1ec1123492e8f5e296e3,https://review.opendev.org/57781,Coding standards and style refactor of runner,Coding standards and style refactor of runner  * Reordered imports * Replaced all instances of the use of % style string formatting   with python 2.6 compatible .format() string formatting. * Removed the use of  newline escapes on line breaks and stacked   paramaters where they did not increase readability. * Removed redundant try-excepts. * Refactored tag and attr checking methods to remove the use of   eval()  Change-Id: Iaa4dee234b223526310b1ec1123492e8f5e296e3,objective,,,,,,
opendev%2Fjeepyb~master~I288a03f631faa1b4596e3fd5d5e1613ff2525b6e,https://review.opendev.org/59084,Refactor manage-projects for readability,Refactor manage-projects for readability  This changes absolutely no functionality - it's merely extracting parts of the really long function into subfunctions. It should make further refactoring of sequencing and error conditions easier to reason about.  Change-Id: I288a03f631faa1b4596e3fd5d5e1613ff2525b6e,quality,,,,,,
opendev%2Fjeepyb~master~I288a03f631faa1b4596e3fd5d5e1613ff2525b6e,https://review.opendev.org/59084,Refactor manage-projects for readability,Refactor manage-projects for readability  This changes absolutely no functionality - it's merely extracting parts of the really long function into subfunctions. It should make further refactoring of sequencing and error conditions easier to reason about.  Change-Id: I288a03f631faa1b4596e3fd5d5e1613ff2525b6e,objective,,,,,,
openstack%2Fos-loganalyze~master~I6f41c3c86b9719cdee9adb9b335e8b3104ebe790,https://review.opendev.org/51453,refactor tests to move common generators into base,refactor tests to move common generators into base  the complexity of getting the generators setup after the first couple of sanity checks meant it really made sense to refactor into a common base class.  Change-Id: I6f41c3c86b9719cdee9adb9b335e8b3104ebe790,quality,,,,,,
openstack%2Fos-loganalyze~master~I6f41c3c86b9719cdee9adb9b335e8b3104ebe790,https://review.opendev.org/51453,refactor tests to move common generators into base,refactor tests to move common generators into base  the complexity of getting the generators setup after the first couple of sanity checks meant it really made sense to refactor into a common base class.  Change-Id: I6f41c3c86b9719cdee9adb9b335e8b3104ebe790,testing,,,,,,
openstack%2Fos-loganalyze~master~I6f41c3c86b9719cdee9adb9b335e8b3104ebe790,https://review.opendev.org/51453,refactor tests to move common generators into base,refactor tests to move common generators into base  the complexity of getting the generators setup after the first couple of sanity checks meant it really made sense to refactor into a common base class.  Change-Id: I6f41c3c86b9719cdee9adb9b335e8b3104ebe790,objective,,,,,,
openstack%2Fneutron~master~I396ee7bbcbd866e4e9d4a79887e844b4f5ec3c9e,https://review.opendev.org/42449,Refactoring for nicira plugin to support NVP DHCP/Metadata services,Refactoring for nicira plugin to support NVP DHCP/Metadata services  This initial patch is aimed at decoupling core plugin services from DHCP and metadata services. The abstraction being introduced is needed so that the code can support both models where dhcp and metadata services are provided by external RPC agents or solely by the server-side plugin.  Supports blueprint nvp-dhcp-metadata-services  Change-Id: I396ee7bbcbd866e4e9d4a79887e844b4f5ec3c9e,quality,,,,,,
openstack%2Fneutron~master~I396ee7bbcbd866e4e9d4a79887e844b4f5ec3c9e,https://review.opendev.org/42449,Refactoring for nicira plugin to support NVP DHCP/Metadata services,Refactoring for nicira plugin to support NVP DHCP/Metadata services  This initial patch is aimed at decoupling core plugin services from DHCP and metadata services. The abstraction being introduced is needed so that the code can support both models where dhcp and metadata services are provided by external RPC agents or solely by the server-side plugin.  Supports blueprint nvp-dhcp-metadata-services  Change-Id: I396ee7bbcbd866e4e9d4a79887e844b4f5ec3c9e,objective,,,,,,
openstack%2Fneutron~master~I396ee7bbcbd866e4e9d4a79887e844b4f5ec3c9e,https://review.opendev.org/42449,Refactoring for nicira plugin to support NVP DHCP/Metadata services,Refactoring for nicira plugin to support NVP DHCP/Metadata services  This initial patch is aimed at decoupling core plugin services from DHCP and metadata services. The abstraction being introduced is needed so that the code can support both models where dhcp and metadata services are provided by external RPC agents or solely by the server-side plugin.  Supports blueprint nvp-dhcp-metadata-services  Change-Id: I396ee7bbcbd866e4e9d4a79887e844b4f5ec3c9e,integration,,,,,,
openstack%2Fironic~master~I918af9508f3c99321625f6df96b1bf12ead26243,https://review.opendev.org/718142,Refactor AgentBase.heartbeat and process_next_step,"Refactor AgentBase.heartbeat and process_next_step  These methods are reaching the complexity limits, split them. Also update messages to be more human-friendly.  The complexity limit is returned back to 18 as before hacking 3.0.  Change-Id: I918af9508f3c99321625f6df96b1bf12ead26243 Story: #2006963",quality,,,,,,
openstack%2Fironic~master~I918af9508f3c99321625f6df96b1bf12ead26243,https://review.opendev.org/718142,Refactor AgentBase.heartbeat and process_next_step,"Refactor AgentBase.heartbeat and process_next_step  These methods are reaching the complexity limits, split them. Also update messages to be more human-friendly.  The complexity limit is returned back to 18 as before hacking 3.0.  Change-Id: I918af9508f3c99321625f6df96b1bf12ead26243 Story: #2006963",objective,,,,,,
openstack%2Foslo-incubator~master~I0d96105d4ff22eed827ed61466a26f69f33addd1,https://review.opendev.org/32093,Refactors to_bytes,Refactors to_bytes  The original logic was not much intuitive. Changed the code for better readability.  Change-Id: I0d96105d4ff22eed827ed61466a26f69f33addd1,quality,,,,,,
airship%2Fairshipctl~master~If3c4326f3ca46db7fd307b50ca260cdb1a82f3f3,https://review.opendev.org/715086,Refactor ClusterComplexName,Refactor ClusterComplexName  This change includes various code cleanups which improve the way that a developer creates and interacts with ClusterComplexNames.  Change-Id: If3c4326f3ca46db7fd307b50ca260cdb1a82f3f3,quality,,,,,,
airship%2Fairshipctl~master~If3c4326f3ca46db7fd307b50ca260cdb1a82f3f3,https://review.opendev.org/715086,Refactor ClusterComplexName,Refactor ClusterComplexName  This change includes various code cleanups which improve the way that a developer creates and interacts with ClusterComplexNames.  Change-Id: If3c4326f3ca46db7fd307b50ca260cdb1a82f3f3,objective,,,,,,
openstack%2Fkayobe~master~Iaa69e5303e554e6b30a23a3e84e36d09972888c9,https://review.opendev.org/785031,Ubuntu: refactor network.yml playbook,"Ubuntu: refactor network.yml playbook  The network.yml playbook is reduced in complexity, now performing validation before including a role specific to the OS family of the host (network-redhat or network-debian). This will allow the network configuration to diverge between OS families without adding excessive conditionals.  Currently the content of the roles is identical.  Story: 2004960  Change-Id: Iaa69e5303e554e6b30a23a3e84e36d09972888c9",quality,,,,,,
openstack%2Fkayobe~master~Iaa69e5303e554e6b30a23a3e84e36d09972888c9,https://review.opendev.org/785031,Ubuntu: refactor network.yml playbook,"Ubuntu: refactor network.yml playbook  The network.yml playbook is reduced in complexity, now performing validation before including a role specific to the OS family of the host (network-redhat or network-debian). This will allow the network configuration to diverge between OS families without adding excessive conditionals.  Currently the content of the roles is identical.  Story: 2004960  Change-Id: Iaa69e5303e554e6b30a23a3e84e36d09972888c9",objective,,,,,,
openstack%2Fkayobe~master~Iaa69e5303e554e6b30a23a3e84e36d09972888c9,https://review.opendev.org/785031,Ubuntu: refactor network.yml playbook,"Ubuntu: refactor network.yml playbook  The network.yml playbook is reduced in complexity, now performing validation before including a role specific to the OS family of the host (network-redhat or network-debian). This will allow the network configuration to diverge between OS families without adding excessive conditionals.  Currently the content of the roles is identical.  Story: 2004960  Change-Id: Iaa69e5303e554e6b30a23a3e84e36d09972888c9",integration,,,,,,
x%2Fnetworking-mlnx~master~Iff7b46e490ad043b7d7ddb9de36615c344ebc9f3,https://review.opendev.org/707172,Refactor set vf GUID to imporve readability,Refactor set vf GUID to imporve readability  - Move set vf guid via sysfs logic to its own method   for both mlnx4 and mlnx5 - Change fallback logging to debug and minor rewording  Change-Id: Iff7b46e490ad043b7d7ddb9de36615c344ebc9f3,quality,,,,,,
x%2Fnetworking-mlnx~master~Iff7b46e490ad043b7d7ddb9de36615c344ebc9f3,https://review.opendev.org/707172,Refactor set vf GUID to imporve readability,Refactor set vf GUID to imporve readability  - Move set vf guid via sysfs logic to its own method   for both mlnx4 and mlnx5 - Change fallback logging to debug and minor rewording  Change-Id: Iff7b46e490ad043b7d7ddb9de36615c344ebc9f3,objective,,,,,,
x%2Fgroup-based-policy~stable%2Fnewton~I3ac7659db7fa6e22c446a82b680c4ef52f64b183,https://review.opendev.org/706617,Refactor static path code,"Refactor static path code  The static path code is refactored to improve readability, and will be used in subsequent patches adding support for baremetal VNIC types.  Change-Id: I3ac7659db7fa6e22c446a82b680c4ef52f64b183 (cherry picked from commit d5c32b2b2ef26e1da2b1ae4dfa0db9a971a01641)",quality,,,,,,
x%2Fgroup-based-policy~stable%2Fnewton~I3ac7659db7fa6e22c446a82b680c4ef52f64b183,https://review.opendev.org/706617,Refactor static path code,"Refactor static path code  The static path code is refactored to improve readability, and will be used in subsequent patches adding support for baremetal VNIC types.  Change-Id: I3ac7659db7fa6e22c446a82b680c4ef52f64b183 (cherry picked from commit d5c32b2b2ef26e1da2b1ae4dfa0db9a971a01641)",objective,,,,,,
x%2Fgroup-based-policy~stable%2Focata~I3ac7659db7fa6e22c446a82b680c4ef52f64b183,https://review.opendev.org/706546,Refactor static path code,"Refactor static path code  The static path code is refactored to improve readability, and will be used in subsequent patches adding support for baremetal VNIC types.  Change-Id: I3ac7659db7fa6e22c446a82b680c4ef52f64b183",quality,,,,,,
x%2Fgroup-based-policy~stable%2Focata~I3ac7659db7fa6e22c446a82b680c4ef52f64b183,https://review.opendev.org/706546,Refactor static path code,"Refactor static path code  The static path code is refactored to improve readability, and will be used in subsequent patches adding support for baremetal VNIC types.  Change-Id: I3ac7659db7fa6e22c446a82b680c4ef52f64b183",objective,,,,,,
x%2Fgroup-based-policy~stable%2Fpike~I3ac7659db7fa6e22c446a82b680c4ef52f64b183,https://review.opendev.org/706545,Refactor static path code,"Refactor static path code  The static path code is refactored to improve readability, and will be used in subsequent patches adding support for baremetal VNIC types.  Change-Id: I3ac7659db7fa6e22c446a82b680c4ef52f64b183",quality,,,,,,
x%2Fgroup-based-policy~stable%2Fpike~I3ac7659db7fa6e22c446a82b680c4ef52f64b183,https://review.opendev.org/706545,Refactor static path code,"Refactor static path code  The static path code is refactored to improve readability, and will be used in subsequent patches adding support for baremetal VNIC types.  Change-Id: I3ac7659db7fa6e22c446a82b680c4ef52f64b183",objective,,,,,,
x%2Fgroup-based-policy~stable%2Fqueens~I3ac7659db7fa6e22c446a82b680c4ef52f64b183,https://review.opendev.org/706544,Refactor static path code,"Refactor static path code  The static path code is refactored to improve readability, and will be used in subsequent patches adding support for baremetal VNIC types.  Change-Id: I3ac7659db7fa6e22c446a82b680c4ef52f64b183",quality,,,,,,
x%2Fgroup-based-policy~stable%2Fqueens~I3ac7659db7fa6e22c446a82b680c4ef52f64b183,https://review.opendev.org/706544,Refactor static path code,"Refactor static path code  The static path code is refactored to improve readability, and will be used in subsequent patches adding support for baremetal VNIC types.  Change-Id: I3ac7659db7fa6e22c446a82b680c4ef52f64b183",objective,,,,,,
x%2Fgroup-based-policy~master~I3ac7659db7fa6e22c446a82b680c4ef52f64b183,https://review.opendev.org/705242,Refactor static path code,"Refactor static path code  The static path code is refactored to improve readability, and will be used in subsequent patches adding support for baremetal VNIC types.  Change-Id: I3ac7659db7fa6e22c446a82b680c4ef52f64b183",quality,,,,,,
x%2Fgroup-based-policy~master~I3ac7659db7fa6e22c446a82b680c4ef52f64b183,https://review.opendev.org/705242,Refactor static path code,"Refactor static path code  The static path code is refactored to improve readability, and will be used in subsequent patches adding support for baremetal VNIC types.  Change-Id: I3ac7659db7fa6e22c446a82b680c4ef52f64b183",objective,,,,,,
openstack%2Fmistral~stable%2Ftrain~I9a97c40222e8dc4870c9b6a7c5f5e3c14f37bdd6,https://review.opendev.org/694712,Refactor action execution reporter,"Refactor action execution reporter  * Moved away from using Oslo periodic tasks in the action execution   reporter since in this case they don't make the code more readable.   Also, now it is symmetric with other similar components like action   execution checker. * Refactored action execution checker w/o using classes since having   many instances of it doesn't make sense. * Small style changes  Change-Id: I9a97c40222e8dc4870c9b6a7c5f5e3c14f37bdd6 (cherry picked from commit 0e758e16e1abdb2440e28d270457f7329b876708)",quality,,,,,,
openstack%2Fmistral~stable%2Ftrain~I9a97c40222e8dc4870c9b6a7c5f5e3c14f37bdd6,https://review.opendev.org/694712,Refactor action execution reporter,"Refactor action execution reporter  * Moved away from using Oslo periodic tasks in the action execution   reporter since in this case they don't make the code more readable.   Also, now it is symmetric with other similar components like action   execution checker. * Refactored action execution checker w/o using classes since having   many instances of it doesn't make sense. * Small style changes  Change-Id: I9a97c40222e8dc4870c9b6a7c5f5e3c14f37bdd6 (cherry picked from commit 0e758e16e1abdb2440e28d270457f7329b876708)",objective,,,,,,
openstack%2Fopenstacksdk~master~Ie5067a331b6f52d3e0480433c02199e2dd923ae6,https://review.opendev.org/676015,Minor refactor cleanup of _make_proxy,"Minor refactor cleanup of _make_proxy  Noticed we were doing a redundant lookup and conditional. Straight refactor for readability, no functional change.  Change-Id: Ie5067a331b6f52d3e0480433c02199e2dd923ae6",quality,,,,,,
openstack%2Fopenstacksdk~master~Ie5067a331b6f52d3e0480433c02199e2dd923ae6,https://review.opendev.org/676015,Minor refactor cleanup of _make_proxy,"Minor refactor cleanup of _make_proxy  Noticed we were doing a redundant lookup and conditional. Straight refactor for readability, no functional change.  Change-Id: Ie5067a331b6f52d3e0480433c02199e2dd923ae6",objective,,,,,,
openstack%2Ffuel-octane~master~Ife7cb8a262cb85829f5e9cb3399efa5aff05143e,https://review.opendev.org/229828,Refactor upgrade_controlplane parts,Refactor upgrade_controlplane parts  * move network related methods from `upgrade_controlplane` to `env`   module * collect yaml files from nodes if bup info is not present * extract `delete_overlay_networks` action to separate function  Change-Id: Ife7cb8a262cb85829f5e9cb3399efa5aff05143e,objective,,,,,,
openstack%2Ffuel-octane~master~Ife7cb8a262cb85829f5e9cb3399efa5aff05143e,https://review.opendev.org/229828,Refactor upgrade_controlplane parts,Refactor upgrade_controlplane parts  * move network related methods from `upgrade_controlplane` to `env`   module * collect yaml files from nodes if bup info is not present * extract `delete_overlay_networks` action to separate function  Change-Id: Ife7cb8a262cb85829f5e9cb3399efa5aff05143e,objective,,,,,,
openstack%2Ffuel-octane~master~Ife7cb8a262cb85829f5e9cb3399efa5aff05143e,https://review.opendev.org/229828,Refactor upgrade_controlplane parts,Refactor upgrade_controlplane parts  * move network related methods from `upgrade_controlplane` to `env`   module * collect yaml files from nodes if bup info is not present * extract `delete_overlay_networks` action to separate function  Change-Id: Ife7cb8a262cb85829f5e9cb3399efa5aff05143e,testing,,,,,,
openstack%2Ffuel-octane~master~Ife7cb8a262cb85829f5e9cb3399efa5aff05143e,https://review.opendev.org/229828,Refactor upgrade_controlplane parts,Refactor upgrade_controlplane parts  * move network related methods from `upgrade_controlplane` to `env`   module * collect yaml files from nodes if bup info is not present * extract `delete_overlay_networks` action to separate function  Change-Id: Ife7cb8a262cb85829f5e9cb3399efa5aff05143e,quality,,,,,,
openstack%2Ffuel-octane~stable%2F7.0~Ife7cb8a262cb85829f5e9cb3399efa5aff05143e,https://review.opendev.org/230926,Refactor upgrade_controlplane parts,Refactor upgrade_controlplane parts  * move network related methods from `upgrade_controlplane` to `env`   module * collect yaml files from nodes if bup info is not present * extract `delete_overlay_networks` action to separate function  Change-Id: Ife7cb8a262cb85829f5e9cb3399efa5aff05143e,objective,,,,,,
openstack%2Ffuel-octane~stable%2F7.0~Ife7cb8a262cb85829f5e9cb3399efa5aff05143e,https://review.opendev.org/230926,Refactor upgrade_controlplane parts,Refactor upgrade_controlplane parts  * move network related methods from `upgrade_controlplane` to `env`   module * collect yaml files from nodes if bup info is not present * extract `delete_overlay_networks` action to separate function  Change-Id: Ife7cb8a262cb85829f5e9cb3399efa5aff05143e,objective,,,,,,
openstack%2Ffuel-octane~stable%2F7.0~Ife7cb8a262cb85829f5e9cb3399efa5aff05143e,https://review.opendev.org/230926,Refactor upgrade_controlplane parts,Refactor upgrade_controlplane parts  * move network related methods from `upgrade_controlplane` to `env`   module * collect yaml files from nodes if bup info is not present * extract `delete_overlay_networks` action to separate function  Change-Id: Ife7cb8a262cb85829f5e9cb3399efa5aff05143e,testing,,,,,,
openstack%2Ffuel-octane~stable%2F7.0~Ife7cb8a262cb85829f5e9cb3399efa5aff05143e,https://review.opendev.org/230926,Refactor upgrade_controlplane parts,Refactor upgrade_controlplane parts  * move network related methods from `upgrade_controlplane` to `env`   module * collect yaml files from nodes if bup info is not present * extract `delete_overlay_networks` action to separate function  Change-Id: Ife7cb8a262cb85829f5e9cb3399efa5aff05143e,quality,,,,,,
openstack%2Fkeystone~master~I229d924c72c087c26f519dea5b8407cf4a3e26eb,https://review.opendev.org/159172,Refactor Keystone wsgi/eventlet app,Refactor Keystone wsgi/eventlet app  Due to passing functions as parameters startup code looks as it needs to be done as a class hierarchy.  Change-Id: I229d924c72c087c26f519dea5b8407cf4a3e26eb Related-Bug: 1420788,quality,,,,,,
openstack%2Fkeystonemiddleware~master~I8dc002316404a4bd0e9ea55a727adb2e27ae9a3e,https://review.opendev.org/190673,Refactor token fetching,"Refactor token fetching  Refactor the code that handles fetching a token either from cache, decoded from PKI or from keystone. This will allow us to substitute a new method of fetching a token (like from the keystone database) in other scenarios.  Whilst the contextmanager pattern here seems a little odd in the auth_token middleware case (and possible server case) we need to additionally handle the token data after it has been validated and I consider this much cleaner that saying you must call an existing function.  Change-Id: I8dc002316404a4bd0e9ea55a727adb2e27ae9a3e",objective,,,,,,
openstack%2Fkeystonemiddleware~master~I8dc002316404a4bd0e9ea55a727adb2e27ae9a3e,https://review.opendev.org/190673,Refactor token fetching,"Refactor token fetching  Refactor the code that handles fetching a token either from cache, decoded from PKI or from keystone. This will allow us to substitute a new method of fetching a token (like from the keystone database) in other scenarios.  Whilst the contextmanager pattern here seems a little odd in the auth_token middleware case (and possible server case) we need to additionally handle the token data after it has been validated and I consider this much cleaner that saying you must call an existing function.  Change-Id: I8dc002316404a4bd0e9ea55a727adb2e27ae9a3e",testing,,,,,,
openstack%2Fhorizon~master~Id96c6d416bc4fab2944c8431bbb147f9db5469d9,https://review.opendev.org/190076,Refactor of BaseTestCase,"Refactor of BaseTestCase  To run integratin tests, there needs to be set environment variable INTEGRATION_TESTS. In past, positive behaviour was enclosed in one big 'if' branch. I've moved negative behaviour to beginning and len rest of method as ordinary function body.  Change-Id: Id96c6d416bc4fab2944c8431bbb147f9db5469d9",quality,,,,,,
openstack%2Fhorizon~master~Id96c6d416bc4fab2944c8431bbb147f9db5469d9,https://review.opendev.org/190076,Refactor of BaseTestCase,"Refactor of BaseTestCase  To run integratin tests, there needs to be set environment variable INTEGRATION_TESTS. In past, positive behaviour was enclosed in one big 'if' branch. I've moved negative behaviour to beginning and len rest of method as ordinary function body.  Change-Id: Id96c6d416bc4fab2944c8431bbb147f9db5469d9",testing,,,,,,
openstack%2Fcinder~master~I73a851034fea59483622c2997d2175d5661ef6cf,https://review.opendev.org/187551,Refactor Huawei Volume driver,Refactor Huawei Volume driver  This blueprint is an attempt to refactor the Huawei volume driver in liberty. We will add a base dirver to implement the basic functions that the Cinder driver required. The sub-class will inherit the base driver according to different storages. the following diragram shows the structure of the newest Huawei volume driver          +---------------+ +------------------+ +--------------------+         | ISCSIDriver | | HuaweiBaseDriver | | FibreChannelDriver |         +---------+-----+ +----+-------------+ +----+-----------+----+                   | | | |                   | | |__________ |                   | | | |               +---+--------------------+ +---+--------------------+               | Huawei18000ISCSIDriver | | Huawei18000FCDriver |               +-------------+----------+ +-------------+----------+  Change-Id: I73a851034fea59483622c2997d2175d5661ef6cf Implements: bp/refactor-huawei-volume-driver,objective,,,,,,
openstack%2Fcinder~master~I73a851034fea59483622c2997d2175d5661ef6cf,https://review.opendev.org/187551,Refactor Huawei Volume driver,Refactor Huawei Volume driver  This blueprint is an attempt to refactor the Huawei volume driver in liberty. We will add a base dirver to implement the basic functions that the Cinder driver required. The sub-class will inherit the base driver according to different storages. the following diragram shows the structure of the newest Huawei volume driver          +---------------+ +------------------+ +--------------------+         | ISCSIDriver | | HuaweiBaseDriver | | FibreChannelDriver |         +---------+-----+ +----+-------------+ +----+-----------+----+                   | | | |                   | | |__________ |                   | | | |               +---+--------------------+ +---+--------------------+               | Huawei18000ISCSIDriver | | Huawei18000FCDriver |               +-------------+----------+ +-------------+----------+  Change-Id: I73a851034fea59483622c2997d2175d5661ef6cf Implements: bp/refactor-huawei-volume-driver,refactoring,,,,,,
openstack%2Fcinder~master~I202594f743423dcfe15e908057ae0cf6c22cc415,https://review.opendev.org/187983,Refactor Huawei Volume driver,Refactor Huawei Volume driver  This blueprint is an attempt to refactor the Huawei volume driver in liberty. We will add a base dirver to implement the basic functions that the Cinder driver required. The sub-class will inherit the base driver according to different storages. the following diragram shows the structure of the newest Huawei volume driver          +---------------+ +------------------+ +--------------------+         | ISCSIDriver | | HuaweiBaseDriver | | FibreChannelDriver |         +---------+-----+ +----+-------------+ +----+-----------+----+                   | | | |                   | | |__________ |                   | | | |               +---+--------------------+ +---+--------------------+               | Huawei18000ISCSIDriver | | Huawei18000FCDriver |               +-------------+----------+ +-------------+----------+  Change-Id: I202594f743423dcfe15e908057ae0cf6c22cc415 Implements: blueprint refactor-huawei-volume-driver,objective,,,,,,
openstack%2Fcinder~master~I202594f743423dcfe15e908057ae0cf6c22cc415,https://review.opendev.org/187983,Refactor Huawei Volume driver,Refactor Huawei Volume driver  This blueprint is an attempt to refactor the Huawei volume driver in liberty. We will add a base dirver to implement the basic functions that the Cinder driver required. The sub-class will inherit the base driver according to different storages. the following diragram shows the structure of the newest Huawei volume driver          +---------------+ +------------------+ +--------------------+         | ISCSIDriver | | HuaweiBaseDriver | | FibreChannelDriver |         +---------+-----+ +----+-------------+ +----+-----------+----+                   | | | |                   | | |__________ |                   | | | |               +---+--------------------+ +---+--------------------+               | Huawei18000ISCSIDriver | | Huawei18000FCDriver |               +-------------+----------+ +-------------+----------+  Change-Id: I202594f743423dcfe15e908057ae0cf6c22cc415 Implements: blueprint refactor-huawei-volume-driver,refactoring,,,,,,
openstack%2Fcinder~master~I33f30fb5448abcffc0916329bc5aa976e7dbad41,https://review.opendev.org/187967,Refactor Huawei Volume driver,Refactor Huawei Volume driver  This blueprint is an attempt to refactor the Huawei volume driver in liberty. We will add a base dirver to implement the basic functions that the Cinder driver required. The sub-class will inherit the base driver according to different storages. the following diragram shows the structure of the newest Huawei volume driver          +---------------+ +------------------+ +--------------------+         | ISCSIDriver | | HuaweiBaseDriver | | FibreChannelDriver |         +---------+-----+ +----+-------------+ +----+-----------+----+                   | | | |                   | | |__________ |                   | | | |               +---+--------------------+ +---+--------------------+               | Huawei18000ISCSIDriver | | Huawei18000FCDriver |               +-------------+----------+ +-------------+----------+  Change-Id: I33f30fb5448abcffc0916329bc5aa976e7dbad41 Implements: blueprint refactor-huawei-volume-driver,refactoring,,,,,,
openstack%2Fcinder~master~Ia90c149da66a9cee664b8de8d4a8af1a7eb7eede,https://review.opendev.org/187887,Refactor Huawei Volume driver,Refactor Huawei Volume driver  This blueprint is an attempt to refactor the Huawei volume driver in liberty. We will add a base dirver to implement the basic functions that the Cinder driver required. The sub-class will inherit the base driver according to different storages. the following diragram shows the structure of the newest Huawei volume driver          +---------------+ +------------------+ +--------------------+         | ISCSIDriver | | HuaweiBaseDriver | | FibreChannelDriver |         +---------+-----+ +----+-------------+ +----+-----------+----+                   | | | |                   | | |__________ |                   | | | |               +---+--------------------+ +---+--------------------+               | Huawei18000ISCSIDriver | | Huawei18000FCDriver |               +-------------+----------+ +-------------+----------+  Change-Id: Ia90c149da66a9cee664b8de8d4a8af1a7eb7eede Implements: bp/refactor-huawei-volume-driver,objective,,,,,,
openstack%2Fcinder~master~Ia90c149da66a9cee664b8de8d4a8af1a7eb7eede,https://review.opendev.org/187887,Refactor Huawei Volume driver,Refactor Huawei Volume driver  This blueprint is an attempt to refactor the Huawei volume driver in liberty. We will add a base dirver to implement the basic functions that the Cinder driver required. The sub-class will inherit the base driver according to different storages. the following diragram shows the structure of the newest Huawei volume driver          +---------------+ +------------------+ +--------------------+         | ISCSIDriver | | HuaweiBaseDriver | | FibreChannelDriver |         +---------+-----+ +----+-------------+ +----+-----------+----+                   | | | |                   | | |__________ |                   | | | |               +---+--------------------+ +---+--------------------+               | Huawei18000ISCSIDriver | | Huawei18000FCDriver |               +-------------+----------+ +-------------+----------+  Change-Id: Ia90c149da66a9cee664b8de8d4a8af1a7eb7eede Implements: bp/refactor-huawei-volume-driver,quality,,,,,,
openstack%2Fcinder~master~Ia90c149da66a9cee664b8de8d4a8af1a7eb7eede,https://review.opendev.org/187887,Refactor Huawei Volume driver,Refactor Huawei Volume driver  This blueprint is an attempt to refactor the Huawei volume driver in liberty. We will add a base dirver to implement the basic functions that the Cinder driver required. The sub-class will inherit the base driver according to different storages. the following diragram shows the structure of the newest Huawei volume driver          +---------------+ +------------------+ +--------------------+         | ISCSIDriver | | HuaweiBaseDriver | | FibreChannelDriver |         +---------+-----+ +----+-------------+ +----+-----------+----+                   | | | |                   | | |__________ |                   | | | |               +---+--------------------+ +---+--------------------+               | Huawei18000ISCSIDriver | | Huawei18000FCDriver |               +-------------+----------+ +-------------+----------+  Change-Id: Ia90c149da66a9cee664b8de8d4a8af1a7eb7eede Implements: bp/refactor-huawei-volume-driver,refactoring,,,,,,
openstack%2Fneutron~master~Ic8c6484ac13544c91b9ca537c96a5518dfd7fdf2,https://review.opendev.org/184166,Refactor and decompose db_base_plugin_v2.py,"Refactor and decompose db_base_plugin_v2.py  - Rebased to the master branch to get the latest fix on tox.ini   This resolves ""ConfigError: substitution key 'envbindir' not found"" error   when running functional testing. - Added infoblox and openstack license info in the comment section. - Changed variable names that use camel cases to use low cases with   underscores in BaseRequestFactory.  Change-Id: Ic8c6484ac13544c91b9ca537c96a5518dfd7fdf2 Partially-Implements: blueprint neutron-ipam",refactoring,,,,,,
openstack%2Fneutron~master~I1096568456fe306a0d0714405d4b10bb4c370f59,https://review.opendev.org/184170,Refactor and decompose db_base_plugin_v2.py,"Refactor and decompose db_base_plugin_v2.py  - Rebased to the master branch to get the latest fix on tox.ini   This resolves ""ConfigError: substitution key 'envbindir' not found"" error   when running functional testing. - Added infoblox and openstack license info in the comment section. - Changed variable names that use camel cases to use low cases with   underscores in BaseRequestFactory.  Change-Id: I1096568456fe306a0d0714405d4b10bb4c370f59",refactoring,,,,,,
openstack%2Fpuppet-keystone~master~I5c082c7e374d53226e312d83a97afb318b481cc7,https://review.opendev.org/144537,WIP - wsgi/apache: refactore to use openstacklib,wsgi/apache: refactore to use openstacklib  Refactorize some code to use openstacklib::wsgi::apache function to configure Keystone as a WSGI process with Apache2.  Change-Id: I5c082c7e374d53226e312d83a97afb318b481cc7,objective,,,,,,
openstack%2Fneutron~master~I8f10c5933555e78c75e3ca9c4c1110a3fa66c899,https://review.opendev.org/137823,Cleanup/refactor neutron/agent/linux/iptables_firewall.py,Cleanup/refactor neutron/agent/linux/iptables_firewall.py  - Split long functions into smaller ones. - Normalized ipset/normal security group rules generation. - Added log error on a not-to-happen condition.  Change-Id: I8f10c5933555e78c75e3ca9c4c1110a3fa66c899,quality,,,,,,
openstack%2Fneutron~master~I8f10c5933555e78c75e3ca9c4c1110a3fa66c899,https://review.opendev.org/137823,Cleanup/refactor neutron/agent/linux/iptables_firewall.py,Cleanup/refactor neutron/agent/linux/iptables_firewall.py  - Split long functions into smaller ones. - Normalized ipset/normal security group rules generation. - Added log error on a not-to-happen condition.  Change-Id: I8f10c5933555e78c75e3ca9c4c1110a3fa66c899,refactoring,,,,,,
openstack%2Fswift~master~Id0a2c383d4b3e24cf09ba0ccfcee6384a0a06417,https://review.opendev.org/92643,Refactoring functional tests,"refactoring functional tests  This is a break up of the long tests.py file into smaller files. This is an attempt to improve maintainability of the functional tests, by breaking them up into functional areas.  This first commit pulled tests of slo, dlo and tempurl middleware and put them in their own files.  Change-Id: Id0a2c383d4b3e24cf09ba0ccfcee6384a0a06417 Signed-off-by: Thiago da Silva <thiago@redhat.com>",quality,,,,,,
openstack%2Fswift~master~Id0a2c383d4b3e24cf09ba0ccfcee6384a0a06417,https://review.opendev.org/92643,Refactoring functional tests,"refactoring functional tests  This is a break up of the long tests.py file into smaller files. This is an attempt to improve maintainability of the functional tests, by breaking them up into functional areas.  This first commit pulled tests of slo, dlo and tempurl middleware and put them in their own files.  Change-Id: Id0a2c383d4b3e24cf09ba0ccfcee6384a0a06417 Signed-off-by: Thiago da Silva <thiago@redhat.com>",testing,,,,,,
openstack%2Ftempest~master~I2b01c61162e1b079f518387dbfb56b6ec880797b,https://review.opendev.org/101072,Refactor common code for test_server_cfn_init,Refactor common code for test_server_cfn_init  In a subsequent patch we will introduce tests to work with os-collect-config that make use of these common functions.  Change-Id: I2b01c61162e1b079f518387dbfb56b6ec880797b,testing,,,,,,
openstack%2Ftempest~master~I2b01c61162e1b079f518387dbfb56b6ec880797b,https://review.opendev.org/101072,Refactor common code for test_server_cfn_init,Refactor common code for test_server_cfn_init  In a subsequent patch we will introduce tests to work with os-collect-config that make use of these common functions.  Change-Id: I2b01c61162e1b079f518387dbfb56b6ec880797b,quality,,,,,,
openstack%2Fcongress~master~If4d709c1ce9ad2d34b2803e6106f0cda5c666eaa,https://review.opendev.org/131687,Refactor some common code in _get_schema,Refactor some common code in _get_schema  This patch does not make any functional change. It merely removes some code that could be shared between VDICT and LIST in _get_schema.  Change-Id: If4d709c1ce9ad2d34b2803e6106f0cda5c666eaa,quality,,,,,,
openstack%2Fneutron~master~Ib1b56984ee1bb1f1f9fc0f141ad7b65cd3e500c2,https://review.opendev.org/115196,Refactor DB model access functions and namings,"Refactor DB model access functions  The _get_collection and _get_collection_query functions are a bit messy, naming conventions and extensibility wise. This patch refactors these function in the purpose of reducing code-duplications and improving extensibility using a pre-filter function that allows custom filtering, which is currently not supported by the framework. Also, a missing unregister_model_query_hook is added.  1. Naming conventions: There is a mixup in the code as to what a                        collection is and what a query is. A query                        is a proper SQL query (model.query().select()),                        and a collection is the actual result of the                        given query (my_query.all()) 2. Custom filtering: When retrieving all resources of a model (for                      example, all ports), one can filter by a certain                      column (for example, by a specific port name).                      This is complicated when trying to filter using                      a relationship field (for example, foreign key).                      This patchset adds a pre-filter callback                      which allows custom filtering of fields. 3. Code duplication: The get_ports function is basically a duplication                      of '_get_collection', with a specific filtering                      inserted prior the normal filtering. The                      pre-filter callback feature eliminates the need                      for such code duplication, by using a                      straight-forward implementation.  Change-Id: Ib1b56984ee1bb1f1f9fc0f141ad7b65cd3e500c2 Closes-bug: #1350852",quality,,,,,,
openstack%2Fneutron~master~Ib1b56984ee1bb1f1f9fc0f141ad7b65cd3e500c2,https://review.opendev.org/115196,Refactor DB model access functions and namings,"Refactor DB model access functions  The _get_collection and _get_collection_query functions are a bit messy, naming conventions and extensibility wise. This patch refactors these function in the purpose of reducing code-duplications and improving extensibility using a pre-filter function that allows custom filtering, which is currently not supported by the framework. Also, a missing unregister_model_query_hook is added.  1. Naming conventions: There is a mixup in the code as to what a                        collection is and what a query is. A query                        is a proper SQL query (model.query().select()),                        and a collection is the actual result of the                        given query (my_query.all()) 2. Custom filtering: When retrieving all resources of a model (for                      example, all ports), one can filter by a certain                      column (for example, by a specific port name).                      This is complicated when trying to filter using                      a relationship field (for example, foreign key).                      This patchset adds a pre-filter callback                      which allows custom filtering of fields. 3. Code duplication: The get_ports function is basically a duplication                      of '_get_collection', with a specific filtering                      inserted prior the normal filtering. The                      pre-filter callback feature eliminates the need                      for such code duplication, by using a                      straight-forward implementation.  Change-Id: Ib1b56984ee1bb1f1f9fc0f141ad7b65cd3e500c2 Closes-bug: #1350852",refactoring,,,,,,
openstack%2Fneutron~master~Ib1b56984ee1bb1f1f9fc0f141ad7b65cd3e500c2,https://review.opendev.org/115196,Refactor DB model access functions and namings,"Refactor DB model access functions  The _get_collection and _get_collection_query functions are a bit messy, naming conventions and extensibility wise. This patch refactors these function in the purpose of reducing code-duplications and improving extensibility using a pre-filter function that allows custom filtering, which is currently not supported by the framework. Also, a missing unregister_model_query_hook is added.  1. Naming conventions: There is a mixup in the code as to what a                        collection is and what a query is. A query                        is a proper SQL query (model.query().select()),                        and a collection is the actual result of the                        given query (my_query.all()) 2. Custom filtering: When retrieving all resources of a model (for                      example, all ports), one can filter by a certain                      column (for example, by a specific port name).                      This is complicated when trying to filter using                      a relationship field (for example, foreign key).                      This patchset adds a pre-filter callback                      which allows custom filtering of fields. 3. Code duplication: The get_ports function is basically a duplication                      of '_get_collection', with a specific filtering                      inserted prior the normal filtering. The                      pre-filter callback feature eliminates the need                      for such code duplication, by using a                      straight-forward implementation.  Change-Id: Ib1b56984ee1bb1f1f9fc0f141ad7b65cd3e500c2 Closes-bug: #1350852",objective,,,,,,
openstack%2Fneutron~master~If0738099f1b02908e198b326d641719ad9e71055,https://review.opendev.org/115063,Refactor DB model access functions - DO NOT MERGE,"Refactor DB model access functions  The _get_collection and _get_collection_query functions are a bit messy, naming conventions and extensibility wise. This patch refactors these function in the purpose of reducing code-duplications and improving extensibility.  Change-Id: If0738099f1b02908e198b326d641719ad9e71055 Closes-bug: #1350852",quality,,,,,,
openstack%2Fneutron~master~If0738099f1b02908e198b326d641719ad9e71055,https://review.opendev.org/115063,Refactor DB model access functions - DO NOT MERGE,"Refactor DB model access functions  The _get_collection and _get_collection_query functions are a bit messy, naming conventions and extensibility wise. This patch refactors these function in the purpose of reducing code-duplications and improving extensibility.  Change-Id: If0738099f1b02908e198b326d641719ad9e71055 Closes-bug: #1350852",refactoring,,,,,,
openstack%2Fneutron~master~If0738099f1b02908e198b326d641719ad9e71055,https://review.opendev.org/115063,Refactor DB model access functions - DO NOT MERGE,"Refactor DB model access functions  The _get_collection and _get_collection_query functions are a bit messy, naming conventions and extensibility wise. This patch refactors these function in the purpose of reducing code-duplications and improving extensibility.  Change-Id: If0738099f1b02908e198b326d641719ad9e71055 Closes-bug: #1350852",integration,,,,,,
zuul%2Fzuul~master~I3b2bd309e887ee72ca7e592df1796f8712cd759f,https://review.opendev.org/104910,Refactor clonemapper internal structure,Refactor clonemapper internal structure  The structure returned by the clonemapper was a simple dict of project -> destination.  Make the value a dict and insert the destination under the 'dest' key.  This will let us enhance the clonemapper to support more functionalities such as per project branch override.  An entry such as:   {'project': '/tmp/workspace/foo'}  Becomes:   {'project': {      'dest': '/tmp/workspace/foo'    }  }  Change-Id: I3b2bd309e887ee72ca7e592df1796f8712cd759f,quality,,,,,,
openstack%2Ffuel-astute~stable%2F5.0~Ic6022cc4ecb405a17dbeefb095590532cbbbe33b,https://review.opendev.org/108188,Refactor ssh actions used for node erasing,"Refactor ssh actions used for node erasing  Patch fixes few issues with erasing drives while stopping deployment during provisioning, e.g.:  * executing dd with non-existing under    debootstrap shell option 'flag';  * broken check of block device major code;  * incorrect order of arguments, which are passed    to erase_data function; Also it implements more robust mechanizm to detect provisining or provisined node.  Change-Id: Ic6022cc4ecb405a17dbeefb095590532cbbbe33b Related-bug: #1316583 (cherry picked from commit 4bf5312f4752769b51974ee5804dd224b67a0dcf)",objective,,,,,,
openstack%2Ffuel-astute~stable%2F5.0~Ic6022cc4ecb405a17dbeefb095590532cbbbe33b,https://review.opendev.org/108188,Refactor ssh actions used for node erasing,"Refactor ssh actions used for node erasing  Patch fixes few issues with erasing drives while stopping deployment during provisioning, e.g.:  * executing dd with non-existing under    debootstrap shell option 'flag';  * broken check of block device major code;  * incorrect order of arguments, which are passed    to erase_data function; Also it implements more robust mechanizm to detect provisining or provisined node.  Change-Id: Ic6022cc4ecb405a17dbeefb095590532cbbbe33b Related-bug: #1316583 (cherry picked from commit 4bf5312f4752769b51974ee5804dd224b67a0dcf)",quality,,,,,,
openstack%2Fheat~master~I5ba8af8bcd9a1ea825534f7e91f3712153858c0d,https://review.opendev.org/99479,"This is part of the refactoring to fix the inheritance hierarchy of AutoScaleResourceGroup.  In this case, attempting to move some common functionality out of the inheritance hierarchy entirely (perhaps to the heat/scaling module).","This is part of the refactoring to fix the inheritance hierarchy of AutoScaleResourceGroup.  In this case, attempting to move some common functionality out of the inheritance hierarchy entirely (perhaps to the heat/scaling module).  Calculating the new capacity, taking min/max constraints into account, seems like some common functionality to any type of scaling.  Also, bounds checking was previously done in both handle_update and in adjust, and it seems like it could be done in just one place.  Change-Id: I5ba8af8bcd9a1ea825534f7e91f3712153858c0d",quality,,,,,,
x%2Fentropy~master~Ie29a1743e6cb5960628e0b183e954de2865afcac,https://review.opendev.org/98934,Refactor some code for backend abstraction,"Refactor some code for backend abstraction  The function get_cfg_file, when using a db, will actually return a table. So rename it to something backend-agnostic  Change-Id: Ie29a1743e6cb5960628e0b183e954de2865afcac",refactoring,,,,,,
x%2Fentropy~master~Ie29a1743e6cb5960628e0b183e954de2865afcac,https://review.opendev.org/98934,Refactor some code for backend abstraction,"Refactor some code for backend abstraction  The function get_cfg_file, when using a db, will actually return a table. So rename it to something backend-agnostic  Change-Id: Ie29a1743e6cb5960628e0b183e954de2865afcac",quality,,,,,,
openstack%2Ftrove~master~I9b7c13e166d98c75f3cad1bf92c23a13a06557fd,https://review.opendev.org/80020,Refactor mysql and redis apps,Refactor mysqla and redis apps  Reasons:  - each time mysql and redis manager and    backup/restore strategies instantiate    mysql/redis app object. This is not    correct since mysql app doesn't change    while guest is working.  Changes:  - app refactoring;  - tests refactoring;  Change-Id: I9b7c13e166d98c75f3cad1bf92c23a13a06557fd Implements: blueprint refactor-database-app-guest-functionality,quality,,,,,,
openstack%2Ftrove~master~I9b7c13e166d98c75f3cad1bf92c23a13a06557fd,https://review.opendev.org/80020,Refactor mysql and redis apps,Refactor mysqla and redis apps  Reasons:  - each time mysql and redis manager and    backup/restore strategies instantiate    mysql/redis app object. This is not    correct since mysql app doesn't change    while guest is working.  Changes:  - app refactoring;  - tests refactoring;  Change-Id: I9b7c13e166d98c75f3cad1bf92c23a13a06557fd Implements: blueprint refactor-database-app-guest-functionality,testing,,,,,,
openstack%2Fkeystone~master~I881545d7492288555d299aa8050fe4e98a48533e,https://review.opendev.org/85571,Refactor: move federation functions to federation utils,Refactor: move federation functions to federation utils  Some of the functions created in keystone.auth.plugins.saml2 can be re-used for other federation protocols that are supported in the future. Propose moving them to keystone.contrib.federation.utils.  Change-Id: I881545d7492288555d299aa8050fe4e98a48533e,quality,,,,,,
openstack%2Fkeystone~master~I881545d7492288555d299aa8050fe4e98a48533e,https://review.opendev.org/85571,Refactor: move federation functions to federation utils,Refactor: move federation functions to federation utils  Some of the functions created in keystone.auth.plugins.saml2 can be re-used for other federation protocols that are supported in the future. Propose moving them to keystone.contrib.federation.utils.  Change-Id: I881545d7492288555d299aa8050fe4e98a48533e,objective,,,,,,
openstack%2Fswift~master~Ib88ee8f3aa9d1915eb115b6d4982bd8c4270db60,https://review.opendev.org/51242,Refactor proxy/controllers obj & base http code,"Refactor proxy/controllers obj & base http code  This is one of a set of patches implementing a container-forwarding feature. (see https://blueprints.launchpad.net/swift/+spec/cluster-federation)  Refactoring enables reuse of the http code in GETorHEAD_base and object PUT. Container_forwarding middleware needs to send requests to another proxy instead of the usual backend servers: refactored code enables to avoid code duplication and guarantees that middleware manages connections (closing down, etc.) as the proxy does.  Main changes: - server.py: shows how proxy-server calls back container_forwarding middleware, if present, to give it a handle on the newly created Controller object - base.py: refactoring of GETorHEAD_base without any mods - obj.py: PUT split into two extra methods and _connect_put_node modified to return a handle on connection object in all cases so that response with status > 400 can be returned to the client from the target proxy in newly created PUT_send - buffered_http: only add device/partition to the path if they are set. container_forwarding needs to forward the request to target proxy with the same path_info it received.  Additional code: - fake middleware: introduces method forward_request() that is used by the real container_forwarding middleware. This method uses a new locally defined ring with only one node (the target proxy) and no replication. It also illustrates how the middleware calls the refactored methods on the controller object using that ring. This middleware is for helping the review process only and will not be part of the final patch. Its basic functionality is to forward all requests to a configured target cluster. - functional test: simple tests for the fake middleware, testing basic operations such as create/delete containers/object.  Change-Id: Ib88ee8f3aa9d1915eb115b6d4982bd8c4270db60 Implements: blueprint cluster-federation",quality,,,,,,
openstack%2Fswift~master~Ib88ee8f3aa9d1915eb115b6d4982bd8c4270db60,https://review.opendev.org/51242,Refactor proxy/controllers obj & base http code,"Refactor proxy/controllers obj & base http code  This is one of a set of patches implementing a container-forwarding feature. (see https://blueprints.launchpad.net/swift/+spec/cluster-federation)  Refactoring enables reuse of the http code in GETorHEAD_base and object PUT. Container_forwarding middleware needs to send requests to another proxy instead of the usual backend servers: refactored code enables to avoid code duplication and guarantees that middleware manages connections (closing down, etc.) as the proxy does.  Main changes: - server.py: shows how proxy-server calls back container_forwarding middleware, if present, to give it a handle on the newly created Controller object - base.py: refactoring of GETorHEAD_base without any mods - obj.py: PUT split into two extra methods and _connect_put_node modified to return a handle on connection object in all cases so that response with status > 400 can be returned to the client from the target proxy in newly created PUT_send - buffered_http: only add device/partition to the path if they are set. container_forwarding needs to forward the request to target proxy with the same path_info it received.  Additional code: - fake middleware: introduces method forward_request() that is used by the real container_forwarding middleware. This method uses a new locally defined ring with only one node (the target proxy) and no replication. It also illustrates how the middleware calls the refactored methods on the controller object using that ring. This middleware is for helping the review process only and will not be part of the final patch. Its basic functionality is to forward all requests to a configured target cluster. - functional test: simple tests for the fake middleware, testing basic operations such as create/delete containers/object.  Change-Id: Ib88ee8f3aa9d1915eb115b6d4982bd8c4270db60 Implements: blueprint cluster-federation",objective,,,,,,
openstack%2Fkeystone~master~I9c8f82d500bcff3dd82a34a18b5f76813fbc4d4a,https://review.opendev.org/72601,Refactor trusts format expires_at,"Refactor trusts format expires_at  Formatting a trusts expires_at was done in two distinct places, to achieve the same result. Give format_expires_at it's own function, and let other functions call it, as necessary.  Change-Id: I9c8f82d500bcff3dd82a34a18b5f76813fbc4d4a",quality,,,,,,
openstack%2Fkeystone~master~I9c8f82d500bcff3dd82a34a18b5f76813fbc4d4a,https://review.opendev.org/72601,Refactor trusts format expires_at,"Refactor trusts format expires_at  Formatting a trusts expires_at was done in two distinct places, to achieve the same result. Give format_expires_at it's own function, and let other functions call it, as necessary.  Change-Id: I9c8f82d500bcff3dd82a34a18b5f76813fbc4d4a",refactoring,,,,,,
openstack%2Ffuel-ostf~master~I74a99053273af7c8257cc8775d05d05e3387e9b2,https://review.opendev.org/60239,Tests refactoring for ci,Tests refactoring for ci  Function setUpPackage() from tests/__init__.py was modified: ostf-server setup was added as child process via subprocess.Process() construction so that now both unit and functional tests can be run without any pre setup of fake ostf-server nor nailgunmimic because these actions are managed now by nose.  Change-Id: I74a99053273af7c8257cc8775d05d05e3387e9b2,testing,,,,,,
openstack%2Fnova~master~If3249bda75719b957ded015d68e9b2f6f2347723,https://review.opendev.org/56198,"Refactoring of Quota system, Added guard objects functionality","Refactoring of Quota system, Added guard objects functionality  Current quota implementation is quite complicated and error prone. We should try to make quota usage more transparent to make it simpler By using object guard we can simplify error handling in quota API.  This change is the first example of how guard objects can be used. Later same approach can be used to refactor most of the quota usages  Change-Id: If3249bda75719b957ded015d68e9b2f6f2347723",quality,,,,,,
openstack%2Fnova~master~I333b0cf3660d747b744b431d4547fb066f9ad451,https://review.opendev.org/42965,Refactoring powervm blockdev for configdrive usage,Refactoring powervm blockdev for configdrive usage  Refactored blockdev module to reuse copy_image_file functionality regardless of implementation being Local Adapter now or something else in the future. Moving copy_image_file and its dependencies to base class.  Also renamed local md5sum functions to match name of remote md5sum function.  Implements bp powervm-configdrive  Change-Id: I333b0cf3660d747b744b431d4547fb066f9ad451,quality,,,,,,
openstack%2Fnova~master~I333b0cf3660d747b744b431d4547fb066f9ad451,https://review.opendev.org/42965,Refactoring powervm blockdev for configdrive usage,Refactoring powervm blockdev for configdrive usage  Refactored blockdev module to reuse copy_image_file functionality regardless of implementation being Local Adapter now or something else in the future. Moving copy_image_file and its dependencies to base class.  Also renamed local md5sum functions to match name of remote md5sum function.  Implements bp powervm-configdrive  Change-Id: I333b0cf3660d747b744b431d4547fb066f9ad451,objective,,,,,,
openstack%2Fnova~master~I333b0cf3660d747b744b431d4547fb066f9ad451,https://review.opendev.org/42965,Refactoring powervm blockdev for configdrive usage,Refactoring powervm blockdev for configdrive usage  Refactored blockdev module to reuse copy_image_file functionality regardless of implementation being Local Adapter now or something else in the future. Moving copy_image_file and its dependencies to base class.  Also renamed local md5sum functions to match name of remote md5sum function.  Implements bp powervm-configdrive  Change-Id: I333b0cf3660d747b744b431d4547fb066f9ad451,refactoring,,,,,,
openstack%2Ftempest~master~I5bbedf01ae1da7b32ab54b2793eb714b2f631c25,https://review.opendev.org/48009,Refactor and extends the functionality of the TempestConfig,"Refactor and extends the functionality of the TempestConfig  This patch refactor config.py to remove duplicate functionality. Also, it adds argument passing into the TempestConfig to allow future changes to the config using CLI arguments.  Change-Id: I5bbedf01ae1da7b32ab54b2793eb714b2f631c25",objective,,,,,,
openstack%2Ftempest~master~I5bbedf01ae1da7b32ab54b2793eb714b2f631c25,https://review.opendev.org/48009,Refactor and extends the functionality of the TempestConfig,"Refactor and extends the functionality of the TempestConfig  This patch refactor config.py to remove duplicate functionality. Also, it adds argument passing into the TempestConfig to allow future changes to the config using CLI arguments.  Change-Id: I5bbedf01ae1da7b32ab54b2793eb714b2f631c25",quality,,,,,,
openstack%2Fnova~master~Ia25c66a79b85890d09fb8f4aadc59b472fc7fbe6,https://review.opendev.org/43638,Refactor ownership check during instance delete,WIP Refactor ownership check during delete  This change refactors how the project_id and user_id are chosen during a delete operation.  The two checks are refactored into two new helper functions and duplicate code is replaced with said helpers.  Note: this has been future-proofed by using the openstack-common names 'tenant' and 'user' instead of the nova 'project_id' and 'user_id'. I'd like to hear what others think about this.  Change-Id: Ia25c66a79b85890d09fb8f4aadc59b472fc7fbe6,quality,,,,,,
openstack%2Fnova~master~Ia25c66a79b85890d09fb8f4aadc59b472fc7fbe6,https://review.opendev.org/43638,Refactor ownership check during instance delete,WIP Refactor ownership check during delete  This change refactors how the project_id and user_id are chosen during a delete operation.  The two checks are refactored into two new helper functions and duplicate code is replaced with said helpers.  Note: this has been future-proofed by using the openstack-common names 'tenant' and 'user' instead of the nova 'project_id' and 'user_id'. I'd like to hear what others think about this.  Change-Id: Ia25c66a79b85890d09fb8f4aadc59b472fc7fbe6,testing,,,,,,
openstack%2Fcinder~master~Id21cb677d041af3c9ba414fefcb0f6ac6bca0f3a,https://review.opendev.org/38951,Refactor Huawei iscsi driver to better use SSHPool,"Refactor Huawei iscsi driver to better use SSHPool  In previous code, Huawei iscsi driver does a lot of tricks on code to support auto-switching controller when failed. For example, they changed the server_ip of a SSHPool during runtime; They use SSHPool.get() instead of SSHPool.item(), which is not suggest to use after Python 2.5  In this patch, I refactor the code in a cleaner way, including:     1. Allocating two seperate pools , one for each controller         During failure, we just need to switch the pool we use, no need         to lock the pool and changing the ip of a existing pool      2. Use SSHPool.item() instead of SSHPool.get()         Per suggested by Eventlet, refer to         https://github.com/eventlet/eventlet/blob/master/eventlet/pools.py#L64      3. Cleanup the SSHConn.create()         Since we don't need to manually close a client, it's OK for us to         use the infinite socket timeout, so just use the create() method         in SSHPool      4. Cleanup unused function in utils.py          SSHPool.remove() is created and used only by Huawei driver, it's         bugly(fixed in grizzly but not in master), since we don't need it,         just remove it.          utils.create_channel is also created and only used by this driver,         it could be replace by client.invoke_shell(width=XX, height=XX)  Change-Id: Id21cb677d041af3c9ba414fefcb0f6ac6bca0f3a",quality,,,,,,
openstack%2Fcinder~master~Id21cb677d041af3c9ba414fefcb0f6ac6bca0f3a,https://review.opendev.org/38951,Refactor Huawei iscsi driver to better use SSHPool,"Refactor Huawei iscsi driver to better use SSHPool  In previous code, Huawei iscsi driver does a lot of tricks on code to support auto-switching controller when failed. For example, they changed the server_ip of a SSHPool during runtime; They use SSHPool.get() instead of SSHPool.item(), which is not suggest to use after Python 2.5  In this patch, I refactor the code in a cleaner way, including:     1. Allocating two seperate pools , one for each controller         During failure, we just need to switch the pool we use, no need         to lock the pool and changing the ip of a existing pool      2. Use SSHPool.item() instead of SSHPool.get()         Per suggested by Eventlet, refer to         https://github.com/eventlet/eventlet/blob/master/eventlet/pools.py#L64      3. Cleanup the SSHConn.create()         Since we don't need to manually close a client, it's OK for us to         use the infinite socket timeout, so just use the create() method         in SSHPool      4. Cleanup unused function in utils.py          SSHPool.remove() is created and used only by Huawei driver, it's         bugly(fixed in grizzly but not in master), since we don't need it,         just remove it.          utils.create_channel is also created and only used by this driver,         it could be replace by client.invoke_shell(width=XX, height=XX)  Change-Id: Id21cb677d041af3c9ba414fefcb0f6ac6bca0f3a",objective,,,,,,
openstack%2Fnova~master~Ia89360ed8f91a6ef5c9835512aa2a6b34d438196,https://review.opendev.org/33193,Refactoring database backend checks,Refactoring database backend checks  Generalized and combined individual database checks for mysql and postgres into one _have_database function and passing backend.  Change-Id: Ia89360ed8f91a6ef5c9835512aa2a6b34d438196,quality,,,,,,
x%2Finception~master~I2336a092e44adf6a3f30e0284db1d930c41f1333,https://review.opendev.org/30208,Refactor chef's add run_list function,Refactor chef's add run_list function  Change-Id: I2336a092e44adf6a3f30e0284db1d930c41f1333,refactoring,,,,,,
openstack%2Fnova~master~Ideb9ff6f96f0db88d88d0100f0f1a9c693f70a52,https://review.opendev.org/18071,Refactor lvm image creation,Refactor lvm image creation  When creating an lvm image we were checking to see if there was enough free space in the volume group in order to create an iamge. However we were not checking to see if volume group was large enough to contain an image as well.  Adds a new function called volume_group_size which checks the volume_group size.  Also raises an error if lvm image creation fails.  Change-Id: Ideb9ff6f96f0db88d88d0100f0f1a9c693f70a52 Signed-off-by: Chuck Short <chuck.short@canonical.com>,objective,,,,,,
openstack%2Fkeystone~master~I51b1b13f66d6e13e3bc56bc96c0fdd224773d53c,https://review.opendev.org/4549,Refactor sql options avoid using CONF,"Refactor sql options avoid using CONF  Pass a conf instance to many of the sql functions so that CONF can be completely removed in subsequent commits.  Move the option definitions into a sql.opts module since both sql.core and sql.migration rely on the same options. In theory, this could make it easier for someone to copy and re-use either of those modules individually.  Also remove sql.min_pool_size, sql.max_pool_size and sql.pool_timeout since they are unused.  Change-Id: I51b1b13f66d6e13e3bc56bc96c0fdd224773d53c",quality,,,,,,
openstack%2Fkeystone~master~I51b1b13f66d6e13e3bc56bc96c0fdd224773d53c,https://review.opendev.org/4549,Refactor sql options avoid using CONF,"Refactor sql options avoid using CONF  Pass a conf instance to many of the sql functions so that CONF can be completely removed in subsequent commits.  Move the option definitions into a sql.opts module since both sql.core and sql.migration rely on the same options. In theory, this could make it easier for someone to copy and re-use either of those modules individually.  Also remove sql.min_pool_size, sql.max_pool_size and sql.pool_timeout since they are unused.  Change-Id: I51b1b13f66d6e13e3bc56bc96c0fdd224773d53c",objective,,,,,,
openstack%2Fkeystone~master~I6f843f245cef3a99a03dba398e3d02c7cc356525,https://review.opendev.org/5272,Refactor policy rules driver to avoid global CONF,Refactor policy rules driver to avoid global CONF  Move the options related to this driver into the driver class and only use them within the class.  Add a new class to encapsulate the logic of the policy cache and use helper methods to interact with the global instance of that cache.  This refactoring has a nice side-effect of cleaning up the unit tests fairly significantly. No need for teardown methods to reset state and more easily disable loading the policy file by stubbing out the load_policy function.  Change-Id: I6f843f245cef3a99a03dba398e3d02c7cc356525,quality,,,,,,
openstack%2Fkeystone~master~I6f843f245cef3a99a03dba398e3d02c7cc356525,https://review.opendev.org/5272,Refactor policy rules driver to avoid global CONF,Refactor policy rules driver to avoid global CONF  Move the options related to this driver into the driver class and only use them within the class.  Add a new class to encapsulate the logic of the policy cache and use helper methods to interact with the global instance of that cache.  This refactoring has a nice side-effect of cleaning up the unit tests fairly significantly. No need for teardown methods to reset state and more easily disable loading the policy file by stubbing out the load_policy function.  Change-Id: I6f843f245cef3a99a03dba398e3d02c7cc356525,refactoring,,,,,,
openstack%2Fkeystone~master~I2da18110247a8d06f4c8e485ab877ffe133175bf,https://review.opendev.org/5525,Refactor non-global config (in one giant patch),"Refactor non-global config (in one giant patch)  Remove cfg wrappers from keystone.config      The idea with the cfg module is that we can have all projects using not     only the same code for config, but using similar idioms that will be     familiar to anyone working on OpenStack.      The register_*() wrappers don't add much in the way of convenience, but     if we really want them, we can add them to cfg itself.      Subsequent commits in this series remove the global CONF object and     move option definitions closer to where the option is used. The end     result is worth considering as well as this initial baby step.  Refactor password utils into separate module      The code is so self-contained, it seems a shame to have it lumped into     a generic utils module.      We make hash_password() use a supplied conf instance rather than CONF     to help us remove CONF completely in subsequent commits where the conf     instance will be an attribute of the identity drivers.      A default value for crypt_strength is also added to keystone.conf.  Refactor sql options avoid using CONF      Pass a conf instance to many of the sql functions so that CONF can     be completely removed in subsequent commits.      Move the option definitions into a sql.opts module since both sql.core     and sql.migration rely on the same options. In theory, this could make     it easier for someone to copy and re-use either of those modules     individually.      Also remove sql.min_pool_size, sql.max_pool_size and sql.pool_timeout     since they are unused.  memcache token backend refactoring      A trivial refactoring to isolate the memcache.servers option in the     memcache.Token class.      In a subsequent commit, the conf instance will be an attribute of     token.Driver and the lameness of using using config.CONF will be     removed.      Also add a default value for it in keystone.conf.  Refactor ldap identity backend options      Move the options definitions closer to where they are used, add default     values to the option definitions and rely on them, reconcile defaults     in the code with defaults in the config file.  Re-factor how service driver options are handled      Define the {catalog,ec2,identity,policy,token}.driver options in     the manager class which use them. The base manager class registers     them.      Also supply a conf instance to the constructor of each of these     manager classes so that the global CONF variable can be removed in     a subsequent commit.  Refactor admin_token handling      Move the admin_token option definition to the AdminTokenAuthMiddleware     class where it is used.      Also, explicitly set the admin_token value in the tests to make things     more clear.  Refactor port options      The admin_port and public_port options are only used in the tests and     in keystone-all. Move their definitions to the wsgi module and add     a helper method for registering them.      The compute port option is only used in the templated catalog backend,     so move its definition there.  Refactor policy rules driver to avoid global CONF      Move the options related to this driver into the driver class and only     use them within the class.      Add a new class to encapsulate the logic of the policy cache and use     helper methods to interact with the global instance of that cache.      This refactoring has a nice side-effect of cleaning up the unit tests     fairly significantly. No need for teardown methods to reset state and     more easily disable loading the policy file by stubbing out the     load_policy function.  Remove use of global CONF in service drivers      Make each of the service drivers take a conf instance paramater to its     constructor and use that instead of CONF.      The use of super(..., self).__init__() is avoided because of the mess     it causes with multiple inheritance in e.g. kvs.Identity where you     want identity.Driver to be supplied a conf instance from the preceeding     constructor in the MRO (i.e. kvs.Base).  Pass conf instance to sql.Base constructor      Removes use of CONF from common.sql completely.  Pass conf instance to WSGI app constructors      So that we can remove all CONF references from our WSGI apps, pass a     conf instance to their constructors. We need to make sure that e.g.     add_routes() is only called on a router app after its base class     constructor has been called and its conf attribute set.  Eliminate a bunch of CONF usage in cli and tests      This is a fairly random collection of changes, but it weanes the code     off CONF usage some more.  Add generic PasteDeploy factories from glance      PasteDeploy has no way of passing parameters to an app or filter     factory constructor except through options in the config file.      We want to pass a conf instance to these constructors, so we do a     lame trick where we stuff a conf instance into a global variable     before the factory is run and have the factory pass it on to the     constructor. Rather than duplicate the lame hack in a bunch of     places we have a single generic set of factories and do it there.      This code is copied straight from glance. It should eventually live     in openstack-common.  Remove last few uses of CONF      Only a few refernences to CONF exist at this point in the cli code     and tests.      Also, the need for ConfigMixin is pretty much eliminated at this     point since we can just pass the default config files list to the     ConfigOpts constructor.  Change-Id: I2da18110247a8d06f4c8e485ab877ffe133175bf",quality,,,,,,
openstack%2Fkeystone~master~I2da18110247a8d06f4c8e485ab877ffe133175bf,https://review.opendev.org/5525,Refactor non-global config (in one giant patch),"Refactor non-global config (in one giant patch)  Remove cfg wrappers from keystone.config      The idea with the cfg module is that we can have all projects using not     only the same code for config, but using similar idioms that will be     familiar to anyone working on OpenStack.      The register_*() wrappers don't add much in the way of convenience, but     if we really want them, we can add them to cfg itself.      Subsequent commits in this series remove the global CONF object and     move option definitions closer to where the option is used. The end     result is worth considering as well as this initial baby step.  Refactor password utils into separate module      The code is so self-contained, it seems a shame to have it lumped into     a generic utils module.      We make hash_password() use a supplied conf instance rather than CONF     to help us remove CONF completely in subsequent commits where the conf     instance will be an attribute of the identity drivers.      A default value for crypt_strength is also added to keystone.conf.  Refactor sql options avoid using CONF      Pass a conf instance to many of the sql functions so that CONF can     be completely removed in subsequent commits.      Move the option definitions into a sql.opts module since both sql.core     and sql.migration rely on the same options. In theory, this could make     it easier for someone to copy and re-use either of those modules     individually.      Also remove sql.min_pool_size, sql.max_pool_size and sql.pool_timeout     since they are unused.  memcache token backend refactoring      A trivial refactoring to isolate the memcache.servers option in the     memcache.Token class.      In a subsequent commit, the conf instance will be an attribute of     token.Driver and the lameness of using using config.CONF will be     removed.      Also add a default value for it in keystone.conf.  Refactor ldap identity backend options      Move the options definitions closer to where they are used, add default     values to the option definitions and rely on them, reconcile defaults     in the code with defaults in the config file.  Re-factor how service driver options are handled      Define the {catalog,ec2,identity,policy,token}.driver options in     the manager class which use them. The base manager class registers     them.      Also supply a conf instance to the constructor of each of these     manager classes so that the global CONF variable can be removed in     a subsequent commit.  Refactor admin_token handling      Move the admin_token option definition to the AdminTokenAuthMiddleware     class where it is used.      Also, explicitly set the admin_token value in the tests to make things     more clear.  Refactor port options      The admin_port and public_port options are only used in the tests and     in keystone-all. Move their definitions to the wsgi module and add     a helper method for registering them.      The compute port option is only used in the templated catalog backend,     so move its definition there.  Refactor policy rules driver to avoid global CONF      Move the options related to this driver into the driver class and only     use them within the class.      Add a new class to encapsulate the logic of the policy cache and use     helper methods to interact with the global instance of that cache.      This refactoring has a nice side-effect of cleaning up the unit tests     fairly significantly. No need for teardown methods to reset state and     more easily disable loading the policy file by stubbing out the     load_policy function.  Remove use of global CONF in service drivers      Make each of the service drivers take a conf instance paramater to its     constructor and use that instead of CONF.      The use of super(..., self).__init__() is avoided because of the mess     it causes with multiple inheritance in e.g. kvs.Identity where you     want identity.Driver to be supplied a conf instance from the preceeding     constructor in the MRO (i.e. kvs.Base).  Pass conf instance to sql.Base constructor      Removes use of CONF from common.sql completely.  Pass conf instance to WSGI app constructors      So that we can remove all CONF references from our WSGI apps, pass a     conf instance to their constructors. We need to make sure that e.g.     add_routes() is only called on a router app after its base class     constructor has been called and its conf attribute set.  Eliminate a bunch of CONF usage in cli and tests      This is a fairly random collection of changes, but it weanes the code     off CONF usage some more.  Add generic PasteDeploy factories from glance      PasteDeploy has no way of passing parameters to an app or filter     factory constructor except through options in the config file.      We want to pass a conf instance to these constructors, so we do a     lame trick where we stuff a conf instance into a global variable     before the factory is run and have the factory pass it on to the     constructor. Rather than duplicate the lame hack in a bunch of     places we have a single generic set of factories and do it there.      This code is copied straight from glance. It should eventually live     in openstack-common.  Remove last few uses of CONF      Only a few refernences to CONF exist at this point in the cli code     and tests.      Also, the need for ConfigMixin is pretty much eliminated at this     point since we can just pass the default config files list to the     ConfigOpts constructor.  Change-Id: I2da18110247a8d06f4c8e485ab877ffe133175bf",testing,,,,,,
openstack%2Fkeystone~master~I2da18110247a8d06f4c8e485ab877ffe133175bf,https://review.opendev.org/5525,Refactor non-global config (in one giant patch),"Refactor non-global config (in one giant patch)  Remove cfg wrappers from keystone.config      The idea with the cfg module is that we can have all projects using not     only the same code for config, but using similar idioms that will be     familiar to anyone working on OpenStack.      The register_*() wrappers don't add much in the way of convenience, but     if we really want them, we can add them to cfg itself.      Subsequent commits in this series remove the global CONF object and     move option definitions closer to where the option is used. The end     result is worth considering as well as this initial baby step.  Refactor password utils into separate module      The code is so self-contained, it seems a shame to have it lumped into     a generic utils module.      We make hash_password() use a supplied conf instance rather than CONF     to help us remove CONF completely in subsequent commits where the conf     instance will be an attribute of the identity drivers.      A default value for crypt_strength is also added to keystone.conf.  Refactor sql options avoid using CONF      Pass a conf instance to many of the sql functions so that CONF can     be completely removed in subsequent commits.      Move the option definitions into a sql.opts module since both sql.core     and sql.migration rely on the same options. In theory, this could make     it easier for someone to copy and re-use either of those modules     individually.      Also remove sql.min_pool_size, sql.max_pool_size and sql.pool_timeout     since they are unused.  memcache token backend refactoring      A trivial refactoring to isolate the memcache.servers option in the     memcache.Token class.      In a subsequent commit, the conf instance will be an attribute of     token.Driver and the lameness of using using config.CONF will be     removed.      Also add a default value for it in keystone.conf.  Refactor ldap identity backend options      Move the options definitions closer to where they are used, add default     values to the option definitions and rely on them, reconcile defaults     in the code with defaults in the config file.  Re-factor how service driver options are handled      Define the {catalog,ec2,identity,policy,token}.driver options in     the manager class which use them. The base manager class registers     them.      Also supply a conf instance to the constructor of each of these     manager classes so that the global CONF variable can be removed in     a subsequent commit.  Refactor admin_token handling      Move the admin_token option definition to the AdminTokenAuthMiddleware     class where it is used.      Also, explicitly set the admin_token value in the tests to make things     more clear.  Refactor port options      The admin_port and public_port options are only used in the tests and     in keystone-all. Move their definitions to the wsgi module and add     a helper method for registering them.      The compute port option is only used in the templated catalog backend,     so move its definition there.  Refactor policy rules driver to avoid global CONF      Move the options related to this driver into the driver class and only     use them within the class.      Add a new class to encapsulate the logic of the policy cache and use     helper methods to interact with the global instance of that cache.      This refactoring has a nice side-effect of cleaning up the unit tests     fairly significantly. No need for teardown methods to reset state and     more easily disable loading the policy file by stubbing out the     load_policy function.  Remove use of global CONF in service drivers      Make each of the service drivers take a conf instance paramater to its     constructor and use that instead of CONF.      The use of super(..., self).__init__() is avoided because of the mess     it causes with multiple inheritance in e.g. kvs.Identity where you     want identity.Driver to be supplied a conf instance from the preceeding     constructor in the MRO (i.e. kvs.Base).  Pass conf instance to sql.Base constructor      Removes use of CONF from common.sql completely.  Pass conf instance to WSGI app constructors      So that we can remove all CONF references from our WSGI apps, pass a     conf instance to their constructors. We need to make sure that e.g.     add_routes() is only called on a router app after its base class     constructor has been called and its conf attribute set.  Eliminate a bunch of CONF usage in cli and tests      This is a fairly random collection of changes, but it weanes the code     off CONF usage some more.  Add generic PasteDeploy factories from glance      PasteDeploy has no way of passing parameters to an app or filter     factory constructor except through options in the config file.      We want to pass a conf instance to these constructors, so we do a     lame trick where we stuff a conf instance into a global variable     before the factory is run and have the factory pass it on to the     constructor. Rather than duplicate the lame hack in a bunch of     places we have a single generic set of factories and do it there.      This code is copied straight from glance. It should eventually live     in openstack-common.  Remove last few uses of CONF      Only a few refernences to CONF exist at this point in the cli code     and tests.      Also, the need for ConfigMixin is pretty much eliminated at this     point since we can just pass the default config files list to the     ConfigOpts constructor.  Change-Id: I2da18110247a8d06f4c8e485ab877ffe133175bf",objective,,,,,,
openstack%2Fkeystone~master~I2da18110247a8d06f4c8e485ab877ffe133175bf,https://review.opendev.org/5525,Refactor non-global config (in one giant patch),"Refactor non-global config (in one giant patch)  Remove cfg wrappers from keystone.config      The idea with the cfg module is that we can have all projects using not     only the same code for config, but using similar idioms that will be     familiar to anyone working on OpenStack.      The register_*() wrappers don't add much in the way of convenience, but     if we really want them, we can add them to cfg itself.      Subsequent commits in this series remove the global CONF object and     move option definitions closer to where the option is used. The end     result is worth considering as well as this initial baby step.  Refactor password utils into separate module      The code is so self-contained, it seems a shame to have it lumped into     a generic utils module.      We make hash_password() use a supplied conf instance rather than CONF     to help us remove CONF completely in subsequent commits where the conf     instance will be an attribute of the identity drivers.      A default value for crypt_strength is also added to keystone.conf.  Refactor sql options avoid using CONF      Pass a conf instance to many of the sql functions so that CONF can     be completely removed in subsequent commits.      Move the option definitions into a sql.opts module since both sql.core     and sql.migration rely on the same options. In theory, this could make     it easier for someone to copy and re-use either of those modules     individually.      Also remove sql.min_pool_size, sql.max_pool_size and sql.pool_timeout     since they are unused.  memcache token backend refactoring      A trivial refactoring to isolate the memcache.servers option in the     memcache.Token class.      In a subsequent commit, the conf instance will be an attribute of     token.Driver and the lameness of using using config.CONF will be     removed.      Also add a default value for it in keystone.conf.  Refactor ldap identity backend options      Move the options definitions closer to where they are used, add default     values to the option definitions and rely on them, reconcile defaults     in the code with defaults in the config file.  Re-factor how service driver options are handled      Define the {catalog,ec2,identity,policy,token}.driver options in     the manager class which use them. The base manager class registers     them.      Also supply a conf instance to the constructor of each of these     manager classes so that the global CONF variable can be removed in     a subsequent commit.  Refactor admin_token handling      Move the admin_token option definition to the AdminTokenAuthMiddleware     class where it is used.      Also, explicitly set the admin_token value in the tests to make things     more clear.  Refactor port options      The admin_port and public_port options are only used in the tests and     in keystone-all. Move their definitions to the wsgi module and add     a helper method for registering them.      The compute port option is only used in the templated catalog backend,     so move its definition there.  Refactor policy rules driver to avoid global CONF      Move the options related to this driver into the driver class and only     use them within the class.      Add a new class to encapsulate the logic of the policy cache and use     helper methods to interact with the global instance of that cache.      This refactoring has a nice side-effect of cleaning up the unit tests     fairly significantly. No need for teardown methods to reset state and     more easily disable loading the policy file by stubbing out the     load_policy function.  Remove use of global CONF in service drivers      Make each of the service drivers take a conf instance paramater to its     constructor and use that instead of CONF.      The use of super(..., self).__init__() is avoided because of the mess     it causes with multiple inheritance in e.g. kvs.Identity where you     want identity.Driver to be supplied a conf instance from the preceeding     constructor in the MRO (i.e. kvs.Base).  Pass conf instance to sql.Base constructor      Removes use of CONF from common.sql completely.  Pass conf instance to WSGI app constructors      So that we can remove all CONF references from our WSGI apps, pass a     conf instance to their constructors. We need to make sure that e.g.     add_routes() is only called on a router app after its base class     constructor has been called and its conf attribute set.  Eliminate a bunch of CONF usage in cli and tests      This is a fairly random collection of changes, but it weanes the code     off CONF usage some more.  Add generic PasteDeploy factories from glance      PasteDeploy has no way of passing parameters to an app or filter     factory constructor except through options in the config file.      We want to pass a conf instance to these constructors, so we do a     lame trick where we stuff a conf instance into a global variable     before the factory is run and have the factory pass it on to the     constructor. Rather than duplicate the lame hack in a bunch of     places we have a single generic set of factories and do it there.      This code is copied straight from glance. It should eventually live     in openstack-common.  Remove last few uses of CONF      Only a few refernences to CONF exist at this point in the cli code     and tests.      Also, the need for ConfigMixin is pretty much eliminated at this     point since we can just pass the default config files list to the     ConfigOpts constructor.  Change-Id: I2da18110247a8d06f4c8e485ab877ffe133175bf",refactoring,,,,,,
openstack%2Fopenstack-helm-infra~master~I86463ac464ba82c3adb5e5e14bedfd3765b7e94a,https://review.opendev.org/679536,[WIP][RFC] Refactor the join list snippet,"[WIP][RFC] Refactor the join list snippet  There seems to be desire to add variance to the list join function. Instead of creating new ones with minor variance, this patchset provides a generalize version. Existing methods should rely on this new generic function and marked deprecated. Existing functions are left to avoid breaking existing usage.  Change-Id: I86463ac464ba82c3adb5e5e14bedfd3765b7e94a Signed-off-by: Tin Lam <tin@irrational.io>",quality,,,,,,
openstack%2Fopenstack-helm-infra~master~I99337111ae4099efa487a6da0514a166d285fae7,https://review.opendev.org/689597,Fix/Refactor osh-infra-netpol gate,Fix/Refactor osh-infra-netpol gate  This change gets the osh-infra-network-policy gate working as well as refactors it to use the feature-gates functionality that is part of other existing openstack-helm jobs in zuul.  Change-Id: I99337111ae4099efa487a6da0514a166d285fae7,quality,,,,,,
openstack%2Fopenstack-helm-infra~master~I99337111ae4099efa487a6da0514a166d285fae7,https://review.opendev.org/689597,Fix/Refactor osh-infra-netpol gate,Fix/Refactor osh-infra-netpol gate  This change gets the osh-infra-network-policy gate working as well as refactors it to use the feature-gates functionality that is part of other existing openstack-helm jobs in zuul.  Change-Id: I99337111ae4099efa487a6da0514a166d285fae7,objective,,,,,,
x%2Ftobiko~master~I88ae5aae9e28db618955b50e374ea83c3434469e,https://review.opendev.org/704101,Refactor reboot_host function,Refactor reboot_host function  Change-Id: I88ae5aae9e28db618955b50e374ea83c3434469e,refactoring,,,,,,
openstack%2Ffuel-library~master~I8b07c5850c1c8e8e28e9d96638f847e1d80fdcdb,https://review.opendev.org/415296,Refactor hosts task,Refactor hosts task  Add a function to filter out duplicate deleted hosts  Change-Id: I8b07c5850c1c8e8e28e9d96638f847e1d80fdcdb Rally-Id: [DE259451],objective,,,,,,
openstack%2Ffuel-library~master~I8b07c5850c1c8e8e28e9d96638f847e1d80fdcdb,https://review.opendev.org/415296,Refactor hosts task,Refactor hosts task  Add a function to filter out duplicate deleted hosts  Change-Id: I8b07c5850c1c8e8e28e9d96638f847e1d80fdcdb Rally-Id: [DE259451],quality,,,,,,
openstack%2Fdevstack-gate~master~I4d827bd6761ac7e9359a0ec2a9f803c52becc859,https://review.opendev.org/352674,"Add chrony time sync, small refactor","Add chrony time sync, small refactor  Switch the time sync to preferring chrony if the client is installed. While we are here, refactor this slightly into the setup function (rather than the timer start function) as it seems more like a ""setupy"" thing to be doing.  See also I5e524588417c37691b9c1f6a2d3dccdb1f2340c8 for chrony install on system-config  Change-Id: I4d827bd6761ac7e9359a0ec2a9f803c52becc859",objective,,,,,,
openstack%2Fnova~master~I121febe845e9e3906e858edbe7a34551a5c30338,https://review.opendev.org/694906,Refactor to extract Placement helper functions for functional tests.,Refactor to extract Placement helper functions for functional tests.  Change-Id: I121febe845e9e3906e858edbe7a34551a5c30338,refactoring,,,,,,
osf%2Frefstack~master~Ic681db4e2c1cb74d0e5d7f73dfa8f71c846a8dcf,https://review.opendev.org/584453,"Refactoring for future work, moving storage code out of class","Refactoring for future work, moving storage code out of class  This is common code that will be used for subunit upload code also. Making it a function rather than a class method since it does not depend on the internal state of the handler class itself and can be abstracted out.  Change-Id: Ic681db4e2c1cb74d0e5d7f73dfa8f71c846a8dcf",quality,,,,,,
openstack%2Fheat-agents~master~I5bab85beb1f0e3ba32f425ac0205278c42d9b799,https://review.opendev.org/634563,[WIP]Refactor docker cmd unit-tests,[WIP]Refactor docker cmd unit-tests  This patch propose to remove dependency around paunch in unit tests. Also refactor unit-tests and focus on function itself.  Change-Id: I5bab85beb1f0e3ba32f425ac0205278c42d9b799 Task: #29306,quality,,,,,,
openstack%2Fheat-agents~master~I5bab85beb1f0e3ba32f425ac0205278c42d9b799,https://review.opendev.org/634563,[WIP]Refactor docker cmd unit-tests,[WIP]Refactor docker cmd unit-tests  This patch propose to remove dependency around paunch in unit tests. Also refactor unit-tests and focus on function itself.  Change-Id: I5bab85beb1f0e3ba32f425ac0205278c42d9b799 Task: #29306,testing,,,,,,
openstack%2Fnova~master~I49b532cfa4ec9c2a1f0f1fe52befad643e72dbd2,https://review.opendev.org/466296,Refactor create_delete_server_with_instance_update,Refactor create_delete_server_with_instance_update  This patch refactor the create_delete_server_with_instance_update functional test.  Change-Id: I49b532cfa4ec9c2a1f0f1fe52befad643e72dbd2,testing,,,,,,
starlingx%2Finteg~master~I3aeb0e89466b818ac07acf5c15f1783ef9d92edf,https://review.opendev.org/633660,Refactor meta patch for sudo package,"Refactor meta patch for sudo package  remove 0002-spec-include-TiS-changes.patch change setting of ldap.conf to runtime via sudo.conf schema.OpenLDAP and sudoers2ldif move to sudo-config  Test: 1, Build pass and deploy multi-node, check sudo.schema and sudoers2ldif same as before 2, build-pkg --edit sudo, add stub in function sudoers_policy_deserialize_info in plugins/sudoers/policy.c to check variable path_ldap_conf, value is same as setting with configure option --with-ldap-conf-file=""%{_sysconfdir}/openldap/ldap.conf""  Story: 2004212 Task: 27726  Change-Id: I3aeb0e89466b818ac07acf5c15f1783ef9d92edf Signed-off-by: Martin, Chen <haochuan.z.chen@intel.com>",objective,,,,,,
starlingx%2Finteg~master~I3aeb0e89466b818ac07acf5c15f1783ef9d92edf,https://review.opendev.org/633660,Refactor meta patch for sudo package,"Refactor meta patch for sudo package  remove 0002-spec-include-TiS-changes.patch change setting of ldap.conf to runtime via sudo.conf schema.OpenLDAP and sudoers2ldif move to sudo-config  Test: 1, Build pass and deploy multi-node, check sudo.schema and sudoers2ldif same as before 2, build-pkg --edit sudo, add stub in function sudoers_policy_deserialize_info in plugins/sudoers/policy.c to check variable path_ldap_conf, value is same as setting with configure option --with-ldap-conf-file=""%{_sysconfdir}/openldap/ldap.conf""  Story: 2004212 Task: 27726  Change-Id: I3aeb0e89466b818ac07acf5c15f1783ef9d92edf Signed-off-by: Martin, Chen <haochuan.z.chen@intel.com>",refactoring,,,,,,
openstack%2Fstorlets~master~Id09f71ac6b57bdff0010ac2fb08760ad1ebacfd2,https://review.opendev.org/420419,WIP: Refactor functional tests,WIP: Refactor functional tests  Change-Id: Id09f71ac6b57bdff0010ac2fb08760ad1ebacfd2,testing,,,,,,
openstack%2Fstorlets~master~Id09f71ac6b57bdff0010ac2fb08760ad1ebacfd2,https://review.opendev.org/420419,WIP: Refactor functional tests,WIP: Refactor functional tests  Change-Id: Id09f71ac6b57bdff0010ac2fb08760ad1ebacfd2,refactoring,,,,,,
openstack%2Fcharm-nova-cloud-controller~master~I589f00e0f7b612611bbec8ca176e798c133b8341,https://review.opendev.org/668653,"Refactor ""unit"" to ""remote_service"" param","Refactor ""unit"" to ""remote_service"" param  When handling ssh keys and known hosts for the relation(s) to the nova-compute units, the unit is passed to many of the utility functions. The purpose of the unit param is to derive a consistent remote_service string with which to create a pair of associated known_hosts and authorized_keys files.  However, it's not obvious that this is being done, when reading the code.  This patch refactors many of those functions so that a remote_service param is passed; this has the benefit of making it clear that it's the remote_service that is being made unique (for the known_hosts and authorized keys) as well as the optional user param, but also so that the deriving of the remote_service is reduced (where possible).  Change-Id: I589f00e0f7b612611bbec8ca176e798c133b8341",quality,,,,,,
openstack%2Fcharm-nova-cloud-controller~master~I589f00e0f7b612611bbec8ca176e798c133b8341,https://review.opendev.org/668653,"Refactor ""unit"" to ""remote_service"" param","Refactor ""unit"" to ""remote_service"" param  When handling ssh keys and known hosts for the relation(s) to the nova-compute units, the unit is passed to many of the utility functions. The purpose of the unit param is to derive a consistent remote_service string with which to create a pair of associated known_hosts and authorized_keys files.  However, it's not obvious that this is being done, when reading the code.  This patch refactors many of those functions so that a remote_service param is passed; this has the benefit of making it clear that it's the remote_service that is being made unique (for the known_hosts and authorized keys) as well as the optional user param, but also so that the deriving of the remote_service is reduced (where possible).  Change-Id: I589f00e0f7b612611bbec8ca176e798c133b8341",objective,,,,,,
openstack%2Fcharm-nova-cloud-controller~master~I589f00e0f7b612611bbec8ca176e798c133b8341,https://review.opendev.org/668653,"Refactor ""unit"" to ""remote_service"" param","Refactor ""unit"" to ""remote_service"" param  When handling ssh keys and known hosts for the relation(s) to the nova-compute units, the unit is passed to many of the utility functions. The purpose of the unit param is to derive a consistent remote_service string with which to create a pair of associated known_hosts and authorized_keys files.  However, it's not obvious that this is being done, when reading the code.  This patch refactors many of those functions so that a remote_service param is passed; this has the benefit of making it clear that it's the remote_service that is being made unique (for the known_hosts and authorized keys) as well as the optional user param, but also so that the deriving of the remote_service is reduced (where possible).  Change-Id: I589f00e0f7b612611bbec8ca176e798c133b8341",objective,,,,,,
openstack%2Fheat~master~I6e70c81b9388880e00e1eccb3de634e89317289e,https://review.opendev.org/518389,Refactor heat integration tests infra,WiP refactor heat integration tests infra  devstack supports a 'test-conig' setup phase where it can setup tempest and its config appropriately.  Move the code from prepare_test_env.sh and prepare_test_network.sh directly into a heat's devstack plugin function that will be called in that phase. Couple of new devstack plugin settings are introduced as a side effect.  Change-Id: I6e70c81b9388880e00e1eccb3de634e89317289e,testing,,,,,,
openstack%2Fheat~master~I6e70c81b9388880e00e1eccb3de634e89317289e,https://review.opendev.org/518389,Refactor heat integration tests infra,WiP refactor heat integration tests infra  devstack supports a 'test-conig' setup phase where it can setup tempest and its config appropriately.  Move the code from prepare_test_env.sh and prepare_test_network.sh directly into a heat's devstack plugin function that will be called in that phase. Couple of new devstack plugin settings are introduced as a side effect.  Change-Id: I6e70c81b9388880e00e1eccb3de634e89317289e,quality,,,,,,
openstack%2Fheat~master~I6e70c81b9388880e00e1eccb3de634e89317289e,https://review.opendev.org/518389,Refactor heat integration tests infra,WiP refactor heat integration tests infra  devstack supports a 'test-conig' setup phase where it can setup tempest and its config appropriately.  Move the code from prepare_test_env.sh and prepare_test_network.sh directly into a heat's devstack plugin function that will be called in that phase. Couple of new devstack plugin settings are introduced as a side effect.  Change-Id: I6e70c81b9388880e00e1eccb3de634e89317289e,objective,,,,,,
opendev%2Fsandbox~master~I3d3a52ce3bded2559648fdf85359e94b6526d3c6,https://review.opendev.org/591205,Refactor qga(Qemu guest agent) support mechanism for windows,"Refactor qga(Qemu guest agent) support mechanism for windows  * Add looping check to ensure virtio serial device ready before starting QGA * Block unnecessary interfaces functions of QGA, only `set-user-password` left  Change-Id: I3d3a52ce3bded2559648fdf85359e94b6526d3c6",quality,,,,,,
openstack%2Fopenstack-helm-infra~master~I5305ef03f817f84f2b8993c04146d207b0b357e6,https://review.opendev.org/616678,Refactor post-run,"Refactor post-run  This simplifies post-run plays. Deployers wanting to gather logs can also do it on their machine by simply using the shell scripts in zuul.d/playbooks.  Because post-run was defined multiple times but were inheriting from the same job (osh-infra-functional), the post-run definition was moved to the base job.  Finally the gathering of the logs is only done once, avoiding ssh issues.  The previous log gathering cannot be removed until all the other jobs using the scripts are converted.  Change-Id: I5305ef03f817f84f2b8993c04146d207b0b357e6",quality,,,,,,
openstack%2Fopenstack-helm-infra~master~I5305ef03f817f84f2b8993c04146d207b0b357e6,https://review.opendev.org/616678,Refactor post-run,"Refactor post-run  This simplifies post-run plays. Deployers wanting to gather logs can also do it on their machine by simply using the shell scripts in zuul.d/playbooks.  Because post-run was defined multiple times but were inheriting from the same job (osh-infra-functional), the post-run definition was moved to the base job.  Finally the gathering of the logs is only done once, avoiding ssh issues.  The previous log gathering cannot be removed until all the other jobs using the scripts are converted.  Change-Id: I5305ef03f817f84f2b8993c04146d207b0b357e6",objective,,,,,,
openstack%2Fopenstack-helm-infra~master~I5305ef03f817f84f2b8993c04146d207b0b357e6,https://review.opendev.org/616678,Refactor post-run,"Refactor post-run  This simplifies post-run plays. Deployers wanting to gather logs can also do it on their machine by simply using the shell scripts in zuul.d/playbooks.  Because post-run was defined multiple times but were inheriting from the same job (osh-infra-functional), the post-run definition was moved to the base job.  Finally the gathering of the logs is only done once, avoiding ssh issues.  The previous log gathering cannot be removed until all the other jobs using the scripts are converted.  Change-Id: I5305ef03f817f84f2b8993c04146d207b0b357e6",objective,,,,,,
openstack%2Fpython-openstackclient~master~I20499911c2002d01f325ef75ea497b4ce58bc2aa,https://review.opendev.org/647892,Refactor test_transfer_request.py and test_snapshot.py,Refactor test_transfer_request.py and test_snapshot.py  Volume v1 tests test_transfer_request.py and test_snapshot.py are currently unable to properly skip-check due to their use of setUpClass and tearDownClass. This causes erroneous failures when volume v1 services are not present. This refactor allows the skip-check to work and aims to maintain functionality of code previously located within setUpClass and tearDownClass when and where necessary.  Change-Id: I20499911c2002d01f325ef75ea497b4ce58bc2aa Story: 2005304,objective,,,,,,
openstack%2Fpython-openstackclient~master~I20499911c2002d01f325ef75ea497b4ce58bc2aa,https://review.opendev.org/647892,Refactor test_transfer_request.py and test_snapshot.py,Refactor test_transfer_request.py and test_snapshot.py  Volume v1 tests test_transfer_request.py and test_snapshot.py are currently unable to properly skip-check due to their use of setUpClass and tearDownClass. This causes erroneous failures when volume v1 services are not present. This refactor allows the skip-check to work and aims to maintain functionality of code previously located within setUpClass and tearDownClass when and where necessary.  Change-Id: I20499911c2002d01f325ef75ea497b4ce58bc2aa Story: 2005304,quality,,,,,,
openstack%2Fpython-openstackclient~master~I20499911c2002d01f325ef75ea497b4ce58bc2aa,https://review.opendev.org/647892,Refactor test_transfer_request.py and test_snapshot.py,Refactor test_transfer_request.py and test_snapshot.py  Volume v1 tests test_transfer_request.py and test_snapshot.py are currently unable to properly skip-check due to their use of setUpClass and tearDownClass. This causes erroneous failures when volume v1 services are not present. This refactor allows the skip-check to work and aims to maintain functionality of code previously located within setUpClass and tearDownClass when and where necessary.  Change-Id: I20499911c2002d01f325ef75ea497b4ce58bc2aa Story: 2005304,objective,,,,,,
openstack%2Fnova~master~Iaa6a8c38a6603cff01d46eb37504ceeb449d6b30,https://review.opendev.org/624080,Refactor PortResourceRequestBasedSchedulingTestBase,Refactor PortResourceRequestBasedSchedulingTestBase  Make it possible to create more than on SRIOV device RP in the functional test. This capability will be used in subsequent patches.  Change-Id: Iaa6a8c38a6603cff01d46eb37504ceeb449d6b30 blueprint: bandwidth-resource-provider,testing,,,,,,
openstack%2Fnova~master~Iaa6a8c38a6603cff01d46eb37504ceeb449d6b30,https://review.opendev.org/624080,Refactor PortResourceRequestBasedSchedulingTestBase,Refactor PortResourceRequestBasedSchedulingTestBase  Make it possible to create more than on SRIOV device RP in the functional test. This capability will be used in subsequent patches.  Change-Id: Iaa6a8c38a6603cff01d46eb37504ceeb449d6b30 blueprint: bandwidth-resource-provider,quality,,,,,,
openstack%2Fnova~master~Iaa6a8c38a6603cff01d46eb37504ceeb449d6b30,https://review.opendev.org/624080,Refactor PortResourceRequestBasedSchedulingTestBase,Refactor PortResourceRequestBasedSchedulingTestBase  Make it possible to create more than on SRIOV device RP in the functional test. This capability will be used in subsequent patches.  Change-Id: Iaa6a8c38a6603cff01d46eb37504ceeb449d6b30 blueprint: bandwidth-resource-provider,objective,,,,,,
openstack%2Fsahara~master~I99eb7cbf0483699c22884d655621638de0ba0762,https://review.opendev.org/572737,Refactoring hadoop2 folder for Hadoop 2.x and Hadoop 3.x,"Refactoring hadoop2 folder for Hadoop 2.x and Hadoop 3.x  1. ""hadoop2"" floder is renamed as ""common"", the name of ""hadoop2"" floder could be confusing, because it needs to invoke function in the ""hadoop2"" floder when deploys Hadoop 3.x.  2. Less duplication can go on for the next upgrade. Reduce the amount of code under separate folders (sahara/plugins/vanilla/<version>)  Change-Id: I99eb7cbf0483699c22884d655621638de0ba0762",quality,,,,,,
openstack%2Fsahara~master~I99eb7cbf0483699c22884d655621638de0ba0762,https://review.opendev.org/572737,Refactoring hadoop2 folder for Hadoop 2.x and Hadoop 3.x,"Refactoring hadoop2 folder for Hadoop 2.x and Hadoop 3.x  1. ""hadoop2"" floder is renamed as ""common"", the name of ""hadoop2"" floder could be confusing, because it needs to invoke function in the ""hadoop2"" floder when deploys Hadoop 3.x.  2. Less duplication can go on for the next upgrade. Reduce the amount of code under separate folders (sahara/plugins/vanilla/<version>)  Change-Id: I99eb7cbf0483699c22884d655621638de0ba0762",objective,,,,,,
openstack%2Fsahara~master~I99eb7cbf0483699c22884d655621638de0ba0762,https://review.opendev.org/572737,Refactoring hadoop2 folder for Hadoop 2.x and Hadoop 3.x,"Refactoring hadoop2 folder for Hadoop 2.x and Hadoop 3.x  1. ""hadoop2"" floder is renamed as ""common"", the name of ""hadoop2"" floder could be confusing, because it needs to invoke function in the ""hadoop2"" floder when deploys Hadoop 3.x.  2. Less duplication can go on for the next upgrade. Reduce the amount of code under separate folders (sahara/plugins/vanilla/<version>)  Change-Id: I99eb7cbf0483699c22884d655621638de0ba0762",objective,,,,,,
airship%2Fdeckhand~master~I808d4f26c08e04f12cd3b5f23c44126ebdf7c1f0,https://review.opendev.org/612067,refactor: Sanitized parameters replace req.params,"refactor: Sanitized parameters replace req.params  This patch set changes sanitized_params function in deckhand.control.common to automatically replace `req.params` with the dict of sanitized params, such that an additional parameter need not be passed into controller methods and so that native falcon helper functions like:  https://falcon.readthedocs.io/en/stable/api/request_and_response.html#falcon.Request.get_param_as_bool  can be leveraged.  Change-Id: I808d4f26c08e04f12cd3b5f23c44126ebdf7c1f0",quality,,,,,,
airship%2Fdeckhand~master~I808d4f26c08e04f12cd3b5f23c44126ebdf7c1f0,https://review.opendev.org/612067,refactor: Sanitized parameters replace req.params,"refactor: Sanitized parameters replace req.params  This patch set changes sanitized_params function in deckhand.control.common to automatically replace `req.params` with the dict of sanitized params, such that an additional parameter need not be passed into controller methods and so that native falcon helper functions like:  https://falcon.readthedocs.io/en/stable/api/request_and_response.html#falcon.Request.get_param_as_bool  can be leveraged.  Change-Id: I808d4f26c08e04f12cd3b5f23c44126ebdf7c1f0",objective,,,,,,
openstack%2Fcloudkitty~master~I4fa99e40d26d813399dbfe875f4bc9e4e5af9dcd,https://review.opendev.org/404509,refactor the check_state function in orchestrator,refactor the check_state function in orchestrator  _check_state of Orchestrator and check_state of Worker are the same. this patch refactor this for deleting the _check_state of Orchestrator and changing some logical in the code.  Change-Id: I4fa99e40d26d813399dbfe875f4bc9e4e5af9dcd,quality,,,,,,
openstack%2Fswift~master~I0210a99b7f0774180937b6f8f435505b6ee151a8,https://review.opendev.org/560701,Refactor fallocate and hole punching,"Refactor fallocate and hole punching  Instead of having one function that either allocates space or deallocates it, and uses either the fallocate() or posix_fallocate() C functions for allocation, but only uses fallocate() for deallocation, and is a no-op sometimes for allocation but never for deallocation, let's try having two functions.  utils.fallocate(fd, size) allocates <size> bytes for the file referred to by <fd>. It allows for keeping a reserve of an additional N bytes or X% of the filesystem free. If neither fallocate() or posix_fallocate() C functions are avaialble, utils.fallocate() will log a warning (once only) and not actually allocate space.  utils.punch_hole(fd, offset, length) deallocates <length> bytes starting at <offset> from the file referred to by <fd>. It uses the C function fallocate(). If fallocate() is not available, calls to utils.punch_hole() will raise an exception.  This commit also gets rid of utils.FallocateWrapper() and just has two levels: utils.fallocate / utils.punch_hole have all the fancy logic in them, and utils._sys_fallocate / utils._sys_posix_fallocate are just thin wrappers around the libc functions.  Modernized the tests for utils.fallocate() and utils.punch_hole().  Change-Id: I0210a99b7f0774180937b6f8f435505b6ee151a8",quality,,,,,,
openstack%2Fswift~master~I0210a99b7f0774180937b6f8f435505b6ee151a8,https://review.opendev.org/560701,Refactor fallocate and hole punching,"Refactor fallocate and hole punching  Instead of having one function that either allocates space or deallocates it, and uses either the fallocate() or posix_fallocate() C functions for allocation, but only uses fallocate() for deallocation, and is a no-op sometimes for allocation but never for deallocation, let's try having two functions.  utils.fallocate(fd, size) allocates <size> bytes for the file referred to by <fd>. It allows for keeping a reserve of an additional N bytes or X% of the filesystem free. If neither fallocate() or posix_fallocate() C functions are avaialble, utils.fallocate() will log a warning (once only) and not actually allocate space.  utils.punch_hole(fd, offset, length) deallocates <length> bytes starting at <offset> from the file referred to by <fd>. It uses the C function fallocate(). If fallocate() is not available, calls to utils.punch_hole() will raise an exception.  This commit also gets rid of utils.FallocateWrapper() and just has two levels: utils.fallocate / utils.punch_hole have all the fancy logic in them, and utils._sys_fallocate / utils._sys_posix_fallocate are just thin wrappers around the libc functions.  Modernized the tests for utils.fallocate() and utils.punch_hole().  Change-Id: I0210a99b7f0774180937b6f8f435505b6ee151a8",refactoring,,,,,,
openstack%2Fswift~master~I0210a99b7f0774180937b6f8f435505b6ee151a8,https://review.opendev.org/560701,Refactor fallocate and hole punching,"Refactor fallocate and hole punching  Instead of having one function that either allocates space or deallocates it, and uses either the fallocate() or posix_fallocate() C functions for allocation, but only uses fallocate() for deallocation, and is a no-op sometimes for allocation but never for deallocation, let's try having two functions.  utils.fallocate(fd, size) allocates <size> bytes for the file referred to by <fd>. It allows for keeping a reserve of an additional N bytes or X% of the filesystem free. If neither fallocate() or posix_fallocate() C functions are avaialble, utils.fallocate() will log a warning (once only) and not actually allocate space.  utils.punch_hole(fd, offset, length) deallocates <length> bytes starting at <offset> from the file referred to by <fd>. It uses the C function fallocate(). If fallocate() is not available, calls to utils.punch_hole() will raise an exception.  This commit also gets rid of utils.FallocateWrapper() and just has two levels: utils.fallocate / utils.punch_hole have all the fancy logic in them, and utils._sys_fallocate / utils._sys_posix_fallocate are just thin wrappers around the libc functions.  Modernized the tests for utils.fallocate() and utils.punch_hole().  Change-Id: I0210a99b7f0774180937b6f8f435505b6ee151a8",testing,,,,,,
openstack%2Fhorizon~master~I88bc057d2e34e2a683b0c494530b19c8d560cd86,https://review.opendev.org/543829,Refactors network topology (GRAPH) into angular elements,"Refactors network topology into angular elements  IMPORTANT: This is still WIP, but the general outline is there. For review/debug/testing:  - settings.ANGULAR_TOPOLOGY = True enables the feature as   a new tab in the network topology panel - settings.ANGULAR_DEBUG_MODEL = True enables a model   debugging UI instead of using live server data  NOTE: A series of debug components exist for development and are not meant for the final version of this patch.  Visualisation is divided into separate compoments:  - Network-topology serves as the central component tying   all of the functionality together - Topology-graph wraps D3 displaying code. It should   be as general (and generic) as possible for potential   reuse in different contexts - Popup-balloon contains the logic related to the popups   displayed when clicking individual nodes in the graph - button-bar and checkbox-button are utility components   used in the UI  In addition to the visualisation elements, data handling has also been refactored and moved into angular elements:  - Topology-model.service contains code which handles the   reception of data from the server, it's mapping and   comparison with cached data for full diffing support   (data is modified, deleted and created on synch).    This service is meant as the central model store   (Single source of truth). This data store should   never be modified outside of the server synching   mechanism; any components that need to modify data   should create local working copies (data immutability).  - Topology-graph.factory is the factory function that   takes the stored model data and creates a graph-like   data structure of nodes and edges which are then   used for D3 display.    These elements are bound as D3 data when displayed.   Any purely visual operations   (Network Collapsing) should be carried out   at this level, NOT at the model level.  Intended as a continuation of the work done in https://review.openstack.org/#/c/199063/  Change-Id: I88bc057d2e34e2a683b0c494530b19c8d560cd86 Implements: blueprint curvature-network-topology",objective,,,,,,
openstack%2Fhorizon~master~I88bc057d2e34e2a683b0c494530b19c8d560cd86,https://review.opendev.org/543829,Refactors network topology (GRAPH) into angular elements,"Refactors network topology into angular elements  IMPORTANT: This is still WIP, but the general outline is there. For review/debug/testing:  - settings.ANGULAR_TOPOLOGY = True enables the feature as   a new tab in the network topology panel - settings.ANGULAR_DEBUG_MODEL = True enables a model   debugging UI instead of using live server data  NOTE: A series of debug components exist for development and are not meant for the final version of this patch.  Visualisation is divided into separate compoments:  - Network-topology serves as the central component tying   all of the functionality together - Topology-graph wraps D3 displaying code. It should   be as general (and generic) as possible for potential   reuse in different contexts - Popup-balloon contains the logic related to the popups   displayed when clicking individual nodes in the graph - button-bar and checkbox-button are utility components   used in the UI  In addition to the visualisation elements, data handling has also been refactored and moved into angular elements:  - Topology-model.service contains code which handles the   reception of data from the server, it's mapping and   comparison with cached data for full diffing support   (data is modified, deleted and created on synch).    This service is meant as the central model store   (Single source of truth). This data store should   never be modified outside of the server synching   mechanism; any components that need to modify data   should create local working copies (data immutability).  - Topology-graph.factory is the factory function that   takes the stored model data and creates a graph-like   data structure of nodes and edges which are then   used for D3 display.    These elements are bound as D3 data when displayed.   Any purely visual operations   (Network Collapsing) should be carried out   at this level, NOT at the model level.  Intended as a continuation of the work done in https://review.openstack.org/#/c/199063/  Change-Id: I88bc057d2e34e2a683b0c494530b19c8d560cd86 Implements: blueprint curvature-network-topology",quality,,,,,,
openstack%2Fhorizon~master~I88bc057d2e34e2a683b0c494530b19c8d560cd86,https://review.opendev.org/543829,Refactors network topology (GRAPH) into angular elements,"Refactors network topology into angular elements  IMPORTANT: This is still WIP, but the general outline is there. For review/debug/testing:  - settings.ANGULAR_TOPOLOGY = True enables the feature as   a new tab in the network topology panel - settings.ANGULAR_DEBUG_MODEL = True enables a model   debugging UI instead of using live server data  NOTE: A series of debug components exist for development and are not meant for the final version of this patch.  Visualisation is divided into separate compoments:  - Network-topology serves as the central component tying   all of the functionality together - Topology-graph wraps D3 displaying code. It should   be as general (and generic) as possible for potential   reuse in different contexts - Popup-balloon contains the logic related to the popups   displayed when clicking individual nodes in the graph - button-bar and checkbox-button are utility components   used in the UI  In addition to the visualisation elements, data handling has also been refactored and moved into angular elements:  - Topology-model.service contains code which handles the   reception of data from the server, it's mapping and   comparison with cached data for full diffing support   (data is modified, deleted and created on synch).    This service is meant as the central model store   (Single source of truth). This data store should   never be modified outside of the server synching   mechanism; any components that need to modify data   should create local working copies (data immutability).  - Topology-graph.factory is the factory function that   takes the stored model data and creates a graph-like   data structure of nodes and edges which are then   used for D3 display.    These elements are bound as D3 data when displayed.   Any purely visual operations   (Network Collapsing) should be carried out   at this level, NOT at the model level.  Intended as a continuation of the work done in https://review.openstack.org/#/c/199063/  Change-Id: I88bc057d2e34e2a683b0c494530b19c8d560cd86 Implements: blueprint curvature-network-topology",objective,,,,,,
openstack%2Fpython-cinderclient~master~I80fbdda71821be5dedf7da57d1e6a930d7731346,https://review.opendev.org/381547,Refactor functional tests to support both Python and CLI APIs,Refactor functional tests to support both Python and CLI APIs  Change-Id: I80fbdda71821be5dedf7da57d1e6a930d7731346,testing,,,,,,
openstack%2Fkeystone~master~I9a80149aa10930a0d82c304f9e59d96f1dbaf1d3,https://review.opendev.org/553880,Refactor list_users and related functions,Refactor list_users and related functions  list_users has some excess looping that could be consolidated to gain some performance improvements. This change consolidates a few of these excess loops for list_users as well as the utility functions.  Change-Id: I9a80149aa10930a0d82c304f9e59d96f1dbaf1d3 Related-Bug: #1689888,quality,,,,,,
openstack%2Fpython-openstackclient~master~Ifcb9164b39bda007acc18a874caac5ee11da190d,https://review.opendev.org/396007,Refactor security group & rule take action methods,"Refactor security group & rule take action methods  Add get_attributes internal functions to the security groups and security groups rules create & set, to allow other plugins to override only the attributes code and add extensions attributes without having to rewrite the entire take_action method.  For example see in https://review.openstack.org/#/c/393322/ where vmware-nsx adds some extensions to the security group.  Change-Id: Ifcb9164b39bda007acc18a874caac5ee11da190d",objective,,,,,,
openstack%2Fpython-openstackclient~master~Ifcb9164b39bda007acc18a874caac5ee11da190d,https://review.opendev.org/396007,Refactor security group & rule take action methods,"Refactor security group & rule take action methods  Add get_attributes internal functions to the security groups and security groups rules create & set, to allow other plugins to override only the attributes code and add extensions attributes without having to rewrite the entire take_action method.  For example see in https://review.openstack.org/#/c/393322/ where vmware-nsx adds some extensions to the security group.  Change-Id: Ifcb9164b39bda007acc18a874caac5ee11da190d",quality,,,,,,
osf%2Fpython-tempestconf~master~I2d525967aea9375d7f4724f41da6f478e9fa723a,https://review.opendev.org/567307,Refactoring main function,"Refactoring main function  Moving code to a new TempestConfCmd that can be called outside the main function, configure, parse args, etc.  Change-Id: I2d525967aea9375d7f4724f41da6f478e9fa723a",objective,,,,,,
x%2Fmixmatch~master~I43925868044d32b665d401c53a284a803f726c8a,https://review.opendev.org/491891,RequestHandler refactor,RequestHandler refactor  Split out RequestHandler.__init__ into multiple functions  Change-Id: I43925868044d32b665d401c53a284a803f726c8a,quality,,,,,,
openstack%2Fdevstack-gate~master~I1a2220a5a9d729a619ee2137d3566c3d09f5e3b4,https://review.opendev.org/364046,Refactor devstack log copying,"[WIP] Refactor devstack log copying  This introduces a single function to collect devstack logs.  It either runs once for the devstack case, or twice (once for ""old"" and once for ""new"") in the grenade case.  I've rolled the duplicated parts of the code, including the testr artificat stuff, into this single function.  The layout is simplified into three distinct phases  1) copy devstack files 2) copy generic system logs/status 3) cleanup & compression  I feel this makes the whole process much easier to understand (even with greatly increased comments diffstat is ~equal), reduces duplication and reduces the chance that we make mistakes when trying to introduce various log processing enhancements.  Change-Id: I1a2220a5a9d729a619ee2137d3566c3d09f5e3b4",quality,,,,,,
zuul%2Fnodepool~feature%2Fzuulv3~I9ab7fabefe640ef57a415806b36f39b14592bd82,https://review.opendev.org/531390,"Refactor status functions, add web endpoints, allow params","[WIP] Refactor status functions, add web endpoints, allow params  This patch refactors status functions so that instead of having one function per output format, the output format is simply a parameter.  New status endpoints are added:  * image-list.json * request-list(.json)  The endpoint node-list(.json) accepts a node_id parameter for filtering.  Change-Id: I9ab7fabefe640ef57a415806b36f39b14592bd82",objective,,,,,,
zuul%2Fnodepool~master~I1d8ea6ae05f2e655e09ea5a8942c66ac23287c3d,https://review.opendev.org/531354,"[WIP] Refactor status functions, add more status endpoints","[WIP] Refactor status functions, add more status endpoints  This patch refactors status functions so that instead of having one function per output format, the output format is simply a parameter. New status endpoints are added: * image-list.json * node-list(.json)  Change-Id: I1d8ea6ae05f2e655e09ea5a8942c66ac23287c3d",objective,,,,,,
openstack%2Fcharms.ceph~master~Id421cccce67ea33dfb8307b455bc2f00d0e05795,https://review.opendev.org/518393,"Refactor utils/replace_osd function, add tests","Refactor utils/replace_osd function, add tests  Monolithic replace_osd function will only work where mon and osds coexist on the same metal.  This change breaks that function into several logically distinct functions which can be used in hooks or actions independently of each other.  Change-Id: Id421cccce67ea33dfb8307b455bc2f00d0e05795",quality,,,,,,
openstack%2Fneutron~master~Ice309b12ce2693627d8c9d69265fddf195c51161,https://review.opendev.org/458531,Refactor type_vlan for QinQ compatibility,"Refactor type_vlan for QinQ compatibility  While writing the QinQ driver, the logic for syncing vlan allocations was somewhat duplicated. This refactors the function to add conditional cases for it to be compatibile for both drivers.  The QinQ driver adds another layer of keys so instead of set operations we need to use dictionary operations and also another layer of nesting is needed for for loops to act on those values.  Change-Id: Ice309b12ce2693627d8c9d69265fddf195c51161",quality,,,,,,
openstack%2Fneutron~master~Ice309b12ce2693627d8c9d69265fddf195c51161,https://review.opendev.org/458531,Refactor type_vlan for QinQ compatibility,"Refactor type_vlan for QinQ compatibility  While writing the QinQ driver, the logic for syncing vlan allocations was somewhat duplicated. This refactors the function to add conditional cases for it to be compatibile for both drivers.  The QinQ driver adds another layer of keys so instead of set operations we need to use dictionary operations and also another layer of nesting is needed for for loops to act on those values.  Change-Id: Ice309b12ce2693627d8c9d69265fddf195c51161",objective,,,,,,
openstack%2Fneutron~master~Ice309b12ce2693627d8c9d69265fddf195c51161,https://review.opendev.org/458531,Refactor type_vlan for QinQ compatibility,"Refactor type_vlan for QinQ compatibility  While writing the QinQ driver, the logic for syncing vlan allocations was somewhat duplicated. This refactors the function to add conditional cases for it to be compatibile for both drivers.  The QinQ driver adds another layer of keys so instead of set operations we need to use dictionary operations and also another layer of nesting is needed for for loops to act on those values.  Change-Id: Ice309b12ce2693627d8c9d69265fddf195c51161",objective,,,,,,
openstack%2Fnetworking-ovn~stable%2Fpike~Icd7db235cff8db07f2f4e460859c71b0b4e937dc,https://review.opendev.org/510490,Small refactor of metadata bits,"Small refactor of metadata bits  This patch performs a small refactor of the metadata port creation and the code which waits for metadata service to be provisioned in the network when a port transitions to 'up'.  Also, when metadata is disabled, an error was logged trying to retrieve fetch the metadata port. Instead of checking if metadata is enabled or not in many points of the code, that function will return None if service is disabled.  Change-Id: Icd7db235cff8db07f2f4e460859c71b0b4e937dc Signed-off-by: Daniel Alvarez <dalvarez@redhat.com> (cherry picked from commit 5ef3a902cdeba3ae424fce9004751d44cf035cf5)",quality,,,,,,
openstack%2Fnetworking-ovn~stable%2Fpike~Icd7db235cff8db07f2f4e460859c71b0b4e937dc,https://review.opendev.org/510490,Small refactor of metadata bits,"Small refactor of metadata bits  This patch performs a small refactor of the metadata port creation and the code which waits for metadata service to be provisioned in the network when a port transitions to 'up'.  Also, when metadata is disabled, an error was logged trying to retrieve fetch the metadata port. Instead of checking if metadata is enabled or not in many points of the code, that function will return None if service is disabled.  Change-Id: Icd7db235cff8db07f2f4e460859c71b0b4e937dc Signed-off-by: Daniel Alvarez <dalvarez@redhat.com> (cherry picked from commit 5ef3a902cdeba3ae424fce9004751d44cf035cf5)",objective,,,,,,
x%2Fciwatch~feature%2Funit-tests~I9f2dca2b57d469e89f6d57860bada6c03c72bc0c,https://review.opendev.org/283692,Refactor events functions into EventSaver class,Refactor events functions into EvenSaver class  Required to add tests.  Change-Id: I9f2dca2b57d469e89f6d57860bada6c03c72bc0c,refactoring,,,,,,
x%2Fciwatch~feature%2Funit-tests~I9f2dca2b57d469e89f6d57860bada6c03c72bc0c,https://review.opendev.org/283692,Refactor events functions into EventSaver class,Refactor events functions into EvenSaver class  Required to add tests.  Change-Id: I9f2dca2b57d469e89f6d57860bada6c03c72bc0c,testing,,,,,,
openstack%2Fopenstack-helm~master~I0881e5dca3787aec3264feee95bbf687a6d92e2d,https://review.opendev.org/491903,WIP: Refactor Basic Launch,WIP: Refactor Basic Launch  This PS pulls all of the helm install logic out and into their own functions that Jenkins can call and put it's own timeout on per chart.  Change-Id: I0881e5dca3787aec3264feee95bbf687a6d92e2d,refactoring,,,,,,
openstack%2Fironic-tempest-plugin~master~Ia87646cccdefba22caf121f4e347e8f2edf736e0,https://review.opendev.org/489788,Refactor waiters in our tempest plugin,Refactor waiters in our tempest plugin  Deduplicates some of the code between common.waiters module and BaremetalScenarioTest functions.  Change-Id: Ia87646cccdefba22caf121f4e347e8f2edf736e0,quality,,,,,,
openstack%2Fpython-tricircleclient~stable%2Fpike~I379abedc0f7ab895d7b4e563354755c64a920f06,https://review.opendev.org/488906,Refactoring test_pod_cli.py,Refactoring test_pod_cli.py  1. What is the problem? The methods are sharing common functionality which make difficult to avoid duplication.  2. What is the solution to the problem? Refactoring these common functionality.  3. What features need to be implemented to the Tricircle to realize the solution? None  Change-Id: I379abedc0f7ab895d7b4e563354755c64a920f06 (cherry picked from commit 69da87f829dc8fe95500019b47eabd0a5a50e39e),testing,,,,,,
openstack%2Fpython-tricircleclient~stable%2Fpike~I379abedc0f7ab895d7b4e563354755c64a920f06,https://review.opendev.org/488906,Refactoring test_pod_cli.py,Refactoring test_pod_cli.py  1. What is the problem? The methods are sharing common functionality which make difficult to avoid duplication.  2. What is the solution to the problem? Refactoring these common functionality.  3. What features need to be implemented to the Tricircle to realize the solution? None  Change-Id: I379abedc0f7ab895d7b4e563354755c64a920f06 (cherry picked from commit 69da87f829dc8fe95500019b47eabd0a5a50e39e),quality,,,,,,
openstack%2Fironic~master~If51c4c34ada6b8023c8aa7c3bbef6c7c6b1eae10,https://review.opendev.org/477597,Refactor VIFPortIDMixin to only handle VIF ops,"Refactor VIFPortIDMixin to only handle VIF ops  Refactor the VIFPortIDMixin class to only handle VIF-related operations, and extract all neutron-specific functionality into a new subclass - NeutronVIFPortIDMixin. This allows network interfaces that do not support neutron to use the VIFPortIDMixin class, which provides VIF support methods.  Change-Id: If51c4c34ada6b8023c8aa7c3bbef6c7c6b1eae10",quality,,,,,,
openstack%2Fironic~master~If51c4c34ada6b8023c8aa7c3bbef6c7c6b1eae10,https://review.opendev.org/477597,Refactor VIFPortIDMixin to only handle VIF ops,"Refactor VIFPortIDMixin to only handle VIF ops  Refactor the VIFPortIDMixin class to only handle VIF-related operations, and extract all neutron-specific functionality into a new subclass - NeutronVIFPortIDMixin. This allows network interfaces that do not support neutron to use the VIFPortIDMixin class, which provides VIF support methods.  Change-Id: If51c4c34ada6b8023c8aa7c3bbef6c7c6b1eae10",objective,,,,,,
openstack%2Fnova~master~Ic52103a1ff30710cf2f7ab732935c0c741220494,https://review.opendev.org/446122,Refactor placement fixtures,"Refactor placement fixtures  Some useful fixtures were created for the ironic inventory changes that would be handy to be able to access in other functional tests. This patch doesn't change any logic, but simply moves the fixtures into their own file.  Blueprint: custom-resource-classes-pike  Change-Id: Ic52103a1ff30710cf2f7ab732935c0c741220494",quality,,,,,,
openstack%2Fnova~master~Ic52103a1ff30710cf2f7ab732935c0c741220494,https://review.opendev.org/446122,Refactor placement fixtures,"Refactor placement fixtures  Some useful fixtures were created for the ironic inventory changes that would be handy to be able to access in other functional tests. This patch doesn't change any logic, but simply moves the fixtures into their own file.  Blueprint: custom-resource-classes-pike  Change-Id: Ic52103a1ff30710cf2f7ab732935c0c741220494",testing,,,,,,
openstack%2Fnova~master~Ic52103a1ff30710cf2f7ab732935c0c741220494,https://review.opendev.org/446122,Refactor placement fixtures,"Refactor placement fixtures  Some useful fixtures were created for the ironic inventory changes that would be handy to be able to access in other functional tests. This patch doesn't change any logic, but simply moves the fixtures into their own file.  Blueprint: custom-resource-classes-pike  Change-Id: Ic52103a1ff30710cf2f7ab732935c0c741220494",objective,,,,,,
openstack%2Fdiskimage-builder~master~Ib8e14dbfa5d822b8e49f93c7861f2df13236eb46,https://review.opendev.org/468709,Refactor: Generalize parameters passed to plugins,Refactor: Generalize parameters passed to plugins  The funtion 'create_graph()' is a generic function and does not need to know which and how many parameters are passed on to the plugin constructor.  This patch generalizes the parameter passing.  This patch is needed for upcoming patches that eliminate the globals in block device handling.  Change-Id: Ib8e14dbfa5d822b8e49f93c7861f2df13236eb46 Signed-off-by: Andreas Florath <andreas@florath.net>,quality,,,,,,
openstack%2Fdiskimage-builder~master~Ib8e14dbfa5d822b8e49f93c7861f2df13236eb46,https://review.opendev.org/468709,Refactor: Generalize parameters passed to plugins,Refactor: Generalize parameters passed to plugins  The funtion 'create_graph()' is a generic function and does not need to know which and how many parameters are passed on to the plugin constructor.  This patch generalizes the parameter passing.  This patch is needed for upcoming patches that eliminate the globals in block device handling.  Change-Id: Ib8e14dbfa5d822b8e49f93c7861f2df13236eb46 Signed-off-by: Andreas Florath <andreas@florath.net>,objective,,,,,,
openstack%2Ffuel-library~stable%2Fmitaka~I8b07c5850c1c8e8e28e9d96638f847e1d80fdcdb,https://review.opendev.org/419906,Refactor hosts task,Refactor hosts task  Add a function to filter out duplicate deleted hosts in case the duplicate records are present in the deleted_nodes file.  Change-Id: I8b07c5850c1c8e8e28e9d96638f847e1d80fdcdb,objective,,,,,,
openstack%2Ffuel-library~stable%2Fmitaka~I8b07c5850c1c8e8e28e9d96638f847e1d80fdcdb,https://review.opendev.org/419906,Refactor hosts task,Refactor hosts task  Add a function to filter out duplicate deleted hosts in case the duplicate records are present in the deleted_nodes file.  Change-Id: I8b07c5850c1c8e8e28e9d96638f847e1d80fdcdb,quality,,,,,,
openstack%2Ffuel-library~stable%2Fnewton~I8b07c5850c1c8e8e28e9d96638f847e1d80fdcdb,https://review.opendev.org/419902,Refactor hosts task,Refactor hosts task  Add a function to filter out duplicate deleted hosts in case the duplicate records are present in the deleted_nodes file.  Change-Id: I8b07c5850c1c8e8e28e9d96638f847e1d80fdcdb,objective,,,,,,
openstack%2Ffuel-library~stable%2Fnewton~I8b07c5850c1c8e8e28e9d96638f847e1d80fdcdb,https://review.opendev.org/419902,Refactor hosts task,Refactor hosts task  Add a function to filter out duplicate deleted hosts in case the duplicate records are present in the deleted_nodes file.  Change-Id: I8b07c5850c1c8e8e28e9d96638f847e1d80fdcdb,quality,,,,,,
openstack%2Fironic~master~I044dd2754fc0fcff0c8c7a1feaf2ddf492da1251,https://review.opendev.org/323190,Refactor enroll-node code,"WIP: Refactor enroll-node code  This change allows to enroll ironic nodes from INI files. INI files allow to have subsections which are described [0].  Each section specify ironic node-name. Each section may have any number of subsections. Subsection name specifies `ironic node-create` command option, where keys and values are key,values from appropriate subsection.      [node-name]     mac_address=<>     driver=<>     [node-name\properties]     ssh_virt_type=<>     ssh_address=<>     ...     [node-name\driver-info]     local_gb=<>     ...     [node-name\subsection]     option_1=value1  The described INI file will be translated to the following cmd: `ironic node-create --driver <> --properties ssh_virt_type=<> \ --properties ssh_address=<> --driver-info local_gb=<> \ --subsection option_1=value1`  The change gives full flexibility in enrolling nodes without changing devstack code.  Backward compatibility is done via convert_csv_to_ini function.  Reference: [0] https://en.wikipedia.org/wiki/INI_file#Hierarchy  Change-Id: I044dd2754fc0fcff0c8c7a1feaf2ddf492da1251 Depends-On: I3456f3ca02498e8867dfd95e3878f14eeb7efc73",quality,,,,,,
openstack%2Fironic~master~I044dd2754fc0fcff0c8c7a1feaf2ddf492da1251,https://review.opendev.org/323190,Refactor enroll-node code,"WIP: Refactor enroll-node code  This change allows to enroll ironic nodes from INI files. INI files allow to have subsections which are described [0].  Each section specify ironic node-name. Each section may have any number of subsections. Subsection name specifies `ironic node-create` command option, where keys and values are key,values from appropriate subsection.      [node-name]     mac_address=<>     driver=<>     [node-name\properties]     ssh_virt_type=<>     ssh_address=<>     ...     [node-name\driver-info]     local_gb=<>     ...     [node-name\subsection]     option_1=value1  The described INI file will be translated to the following cmd: `ironic node-create --driver <> --properties ssh_virt_type=<> \ --properties ssh_address=<> --driver-info local_gb=<> \ --subsection option_1=value1`  The change gives full flexibility in enrolling nodes without changing devstack code.  Backward compatibility is done via convert_csv_to_ini function.  Reference: [0] https://en.wikipedia.org/wiki/INI_file#Hierarchy  Change-Id: I044dd2754fc0fcff0c8c7a1feaf2ddf492da1251 Depends-On: I3456f3ca02498e8867dfd95e3878f14eeb7efc73",objective,,,,,,
openstack%2Fnetworking-sfc~master~I65bc3a8cbe6a542e53e3a9b5206d082fed1ef820,https://review.opendev.org/346175,Refactor abstract logic+models out of OVS driver,"Refactor abstract logic+models out of OVS driver  This patch refactors all logic and models that are abstract in SFC, and not specific to the OVS driver, moving them out of the OVS driver. It also updates the OVS driver so that it only manages OVS-specific resources and not the abstract plugin resources.  This allows Service Function Path IDs and identifiers to be managed and generated in the networking-sfc plugin itself, instead of inside the OVS driver, so that any driver can reuse these SFP allocations.  [WIP] This is a work-in-progress and is missing the following at this time: - Updated tests; - A working Update Port Chain - the plugin/driver interface is not   ideal to carry out the update of an existing port chain, due to the   split into abstract plugin resources and specific [OVS] resources.   As such, more discussion with the team should be held to decide the   best way to approach this, potentially by modifying the plugin/driver   interface. - Hands-on validation of instantiating more than 1 port-chain; - Other planned code changes.  Closes-Bug: #1588460  Change-Id: I65bc3a8cbe6a542e53e3a9b5206d082fed1ef820",quality,,,,,,
openstack%2Fnetworking-sfc~master~I65bc3a8cbe6a542e53e3a9b5206d082fed1ef820,https://review.opendev.org/346175,Refactor abstract logic+models out of OVS driver,"Refactor abstract logic+models out of OVS driver  This patch refactors all logic and models that are abstract in SFC, and not specific to the OVS driver, moving them out of the OVS driver. It also updates the OVS driver so that it only manages OVS-specific resources and not the abstract plugin resources.  This allows Service Function Path IDs and identifiers to be managed and generated in the networking-sfc plugin itself, instead of inside the OVS driver, so that any driver can reuse these SFP allocations.  [WIP] This is a work-in-progress and is missing the following at this time: - Updated tests; - A working Update Port Chain - the plugin/driver interface is not   ideal to carry out the update of an existing port chain, due to the   split into abstract plugin resources and specific [OVS] resources.   As such, more discussion with the team should be held to decide the   best way to approach this, potentially by modifying the plugin/driver   interface. - Hands-on validation of instantiating more than 1 port-chain; - Other planned code changes.  Closes-Bug: #1588460  Change-Id: I65bc3a8cbe6a542e53e3a9b5206d082fed1ef820",testing,,,,,,
openstack%2Fnetworking-sfc~master~I65bc3a8cbe6a542e53e3a9b5206d082fed1ef820,https://review.opendev.org/346175,Refactor abstract logic+models out of OVS driver,"Refactor abstract logic+models out of OVS driver  This patch refactors all logic and models that are abstract in SFC, and not specific to the OVS driver, moving them out of the OVS driver. It also updates the OVS driver so that it only manages OVS-specific resources and not the abstract plugin resources.  This allows Service Function Path IDs and identifiers to be managed and generated in the networking-sfc plugin itself, instead of inside the OVS driver, so that any driver can reuse these SFP allocations.  [WIP] This is a work-in-progress and is missing the following at this time: - Updated tests; - A working Update Port Chain - the plugin/driver interface is not   ideal to carry out the update of an existing port chain, due to the   split into abstract plugin resources and specific [OVS] resources.   As such, more discussion with the team should be held to decide the   best way to approach this, potentially by modifying the plugin/driver   interface. - Hands-on validation of instantiating more than 1 port-chain; - Other planned code changes.  Closes-Bug: #1588460  Change-Id: I65bc3a8cbe6a542e53e3a9b5206d082fed1ef820",objective,,,,,,
openstack%2Fkeystone~master~Ib1df34b0acedc5beaf9a90a39be2157b21deb67a,https://review.opendev.org/387156,"Refactoring authorization.  Merge logic into check_policy, made decorator functions identical","Refactoring authorization.  Merge logic into check_policy, made decorator functions identical  Change-Id: Ib1df34b0acedc5beaf9a90a39be2157b21deb67a",refactoring,,,,,,
openstack%2Fkeystone~master~I7237affeff0ebae6484380f612cea1b0819a6b18,https://review.opendev.org/387157,Refactoring Authorization.  Unified decorator functions.,Refactoring Authorization.  Unified decorator functions.  Change-Id: I7237affeff0ebae6484380f612cea1b0819a6b18,refactoring,,,,,,
openstack%2Fdiskimage-builder~master~Ib626b36a00f8a5dc3dbde8df3e2619a2438eaaf1,https://review.opendev.org/319591,Refactor: block-device handling (local loop),"Refactor: loopdev handling / introducing element results and cleanup  Sometimes it is needed to pass the result of an element back to the main script or to other elements. The element that creates a resource should also delete, destroy, umount or detach this resource afterwards.  When a result of an element is needed, it is possible to use eval_run_d to get mostly one result in an environment variable.  There was no way, that an element script for cleanup was called when a problem occurred.  This patch introduces a way of passing results back to the main script: the element can call the function 'element_result_add' to do so.  This patch also introduces the phases ""umount"" and ""exit"". The first is called when the image should be unmounted - the later one is called if a problem occurred during the image building.  Using the one liner of creating and deleting the loop device here is to show the concept.  (This is a extraction of one refactoring needed to implement the partitioning-parted and lvm2 elements.)  Change-Id: Ib626b36a00f8a5dc3dbde8df3e2619a2438eaaf1 Signed-off-by: Andreas Florath <andreas@florath.net>",objective,,,,,,
openstack%2Fdiskimage-builder~master~Ib626b36a00f8a5dc3dbde8df3e2619a2438eaaf1,https://review.opendev.org/319591,Refactor: block-device handling (local loop),"Refactor: loopdev handling / introducing element results and cleanup  Sometimes it is needed to pass the result of an element back to the main script or to other elements. The element that creates a resource should also delete, destroy, umount or detach this resource afterwards.  When a result of an element is needed, it is possible to use eval_run_d to get mostly one result in an environment variable.  There was no way, that an element script for cleanup was called when a problem occurred.  This patch introduces a way of passing results back to the main script: the element can call the function 'element_result_add' to do so.  This patch also introduces the phases ""umount"" and ""exit"". The first is called when the image should be unmounted - the later one is called if a problem occurred during the image building.  Using the one liner of creating and deleting the loop device here is to show the concept.  (This is a extraction of one refactoring needed to implement the partitioning-parted and lvm2 elements.)  Change-Id: Ib626b36a00f8a5dc3dbde8df3e2619a2438eaaf1 Signed-off-by: Andreas Florath <andreas@florath.net>",quality,,,,,,
openstack%2Fdiskimage-builder~master~Ib626b36a00f8a5dc3dbde8df3e2619a2438eaaf1,https://review.opendev.org/319591,Refactor: block-device handling (local loop),"Refactor: loopdev handling / introducing element results and cleanup  Sometimes it is needed to pass the result of an element back to the main script or to other elements. The element that creates a resource should also delete, destroy, umount or detach this resource afterwards.  When a result of an element is needed, it is possible to use eval_run_d to get mostly one result in an environment variable.  There was no way, that an element script for cleanup was called when a problem occurred.  This patch introduces a way of passing results back to the main script: the element can call the function 'element_result_add' to do so.  This patch also introduces the phases ""umount"" and ""exit"". The first is called when the image should be unmounted - the later one is called if a problem occurred during the image building.  Using the one liner of creating and deleting the loop device here is to show the concept.  (This is a extraction of one refactoring needed to implement the partitioning-parted and lvm2 elements.)  Change-Id: Ib626b36a00f8a5dc3dbde8df3e2619a2438eaaf1 Signed-off-by: Andreas Florath <andreas@florath.net>",objective,,,,,,
openstack%2Ffuel-library~stable%2Fmitaka~I5fca1efaddeda3a8324ee5ff3b97ae9291b4e0dc,https://review.opendev.org/367848,Puppet4 support: refactor vips,Puppet4 support: refactor vips  Cherry-pick of change https://review.openstack.org/#/c/326541/  The generate_vips function is refactored to work in pair with the create_resources functions. It's much better for testing and debugging. Input data of the vurual ip definition is split into many parameters and the generate vips function is tought to support the changed interfacs as well as to work with Puppet4's undef values.  Change-Id: I5fca1efaddeda3a8324ee5ff3b97ae9291b4e0dc Related-Bug: 1586480,testing,,,,,,
openstack%2Ffuel-library~stable%2Fmitaka~I5fca1efaddeda3a8324ee5ff3b97ae9291b4e0dc,https://review.opendev.org/367848,Puppet4 support: refactor vips,Puppet4 support: refactor vips  Cherry-pick of change https://review.openstack.org/#/c/326541/  The generate_vips function is refactored to work in pair with the create_resources functions. It's much better for testing and debugging. Input data of the vurual ip definition is split into many parameters and the generate vips function is tought to support the changed interfacs as well as to work with Puppet4's undef values.  Change-Id: I5fca1efaddeda3a8324ee5ff3b97ae9291b4e0dc Related-Bug: 1586480,objective,,,,,,
openstack%2Ffuel-octane~stable%2Fmitaka~Ic06d5b0a220c77e2fe1551f129651627a1ef9785,https://review.opendev.org/357906,Refactoring writing deployment info,Refactoring writing deployment info  * function write_facts_to_dir was added * function get_dir_deployment_info was added * appropriate tests were added  Change-Id: Ic06d5b0a220c77e2fe1551f129651627a1ef9785 (cherry picked from commit 3db5c7ab719a9d58e0ed093ab3942d4812b911aa),testing,,,,,,
openstack%2Ffuel-octane~stable%2Fmitaka~Ic06d5b0a220c77e2fe1551f129651627a1ef9785,https://review.opendev.org/357906,Refactoring writing deployment info,Refactoring writing deployment info  * function write_facts_to_dir was added * function get_dir_deployment_info was added * appropriate tests were added  Change-Id: Ic06d5b0a220c77e2fe1551f129651627a1ef9785 (cherry picked from commit 3db5c7ab719a9d58e0ed093ab3942d4812b911aa),objective,,,,,,
openstack%2Fneutron~master~Ieae025b3cf2e8b63ad63ff6d09132c3770168c48,https://review.opendev.org/333909,Refactor TestWalkMigrations,Refactor TestWalkMigrations  Currently TestWalkMigrations provides bad tests isolation and do not use appropriate classes from oslo.db. Refactor it to use oslo.db functionality.  Closes-bug: #1595918  Change-Id: Ieae025b3cf2e8b63ad63ff6d09132c3770168c48,testing,,,,,,
openstack%2Fneutron~master~Ieae025b3cf2e8b63ad63ff6d09132c3770168c48,https://review.opendev.org/333909,Refactor TestWalkMigrations,Refactor TestWalkMigrations  Currently TestWalkMigrations provides bad tests isolation and do not use appropriate classes from oslo.db. Refactor it to use oslo.db functionality.  Closes-bug: #1595918  Change-Id: Ieae025b3cf2e8b63ad63ff6d09132c3770168c48,quality,,,,,,
openstack%2Fnova~master~I3046f1682f47a1a7d9bf613a603da71179077e44,https://review.opendev.org/323764,libvirt: virtlogd: refactoring 4 before functional change,"libvirt: virtlogd: refactoring 4 before functional change  The logic to create the char devices of a guest is now extracted into single pieces with single responsibilities. The refactoring is now good enough to use the ""virtlogd"" feature with a following change.  blueprint libvirt-virtlogd  Change-Id: I3046f1682f47a1a7d9bf613a603da71179077e44",quality,,,,,,
openstack%2Fnova~master~I3046f1682f47a1a7d9bf613a603da71179077e44,https://review.opendev.org/323764,libvirt: virtlogd: refactoring 4 before functional change,"libvirt: virtlogd: refactoring 4 before functional change  The logic to create the char devices of a guest is now extracted into single pieces with single responsibilities. The refactoring is now good enough to use the ""virtlogd"" feature with a following change.  blueprint libvirt-virtlogd  Change-Id: I3046f1682f47a1a7d9bf613a603da71179077e44",objective,,,,,,
openstack%2Fnova~master~Iabe9810b77e2bfe1529e68a1c8c3d75a3425c29e,https://review.opendev.org/323763,libvirt: virtlogd: refactoring 3 before functional change,"libvirt: virtlogd: refactoring 3 before functional change  The logic to create the char devices for a guest has a lot of conditionals which makes it hard to understand. This change inverts some of these to reduce the nested levels of IFs. The flow is then easier to understand and the functional changes for the ""virtlogd"" feature in a following change will be easier to review.  blueprint libvirt-virtlogd  Change-Id: Iabe9810b77e2bfe1529e68a1c8c3d75a3425c29e",quality,,,,,,
openstack%2Fnova~master~Iabe9810b77e2bfe1529e68a1c8c3d75a3425c29e,https://review.opendev.org/323763,libvirt: virtlogd: refactoring 3 before functional change,"libvirt: virtlogd: refactoring 3 before functional change  The logic to create the char devices for a guest has a lot of conditionals which makes it hard to understand. This change inverts some of these to reduce the nested levels of IFs. The flow is then easier to understand and the functional changes for the ""virtlogd"" feature in a following change will be easier to review.  blueprint libvirt-virtlogd  Change-Id: Iabe9810b77e2bfe1529e68a1c8c3d75a3425c29e",objective,,,,,,
openstack%2Fnova~master~I06c12a58049737ef49f5cf366499a928f2f6e95f,https://review.opendev.org/323762,libvirt: virtlogd: refactoring 2 before functional change,"libvirt: virtlogd: refactoring 2 before functional change  The conditional logic to create the char devices is spread over 2 methods which makes it confusing to understand under which conditions which char devices get created for the guest. As the ""virtlogd"" feature will append a sub element ""log"" to the first(!) char device in a following change, a refactoring of these conditionals will make the future change easier to understand. This change: * inlines method ""_create_serial_console_devices"" * changes the unit tests accordingly  This refactoring step makes it later easier to understand which functional changes get introduced and under which conditions.  blueprint libvirt-virtlogd  Change-Id: I06c12a58049737ef49f5cf366499a928f2f6e95f",quality,,,,,,
openstack%2Fnova~master~I06c12a58049737ef49f5cf366499a928f2f6e95f,https://review.opendev.org/323762,libvirt: virtlogd: refactoring 2 before functional change,"libvirt: virtlogd: refactoring 2 before functional change  The conditional logic to create the char devices is spread over 2 methods which makes it confusing to understand under which conditions which char devices get created for the guest. As the ""virtlogd"" feature will append a sub element ""log"" to the first(!) char device in a following change, a refactoring of these conditionals will make the future change easier to understand. This change: * inlines method ""_create_serial_console_devices"" * changes the unit tests accordingly  This refactoring step makes it later easier to understand which functional changes get introduced and under which conditions.  blueprint libvirt-virtlogd  Change-Id: I06c12a58049737ef49f5cf366499a928f2f6e95f",objective,,,,,,
openstack%2Fnova~master~Ibd764f0bc6236bd53a920a5fbf805119bdb4ff78,https://review.opendev.org/323761,libvirt: virtlogd: refactoring 1 before functional change,"libvirt: virtlogd: refactoring 1 before functional change  The methods ""_create_consoles"" and ""_create_serial_console_devices"" have many conditional cases and return or append devices. It's confusing to read and understand them. This change: * moves all console related things to ""_create_consoles"" * renames ""_create_consoles"" * adds docstrings to understand which objects are used  This refactoring step makes it later easier to understand which functional changes get introduced and under which conditions.  blueprint libvirt-virtlogd  Change-Id: Ibd764f0bc6236bd53a920a5fbf805119bdb4ff78",quality,,,,,,
openstack%2Fnova~master~Ibd764f0bc6236bd53a920a5fbf805119bdb4ff78,https://review.opendev.org/323761,libvirt: virtlogd: refactoring 1 before functional change,"libvirt: virtlogd: refactoring 1 before functional change  The methods ""_create_consoles"" and ""_create_serial_console_devices"" have many conditional cases and return or append devices. It's confusing to read and understand them. This change: * moves all console related things to ""_create_consoles"" * renames ""_create_consoles"" * adds docstrings to understand which objects are used  This refactoring step makes it later easier to understand which functional changes get introduced and under which conditions.  blueprint libvirt-virtlogd  Change-Id: Ibd764f0bc6236bd53a920a5fbf805119bdb4ff78",objective,,,,,,
openstack%2Fnova~master~I525dc6f8df236f66b9d81c1510a8822214335526,https://review.opendev.org/209904,libvirt: Refactor _volume_snapshot_delete function,"libvirt: Refactor _volume_snapshot_delete function  This patch refactors _volume_snapshot_delete function. It splits it up into different helper functions such that its easier to debug, read and maintain the volume snapshot delete flow.  Change-Id: I525dc6f8df236f66b9d81c1510a8822214335526",quality,,,,,,
openstack%2Fnova~master~Id1580348d4c2ff23d750363fa9a03576080c88c0,https://review.opendev.org/192878,Refactor get_filtered_hosts in filter host manager,Refactor get_filtered_hosts in filter host manager  * Linearized control flow * Removed nested functions * Removed nested loop in filter algorithm; O(kn) becomes O(k+n) * Dictionary no longer requires hashing a tuple  Change-Id: Id1580348d4c2ff23d750363fa9a03576080c88c0,quality,,,,,,
openstack%2Fmonasca-analytics~master~I4e6337a0718a7bd33e547c6739aeba29d40109ea,https://review.opendev.org/313326,"refactored the class by name logic, unifying several functions, modified ml_framework to create the classes at the begining, before binding anything","refactored the class by name logic, unifying several functions, modified ml_framework to create the classes at the begining, before binding anything  Change-Id: I4e6337a0718a7bd33e547c6739aeba29d40109ea",quality,,,,,,
openstack%2Fmonasca-analytics~master~I4e6337a0718a7bd33e547c6739aeba29d40109ea,https://review.opendev.org/313326,"refactored the class by name logic, unifying several functions, modified ml_framework to create the classes at the begining, before binding anything","refactored the class by name logic, unifying several functions, modified ml_framework to create the classes at the begining, before binding anything  Change-Id: I4e6337a0718a7bd33e547c6739aeba29d40109ea",objective,,,,,,
openstack%2Fshade~master~I04d76f02d0a09d811d4e665027ce0e7356802e4f,https://review.opendev.org/294341,Refactor create_image in prep for import from url,"Refactor create_image in prep for import from url  Glance supports tasks for importing from a url. That's awesome. Add support for parameters to indicate that glance should import the image from a URL. This is a half-functional patch. It should not break any existing code, but it will not actually do the import. This is to keep the existing refactor small and make it easier to reason about reviewing.  Change-Id: I04d76f02d0a09d811d4e665027ce0e7356802e4f",quality,,,,,,
openstack%2Fshade~master~I04d76f02d0a09d811d4e665027ce0e7356802e4f,https://review.opendev.org/294341,Refactor create_image in prep for import from url,"Refactor create_image in prep for import from url  Glance supports tasks for importing from a url. That's awesome. Add support for parameters to indicate that glance should import the image from a URL. This is a half-functional patch. It should not break any existing code, but it will not actually do the import. This is to keep the existing refactor small and make it easier to reason about reviewing.  Change-Id: I04d76f02d0a09d811d4e665027ce0e7356802e4f",objective,,,,,,
openstack%2Fshade~master~I04d76f02d0a09d811d4e665027ce0e7356802e4f,https://review.opendev.org/294341,Refactor create_image in prep for import from url,"Refactor create_image in prep for import from url  Glance supports tasks for importing from a url. That's awesome. Add support for parameters to indicate that glance should import the image from a URL. This is a half-functional patch. It should not break any existing code, but it will not actually do the import. This is to keep the existing refactor small and make it easier to reason about reviewing.  Change-Id: I04d76f02d0a09d811d4e665027ce0e7356802e4f",objective,,,,,,
openstack%2Fironic-lib~master~Ie52809d1519e827ddd596b3f4ac8106f252dc4c2,https://review.opendev.org/745535,Refactor ironic-lib to move to oslo.privsep,Refactor ironic-lib to move to oslo.privsep  - Do not check for `run_as_root` and `root_helper` in our execute function in utils.py - Get rid of tests that require run_as_root=False - Simplify disk_partitioner (we don't need an _exec function) - Update tests to reflect that root is used.  Change-Id: Ie52809d1519e827ddd596b3f4ac8106f252dc4c2,testing,,,,,,
openstack%2Fironic-lib~master~Ie52809d1519e827ddd596b3f4ac8106f252dc4c2,https://review.opendev.org/745535,Refactor ironic-lib to move to oslo.privsep,Refactor ironic-lib to move to oslo.privsep  - Do not check for `run_as_root` and `root_helper` in our execute function in utils.py - Get rid of tests that require run_as_root=False - Simplify disk_partitioner (we don't need an _exec function) - Update tests to reflect that root is used.  Change-Id: Ie52809d1519e827ddd596b3f4ac8106f252dc4c2,quality,,,,,,
openstack%2Fironic-lib~master~Ie52809d1519e827ddd596b3f4ac8106f252dc4c2,https://review.opendev.org/745535,Refactor ironic-lib to move to oslo.privsep,Refactor ironic-lib to move to oslo.privsep  - Do not check for `run_as_root` and `root_helper` in our execute function in utils.py - Get rid of tests that require run_as_root=False - Simplify disk_partitioner (we don't need an _exec function) - Update tests to reflect that root is used.  Change-Id: Ie52809d1519e827ddd596b3f4ac8106f252dc4c2,objective,,,,,,
openstack%2Fmonasca-log-api~master~Ic51fd283c919af9a3cb40e49a892e14756646d60,https://review.opendev.org/285266,Code refactor for v2-v3,Code refactor for v2-v3  Refactoring code to reuse as much functionality as possible.  Change-Id: Ic51fd283c919af9a3cb40e49a892e14756646d60,quality,,,,,,
openstack%2Fnetworking-ovn~master~Id8fb2c7ec486ec4d455def32182b4e8abb893da6,https://review.opendev.org/276470,Refactor separate ovsdb-server launches,"Refactor separate ovsdb-server launches  To clean up the code, refactor the snippets that create log links and launch ovsdb-server processes into functions.  Change-Id: Id8fb2c7ec486ec4d455def32182b4e8abb893da6 Signed-off-by: RYAN D. MOATS <rmoats@us.ibm.com>",quality,,,,,,
openstack%2Ftrove~master~Ia193afa5a144dce247d621d14f84c9f066ab4c6a,https://review.opendev.org/263922,Code refactoring for couchdb,"Code refactoring for couchdb  The code in the change_permissions function for couchdb in service.py was refactored. In addition, translation was added to several RuntimeError messages that were missing the underscore for translation. Replaced shell calls with the respective operating_system service commands - start/stop/ enable/disable/ change permissions and modified tests as necessary. Created operating_system service command change_user_group and associated tests.  Change-Id: Ia193afa5a144dce247d621d14f84c9f066ab4c6a",integration,,,,,,
openstack%2Ftrove~master~Ia193afa5a144dce247d621d14f84c9f066ab4c6a,https://review.opendev.org/263922,Code refactoring for couchdb,"Code refactoring for couchdb  The code in the change_permissions function for couchdb in service.py was refactored. In addition, translation was added to several RuntimeError messages that were missing the underscore for translation. Replaced shell calls with the respective operating_system service commands - start/stop/ enable/disable/ change permissions and modified tests as necessary. Created operating_system service command change_user_group and associated tests.  Change-Id: Ia193afa5a144dce247d621d14f84c9f066ab4c6a",objective,,,,,,
openstack%2Ftrove~master~Ia193afa5a144dce247d621d14f84c9f066ab4c6a,https://review.opendev.org/263922,Code refactoring for couchdb,"Code refactoring for couchdb  The code in the change_permissions function for couchdb in service.py was refactored. In addition, translation was added to several RuntimeError messages that were missing the underscore for translation. Replaced shell calls with the respective operating_system service commands - start/stop/ enable/disable/ change permissions and modified tests as necessary. Created operating_system service command change_user_group and associated tests.  Change-Id: Ia193afa5a144dce247d621d14f84c9f066ab4c6a",quality,,,,,,
openstack%2Ftaskflow~master~Ifcaf2a0d4e930d60dba6427837dc3f161109b357,https://review.opendev.org/187376,Refactor argument and provider fetching,"Refactor `fetch_mapped_args` and `fetch_unsatisfied_args`  Both of these can share a function that is used to lookup which provider (or possible provider) produces or provides a needed value, so instead of duplicating that code share it across both methods and refactor both to use it so that less code is duplicated (and therefore less errors and issues due to that).  Change-Id: Ifcaf2a0d4e930d60dba6427837dc3f161109b357",quality,,,,,,
openstack%2Ftaskflow~master~Ifcaf2a0d4e930d60dba6427837dc3f161109b357,https://review.opendev.org/187376,Refactor argument and provider fetching,"Refactor `fetch_mapped_args` and `fetch_unsatisfied_args`  Both of these can share a function that is used to lookup which provider (or possible provider) produces or provides a needed value, so instead of duplicating that code share it across both methods and refactor both to use it so that less code is duplicated (and therefore less errors and issues due to that).  Change-Id: Ifcaf2a0d4e930d60dba6427837dc3f161109b357",objective,,,,,,
openstack%2Ftraining-labs~kilo-stable~Ib0ed26e24d07e093f7a2bf29723b53b558cd769b,https://review.opendev.org/261377,Refactoring osbash networking code,"Refactoring osbash networking code  In preparation for Liberty, which removes some networks and adds a new type of network interface configuration (manual), this patch refactors the osbash networking code.  - fewer hardcoded settings (e.g., removed hardcoded list of networks   from osbash.sh)  - eliminated code duplication for client-side network configuration and   split remaining code into separate libraries (functions.ubuntu.sh,   functions.fedora.sh)  - simplify code, e.g. by removing some magic that deduced network names   for KVM from variable names like MGMT_NET  - universal functions for reading network and network interface   configuration into arrays (get_host_network_config,   get_node_netif_config)  - the number of networks is no longer hardcoded in the template for   Windows hostnet creation  - renamed some variables, functions and files to (hopefully) be easier   to understand  Change-Id: Ib0ed26e24d07e093f7a2bf29723b53b558cd769b",objective,,,,,,
openstack%2Ftraining-labs~kilo-stable~Ib0ed26e24d07e093f7a2bf29723b53b558cd769b,https://review.opendev.org/261377,Refactoring osbash networking code,"Refactoring osbash networking code  In preparation for Liberty, which removes some networks and adds a new type of network interface configuration (manual), this patch refactors the osbash networking code.  - fewer hardcoded settings (e.g., removed hardcoded list of networks   from osbash.sh)  - eliminated code duplication for client-side network configuration and   split remaining code into separate libraries (functions.ubuntu.sh,   functions.fedora.sh)  - simplify code, e.g. by removing some magic that deduced network names   for KVM from variable names like MGMT_NET  - universal functions for reading network and network interface   configuration into arrays (get_host_network_config,   get_node_netif_config)  - the number of networks is no longer hardcoded in the template for   Windows hostnet creation  - renamed some variables, functions and files to (hopefully) be easier   to understand  Change-Id: Ib0ed26e24d07e093f7a2bf29723b53b558cd769b",quality,,,,,,
openstack%2Ftraining-labs~kilo-stable~Ib0ed26e24d07e093f7a2bf29723b53b558cd769b,https://review.opendev.org/261377,Refactoring osbash networking code,"Refactoring osbash networking code  In preparation for Liberty, which removes some networks and adds a new type of network interface configuration (manual), this patch refactors the osbash networking code.  - fewer hardcoded settings (e.g., removed hardcoded list of networks   from osbash.sh)  - eliminated code duplication for client-side network configuration and   split remaining code into separate libraries (functions.ubuntu.sh,   functions.fedora.sh)  - simplify code, e.g. by removing some magic that deduced network names   for KVM from variable names like MGMT_NET  - universal functions for reading network and network interface   configuration into arrays (get_host_network_config,   get_node_netif_config)  - the number of networks is no longer hardcoded in the template for   Windows hostnet creation  - renamed some variables, functions and files to (hopefully) be easier   to understand  Change-Id: Ib0ed26e24d07e093f7a2bf29723b53b558cd769b",objective,,,,,,
openstack%2Fcinder~master~I30d0c8e6270dc246342566dd5761d8f81e72b884,https://review.opendev.org/260377,Huawei: Refactor driver for the second time,"Huawei: Refactor driver for the second time  After a few new features being added into drivers, we found it hard to maintain the code. For further working, we need to refactor our code. The work contains the following: 1. Define a new class, named HuaweiConf, to parse xml config file. We used an external xml file to store SAN info. But we do config parsing anywhere in our code, even two different functions do the same parsing. 2. Adjust some function structures. 3. Rename some functions & variables.  DocImpact Implements: blueprint refactor-huawei-driver  Change-Id: I30d0c8e6270dc246342566dd5761d8f81e72b884",quality,,,,,,
openstack%2Fcinder~master~I30d0c8e6270dc246342566dd5761d8f81e72b884,https://review.opendev.org/260377,Huawei: Refactor driver for the second time,"Huawei: Refactor driver for the second time  After a few new features being added into drivers, we found it hard to maintain the code. For further working, we need to refactor our code. The work contains the following: 1. Define a new class, named HuaweiConf, to parse xml config file. We used an external xml file to store SAN info. But we do config parsing anywhere in our code, even two different functions do the same parsing. 2. Adjust some function structures. 3. Rename some functions & variables.  DocImpact Implements: blueprint refactor-huawei-driver  Change-Id: I30d0c8e6270dc246342566dd5761d8f81e72b884",objective,,,,,,
openstack%2Fcinder~master~Ica34f630241d7d58ac6be8020a4d827643c23ad6,https://review.opendev.org/256919,Huawei: Refactor driver for the second time,"Huawei: Refactor driver for the second time  After a few new features being added into drivers, we found it hard to maintain the code. For further working, we need to refactor our code. The work contains the following: 1. Define a new class, named HuaweiConf, to parse xml config file. We used an external xml file to store SAN info. But we do config parsing anywhere in our code, even two different functions do the same parsing. 2. Adjust some function structures. 3. Rename some functions & variables.  DocImpact Implements: blueprint refactor-huawei-driver  Change-Id: Ica34f630241d7d58ac6be8020a4d827643c23ad6",quality,,,,,,
openstack%2Fcinder~master~Ica34f630241d7d58ac6be8020a4d827643c23ad6,https://review.opendev.org/256919,Huawei: Refactor driver for the second time,"Huawei: Refactor driver for the second time  After a few new features being added into drivers, we found it hard to maintain the code. For further working, we need to refactor our code. The work contains the following: 1. Define a new class, named HuaweiConf, to parse xml config file. We used an external xml file to store SAN info. But we do config parsing anywhere in our code, even two different functions do the same parsing. 2. Adjust some function structures. 3. Rename some functions & variables.  DocImpact Implements: blueprint refactor-huawei-driver  Change-Id: Ica34f630241d7d58ac6be8020a4d827643c23ad6",objective,,,,,,
openstack%2Fcinder~master~I3b8e01e7a5fc1054110cecedf6a17fde3823a885,https://review.opendev.org/255692,Huawei: Refactor driver for the second time,"Huawei: Refactor driver for the second time  After a few new features being added into drivers, we found it hard to maintain the code. For further working, we need to refactor our code. The work contains the following: 1. Define a new class, named HuaweiConf, to parse xml config file. We used an external xml file to store SAN info. But we do config parsing anywhere in our code, even two different functions do the same parsing. 2. Adjust some function structures. 3. Rename some functions & variables.  DocImpact Implements: blueprint refactor-huawei-driver  Change-Id: I3b8e01e7a5fc1054110cecedf6a17fde3823a885",quality,,,,,,
openstack%2Fcinder~master~I3b8e01e7a5fc1054110cecedf6a17fde3823a885,https://review.opendev.org/255692,Huawei: Refactor driver for the second time,"Huawei: Refactor driver for the second time  After a few new features being added into drivers, we found it hard to maintain the code. For further working, we need to refactor our code. The work contains the following: 1. Define a new class, named HuaweiConf, to parse xml config file. We used an external xml file to store SAN info. But we do config parsing anywhere in our code, even two different functions do the same parsing. 2. Adjust some function structures. 3. Rename some functions & variables.  DocImpact Implements: blueprint refactor-huawei-driver  Change-Id: I3b8e01e7a5fc1054110cecedf6a17fde3823a885",objective,,,,,,
openstack%2Fneutron~master~I9356755bd9e54e47e75b6342b702eee31865a538,https://review.opendev.org/238967,WIP! DO NOT MERGE: refactor DVR local and edge router classes,WIP! DO NOT MERGE: refactor DVR local and edge router classes  Rename DVR router classes to distributed and centralized to reflect their functionality. Refactor code between distributed router and DvrRouterBase classes to allow the centralized router class to inherit from DvrRouterBase rather than from the distributed router class.  Change-Id: I9356755bd9e54e47e75b6342b702eee31865a538 Signed-off-by: Ryan Moats <rmoats@us.ibm.com>,quality,,,,,,
openstack%2Fneutron~master~I9356755bd9e54e47e75b6342b702eee31865a538,https://review.opendev.org/238967,WIP! DO NOT MERGE: refactor DVR local and edge router classes,WIP! DO NOT MERGE: refactor DVR local and edge router classes  Rename DVR router classes to distributed and centralized to reflect their functionality. Refactor code between distributed router and DvrRouterBase classes to allow the centralized router class to inherit from DvrRouterBase rather than from the distributed router class.  Change-Id: I9356755bd9e54e47e75b6342b702eee31865a538 Signed-off-by: Ryan Moats <rmoats@us.ibm.com>,objective,,,,,,
openstack%2Fneutron~master~I9356755bd9e54e47e75b6342b702eee31865a538,https://review.opendev.org/238967,WIP! DO NOT MERGE: refactor DVR local and edge router classes,WIP! DO NOT MERGE: refactor DVR local and edge router classes  Rename DVR router classes to distributed and centralized to reflect their functionality. Refactor code between distributed router and DvrRouterBase classes to allow the centralized router class to inherit from DvrRouterBase rather than from the distributed router class.  Change-Id: I9356755bd9e54e47e75b6342b702eee31865a538 Signed-off-by: Ryan Moats <rmoats@us.ibm.com>,objective,,,,,,
openstack%2Fcinder~master~Iea2adf7579c6aa0341521aaa91b99081e4701e2b,https://review.opendev.org/248187,Refactor SRB Unittest LVM command handlers.,"Refactor SRB Unittest LVM command handlers.  For the LVM command act() handlers, call them with any env variable settings stripped off the head of the cmd list passed in; this makes it easier to maintain patches that add or remove env variable values as the cmd list indexes in the act() handler will not change, and the check() handler already validates that the env settings are present. The stripping is performed by the newly added _strip_env_settings() helper.  Created _lvm_size_to_bytes() helper function to replace a repeated pattern of code identified in the LVM command act() handlers.  Change-Id: Iea2adf7579c6aa0341521aaa91b99081e4701e2b",quality,,,,,,
openstack%2Fcinder~master~Iea2adf7579c6aa0341521aaa91b99081e4701e2b,https://review.opendev.org/248187,Refactor SRB Unittest LVM command handlers.,"Refactor SRB Unittest LVM command handlers.  For the LVM command act() handlers, call them with any env variable settings stripped off the head of the cmd list passed in; this makes it easier to maintain patches that add or remove env variable values as the cmd list indexes in the act() handler will not change, and the check() handler already validates that the env settings are present. The stripping is performed by the newly added _strip_env_settings() helper.  Created _lvm_size_to_bytes() helper function to replace a repeated pattern of code identified in the LVM command act() handlers.  Change-Id: Iea2adf7579c6aa0341521aaa91b99081e4701e2b",objective,,,,,,
openstack%2Fcinder~master~Iea2adf7579c6aa0341521aaa91b99081e4701e2b,https://review.opendev.org/248187,Refactor SRB Unittest LVM command handlers.,"Refactor SRB Unittest LVM command handlers.  For the LVM command act() handlers, call them with any env variable settings stripped off the head of the cmd list passed in; this makes it easier to maintain patches that add or remove env variable values as the cmd list indexes in the act() handler will not change, and the check() handler already validates that the env settings are present. The stripping is performed by the newly added _strip_env_settings() helper.  Created _lvm_size_to_bytes() helper function to replace a repeated pattern of code identified in the LVM command act() handlers.  Change-Id: Iea2adf7579c6aa0341521aaa91b99081e4701e2b",objective,,,,,,
openstack%2Fhorizon~master~I9a3ebb1d06d257b7b584adc556ec2872a01136d3,https://review.opendev.org/179545,Refactor Angular features enablement,"Refactor Angular features enablement  To support stand settings service lookups, this creates a common features area under local_settings.py and creates common utility functions to access it.  Change-Id: I9a3ebb1d06d257b7b584adc556ec2872a01136d3 Partial-Bug: #1450940",objective,,,,,,
openstack%2Fhorizon~master~I9a3ebb1d06d257b7b584adc556ec2872a01136d3,https://review.opendev.org/179545,Refactor Angular features enablement,"Refactor Angular features enablement  To support stand settings service lookups, this creates a common features area under local_settings.py and creates common utility functions to access it.  Change-Id: I9a3ebb1d06d257b7b584adc556ec2872a01136d3 Partial-Bug: #1450940",objective,,,,,,
openstack%2Fcharm-nova-cloud-controller~master~I406d1daacbcc74eb6f3e090f9a46e01dd3e19cc8,https://review.opendev.org/670912,Refactor compute hostname resolving functionality,Refactor compute hostname resolving functionality  The main driver here is to separate the concerns of resolving host names and adding them to service/user related files.  This is to enable the (eventual) resolution of the feature to allow migrations across relation ids (i.e. between nova-compute applications) and to enable caching of hostname look ups.  Change-Id: I406d1daacbcc74eb6f3e090f9a46e01dd3e19cc8,objective,,,,,,
openstack%2Fcharm-nova-cloud-controller~master~I406d1daacbcc74eb6f3e090f9a46e01dd3e19cc8,https://review.opendev.org/670912,Refactor compute hostname resolving functionality,Refactor compute hostname resolving functionality  The main driver here is to separate the concerns of resolving host names and adding them to service/user related files.  This is to enable the (eventual) resolution of the feature to allow migrations across relation ids (i.e. between nova-compute applications) and to enable caching of hostname look ups.  Change-Id: I406d1daacbcc74eb6f3e090f9a46e01dd3e19cc8,objective,,,,,,
openstack%2Fneutron~stable%2Fstein~Iadf704c00378da99c502dca3e3b79796c368cac7,https://review.opendev.org/669394,Refactor qos_plugin._extend_port_resource_request,"Refactor qos_plugin._extend_port_resource_request  In order to speed up the port collection, some DB calls have been deleted in the extended function ""QoSPlugin._extend_port_resource_request"".  With the parent commit, the port DB/OVO object now has the network QoS policy ID, making the network retrieval unneeded.  In this refactor the QoS policy is collected from the DB only if a valid QoS policy ID exists, bound to the port or to the network. This reduces the number of QoS objects collection to one or zero.  Change-Id: Iadf704c00378da99c502dca3e3b79796c368cac7 Closes-Bug: #1834484 (cherry picked from commit 8b00349a63c65e04b3d188366245234e880b7f60)",quality,,,,,,
openstack%2Fneutron~stable%2Fstein~Iadf704c00378da99c502dca3e3b79796c368cac7,https://review.opendev.org/669394,Refactor qos_plugin._extend_port_resource_request,"Refactor qos_plugin._extend_port_resource_request  In order to speed up the port collection, some DB calls have been deleted in the extended function ""QoSPlugin._extend_port_resource_request"".  With the parent commit, the port DB/OVO object now has the network QoS policy ID, making the network retrieval unneeded.  In this refactor the QoS policy is collected from the DB only if a valid QoS policy ID exists, bound to the port or to the network. This reduces the number of QoS objects collection to one or zero.  Change-Id: Iadf704c00378da99c502dca3e3b79796c368cac7 Closes-Bug: #1834484 (cherry picked from commit 8b00349a63c65e04b3d188366245234e880b7f60)",integration,,,,,,
openstack%2Fneutron~stable%2Fstein~Iadf704c00378da99c502dca3e3b79796c368cac7,https://review.opendev.org/669394,Refactor qos_plugin._extend_port_resource_request,"Refactor qos_plugin._extend_port_resource_request  In order to speed up the port collection, some DB calls have been deleted in the extended function ""QoSPlugin._extend_port_resource_request"".  With the parent commit, the port DB/OVO object now has the network QoS policy ID, making the network retrieval unneeded.  In this refactor the QoS policy is collected from the DB only if a valid QoS policy ID exists, bound to the port or to the network. This reduces the number of QoS objects collection to one or zero.  Change-Id: Iadf704c00378da99c502dca3e3b79796c368cac7 Closes-Bug: #1834484 (cherry picked from commit 8b00349a63c65e04b3d188366245234e880b7f60)",objective,,,,,,
openstack%2Fnova~master~I02179e5d1138278021200d2bad7c7d05efda0ea2,https://review.opendev.org/641679,Refactor bandwidth related functional tests,Refactor bandwidth related functional tests  The common code that checked the allocation on the compute RP is move to a separate function.  The PCI addresses used by the fake virt driver are moved to a constant.  Change-Id: I02179e5d1138278021200d2bad7c7d05efda0ea2,refactoring,,,,,,
openstack%2Fnova~master~I02179e5d1138278021200d2bad7c7d05efda0ea2,https://review.opendev.org/641679,Refactor bandwidth related functional tests,Refactor bandwidth related functional tests  The common code that checked the allocation on the compute RP is move to a separate function.  The PCI addresses used by the fake virt driver are moved to a constant.  Change-Id: I02179e5d1138278021200d2bad7c7d05efda0ea2,testing,,,,,,
openstack%2Fcharm-nova-cloud-controller~master~I81d9924bebe4009119505b1d5dccf2e498925c7e,https://review.opendev.org/668711,Refactor region notification code to not need unit,"Refactor region notification code to not need unit  The (already) refactored region notification code checked for the 'region' value in the remote unit, despite the nova-compute charm not setting the value.  This has been removed.  Now that the function only needs to be set for the relation, it is no longer included in 'unit' loops.  The utility function is also renamed to set_region_on_relation_from_config to better reflect it's actual function.  Change-Id: I81d9924bebe4009119505b1d5dccf2e498925c7e Related-Bug: #1833420",quality,,,,,,
openstack%2Fcharm-nova-cloud-controller~master~I81d9924bebe4009119505b1d5dccf2e498925c7e,https://review.opendev.org/668711,Refactor region notification code to not need unit,"Refactor region notification code to not need unit  The (already) refactored region notification code checked for the 'region' value in the remote unit, despite the nova-compute charm not setting the value.  This has been removed.  Now that the function only needs to be set for the relation, it is no longer included in 'unit' loops.  The utility function is also renamed to set_region_on_relation_from_config to better reflect it's actual function.  Change-Id: I81d9924bebe4009119505b1d5dccf2e498925c7e Related-Bug: #1833420",objective,,,,,,
openstack%2Fcharm-nova-cloud-controller~master~Id2774bb1551e4826a2fd71d1a371d65ab2439a7d,https://review.opendev.org/668401,Refactor ssh_known_hosts_lines() and ssh_authorized_keys_lines(),Refactor ssh_known_hosts_lines() and ssh_authorized_keys_lines()  Refactor ssh_known_hosts_lines() and ssh_authorized_keys_lines to be easier to maintain and only call rstrip() once (per function).  Change-Id: Id2774bb1551e4826a2fd71d1a371d65ab2439a7d,quality,,,,,,
openstack%2Fcharm-nova-cloud-controller~master~Id2774bb1551e4826a2fd71d1a371d65ab2439a7d,https://review.opendev.org/668401,Refactor ssh_known_hosts_lines() and ssh_authorized_keys_lines(),Refactor ssh_known_hosts_lines() and ssh_authorized_keys_lines()  Refactor ssh_known_hosts_lines() and ssh_authorized_keys_lines to be easier to maintain and only call rstrip() once (per function).  Change-Id: Id2774bb1551e4826a2fd71d1a371d65ab2439a7d,objective,,,,,,
openstack%2Fcharm-nova-cloud-controller~master~I59e52076480729beec9e125f66714a208303908d,https://review.opendev.org/667652,Refactor compute_changed() hook handler,"Refactor compute_changed() hook handler  The compute_changed() function (which handled the cloud-compute relation changed hook event) was also used in the config-changed and update-charm hooks.  This meant that it did a lot of work that wasn't necessary for those hooks.  This patch splits the function up into separate functions that deal with one thing, and then introduces a new function to call those.  This means that the other usages compute_changed() now use the actual features that they need.  Change-Id: I59e52076480729beec9e125f66714a208303908d Related-Bug: 1833420",quality,,,,,,
openstack%2Fcharm-nova-cloud-controller~master~I59e52076480729beec9e125f66714a208303908d,https://review.opendev.org/667652,Refactor compute_changed() hook handler,"Refactor compute_changed() hook handler  The compute_changed() function (which handled the cloud-compute relation changed hook event) was also used in the config-changed and update-charm hooks.  This meant that it did a lot of work that wasn't necessary for those hooks.  This patch splits the function up into separate functions that deal with one thing, and then introduces a new function to call those.  This means that the other usages compute_changed() now use the actual features that they need.  Change-Id: I59e52076480729beec9e125f66714a208303908d Related-Bug: 1833420",objective,,,,,,
openstack%2Fcharm-nova-cloud-controller~master~I59e52076480729beec9e125f66714a208303908d,https://review.opendev.org/667652,Refactor compute_changed() hook handler,"Refactor compute_changed() hook handler  The compute_changed() function (which handled the cloud-compute relation changed hook event) was also used in the config-changed and update-charm hooks.  This meant that it did a lot of work that wasn't necessary for those hooks.  This patch splits the function up into separate functions that deal with one thing, and then introduces a new function to call those.  This means that the other usages compute_changed() now use the actual features that they need.  Change-Id: I59e52076480729beec9e125f66714a208303908d Related-Bug: 1833420",objective,,,,,,
openstack%2Fcharm-nova-compute~master~I095104f535c1eae1554f842502ae93ebb92e44fe,https://review.opendev.org/666374,Refactor import_authorized_keys() function for performance,"Refactor import_authorized_keys() function for performance  The main change is to fetch all of the relation_data() at once, and then iterate through the python dictionary.  This speeds up processing of potentially hundreds of hosts and authorized_keys.  Change-Id: I095104f535c1eae1554f842502ae93ebb92e44fe Related-Bug: #1833420",quality,,,,,,
openstack%2Fcharm-nova-compute~master~I095104f535c1eae1554f842502ae93ebb92e44fe,https://review.opendev.org/666374,Refactor import_authorized_keys() function for performance,"Refactor import_authorized_keys() function for performance  The main change is to fetch all of the relation_data() at once, and then iterate through the python dictionary.  This speeds up processing of potentially hundreds of hosts and authorized_keys.  Change-Id: I095104f535c1eae1554f842502ae93ebb92e44fe Related-Bug: #1833420",objective,,,,,,
openstack%2Fnova~master~I9725f752f8aef8066f7c9705e87610cad887bf8e,https://review.opendev.org/643779,refactor nova-manage archive_deleted_rows,"refactor nova-manage archive_deleted_rows  In Change I408c22d8eada0518ec5d685213f250e8e3dae76e we want to be able to archive records before a certain date. Without this patch,it will require a few modifications to records in instance_actions, instance_actions_events and migrations tables as they are handled separately from other tables.  However, refactoring the archiving workflow to archive all dependent tables in same function '_archive_if_instance_deleted()' allows archiving without updating rows in those table. This is much cleaner.  Change-Id: I9725f752f8aef8066f7c9705e87610cad887bf8e",objective,,,,,,
openstack%2Fnova~master~I9725f752f8aef8066f7c9705e87610cad887bf8e,https://review.opendev.org/643779,refactor nova-manage archive_deleted_rows,"refactor nova-manage archive_deleted_rows  In Change I408c22d8eada0518ec5d685213f250e8e3dae76e we want to be able to archive records before a certain date. Without this patch,it will require a few modifications to records in instance_actions, instance_actions_events and migrations tables as they are handled separately from other tables.  However, refactoring the archiving workflow to archive all dependent tables in same function '_archive_if_instance_deleted()' allows archiving without updating rows in those table. This is much cleaner.  Change-Id: I9725f752f8aef8066f7c9705e87610cad887bf8e",quality,,,,,,
x%2Ffixtures-git~master~I3365a2c49ff570bd9e5eba5f53b4b3908dddd2b6,https://review.opendev.org/660747,Split code for reuse and refactor for code style,"Split code for reuse and refactor for code style  To make it easier to reuse GitTree elsewhere move outside of the gitfixture and reference.  Instead of treating the functions in utils as private to indicate they shouldn't be relied upon outside of the package, switch utils to indicate that it should not relied upon to clear up some IDE warnings on use of private functions.  Finally avoid use of potentially mutable default params.  Change-Id: I3365a2c49ff570bd9e5eba5f53b4b3908dddd2b6",quality,,,,,,
x%2Ffixtures-git~master~I3365a2c49ff570bd9e5eba5f53b4b3908dddd2b6,https://review.opendev.org/660747,Split code for reuse and refactor for code style,"Split code for reuse and refactor for code style  To make it easier to reuse GitTree elsewhere move outside of the gitfixture and reference.  Instead of treating the functions in utils as private to indicate they shouldn't be relied upon outside of the package, switch utils to indicate that it should not relied upon to clear up some IDE warnings on use of private functions.  Finally avoid use of potentially mutable default params.  Change-Id: I3365a2c49ff570bd9e5eba5f53b4b3908dddd2b6",objective,,,,,,
openstack%2Fpython-tripleoclient~master~I9f45661d432c47f9df962009cc3c6b9182006d1c,https://review.opendev.org/658129,Refactor stack output fetching,Refactor stack output fetching  We are duplicating the code to fetch a specific value from the stack outputs. This adds a get_stack_output_item that can be used to fetch any named stack output and refactors the other functions that did this same type of action.  Change-Id: I9f45661d432c47f9df962009cc3c6b9182006d1c,quality,,,,,,
openstack%2Fpython-tripleoclient~master~I9f45661d432c47f9df962009cc3c6b9182006d1c,https://review.opendev.org/658129,Refactor stack output fetching,Refactor stack output fetching  We are duplicating the code to fetch a specific value from the stack outputs. This adds a get_stack_output_item that can be used to fetch any named stack output and refactors the other functions that did this same type of action.  Change-Id: I9f45661d432c47f9df962009cc3c6b9182006d1c,objective,,,,,,
openstack%2Fopenstacksdk~master~I9d36d3a52370d6a1040362e1d6e762146df86258,https://review.opendev.org/651534,Continue refactoring of the image,"Continue refactoring of the image  Next refactoring monster with: - switch bunch of cloud._image methods to using image.proxy methods - Add new image.Image attribute - Fix image properties by adding global support for keeping ""unknown""  attributes under properties attr - turn back function lost in openstackcloud split (sadly not found by  unittests) - add ability to create image without data required by OSC to switch to  SDK  Change-Id: I9d36d3a52370d6a1040362e1d6e762146df86258",objective,,,,,,
openstack%2Fopenstacksdk~master~I9d36d3a52370d6a1040362e1d6e762146df86258,https://review.opendev.org/651534,Continue refactoring of the image,"Continue refactoring of the image  Next refactoring monster with: - switch bunch of cloud._image methods to using image.proxy methods - Add new image.Image attribute - Fix image properties by adding global support for keeping ""unknown""  attributes under properties attr - turn back function lost in openstackcloud split (sadly not found by  unittests) - add ability to create image without data required by OSC to switch to  SDK  Change-Id: I9d36d3a52370d6a1040362e1d6e762146df86258",objective,,,,,,
x%2Ftobiko~master~I0129e91b9fd58ac75223c8faca43e690a39061b5,https://review.opendev.org/655303,Refactor tox.ini to match OpenStack Project Testing Interface,"Refactor tox.ini to match OpenStack Project Testing Interface  OpenStack Project Testing Interface[1] extabilish a set of rules to make sure project testing interface looks similarly between OpenStack projects. This is intended to be the first change in such direction.  Major improvements are: - Separate new cover environment from other testing environments - Reorganize tox.ini to better separate type of envs in sections - Create an [openstack] section to unify settings for environments   that would require connecting to OpenStack (functional, scenarion,   ...) - Create scenario env to exectute all scenarion tests including   Neutron ones. - Point to the new URL for upstream upper hand global requirements file.  Know missing things are: - Create docs environment. - Create functional env.  [1] https://governance.openstack.org/tc/reference/project-testing-interface.html  Change-Id: I0129e91b9fd58ac75223c8faca43e690a39061b5",testing,,,,,,
x%2Ftobiko~master~I0129e91b9fd58ac75223c8faca43e690a39061b5,https://review.opendev.org/655303,Refactor tox.ini to match OpenStack Project Testing Interface,"Refactor tox.ini to match OpenStack Project Testing Interface  OpenStack Project Testing Interface[1] extabilish a set of rules to make sure project testing interface looks similarly between OpenStack projects. This is intended to be the first change in such direction.  Major improvements are: - Separate new cover environment from other testing environments - Reorganize tox.ini to better separate type of envs in sections - Create an [openstack] section to unify settings for environments   that would require connecting to OpenStack (functional, scenarion,   ...) - Create scenario env to exectute all scenarion tests including   Neutron ones. - Point to the new URL for upstream upper hand global requirements file.  Know missing things are: - Create docs environment. - Create functional env.  [1] https://governance.openstack.org/tc/reference/project-testing-interface.html  Change-Id: I0129e91b9fd58ac75223c8faca43e690a39061b5",quality,,,,,,
x%2Ftobiko~master~I0129e91b9fd58ac75223c8faca43e690a39061b5,https://review.opendev.org/655303,Refactor tox.ini to match OpenStack Project Testing Interface,"Refactor tox.ini to match OpenStack Project Testing Interface  OpenStack Project Testing Interface[1] extabilish a set of rules to make sure project testing interface looks similarly between OpenStack projects. This is intended to be the first change in such direction.  Major improvements are: - Separate new cover environment from other testing environments - Reorganize tox.ini to better separate type of envs in sections - Create an [openstack] section to unify settings for environments   that would require connecting to OpenStack (functional, scenarion,   ...) - Create scenario env to exectute all scenarion tests including   Neutron ones. - Point to the new URL for upstream upper hand global requirements file.  Know missing things are: - Create docs environment. - Create functional env.  [1] https://governance.openstack.org/tc/reference/project-testing-interface.html  Change-Id: I0129e91b9fd58ac75223c8faca43e690a39061b5",objective,,,,,,
x%2Ftobiko~master~I0129e91b9fd58ac75223c8faca43e690a39061b5,https://review.opendev.org/655303,Refactor tox.ini to match OpenStack Project Testing Interface,"Refactor tox.ini to match OpenStack Project Testing Interface  OpenStack Project Testing Interface[1] extabilish a set of rules to make sure project testing interface looks similarly between OpenStack projects. This is intended to be the first change in such direction.  Major improvements are: - Separate new cover environment from other testing environments - Reorganize tox.ini to better separate type of envs in sections - Create an [openstack] section to unify settings for environments   that would require connecting to OpenStack (functional, scenarion,   ...) - Create scenario env to exectute all scenarion tests including   Neutron ones. - Point to the new URL for upstream upper hand global requirements file.  Know missing things are: - Create docs environment. - Create functional env.  [1] https://governance.openstack.org/tc/reference/project-testing-interface.html  Change-Id: I0129e91b9fd58ac75223c8faca43e690a39061b5",objective,,,,,,
openstack%2Fswift~master~Icf30f6799e4e5c7bb5c3d468c0e7e8591334ac1e,https://review.opendev.org/779564,relinker: refactor to share common code,relinker: refactor to share common code  Refactor the relinker to reduce the amount of code that is duplicated in the relink and cleanup functions.  Change-Id: Icf30f6799e4e5c7bb5c3d468c0e7e8591334ac1e,quality,,,,,,
airship%2Fsip~master~I9c90d4b9b83074a0ddfb681d9d5ee5e21b599ede,https://review.opendev.org/780610,Light refactoring,"Light refactoring  This is a small change to fix some spelling issues, logging mistakes, and simplifying small functions.  Change-Id: I9c90d4b9b83074a0ddfb681d9d5ee5e21b599ede",refactoring,,,,,,
openstack%2Fmanila~master~I36b1757acbacfeb48264946ff7a5299ddd3307e8,https://review.opendev.org/637926,Refactor Container Driver,"Refactor Container Driver  The container driver code needs a refactor to facilitate the development of new functionality. This patch improves:  - Error handling: don't swallow every exception. - Method modularization: move common code to private methods. - Move methods to more appropriate classes: methods should live   in classes that encapsulate their responsibility. E.g: the   protocol helper should not access the container to obtain its   IP address, it should invoke a method from the container helper. - Don't use share_id everywhere: even though the code   currently does not use the instance_id, deriving the   share name from the export location makes it easier to   support instance_id or manage/unmanage future implementations.  Change-Id: I36b1757acbacfeb48264946ff7a5299ddd3307e8",quality,,,,,,
openstack%2Fmanila~master~I36b1757acbacfeb48264946ff7a5299ddd3307e8,https://review.opendev.org/637926,Refactor Container Driver,"Refactor Container Driver  The container driver code needs a refactor to facilitate the development of new functionality. This patch improves:  - Error handling: don't swallow every exception. - Method modularization: move common code to private methods. - Move methods to more appropriate classes: methods should live   in classes that encapsulate their responsibility. E.g: the   protocol helper should not access the container to obtain its   IP address, it should invoke a method from the container helper. - Don't use share_id everywhere: even though the code   currently does not use the instance_id, deriving the   share name from the export location makes it easier to   support instance_id or manage/unmanage future implementations.  Change-Id: I36b1757acbacfeb48264946ff7a5299ddd3307e8",objective,,,,,,
openstack%2Fkeystone~master~I0e322a745683c43e8329110a165f54d2e998e0c7,https://review.opendev.org/615314,Refactor directory creation into a common place,Refactor directory creation into a common place  There is a useful method in the fernet_utils.py module for creating directories. We can reuse this for the jwt provider implementation.  This commit generalizes the logic and moves it into a common place for fernet_utils to use. A subsequent patch introducing JWT functionality will use the same utils.  bp json-web-tokens  Change-Id: I0e322a745683c43e8329110a165f54d2e998e0c7,quality,,,,,,
openstack%2Fkeystone~master~I0e322a745683c43e8329110a165f54d2e998e0c7,https://review.opendev.org/615314,Refactor directory creation into a common place,Refactor directory creation into a common place  There is a useful method in the fernet_utils.py module for creating directories. We can reuse this for the jwt provider implementation.  This commit generalizes the logic and moves it into a common place for fernet_utils to use. A subsequent patch introducing JWT functionality will use the same utils.  bp json-web-tokens  Change-Id: I0e322a745683c43e8329110a165f54d2e998e0c7,objective,,,,,,
openstack%2Fnova~stable%2Fpike~I318b9118c97d7bf2b61bc45698443e8d0255ff6f,https://review.opendev.org/587248,Refactor _build_device_metadata,"Refactor _build_device_metadata  This patch splits out interface and disk metadata generation into its own function each, in preparation for handling hostdev metadata generation in a subsequent patch. It also adds some debug logging.  NOTE(artom): Queens -> Pike backport is clean, conflicts in nova/virt/libvirt/driver.py in Queens due to trusted VFs not being present.  Related-bug: 1743458 Change-Id: I318b9118c97d7bf2b61bc45698443e8d0255ff6f (cherry picked from commit d16d0d553b20fd45a83cf7c68bc477b97aece9a1) (cherry picked from commit 0f253ea9c5f3f3d97bc049f00d1bcdf2761f0736)",objective,,,,,,
openstack%2Fnova~stable%2Fpike~I318b9118c97d7bf2b61bc45698443e8d0255ff6f,https://review.opendev.org/587248,Refactor _build_device_metadata,"Refactor _build_device_metadata  This patch splits out interface and disk metadata generation into its own function each, in preparation for handling hostdev metadata generation in a subsequent patch. It also adds some debug logging.  NOTE(artom): Queens -> Pike backport is clean, conflicts in nova/virt/libvirt/driver.py in Queens due to trusted VFs not being present.  Related-bug: 1743458 Change-Id: I318b9118c97d7bf2b61bc45698443e8d0255ff6f (cherry picked from commit d16d0d553b20fd45a83cf7c68bc477b97aece9a1) (cherry picked from commit 0f253ea9c5f3f3d97bc049f00d1bcdf2761f0736)",objective,,,,,,
airship%2Fpegleg~master~Ief6483dfbf3759204106330284e8e9b824b5567e,https://review.opendev.org/612227,refactor: Allow site_by_params to take in list of fields,refactor: Allow site_by_params to take in list of fields  This patch set simplifies some code related to site_by_params by allowing it to take an iterable argument called *fields which specifies exactly which parameters to include from the site-definition.yaml. This means that no hard-coding is required to manually filter the params into the exact parameters required by follow-up function calls. This is done for better code maintenance.  Change-Id: Ief6483dfbf3759204106330284e8e9b824b5567e,quality,,,,,,
airship%2Fpegleg~master~Ief6483dfbf3759204106330284e8e9b824b5567e,https://review.opendev.org/612227,refactor: Allow site_by_params to take in list of fields,refactor: Allow site_by_params to take in list of fields  This patch set simplifies some code related to site_by_params by allowing it to take an iterable argument called *fields which specifies exactly which parameters to include from the site-definition.yaml. This means that no hard-coding is required to manually filter the params into the exact parameters required by follow-up function calls. This is done for better code maintenance.  Change-Id: Ief6483dfbf3759204106330284e8e9b824b5567e,objective,,,,,,
airship%2Fpegleg~master~I918d8c293f1140eb80c83499dba2c23af232b79e,https://review.opendev.org/609583,refactor: Exchange NotADirectoryError for better exception,"refactor: Exchange NotADirectoryError for better exception  This patch set replaces raising NotADirectoryError after trying to parse a repository for its root path (normalize_repo_path in pegleg.engine.util.git) with a better exception (exceptions.GitInvalidRepoException). It is better because a folder can still not be a repo, so raising the first exception isn't apropos.  Next, this patch set changes where the exception is raised -- which is in normalize_repo_path itself, which is more appropriate as the function is used in many places and so there should be intrinsic error handling so as to avoid having to wrap it every time.  Change-Id: I918d8c293f1140eb80c83499dba2c23af232b79e",quality,,,,,,
airship%2Fpegleg~master~I918d8c293f1140eb80c83499dba2c23af232b79e,https://review.opendev.org/609583,refactor: Exchange NotADirectoryError for better exception,"refactor: Exchange NotADirectoryError for better exception  This patch set replaces raising NotADirectoryError after trying to parse a repository for its root path (normalize_repo_path in pegleg.engine.util.git) with a better exception (exceptions.GitInvalidRepoException). It is better because a folder can still not be a repo, so raising the first exception isn't apropos.  Next, this patch set changes where the exception is raised -- which is in normalize_repo_path itself, which is more appropriate as the function is used in many places and so there should be intrinsic error handling so as to avoid having to wrap it every time.  Change-Id: I918d8c293f1140eb80c83499dba2c23af232b79e",objective,,,,,,
airship%2Fpegleg~master~I918d8c293f1140eb80c83499dba2c23af232b79e,https://review.opendev.org/609583,refactor: Exchange NotADirectoryError for better exception,"refactor: Exchange NotADirectoryError for better exception  This patch set replaces raising NotADirectoryError after trying to parse a repository for its root path (normalize_repo_path in pegleg.engine.util.git) with a better exception (exceptions.GitInvalidRepoException). It is better because a folder can still not be a repo, so raising the first exception isn't apropos.  Next, this patch set changes where the exception is raised -- which is in normalize_repo_path itself, which is more appropriate as the function is used in many places and so there should be intrinsic error handling so as to avoid having to wrap it every time.  Change-Id: I918d8c293f1140eb80c83499dba2c23af232b79e",objective,,,,,,
openstack%2Fvalidations-libs~master~Ic380f878ed6a583ca1a32fc9b641535d868d6692,https://review.opendev.org/793332,Refactoring of the cli app module,Refactoring of the cli app module  Logging strings use format function.  Signed-off-by: Jiri Podivin <jpodivin@redhat.com> Change-Id: Ic380f878ed6a583ca1a32fc9b641535d868d6692,refactoring,,,,,,
starlingx%2Ftools~master~Iaac2e74a84abbfc9f40ef51b1da819702d040655,https://review.opendev.org/600252,Refactor on dl_rpms.sh,"Refactor on dl_rpms.sh  A refactor was made in the dl_rpms.sh script to simplify the maintenance and development. A new file utils.sh was created to store all the common functions that could be used by another scripts.  Also, some unit testing was added to the util.sh file.  Story: 2002736 Task: 26194  Change-Id: Iaac2e74a84abbfc9f40ef51b1da819702d040655 Signed-off-by: Marcela Rosales <marcela.a.rosales.jimenez@intel.com> Signed-off-by: Erich Cordoba <erich.cordoba.malibran@intel.com>",quality,,,,,,
starlingx%2Ftools~master~Iaac2e74a84abbfc9f40ef51b1da819702d040655,https://review.opendev.org/600252,Refactor on dl_rpms.sh,"Refactor on dl_rpms.sh  A refactor was made in the dl_rpms.sh script to simplify the maintenance and development. A new file utils.sh was created to store all the common functions that could be used by another scripts.  Also, some unit testing was added to the util.sh file.  Story: 2002736 Task: 26194  Change-Id: Iaac2e74a84abbfc9f40ef51b1da819702d040655 Signed-off-by: Marcela Rosales <marcela.a.rosales.jimenez@intel.com> Signed-off-by: Erich Cordoba <erich.cordoba.malibran@intel.com>",testing,,,,,,
openstack%2Fkuryr-kubernetes~master~Iea3b65b91f362a18cca6bf9d44d938063a56118b,https://review.opendev.org/596672,Refactor DriverBase.get_instance(),Refactor DriverBase.get_instance()  scope param is added to allow getting multiple independent instances of a driver. This is particularly useful for using same VIFPoolDriver implementation for multiple PodVIFDrivers (eg. NoopVIFPool may be used for multiple PodVIFDriver types)  Also renames driver_alias to specific_driver to better indicate its function.  Change-Id: Iea3b65b91f362a18cca6bf9d44d938063a56118b Signed-off-by: Yash Gupta <y.gupta@samsung.com>,objective,,,,,,
openstack%2Fkuryr-kubernetes~master~Iea3b65b91f362a18cca6bf9d44d938063a56118b,https://review.opendev.org/596672,Refactor DriverBase.get_instance(),Refactor DriverBase.get_instance()  scope param is added to allow getting multiple independent instances of a driver. This is particularly useful for using same VIFPoolDriver implementation for multiple PodVIFDrivers (eg. NoopVIFPool may be used for multiple PodVIFDriver types)  Also renames driver_alias to specific_driver to better indicate its function.  Change-Id: Iea3b65b91f362a18cca6bf9d44d938063a56118b Signed-off-by: Yash Gupta <y.gupta@samsung.com>,objective,,,,,,
openstack%2Ftripleo-validations~master~Ia8ba252de3cebca9e75266f7bcbba373cc0f5008,https://review.opendev.org/578127,Refactor service client getters,Refactor service client getters  This change removes duplication of service clients instantiations throughout the code (especially the lookup plugins). It also consolidates service client getter functions by placing them all in the utils module.  Change-Id: Ia8ba252de3cebca9e75266f7bcbba373cc0f5008,quality,,,,,,
openstack%2Ftripleo-validations~master~Ia8ba252de3cebca9e75266f7bcbba373cc0f5008,https://review.opendev.org/578127,Refactor service client getters,Refactor service client getters  This change removes duplication of service clients instantiations throughout the code (especially the lookup plugins). It also consolidates service client getter functions by placing them all in the utils module.  Change-Id: Ia8ba252de3cebca9e75266f7bcbba373cc0f5008,objective,,,,,,
openstack%2Ftripleo-common~master~Idc2fa7d6d1c5ec0c43c5b81a9dfa6b64235195f0,https://review.opendev.org/590084,Refactor non-docker upload functions into base class,Refactor non-docker upload functions into base class  This is in preparation for a SkopeoImageUploader which won't need to create a docker client for any operations.  Change-Id: Idc2fa7d6d1c5ec0c43c5b81a9dfa6b64235195f0,refactoring,,,,,,
openstack%2Fzun~master~I677ca1000a48f0d5f768fcf9eacbd2a37522c9cb,https://review.opendev.org/588881,Refactor list function in docker driver,"Refactor list function in docker driver  Function list in docker driver is called by update_containers_states in docker.driver and init_containers in compute.manager. When restart compute service, the init_containers function is called, then the list is called. The function list will heal non-existent containers, which is not necessary to do this when restart compute service.    It is better to heal non-existent containers only in update_containers_states.  Change-Id: I677ca1000a48f0d5f768fcf9eacbd2a37522c9cb",objective,,,,,,
openstack%2Fzun~master~I677ca1000a48f0d5f768fcf9eacbd2a37522c9cb,https://review.opendev.org/588881,Refactor list function in docker driver,"Refactor list function in docker driver  Function list in docker driver is called by update_containers_states in docker.driver and init_containers in compute.manager. When restart compute service, the init_containers function is called, then the list is called. The function list will heal non-existent containers, which is not necessary to do this when restart compute service.    It is better to heal non-existent containers only in update_containers_states.  Change-Id: I677ca1000a48f0d5f768fcf9eacbd2a37522c9cb",objective,,,,,,
openstack%2Fnova~stable%2Fqueens~I318b9118c97d7bf2b61bc45698443e8d0255ff6f,https://review.opendev.org/581398,Refactor _build_device_metadata,"Refactor _build_device_metadata  This patch splits out interface and disk metadata generation into its own function each, in preparation for handling hostdev metadata generation in a subsequent patch. It also adds some debug logging.  NOTE(artom): Conflicts in nova/virt/libvirt/driver.py due to trusted VFs not being present in Queens.  Related-bug: 1743458 Change-Id: I318b9118c97d7bf2b61bc45698443e8d0255ff6f (cherry picked from commit d16d0d553b20fd45a83cf7c68bc477b97aece9a1)",objective,,,,,,
openstack%2Fnova~stable%2Fqueens~I318b9118c97d7bf2b61bc45698443e8d0255ff6f,https://review.opendev.org/581398,Refactor _build_device_metadata,"Refactor _build_device_metadata  This patch splits out interface and disk metadata generation into its own function each, in preparation for handling hostdev metadata generation in a subsequent patch. It also adds some debug logging.  NOTE(artom): Conflicts in nova/virt/libvirt/driver.py due to trusted VFs not being present in Queens.  Related-bug: 1743458 Change-Id: I318b9118c97d7bf2b61bc45698443e8d0255ff6f (cherry picked from commit d16d0d553b20fd45a83cf7c68bc477b97aece9a1)",quality,,,,,,
jjb%2Fjenkins-job-builder~master~Ie7c40809ad8259fc3906871360c16dbb6e58a4b0,https://review.opendev.org/583564,Refactor parameters.py,Refactor parameters.py  Converted all relevant functions to use helpers.<insert function> instead of a specific import.  Added commas to last entries of mapping tuples.  Change-Id: Ie7c40809ad8259fc3906871360c16dbb6e58a4b0,quality,,,,,,
openstack%2Fkeystone~master~I325627f511fe7d52a191e64eada030e84d756d7e,https://review.opendev.org/579670,Refactor _set_domain_id_and_mapping functions,"Refactor _set_domain_id_and_mapping functions  This change refactors both functions listed for single refs and a list of refs for _set_domain_id_and_mapping to do separate checks for conditions such as _is_domain_aware and _is_mapping_needed. This is due to how it is currently handled, it uses the same logic between both functions, which provides more overhead for a list than a single ref.  Change-Id: I325627f511fe7d52a191e64eada030e84d756d7e",quality,,,,,,
openstack%2Fkeystone~master~I325627f511fe7d52a191e64eada030e84d756d7e,https://review.opendev.org/579670,Refactor _set_domain_id_and_mapping functions,"Refactor _set_domain_id_and_mapping functions  This change refactors both functions listed for single refs and a list of refs for _set_domain_id_and_mapping to do separate checks for conditions such as _is_domain_aware and _is_mapping_needed. This is due to how it is currently handled, it uses the same logic between both functions, which provides more overhead for a list than a single ref.  Change-Id: I325627f511fe7d52a191e64eada030e84d756d7e",objective,,,,,,
jjb%2Fjenkins-job-builder~master~I053ef5f58200e51b3f6ff5ec55760f9e6f095370,https://review.opendev.org/582269,Refactor clone_workspace function to use convert_mapping_to_xml,Refactor clone_workspace function in publishers.py to utilize convert_mapping_to_xml  Refactor the code in the function to utilize convert_mapping_to_xml's way of detecting valid types.  Change-Id: I053ef5f58200e51b3f6ff5ec55760f9e6f095370,quality,,,,,,
jjb%2Fjenkins-job-builder~master~I053ef5f58200e51b3f6ff5ec55760f9e6f095370,https://review.opendev.org/582269,Refactor clone_workspace function to use convert_mapping_to_xml,Refactor clone_workspace function in publishers.py to utilize convert_mapping_to_xml  Refactor the code in the function to utilize convert_mapping_to_xml's way of detecting valid types.  Change-Id: I053ef5f58200e51b3f6ff5ec55760f9e6f095370,objective,,,,,,
jjb%2Fjenkins-job-builder~master~Idc63572a57fa2e4f1cf5b442027dd7f5e99aefdb,https://review.opendev.org/582797,Refactor notifications.py,Refactor notifications.py  Converted all relevant functions to use helpers.<insert function> instead of a specific import.  Added commas to last entries of mapping tuples.  Change-Id: Idc63572a57fa2e4f1cf5b442027dd7f5e99aefdb,quality,,,,,,
jjb%2Fjenkins-job-builder~master~Idc63572a57fa2e4f1cf5b442027dd7f5e99aefdb,https://review.opendev.org/582797,Refactor notifications.py,Refactor notifications.py  Converted all relevant functions to use helpers.<insert function> instead of a specific import.  Added commas to last entries of mapping tuples.  Change-Id: Idc63572a57fa2e4f1cf5b442027dd7f5e99aefdb,objective,,,,,,
jjb%2Fjenkins-job-builder~master~I87640188c900aef38ee368eca7540c3126274c2e,https://review.opendev.org/582796,Refactor hipchat_notif.py,Refactor hipchat_notif.py  Converted all relevant functions to use helpers.<insert function> instead of a specific import.  Change-Id: I87640188c900aef38ee368eca7540c3126274c2e,quality,,,,,,
jjb%2Fjenkins-job-builder~master~I87640188c900aef38ee368eca7540c3126274c2e,https://review.opendev.org/582796,Refactor hipchat_notif.py,Refactor hipchat_notif.py  Converted all relevant functions to use helpers.<insert function> instead of a specific import.  Change-Id: I87640188c900aef38ee368eca7540c3126274c2e,objective,,,,,,
jjb%2Fjenkins-job-builder~master~Ic62b5cc60d260f9f4820c4260f69771e1f8589ba,https://review.opendev.org/580839,Refactor ivy function in triggers.py to utilize convert_mapping_to_xml,Refactor ivy function in triggers.py to utilize convert_mapping_to_xml  Refactor the code in the function to utilize convert_mapping_to_xml.  Change-Id: Ic62b5cc60d260f9f4820c4260f69771e1f8589ba,quality,,,,,,
jjb%2Fjenkins-job-builder~master~Ic62b5cc60d260f9f4820c4260f69771e1f8589ba,https://review.opendev.org/580839,Refactor ivy function in triggers.py to utilize convert_mapping_to_xml,Refactor ivy function in triggers.py to utilize convert_mapping_to_xml  Refactor the code in the function to utilize convert_mapping_to_xml.  Change-Id: Ic62b5cc60d260f9f4820c4260f69771e1f8589ba,objective,,,,,,
jjb%2Fjenkins-job-builder~master~Ied80c8354b9d59639eba1a3bb9794f19d15c6ba3,https://review.opendev.org/581776,Refactor builders.py,Refactor builders.py  The refactoring process includes the following 1. Converted all relevant functions to use helpers.<insert function> instead of a specific import. 2. Standardized indentation for mapping tuple 3. Add commas to last entries of mapping tuples  Change-Id: Ied80c8354b9d59639eba1a3bb9794f19d15c6ba3,quality,,,,,,
jjb%2Fjenkins-job-builder~master~Ied80c8354b9d59639eba1a3bb9794f19d15c6ba3,https://review.opendev.org/581776,Refactor builders.py,Refactor builders.py  The refactoring process includes the following 1. Converted all relevant functions to use helpers.<insert function> instead of a specific import. 2. Standardized indentation for mapping tuple 3. Add commas to last entries of mapping tuples  Change-Id: Ied80c8354b9d59639eba1a3bb9794f19d15c6ba3,objective,,,,,,
openstack%2Fnova~master~I318b9118c97d7bf2b61bc45698443e8d0255ff6f,https://review.opendev.org/533804,Refactor _build_device_metadata,"Refactor _build_device_metadata  This patch splits out interface and disk metadata generation into its own function each, in preparation for handling hostdev metadata generation in a subsequent patch. It also adds some debug logging.  Change-Id: I318b9118c97d7bf2b61bc45698443e8d0255ff6f",quality,,,,,,
openstack%2Fnova~master~I318b9118c97d7bf2b61bc45698443e8d0255ff6f,https://review.opendev.org/533804,Refactor _build_device_metadata,"Refactor _build_device_metadata  This patch splits out interface and disk metadata generation into its own function each, in preparation for handling hostdev metadata generation in a subsequent patch. It also adds some debug logging.  Change-Id: I318b9118c97d7bf2b61bc45698443e8d0255ff6f",objective,,,,,,
openstack%2Fnova~master~Ifaa866b88a04c14fbb45bc9d8cd11e847c6dd671,https://review.opendev.org/571030,Refactor libvirt get_memory_used_mb(),"Refactor libvirt get_memory_used_mb()  Split _sum_domain_memory_mb and _get_avail_memory_kb to separate functions. Simplifies xen codepath in get_memory_used_mb, and eases integration for file-backed-memory  Change-Id: Ifaa866b88a04c14fbb45bc9d8cd11e847c6dd671 Implements: blueprint libvirt-file-backed-memory",refactoring,,,,,,
openstack%2Fswift~master~I02f9e3201e9434080c6fb87ac5e249d8b327a231,https://review.opendev.org/571343,Refactor object updater's async-pending finder,"Refactor object updater's async-pending finder  Pulled the FS walking out into its own function so that finding async_pendings is in one place and processing them is in another. This should make it easier to add greenthread-based concurrency later.  Also refactored rate limiting to use utils.RateLimitedIterator instead of calling ratelimit_sleep ourselves. The functionality's the same, but the interface is easier.  Change-Id: I02f9e3201e9434080c6fb87ac5e249d8b327a231",quality,,,,,,
airship%2Fshipyard~master~I29da2c4d0b24a1baf5f90c52807c3b1c31b82191,https://review.opendev.org/571936,refactor(keystone): clean up code,refactor(keystone): clean up code  This patch set cleans up a few items in the keystone code in the airship-armada code base:  * Change the provided util function to load the session from   [keystone_authtoken] section of the cfg.CONF rather than picking at   the fields to use v3.Password. * (trivial) the import order is now alphabetical * (trivial) keystoneauth1 exception no longer imports to the actual module  Change-Id: I29da2c4d0b24a1baf5f90c52807c3b1c31b82191 Signed-off-by: Tin Lam <tin@irrational.io>,objective,,,,,,
airship%2Fshipyard~master~I29da2c4d0b24a1baf5f90c52807c3b1c31b82191,https://review.opendev.org/571936,refactor(keystone): clean up code,refactor(keystone): clean up code  This patch set cleans up a few items in the keystone code in the airship-armada code base:  * Change the provided util function to load the session from   [keystone_authtoken] section of the cfg.CONF rather than picking at   the fields to use v3.Password. * (trivial) the import order is now alphabetical * (trivial) keystoneauth1 exception no longer imports to the actual module  Change-Id: I29da2c4d0b24a1baf5f90c52807c3b1c31b82191 Signed-off-by: Tin Lam <tin@irrational.io>,quality,,,,,,
openstack%2Fswift~feature%2Fdeep~Iada00e63f14238b67aaa818314fa6601eeec624e,https://review.opendev.org/564277,Refactor finding sharding and shrinking candidates,"Refactor finding sharding and shrinking candidates  Refactor to provide module level functions for the finding of sharding and shrinking candidates, so that these can be used by other callers.  Add unit tests.  Change-Id: Iada00e63f14238b67aaa818314fa6601eeec624e",quality,,,,,,
openstack%2Fswift~feature%2Fdeep~Iada00e63f14238b67aaa818314fa6601eeec624e,https://review.opendev.org/564277,Refactor finding sharding and shrinking candidates,"Refactor finding sharding and shrinking candidates  Refactor to provide module level functions for the finding of sharding and shrinking candidates, so that these can be used by other callers.  Add unit tests.  Change-Id: Iada00e63f14238b67aaa818314fa6601eeec624e",testing,,,,,,
openstack%2Fcinder~master~I8e6e964e3694654b8ba93fe432a0dd49fa5e1df0,https://review.opendev.org/472855,FC: refactor fczm utils decorators to functions,FC: refactor fczm utils decorators to functions  This patch changes the Fibre Channel Zone Manager utility decorators to functions.   Those functions now have to be called manually.   The intention of this is to unify how the FC drivers are to be declared and used vs. the iSCSI.  No more magic decorators for FC drivers only.  Change-Id: I8e6e964e3694654b8ba93fe432a0dd49fa5e1df0,quality,,,,,,
openstack%2Fcinder~master~I8e6e964e3694654b8ba93fe432a0dd49fa5e1df0,https://review.opendev.org/472855,FC: refactor fczm utils decorators to functions,FC: refactor fczm utils decorators to functions  This patch changes the Fibre Channel Zone Manager utility decorators to functions.   Those functions now have to be called manually.   The intention of this is to unify how the FC drivers are to be declared and used vs. the iSCSI.  No more magic decorators for FC drivers only.  Change-Id: I8e6e964e3694654b8ba93fe432a0dd49fa5e1df0,objective,,,,,,
openstack%2Ftripleo-common~master~I8076604be59878703976380123532e06832ca918,https://review.opendev.org/554835,Refactor setting default CA,Refactor setting default CA  This merely breaks the code that sets the default CA in the deployment workflow to more functions. Preparing for setting the certificate for the overcloud in a subsequent commit.  Change-Id: I8076604be59878703976380123532e06832ca918,refactoring,,,,,,
openstack%2Fswift~master~Ifd8a0534fbdf41837977028c0c6ef99f1f6ac0f0,https://review.opendev.org/554412,Refactor tempurl functional test's try-finally,"Refactor tempurl functional test's try-finally  This is a following patch of [1]. In [1] comment, tim suggested implementation for same behavior with less code. This change implemented the suggestion. See [1] for more details.  [1]: https://review.openstack.org/#/c/547306/  Change-Id: Ifd8a0534fbdf41837977028c0c6ef99f1f6ac0f0",testing,,,,,,
openstack%2Fswift~master~Ifd8a0534fbdf41837977028c0c6ef99f1f6ac0f0,https://review.opendev.org/554412,Refactor tempurl functional test's try-finally,"Refactor tempurl functional test's try-finally  This is a following patch of [1]. In [1] comment, tim suggested implementation for same behavior with less code. This change implemented the suggestion. See [1] for more details.  [1]: https://review.openstack.org/#/c/547306/  Change-Id: Ifd8a0534fbdf41837977028c0c6ef99f1f6ac0f0",quality,,,,,,
openstack%2Fpython-tripleoclient~stable%2Fqueens~Idbe0a98fa8f2e8dfe220796c02593a805942b0da,https://review.opendev.org/553281,Refactor some common code between overcloud_upgrade and update,Refactor some common code between overcloud_upgrade and update  Adds a new run_update_ansible_action function in utils to be used by the upgrade and update to avoid repetition. The package_update action is passed into the utils function to avoid circular dependency.  Change-Id: Idbe0a98fa8f2e8dfe220796c02593a805942b0da (cherry picked from commit c6fed1f62da165ed14eff1b60a64ac5677404615),objective,,,,,,
openstack%2Fpython-tripleoclient~master~Idbe0a98fa8f2e8dfe220796c02593a805942b0da,https://review.opendev.org/550799,Refactor some common code between overcloud_upgrade and update,Refactor some common code between overcloud_upgrade and update  Moves the invocation of update_ansible action into a common utils function to avoid repetition.  Change-Id: Idbe0a98fa8f2e8dfe220796c02593a805942b0da,quality,,,,,,
zuul%2Fnodepool~master~I44f386754d343239fc047701cc3cab2dc8b1572a,https://review.opendev.org/536301,"Refactor status functions, add web endpoints, allow params","Refactor status functions, add web endpoints, allow params This patch refactors status functions so that instead of having one function per output format, the output format is simply a parameter.  New status endpoints are added:  * image-list.json * request-list(.json)  The endpoint node-list(.json) accepts a node_id parameter for filtering.  Change-Id: I44f386754d343239fc047701cc3cab2dc8b1572a",objective,,,,,,
zuul%2Fnodepool~master~I44f386754d343239fc047701cc3cab2dc8b1572a,https://review.opendev.org/536301,"Refactor status functions, add web endpoints, allow params","Refactor status functions, add web endpoints, allow params This patch refactors status functions so that instead of having one function per output format, the output format is simply a parameter.  New status endpoints are added:  * image-list.json * request-list(.json)  The endpoint node-list(.json) accepts a node_id parameter for filtering.  Change-Id: I44f386754d343239fc047701cc3cab2dc8b1572a",objective,,,,,,
zuul%2Fnodepool~master~I5242e9333dd8761272731d1e5e8af2fd5ca5ee8f,https://review.opendev.org/546272,Refactor playbooks/nodepool-zuul-functional/pre.yaml,"Refactor playbooks/nodepool-zuul-functional/pre.yaml  Instead of using tasks and roles together, create a new role and use it. This makes ordering easier to understand.  This is followup for https://review.openstack.org/#/c/545158/14/playbooks/nodepool-zuul-functional/pre.yaml  Change-Id: I5242e9333dd8761272731d1e5e8af2fd5ca5ee8f",quality,,,,,,
openstack%2Fswift~master~Ibf61eb1f767a48cb457dd494e1f7c12acfd205de,https://review.opendev.org/538171,Refactor expirer's task round robin implementation,"Refactor expirer's task shuffling implementation  Object-expirer shuffles order of expiration tasks to avoid deleting objects in a certain container continuously.  To make review for expirer's task queue update patch [1] easy, this patch refactors the implementation of the shuffling. In this patch, the shuffling is divided as a function.  The patch [1] will be rebased after this patch merged.  [1]: https://review.openstack.org/#/c/517389  Change-Id: Ibf61eb1f767a48cb457dd494e1f7c12acfd205de",objective,,,,,,
openstack%2Fswift~master~Ibf61eb1f767a48cb457dd494e1f7c12acfd205de,https://review.opendev.org/538171,Refactor expirer's task round robin implementation,"Refactor expirer's task shuffling implementation  Object-expirer shuffles order of expiration tasks to avoid deleting objects in a certain container continuously.  To make review for expirer's task queue update patch [1] easy, this patch refactors the implementation of the shuffling. In this patch, the shuffling is divided as a function.  The patch [1] will be rebased after this patch merged.  [1]: https://review.openstack.org/#/c/517389  Change-Id: Ibf61eb1f767a48cb457dd494e1f7c12acfd205de",objective,,,,,,
openstack%2Fpython-dracclient~master~I310fc0cb1c8372b1391d085078686e616890eb6f,https://review.opendev.org/520810,Refactor list_bios_settings and set_bios_settings,Refactor set_bios_settings  This patch factors the code in set_bios_settings out into a utility method that can be used by other code that uses the same functionality.  Depends-On: I70e52868f10bfafb30bbb38b85888bc4ec8e65ae Change-Id: I310fc0cb1c8372b1391d085078686e616890eb6f,quality,,,,,,
openstack%2Frally~master~Iae927760152c2e1ca2a4622762b33a57f1070945,https://review.opendev.org/544783,[testing] Refactor CLI tests and utils,refactor_functional_utils  Change-Id: Iae927760152c2e1ca2a4622762b33a57f1070945,refactoring,,,,,,
zuul%2Fnodepool~master~Idd536931a40f2369d3bfc4c623e94844c95f78a0,https://review.opendev.org/540325,Refactor method node_list in status.py,"Refactor method node_list in status.py  Extract same logics into one internal function, and call it when get one node's values or iterate some nodes' value.  Change-Id: Idd536931a40f2369d3bfc4c623e94844c95f78a0",refactoring,,,,,,
openstack%2Fpython-senlinclient~master~Ibb477290c90e9af51be3537d11cf5142041db37f,https://review.opendev.org/536673,Refactored make_client,"[WIP] Refactored make_client  There were two code paths that did the same thing, and while the code paths did the same thing, one of them supported region_name and the other one did not.  Moving all this functionality into a single function to prevent this from happening in the future.  - Re-factored make_client and create_connection. - Remove now unused sdk.py.  Change-Id: Ibb477290c90e9af51be3537d11cf5142041db37f",refactoring,,,,,,
openstack%2Fpython-senlinclient~master~Ibb477290c90e9af51be3537d11cf5142041db37f,https://review.opendev.org/536673,Refactored make_client,"[WIP] Refactored make_client  There were two code paths that did the same thing, and while the code paths did the same thing, one of them supported region_name and the other one did not.  Moving all this functionality into a single function to prevent this from happening in the future.  - Re-factored make_client and create_connection. - Remove now unused sdk.py.  Change-Id: Ibb477290c90e9af51be3537d11cf5142041db37f",quality,,,,,,
openstack%2Fnova~master~I95cd1396b02f2cf18e0aa15905fa91ee4b387bce,https://review.opendev.org/521189,Fix accumulated nits in refactor series,Fix accumulated nits in refactor series  Addresses the following minor review comments:  https://review.openstack.org/#/c/516778/10/nova/tests/functional/db/test_allocation_candidates.py@261 https://review.openstack.org/#/c/516779/9/nova/objects/resource_provider.py@2732 https://review.openstack.org/#/c/516780/10/nova/objects/resource_provider.py@2583  Change-Id: I95cd1396b02f2cf18e0aa15905fa91ee4b387bce,refactoring,,,,,,
x%2Fos-xenapi~master~Ie786b3085c29f9a1faf2c51a1a704ded1010af7b,https://review.opendev.org/531314,Refactor for get_xenapi_facts,Refactory for get_xenapi_facts  This commit contains the following changes: 1. remove it from cmd; as there is no need to expose this as a    separate command. Making this as an util which will be invoked    by xenapi_bootstrap. 2. rename the general function of get_hostname to be get_remote_hostname    and move it to common_functions. 3. change the keywords for the facts items to make it more clear.  Change-Id: Ie786b3085c29f9a1faf2c51a1a704ded1010af7b,quality,,,,,,
x%2Fos-xenapi~master~Ie786b3085c29f9a1faf2c51a1a704ded1010af7b,https://review.opendev.org/531314,Refactor for get_xenapi_facts,Refactory for get_xenapi_facts  This commit contains the following changes: 1. remove it from cmd; as there is no need to expose this as a    separate command. Making this as an util which will be invoked    by xenapi_bootstrap. 2. rename the general function of get_hostname to be get_remote_hostname    and move it to common_functions. 3. change the keywords for the facts items to make it more clear.  Change-Id: Ie786b3085c29f9a1faf2c51a1a704ded1010af7b,objective,,,,,,
airship%2Fairshipctl~master~I81f5ff32e0ac354790c7afbc0bf4db91f58397b4,https://review.opendev.org/765592,Refactor generic container executor,Refactor generic container executor  Refactor executor functions in go lang style  Change-Id: I81f5ff32e0ac354790c7afbc0bf4db91f58397b4 Relates-To: #202 Relates-To: #369,refactoring,,,,,,
openstack%2Fnova~master~Ie7200dbfb863d27115e12347e0e8b4ad444489e1,https://review.opendev.org/512497,Refactor placement version check,"Refactor placement version check  raise_http_status_code_if_not_version are duplicate we don't need keep this function, instead, use the decorater to check version.  Change-Id: Ie7200dbfb863d27115e12347e0e8b4ad444489e1",quality,,,,,,
openstack%2Fswift~master~Ib58ce03e2010f41e7eb11f1a6dc78b0b7f55d466,https://review.opendev.org/525728,Refactor proxy-server conf loading to a helper function,Refactor proxy-server conf loading to a utils function  There were two middlewares using a common pattern to load the proxy-server app config section. This patch moves the common code to a utils helper function and adds some unit tests.  Change-Id: Ib58ce03e2010f41e7eb11f1a6dc78b0b7f55d466,refactoring,,,,,,
openstack%2Fswift~master~Ib58ce03e2010f41e7eb11f1a6dc78b0b7f55d466,https://review.opendev.org/525728,Refactor proxy-server conf loading to a helper function,Refactor proxy-server conf loading to a utils function  There were two middlewares using a common pattern to load the proxy-server app config section. This patch moves the common code to a utils helper function and adds some unit tests.  Change-Id: Ib58ce03e2010f41e7eb11f1a6dc78b0b7f55d466,testing,,,,,,
openstack%2Ftripleo-ui~master~I2d64f95bfbde47b89824a102fa51034db5869cdd,https://review.opendev.org/504903,Refactor Register nodes dialog to use redux-form,"Refactor Register nodes dialog to use redux-form  * RegisterNodesDialog now connects to registerNodesForm and uses selectors   action creators to access form state * RegisterNodesForm uses redux-form and lists node forms as fieldArray * Adds Horizontal field components to use with redux-form * Uploading nodes from file is extracted into separate component * Uses redux-form-validators to provide validations for fields * Updates DriverFields components to be used with redux-form * Adds Fieldset component * Changes nodes registration logic:   * Function for handling form submit replaces thunk action to simplify     work with redux-form as it can return Promise which redux-form expects   * validateNodes Mistral action is called explicitly to act as a standalone     server side validation   * When register nodes workflow successfully starts, form is reset and app     redirects to nodes page where registration continues   * Logic is prepared to work on individual nodes which will be introduced in     subsequent patch  Implements: blueprint ui-redux-form-migration Change-Id: I2d64f95bfbde47b89824a102fa51034db5869cdd",objective,,,,,,
openstack%2Ftripleo-ui~master~I2d64f95bfbde47b89824a102fa51034db5869cdd,https://review.opendev.org/504903,Refactor Register nodes dialog to use redux-form,"Refactor Register nodes dialog to use redux-form  * RegisterNodesDialog now connects to registerNodesForm and uses selectors   action creators to access form state * RegisterNodesForm uses redux-form and lists node forms as fieldArray * Adds Horizontal field components to use with redux-form * Uploading nodes from file is extracted into separate component * Uses redux-form-validators to provide validations for fields * Updates DriverFields components to be used with redux-form * Adds Fieldset component * Changes nodes registration logic:   * Function for handling form submit replaces thunk action to simplify     work with redux-form as it can return Promise which redux-form expects   * validateNodes Mistral action is called explicitly to act as a standalone     server side validation   * When register nodes workflow successfully starts, form is reset and app     redirects to nodes page where registration continues   * Logic is prepared to work on individual nodes which will be introduced in     subsequent patch  Implements: blueprint ui-redux-form-migration Change-Id: I2d64f95bfbde47b89824a102fa51034db5869cdd",quality,,,,,,
openstack%2Ftripleo-ui~master~I7be19a6f6e9d500df6c97e31da3ac35adceeae86,https://review.opendev.org/506667,Refactor ZaqarWebSocketService functions into thunks,Refactor ZaqarWebSocketService functions into thunks  Change-Id: I7be19a6f6e9d500df6c97e31da3ac35adceeae86,refactoring,,,,,,
openstack%2Fnova~stable%2Fpike~I55edd2c6e4c752dbe675b6d51d71a047bf49597a,https://review.opendev.org/507195,Refactor ServerMovingTests for non-move tests,"Refactor ServerMovingTests for non-move tests  This came up as a review comment in change c19ebcbd58bc673e336bc5fa3b815c7b0a20d628.  The tests being moved aren't related to move operations, so they shouldn't be in the ServerMovingTests class.  This moves them to separate classes and uses distinct fake virt drivers to avoid monkey patching the compute manager code in a functional test.  Conflicts:       nova/tests/functional/test_servers.py  NOTE(mriedem): The conflict is due to not having change cc833359870d3962326c35094adea2f525ec8141 in Pike.  Change-Id: I55edd2c6e4c752dbe675b6d51d71a047bf49597a (cherry picked from commit 3f6447120b121c955711b3cf102b5063e4315fef)",testing,,,,,,
openstack%2Fnova~stable%2Fpike~I55edd2c6e4c752dbe675b6d51d71a047bf49597a,https://review.opendev.org/507195,Refactor ServerMovingTests for non-move tests,"Refactor ServerMovingTests for non-move tests  This came up as a review comment in change c19ebcbd58bc673e336bc5fa3b815c7b0a20d628.  The tests being moved aren't related to move operations, so they shouldn't be in the ServerMovingTests class.  This moves them to separate classes and uses distinct fake virt drivers to avoid monkey patching the compute manager code in a functional test.  Conflicts:       nova/tests/functional/test_servers.py  NOTE(mriedem): The conflict is due to not having change cc833359870d3962326c35094adea2f525ec8141 in Pike.  Change-Id: I55edd2c6e4c752dbe675b6d51d71a047bf49597a (cherry picked from commit 3f6447120b121c955711b3cf102b5063e4315fef)",quality,,,,,,
openstack%2Fnova~stable%2Fpike~I55edd2c6e4c752dbe675b6d51d71a047bf49597a,https://review.opendev.org/507195,Refactor ServerMovingTests for non-move tests,"Refactor ServerMovingTests for non-move tests  This came up as a review comment in change c19ebcbd58bc673e336bc5fa3b815c7b0a20d628.  The tests being moved aren't related to move operations, so they shouldn't be in the ServerMovingTests class.  This moves them to separate classes and uses distinct fake virt drivers to avoid monkey patching the compute manager code in a functional test.  Conflicts:       nova/tests/functional/test_servers.py  NOTE(mriedem): The conflict is due to not having change cc833359870d3962326c35094adea2f525ec8141 in Pike.  Change-Id: I55edd2c6e4c752dbe675b6d51d71a047bf49597a (cherry picked from commit 3f6447120b121c955711b3cf102b5063e4315fef)",objective,,,,,,
openstack%2Fnova~stable%2Fpike~Ie63a4798d420c39815e294843e02ab6473cfded2,https://review.opendev.org/503160,Refactor out claim_resources_on_destination into a utility,"Refactor out claim_resources_on_destination into a utility  We need this method for a similar fix in evacuate, so this change pulls the method out of the LiveMigrationTask and moves it into scheduler utils along with unit tests.  The only functional difference is that instead of raising MigrationPreCheckError, it now raises NoValidHost, which for live migration ends up being the same result when it's handled in ComputeTaskManager.  Change-Id: Ie63a4798d420c39815e294843e02ab6473cfded2 Related-Bug: #1713786 (cherry picked from commit 34f8a351502418d30f137ad49e948802d6b2ab3c)",objective,,,,,,
openstack%2Fnova~stable%2Fpike~Ie63a4798d420c39815e294843e02ab6473cfded2,https://review.opendev.org/503160,Refactor out claim_resources_on_destination into a utility,"Refactor out claim_resources_on_destination into a utility  We need this method for a similar fix in evacuate, so this change pulls the method out of the LiveMigrationTask and moves it into scheduler utils along with unit tests.  The only functional difference is that instead of raising MigrationPreCheckError, it now raises NoValidHost, which for live migration ends up being the same result when it's handled in ComputeTaskManager.  Change-Id: Ie63a4798d420c39815e294843e02ab6473cfded2 Related-Bug: #1713786 (cherry picked from commit 34f8a351502418d30f137ad49e948802d6b2ab3c)",objective,,,,,,
openstack%2Fnova~master~I55edd2c6e4c752dbe675b6d51d71a047bf49597a,https://review.opendev.org/498596,Refactor ServerMovingTests for non-move tests,"Refactor ServerMovingTests for non-move tests  This came up as a review comment in change c19ebcbd58bc673e336bc5fa3b815c7b0a20d628.  The tests being moved aren't related to move operations, so they shouldn't be in the ServerMovingTests class.  This moves them to separate classes and uses distinct fake virt drivers to avoid monkey patching the compute manager code in a functional test.  Change-Id: I55edd2c6e4c752dbe675b6d51d71a047bf49597a",testing,,,,,,
openstack%2Fnova~master~I55edd2c6e4c752dbe675b6d51d71a047bf49597a,https://review.opendev.org/498596,Refactor ServerMovingTests for non-move tests,"Refactor ServerMovingTests for non-move tests  This came up as a review comment in change c19ebcbd58bc673e336bc5fa3b815c7b0a20d628.  The tests being moved aren't related to move operations, so they shouldn't be in the ServerMovingTests class.  This moves them to separate classes and uses distinct fake virt drivers to avoid monkey patching the compute manager code in a functional test.  Change-Id: I55edd2c6e4c752dbe675b6d51d71a047bf49597a",quality,,,,,,
openstack%2Fnova~master~I55edd2c6e4c752dbe675b6d51d71a047bf49597a,https://review.opendev.org/498596,Refactor ServerMovingTests for non-move tests,"Refactor ServerMovingTests for non-move tests  This came up as a review comment in change c19ebcbd58bc673e336bc5fa3b815c7b0a20d628.  The tests being moved aren't related to move operations, so they shouldn't be in the ServerMovingTests class.  This moves them to separate classes and uses distinct fake virt drivers to avoid monkey patching the compute manager code in a functional test.  Change-Id: I55edd2c6e4c752dbe675b6d51d71a047bf49597a",objective,,,,,,
opendev%2Fpuppet-openstack_infra_spec_helper~master~I572a5dc0d9987e8c90a27f300c8b4979e20c43a2,https://review.opendev.org/481937,Refactor spec helper,"Refactor spec helper  The spec helper file has been cargocult-copied from puppetlabs and puppet-openstack modules, adjusted slightly for Infra's particular needs. It is hard to read which makes adjusting it hard to do and hard to review. This refactor moves code into named functions and condenses the main setup code so that there is only one loop over the host list.  Change-Id: I572a5dc0d9987e8c90a27f300c8b4979e20c43a2",quality,,,,,,
opendev%2Fpuppet-openstack_infra_spec_helper~master~I572a5dc0d9987e8c90a27f300c8b4979e20c43a2,https://review.opendev.org/481937,Refactor spec helper,"Refactor spec helper  The spec helper file has been cargocult-copied from puppetlabs and puppet-openstack modules, adjusted slightly for Infra's particular needs. It is hard to read which makes adjusting it hard to do and hard to review. This refactor moves code into named functions and condenses the main setup code so that there is only one loop over the host list.  Change-Id: I572a5dc0d9987e8c90a27f300c8b4979e20c43a2",objective,,,,,,
openstack%2Fnova~master~Ie63a4798d420c39815e294843e02ab6473cfded2,https://review.opendev.org/499718,Refactor out claim_resources_on_destination into a utility,"Refactor out claim_resources_on_destination into a utility  We need this method for a similar fix in evacuate, so this change pulls the method out of the LiveMigrationTask and moves it into scheduler utils along with unit tests.  The only functional difference is that instead of raising MigrationPreCheckError, it now raises NoValidHost, which for live migration ends up being the same result when it's handled in ComputeTaskManager.  Change-Id: Ie63a4798d420c39815e294843e02ab6473cfded2 Related-Bug: #1713786",objective,,,,,,
openstack%2Fnova~master~Ie63a4798d420c39815e294843e02ab6473cfded2,https://review.opendev.org/499718,Refactor out claim_resources_on_destination into a utility,"Refactor out claim_resources_on_destination into a utility  We need this method for a similar fix in evacuate, so this change pulls the method out of the LiveMigrationTask and moves it into scheduler utils along with unit tests.  The only functional difference is that instead of raising MigrationPreCheckError, it now raises NoValidHost, which for live migration ends up being the same result when it's handled in ComputeTaskManager.  Change-Id: Ie63a4798d420c39815e294843e02ab6473cfded2 Related-Bug: #1713786",objective,,,,,,
openstack%2Fnetworking-ovn~master~Icd7db235cff8db07f2f4e460859c71b0b4e937dc,https://review.opendev.org/493038,Small refactor of metadata bits,"Small refactor of metadata bits  This patch performs a small refactor of the metadata port creation and the code which waits for metadata service to be provisioned in the network when a port transitions to 'up'.  Also, when metadata is disabled, an error was logged trying to retrieve fetch the metadata port. Instead of checking if metadata is enabled or not in many points of the code, that function will return None if service is disabled.  Change-Id: Icd7db235cff8db07f2f4e460859c71b0b4e937dc Signed-off-by: Daniel Alvarez <dalvarez@redhat.com>",quality,,,,,,
openstack%2Fnetworking-ovn~master~Icd7db235cff8db07f2f4e460859c71b0b4e937dc,https://review.opendev.org/493038,Small refactor of metadata bits,"Small refactor of metadata bits  This patch performs a small refactor of the metadata port creation and the code which waits for metadata service to be provisioned in the network when a port transitions to 'up'.  Also, when metadata is disabled, an error was logged trying to retrieve fetch the metadata port. Instead of checking if metadata is enabled or not in many points of the code, that function will return None if service is disabled.  Change-Id: Icd7db235cff8db07f2f4e460859c71b0b4e937dc Signed-off-by: Daniel Alvarez <dalvarez@redhat.com>",objective,,,,,,
x%2Fstackalytics~master~I9bd08fec4bc074373255118ab1be702113c56a6f,https://review.opendev.org/497471,Refactor record processor,Refactor record processor  Move user-related and Launchpad-related functions from record processor to corresponding modules.  Change-Id: I9bd08fec4bc074373255118ab1be702113c56a6f,refactoring,,,,,,
openstack%2Fironic~master~I8f01dcc5eaa0c8511ce77622e41db88e27791327,https://review.opendev.org/485772,Refactor get_physnets_by_portgroup_id,"Refactor get_physnets_by_portgroup_id  There is a lot of common code between the functions ironic.conductor.utils.validate_port_physnets() and ironic.drivers.modules.network.common._get_physnets_by_portgroup().  This change refactors the code, adding a new utility method, get_physnets_by_portgroup_id, which returns the physical networks associated with a portgroup. There should be at most one such physical network, and the presence of multiple will cause PortgroupPhysnetInconsistent to be raised.  Change-Id: I8f01dcc5eaa0c8511ce77622e41db88e27791327 Related-Bug: #1666009",objective,,,,,,
openstack%2Fironic~master~I8f01dcc5eaa0c8511ce77622e41db88e27791327,https://review.opendev.org/485772,Refactor get_physnets_by_portgroup_id,"Refactor get_physnets_by_portgroup_id  There is a lot of common code between the functions ironic.conductor.utils.validate_port_physnets() and ironic.drivers.modules.network.common._get_physnets_by_portgroup().  This change refactors the code, adding a new utility method, get_physnets_by_portgroup_id, which returns the physical networks associated with a portgroup. There should be at most one such physical network, and the presence of multiple will cause PortgroupPhysnetInconsistent to be raised.  Change-Id: I8f01dcc5eaa0c8511ce77622e41db88e27791327 Related-Bug: #1666009",quality,,,,,,
openstack%2Fironic~master~I8f01dcc5eaa0c8511ce77622e41db88e27791327,https://review.opendev.org/485772,Refactor get_physnets_by_portgroup_id,"Refactor get_physnets_by_portgroup_id  There is a lot of common code between the functions ironic.conductor.utils.validate_port_physnets() and ironic.drivers.modules.network.common._get_physnets_by_portgroup().  This change refactors the code, adding a new utility method, get_physnets_by_portgroup_id, which returns the physical networks associated with a portgroup. There should be at most one such physical network, and the presence of multiple will cause PortgroupPhysnetInconsistent to be raised.  Change-Id: I8f01dcc5eaa0c8511ce77622e41db88e27791327 Related-Bug: #1666009",objective,,,,,,
openstack%2Fpython-tricircleclient~master~I379abedc0f7ab895d7b4e563354755c64a920f06,https://review.opendev.org/453249,Refactoring test_pod_cli.py,Refactoring test_pod_cli.py  1. What is the problem? The methods are sharing common functionality which make difficult to avoid duplication.  2. What is the solution to the problem? Refactoring these common functionality.  3. What features need to be implemented to the Tricircle to realize the solution? None  Change-Id: I379abedc0f7ab895d7b4e563354755c64a920f06,quality,,,,,,
openstack%2Fkarbor~master~Ibeb160aaae2bce6ff7fb019bc49b8197e5031dc7,https://review.opendev.org/485533,Refactor network restore function,Refactor network restore function  Change-Id: Ibeb160aaae2bce6ff7fb019bc49b8197e5031dc7 Implements: blueprint remove-heat,refactoring,,,,,,
starlingx%2Fconfig~master~Ifcddab027df955152f420fd7451f42167694a31a,https://review.opendev.org/791302,Refactor and expose logic to acquire a flock with retries,"Refactor and expose logic to acquire a flock with retries  When locking the file descriptor skip_udev_partition_probe was not handling errors thrown by fcntl.flock which was leading controller-0 to degraded state after unlock. This change aims to strengthen that logic by handling the error properly, retrying the lock operation and improving logs.  Re-implementation of commit cbb9121a289603ec003dec098b8fa5918ca98300. The original commit inadvertently replaced a shared lock with a exclusive lock on the decorator skip_udev_partition_probe which caused fd locking issues.  This commit exposes utility functions to acquire shared or exclusive non-blocking locks of file descriptors.  Tested on Standard (2 + 4) configuration.  Closes-Bug: 1922256 Signed-off-by: Pedro Henrique Linhares <PedroHenriqueLinhares.Silva@windriver.com> Change-Id: Ifcddab027df955152f420fd7451f42167694a31a",quality,,,,,,
starlingx%2Fconfig~master~Ifcddab027df955152f420fd7451f42167694a31a,https://review.opendev.org/791302,Refactor and expose logic to acquire a flock with retries,"Refactor and expose logic to acquire a flock with retries  When locking the file descriptor skip_udev_partition_probe was not handling errors thrown by fcntl.flock which was leading controller-0 to degraded state after unlock. This change aims to strengthen that logic by handling the error properly, retrying the lock operation and improving logs.  Re-implementation of commit cbb9121a289603ec003dec098b8fa5918ca98300. The original commit inadvertently replaced a shared lock with a exclusive lock on the decorator skip_udev_partition_probe which caused fd locking issues.  This commit exposes utility functions to acquire shared or exclusive non-blocking locks of file descriptors.  Tested on Standard (2 + 4) configuration.  Closes-Bug: 1922256 Signed-off-by: Pedro Henrique Linhares <PedroHenriqueLinhares.Silva@windriver.com> Change-Id: Ifcddab027df955152f420fd7451f42167694a31a",objective,,,,,,
openstack%2Fsolum~master~Ia173d0fd196c951e4c66599bfb5c8d750a7afd13,https://review.opendev.org/482038,Refactor the install_solumclient function,"Refactor the install_solumclient function  Only install python-solumcline from source when configed LIBS_FROM_GIT, otherwise pip install from gloal requirements.  Change-Id: Ia173d0fd196c951e4c66599bfb5c8d750a7afd13",quality,,,,,,
openstack%2Fkarbor~master~I4e45796b49784597fbb415ac5221dc55ac3a28ec,https://review.opendev.org/457190,Refactor server restore function,Refactor server restore function  Change-Id: I4e45796b49784597fbb415ac5221dc55ac3a28ec Implements: blueprint remove-heat,refactoring,,,,,,
openstack%2Fironic~master~I73b21098f15af4d0445f89fdd6ad4e4a42177df6,https://review.opendev.org/476974,Refactor common keystone methods,"Refactor common keystone methods  - Split loading session and auth from config to separate functions,   allow to override options loaded from config.   This will lay ground to more efficiently load clients that allow   passing in both session and auth plugin objects separately.  - When resoving a service endpoint, either fetch the requested interface,   or first try 'internal' and then 'public'.   This is done due to our config lacking any options to set the default   interface for service endpoints to use, and we've used 'internal' by   default, although DevStack has no such endpoints for most services   any more [0].   This will be changed again when gradually introducing usage of   keystoneauth Adapters to ironic.  - Remove get_admin_token method, it was used only in glance-related code   once, and was simply moved there.  [0] https://review.openstack.org/#/c/433272  Change-Id: I73b21098f15af4d0445f89fdd6ad4e4a42177df6 Partial-Bug: #1699547",quality,,,,,,
openstack%2Fironic~master~I73b21098f15af4d0445f89fdd6ad4e4a42177df6,https://review.opendev.org/476974,Refactor common keystone methods,"Refactor common keystone methods  - Split loading session and auth from config to separate functions,   allow to override options loaded from config.   This will lay ground to more efficiently load clients that allow   passing in both session and auth plugin objects separately.  - When resoving a service endpoint, either fetch the requested interface,   or first try 'internal' and then 'public'.   This is done due to our config lacking any options to set the default   interface for service endpoints to use, and we've used 'internal' by   default, although DevStack has no such endpoints for most services   any more [0].   This will be changed again when gradually introducing usage of   keystoneauth Adapters to ironic.  - Remove get_admin_token method, it was used only in glance-related code   once, and was simply moved there.  [0] https://review.openstack.org/#/c/433272  Change-Id: I73b21098f15af4d0445f89fdd6ad4e4a42177df6 Partial-Bug: #1699547",objective,,,,,,
openstack%2Fopenstack-ansible-os_monasca~master~Ib53d4311c4b4aa722c7cdf7b18632e23b8639a56,https://review.opendev.org/468407,Monasca role refactoring[+docs],"Monasca role refactoring[+docs]  This patch refactors the whole monasca role by bringing consistency with the other openstack-ansible roles. Main changes include:   - Install services on its specific cointainer;   - monasca-thresh, monasca-notification and monasca-persister was     not being installed/configured, now it is;   - Tempest tests are ran for the whole monasca-api;   - The service should be fully functional;   - Added documentation.  The extras directory contains the changes necessary to openstack- ansible to setup monasca.  Change-Id: Ib53d4311c4b4aa722c7cdf7b18632e23b8639a56",testing,,,,,,
openstack%2Fopenstack-ansible-os_monasca~master~Ib53d4311c4b4aa722c7cdf7b18632e23b8639a56,https://review.opendev.org/468407,Monasca role refactoring[+docs],"Monasca role refactoring[+docs]  This patch refactors the whole monasca role by bringing consistency with the other openstack-ansible roles. Main changes include:   - Install services on its specific cointainer;   - monasca-thresh, monasca-notification and monasca-persister was     not being installed/configured, now it is;   - Tempest tests are ran for the whole monasca-api;   - The service should be fully functional;   - Added documentation.  The extras directory contains the changes necessary to openstack- ansible to setup monasca.  Change-Id: Ib53d4311c4b4aa722c7cdf7b18632e23b8639a56",objective,,,,,,
openstack%2Fopenstack-ansible-os_monasca~master~Ib53d4311c4b4aa722c7cdf7b18632e23b8639a56,https://review.opendev.org/468407,Monasca role refactoring[+docs],"Monasca role refactoring[+docs]  This patch refactors the whole monasca role by bringing consistency with the other openstack-ansible roles. Main changes include:   - Install services on its specific cointainer;   - monasca-thresh, monasca-notification and monasca-persister was     not being installed/configured, now it is;   - Tempest tests are ran for the whole monasca-api;   - The service should be fully functional;   - Added documentation.  The extras directory contains the changes necessary to openstack- ansible to setup monasca.  Change-Id: Ib53d4311c4b4aa722c7cdf7b18632e23b8639a56",quality,,,,,,
openstack%2Fopenstack-ansible-os_monasca~master~Ib53d4311c4b4aa722c7cdf7b18632e23b8639a56,https://review.opendev.org/468407,Monasca role refactoring[+docs],"Monasca role refactoring[+docs]  This patch refactors the whole monasca role by bringing consistency with the other openstack-ansible roles. Main changes include:   - Install services on its specific cointainer;   - monasca-thresh, monasca-notification and monasca-persister was     not being installed/configured, now it is;   - Tempest tests are ran for the whole monasca-api;   - The service should be fully functional;   - Added documentation.  The extras directory contains the changes necessary to openstack- ansible to setup monasca.  Change-Id: Ib53d4311c4b4aa722c7cdf7b18632e23b8639a56",objective,,,,,,
openstack%2Frst2bash~master~I36bba19ac1be5c865d8ab6521b84e3b3011af8c7,https://review.opendev.org/455800,"Minor changes, non-functional refactoring.","Minor changes, non-functional refactoring.  Change-Id: I36bba19ac1be5c865d8ab6521b84e3b3011af8c7",refactoring,,,,,,
openstack%2Fironic-inspector~master~Ia05f533c3c14d926b3c524175260cfcf0bb09e1e,https://review.opendev.org/471393,[refactoring] simplify signature of _finish function,[refactoring] simplify signature of _finish function  This is a follow-up to commit e05257035ca9dfa53c59ec5b7aa451dc061b452d.  Change-Id: Ia05f533c3c14d926b3c524175260cfcf0bb09e1e,refactoring,,,,,,
openstack%2Fkarbor~master~Ib5f3fea53bff9fe0a7c3b88339af26b70a6b7d3c,https://review.opendev.org/454150,Refactor resource.py/Resource,"Refactor resource.py/Resource  Create a class of 'Recource' to replace the original definition. It will bring several advantages.  1. The new class will be used as tuple which can't be modified, accessed by name or index.  2. The instance of new class can be hashable whatever the type of members of instace. So, it can be used in method of 'build_graph'.  3. Add some other functions to it, such as transform it to dict.  4. It is easy to chose members of it to be serialized by modifing the definition of property of 'Resource'.  Change-Id: Ib5f3fea53bff9fe0a7c3b88339af26b70a6b7d3c",quality,,,,,,
openstack%2Fkarbor~master~Ib5f3fea53bff9fe0a7c3b88339af26b70a6b7d3c,https://review.opendev.org/454150,Refactor resource.py/Resource,"Refactor resource.py/Resource  Create a class of 'Recource' to replace the original definition. It will bring several advantages.  1. The new class will be used as tuple which can't be modified, accessed by name or index.  2. The instance of new class can be hashable whatever the type of members of instace. So, it can be used in method of 'build_graph'.  3. Add some other functions to it, such as transform it to dict.  4. It is easy to chose members of it to be serialized by modifing the definition of property of 'Resource'.  Change-Id: Ib5f3fea53bff9fe0a7c3b88339af26b70a6b7d3c",objective,,,,,,
openstack%2Fkarbor~master~Ib5f3fea53bff9fe0a7c3b88339af26b70a6b7d3c,https://review.opendev.org/454150,Refactor resource.py/Resource,"Refactor resource.py/Resource  Create a class of 'Recource' to replace the original definition. It will bring several advantages.  1. The new class will be used as tuple which can't be modified, accessed by name or index.  2. The instance of new class can be hashable whatever the type of members of instace. So, it can be used in method of 'build_graph'.  3. Add some other functions to it, such as transform it to dict.  4. It is easy to chose members of it to be serialized by modifing the definition of property of 'Resource'.  Change-Id: Ib5f3fea53bff9fe0a7c3b88339af26b70a6b7d3c",objective,,,,,,
openstack%2Fkarbor~master~Iac85af5bf31d56aea00adca594d8f00683466461,https://review.opendev.org/450694,Refactor volume restore function,Refactor volume restore function  Change-Id: Iac85af5bf31d56aea00adca594d8f00683466461 Implements: blueprint remove-heat,refactoring,,,,,,
openstack%2Fmistral~master~I318c07f0c86e8aec404ae2357c3c10bf3ca6bed3,https://review.opendev.org/466587,Refactor rest_utils,WIP: refactor rest_utils  * Method rest_utils.get_all() was not composed efficiently enough.   It applied 'resource_function' to potentially load additional   fields even if only specific fields were requested by a user.   This patch fixes this by splitting the whole logic of the method   into cases when specific fields are requested and when they are   not.  Change-Id: I318c07f0c86e8aec404ae2357c3c10bf3ca6bed3,quality,,,,,,
openstack%2Fmistral~master~I318c07f0c86e8aec404ae2357c3c10bf3ca6bed3,https://review.opendev.org/466587,Refactor rest_utils,WIP: refactor rest_utils  * Method rest_utils.get_all() was not composed efficiently enough.   It applied 'resource_function' to potentially load additional   fields even if only specific fields were requested by a user.   This patch fixes this by splitting the whole logic of the method   into cases when specific fields are requested and when they are   not.  Change-Id: I318c07f0c86e8aec404ae2357c3c10bf3ca6bed3,objective,,,,,,
x%2Fsnap.openstack~master~Idddd6361deabb8a2c21caa77a42a55cd8b8d2cbc,https://review.opendev.org/466222,"Refactor template rendering, use entry point templates","Refactor template rendering, use entry point templates  Refactor the template rending code into a static function.  Ensure that templates for the entry point are rendered during execute, not the global templates.  Change-Id: Idddd6361deabb8a2c21caa77a42a55cd8b8d2cbc",quality,,,,,,
x%2Fsnap.openstack~master~Idddd6361deabb8a2c21caa77a42a55cd8b8d2cbc,https://review.opendev.org/466222,"Refactor template rendering, use entry point templates","Refactor template rendering, use entry point templates  Refactor the template rending code into a static function.  Ensure that templates for the entry point are rendered during execute, not the global templates.  Change-Id: Idddd6361deabb8a2c21caa77a42a55cd8b8d2cbc",objective,,,,,,
openstack%2Fkeystone~master~Id1452db131740c68b3756a819792f9a60cff239c,https://review.opendev.org/387161,Refactor Authorization:,Refactor Authorziation:  Merged the decorator logic into a single function that calls check_policy  Moved authorization logic in authorize.py  Prep for oslo-context fixes  Change-Id: Id1452db131740c68b3756a819792f9a60cff239c,quality,,,,,,
openstack%2Fdiskimage-builder~master~I7aa4fe0466e44846d8fa3194575d446fe4b5b2e6,https://review.opendev.org/461356,Refactor block-device base functions.,"Refactor block-device base functions.  As part of the final steps, refactor the bits belonging to block device and functions. This is a partial refactor from I3600c6a3d663c697b59d91bd3fbb5e408af345e4  Change-Id: I7aa4fe0466e44846d8fa3194575d446fe4b5b2e6 Co-Authored-By: Andreas Florath <andreas@florath.net>",refactoring,,,,,,
openstack%2Fdiskimage-builder~master~I9d07593a01441b62632234468ac25a982cf1a9f0,https://review.opendev.org/459043,Refactor block_device: passing command line parameters,"Refactor block_device: passing command line parameters The original approach was to pass each and every command line parameter to the block device. While the block device functionality gets extended, this is not any longer practical. Instead of passing in all the parameters separately this patch collects these in a YAML file that is passed in to the block device layer. Change-Id: I9d07593a01441b62632234468ac25a982cf1a9f0 Signed-off-by: Andreas Florath <andreas@florath.net>",quality,,,,,,
openstack%2Fdiskimage-builder~master~I9d07593a01441b62632234468ac25a982cf1a9f0,https://review.opendev.org/459043,Refactor block_device: passing command line parameters,"Refactor block_device: passing command line parameters The original approach was to pass each and every command line parameter to the block device. While the block device functionality gets extended, this is not any longer practical. Instead of passing in all the parameters separately this patch collects these in a YAML file that is passed in to the block device layer. Change-Id: I9d07593a01441b62632234468ac25a982cf1a9f0 Signed-off-by: Andreas Florath <andreas@florath.net>",objective,,,,,,
openstack%2Fnetworking-hyperv~master~I84298868ee23c01f03d39db842ad58aea3142fb2,https://review.opendev.org/436485,Refactor the Hyper-V Layer 2 Agent,Refactor the Hyper-V Layer 2 Agent  Refactor the layer 2 related modules in order to ease the adding of a new layer 2 agent with similar structure.  This patch add a couple of contract classes that contains the base functionalities of an agent.  Change-Id: I84298868ee23c01f03d39db842ad58aea3142fb2 Co-Authored-By: Paula Cr����maru <pcrismaru@cloudbasesolutions.com> Implements: blueprint hyperv-network-virtualization-support,quality,,,,,,
openstack%2Fnetworking-hyperv~master~I84298868ee23c01f03d39db842ad58aea3142fb2,https://review.opendev.org/436485,Refactor the Hyper-V Layer 2 Agent,Refactor the Hyper-V Layer 2 Agent  Refactor the layer 2 related modules in order to ease the adding of a new layer 2 agent with similar structure.  This patch add a couple of contract classes that contains the base functionalities of an agent.  Change-Id: I84298868ee23c01f03d39db842ad58aea3142fb2 Co-Authored-By: Paula Cr����maru <pcrismaru@cloudbasesolutions.com> Implements: blueprint hyperv-network-virtualization-support,objective,,,,,,
airship%2Fairshipui~master~Iecb0efbda61c278126567c69916d790d2130a8aa,https://review.opendev.org/760653,Refactor config component,"Refactor config component  These changes are cosmetic, and aim to make it easier for users to navigate, read, and edit each config subsection. No underlying functionality has been changed.  Change-Id: Iecb0efbda61c278126567c69916d790d2130a8aa",refactoring,,,,,,
airship%2Fairshipui~master~Iecb0efbda61c278126567c69916d790d2130a8aa,https://review.opendev.org/760653,Refactor config component,"Refactor config component  These changes are cosmetic, and aim to make it easier for users to navigate, read, and edit each config subsection. No underlying functionality has been changed.  Change-Id: Iecb0efbda61c278126567c69916d790d2130a8aa",quality,,,,,,
openstack%2Fcinder~master~If78e42e6b08c4ff21b477c3b4c7f49dda6f85f7b,https://review.opendev.org/442423,VMware: Refactor vmdk unit tests,VMware: Refactor vmdk unit tests  * Refactor unit tests for _create_backing and ImageDiskType so that each case is tested by a separate method.  * Use utility function to reduce code duplication.  Change-Id: If78e42e6b08c4ff21b477c3b4c7f49dda6f85f7b,quality,,,,,,
openstack%2Fcinder~master~If78e42e6b08c4ff21b477c3b4c7f49dda6f85f7b,https://review.opendev.org/442423,VMware: Refactor vmdk unit tests,VMware: Refactor vmdk unit tests  * Refactor unit tests for _create_backing and ImageDiskType so that each case is tested by a separate method.  * Use utility function to reduce code duplication.  Change-Id: If78e42e6b08c4ff21b477c3b4c7f49dda6f85f7b,testing,,,,,,
openstack%2Fironic~master~Ia87646cccdefba22caf121f4e347e8f2edf736e0,https://review.opendev.org/410684,Refactor waiters in our tempest plugin,Refactor waiters in our tempest plugin  Deduplicates some of the code between common.waiters module and BaremetalScenarioTest functions.  Change-Id: Ia87646cccdefba22caf121f4e347e8f2edf736e0,quality,,,,,,
openstack%2Fzun-ui~master~I4e88e829eb3b2c7ea59b00381b9c7c873c8fe683,https://review.opendev.org/444179,Refactor zun.service.js,"Refactor zun.service.js  There are many duplicated lines in zun.service.js. So this patch refactors this.  convertMemorySize function is unnecessary, due to the memory size unit was fixed as MiB. Also, this patch removes it.  Change-Id: I4e88e829eb3b2c7ea59b00381b9c7c873c8fe683",quality,,,,,,
openstack%2Fdiskimage-builder~feature%2Fv2~Ia73baeca74180a7bc9ea487da03ff56d6a3070ce,https://review.opendev.org/425824,Refactor: block-device partitioning cleanup,"Refactor: block-device partitioning cleanup  Now that the main partitioning refactor patch is merged, there is a small relict of handling partitions still in the disk-image-create main.  This patch moves the functionality from disk-image-create to the block-device/partitioning module: it is mostly a rewrite of the original bash code in python.  Change-Id: Ia73baeca74180a7bc9ea487da03ff56d6a3070ce Signed-off-by: Andreas Florath <andreas@florath.net>",objective,,,,,,
openstack%2Fnova~stable%2Fnewton~I0da4393fe884f626bb306a251472590535aab331,https://review.opendev.org/416758,placement: refactor instance translate function,placement: refactor instance translate function  Makes the _allocations() object method of the SchedulerReportingClient into a simple module-level function called _instance_to_allocations_dict(). This makes the function name match what the returned result is and indicates what the function actually does.  Change-Id: I0da4393fe884f626bb306a251472590535aab331 (cherry picked from commit a6cfc685dd3a16dccf491bf95522d4bcb38b3951),refactoring,,,,,,
openstack%2Fnova~stable%2Fnewton~I70e5b649e59598b1fe356fa401769e8a7ce60c72,https://review.opendev.org/416757,placement: refactor translate from node to dict,placement: refactor translate from node to dict  This patch refactors the previous object method on the scheduler report client _compute_node_inventory() to being a module-level function called _compute_node_to_inventory_dict(). The spurious top-level 'inventories' key is removed from the returned dict and the payload for PUT /r-p/{uuid}/inventories is constructed explicitly now.  Refactors the unit tests for the report client that handle inventory to remove unnecessary mocking and correct some improper stub values that were being masked by the mocks.  Change-Id: I70e5b649e59598b1fe356fa401769e8a7ce60c72 (cherry picked from commit 310e4dcbd8abe0d1bfab3d4dd0818c6a0630fc8a),refactoring,,,,,,
openstack%2Fnova~stable%2Fnewton~I70e5b649e59598b1fe356fa401769e8a7ce60c72,https://review.opendev.org/416757,placement: refactor translate from node to dict,placement: refactor translate from node to dict  This patch refactors the previous object method on the scheduler report client _compute_node_inventory() to being a module-level function called _compute_node_to_inventory_dict(). The spurious top-level 'inventories' key is removed from the returned dict and the payload for PUT /r-p/{uuid}/inventories is constructed explicitly now.  Refactors the unit tests for the report client that handle inventory to remove unnecessary mocking and correct some improper stub values that were being masked by the mocks.  Change-Id: I70e5b649e59598b1fe356fa401769e8a7ce60c72 (cherry picked from commit 310e4dcbd8abe0d1bfab3d4dd0818c6a0630fc8a),testing,,,,,,
openstack%2Fbandit~master~Icd06fb7ca27a8a01d6442f199775d474d436371b,https://review.opendev.org/437678,Refactor check_example to be clearer on error,"Refactor check_example to be clearer on error  Currently the check_example in test_functional computes sums and on error tells the developer the difference in sums, which is confusing and error prone.  It also leads to false positives where sums may be correct, but the exact number of MEDIUM, HIGH, etc is different. This was the case for two tests: test_xml and test_secret_config_option.  Change-Id: Icd06fb7ca27a8a01d6442f199775d474d436371b",objective,,,,,,
openstack%2Fbandit~master~Icd06fb7ca27a8a01d6442f199775d474d436371b,https://review.opendev.org/437678,Refactor check_example to be clearer on error,"Refactor check_example to be clearer on error  Currently the check_example in test_functional computes sums and on error tells the developer the difference in sums, which is confusing and error prone.  It also leads to false positives where sums may be correct, but the exact number of MEDIUM, HIGH, etc is different. This was the case for two tests: test_xml and test_secret_config_option.  Change-Id: Icd06fb7ca27a8a01d6442f199775d474d436371b",quality,,,,,,
openstack%2Fdevstack~master~Ib0e377aabe45c27bb6ce59ca275ce73085e8b9d2,https://review.opendev.org/436938,Refactor rpc backend vhost creation,"Refactor rpc backend vhost creation  The creation of the cellsv1 rpc vhost was buried in the restart function, which makes it hard to extend. This breaks it out into a helper method and moves the conditional logic into the nova module itself.  Change-Id: Ib0e377aabe45c27bb6ce59ca275ce73085e8b9d2",quality,,,,,,
openstack%2Fglance~master~I094ee44ef86f7e7eb2353f801d5aef77391c95ff,https://review.opendev.org/387660,"DB code refactor, simplify and clean-up","DB code refactor, simplify and clean-up  * Centralized the common function is_image_visible * Removed unused copy/paste version of is_image_mutable  Change-Id: I094ee44ef86f7e7eb2353f801d5aef77391c95ff",quality,,,,,,
openstack%2Fheat-agents~master~I09f3d2ee98020de556a3d0aa72721fe8b7420b2a,https://review.opendev.org/436217,Refactor docker cmd arg building,"Refactor docker cmd arg building  This change refactors the arg building so that the logic is contained in dedicated functions for 'docker run' and 'docker exec', instead of being split between the main loop and docker_arg_map.  Minor changes in behaviour which don't affect the tests include: - No longer force ascii encoding of arg values - Extra check to ensure the command is a list before extending cmd - Remove the unicode/empty-string list value check  Change-Id: I09f3d2ee98020de556a3d0aa72721fe8b7420b2a",quality,,,,,,
x%2Fquark~master~Ie922d7778d370491166a00952bec7cea7f7b5a84,https://review.opendev.org/435577,Refactor extensions to align with upstream,Refactor extensions to align with upstream  Upstream moved ExtensionDescriptor into neutron-lib as well as some functionality revolved around retrieving the plugin from NeutronManager. This refactor moves libraries around in order to align quark with upstream neutron's expectations.  JIRA:NCP2115 Change-Id: Ie922d7778d370491166a00952bec7cea7f7b5a84,testing,,,,,,
x%2Fcraton~master~I96276bf6b7fdd71af42424a13c45b7cfde06b0b5,https://review.opendev.org/433278,Refactor NetworkDeviceById to use format_variables,"Refactor NetworkDeviceById to use format_variables  To remove duplicate code, this commit refactors the NetworkDeviceById get method to make use of the format_variables function in resources.utils.  Change-Id: I96276bf6b7fdd71af42424a13c45b7cfde06b0b5",quality,,,,,,
x%2Fmixmatch~master~I73552277255cf3cdb52ebc85b89a7f32f4355038,https://review.opendev.org/427925,"Refactoring of proxy.py, stage one","Refactoring of proxy.py, stage one  This reduces the usage of member variables in favor of a dictionary containing details. Now almost all the details are set in a new function get_details.  Though this is a first good step, more work needs to be done in follow-up patches.  Change-Id: I73552277255cf3cdb52ebc85b89a7f32f4355038",quality,,,,,,
airship%2Fairshipctl~master~I40fe9369ad2d5f4b58123f67ac90511db6a2fd12,https://review.opendev.org/758261,Refactor kustomization of env vars,"Refactor kustomization of env vars  This tweaks the generation of the env-vars catalogue to be done in the airshipctl-catalogues function itself, resulting in a vanilla catalogue that can be imported as a resource across the phases that need it.  Change-Id: I40fe9369ad2d5f4b58123f67ac90511db6a2fd12",quality,,,,,,
airship%2Fairshipui~master~I64f4f4edeea58608f475e008594ac8dbdea2a5d7,https://review.opendev.org/757193,Refactor Phase and Document components,"Refactor Phase and Document components  Moves all phase related functionality to the Phase component, and document functionality (currently just doc pull) to the Document component. Also refactors backend code to ensure phase and document messages are handled by separate handlers.  Change-Id: I64f4f4edeea58608f475e008594ac8dbdea2a5d7",quality,,,,,,
airship%2Fairshipui~master~I64f4f4edeea58608f475e008594ac8dbdea2a5d7,https://review.opendev.org/757193,Refactor Phase and Document components,"Refactor Phase and Document components  Moves all phase related functionality to the Phase component, and document functionality (currently just doc pull) to the Document component. Also refactors backend code to ensure phase and document messages are handled by separate handlers.  Change-Id: I64f4f4edeea58608f475e008594ac8dbdea2a5d7",objective,,,,,,
airship%2Fairshipui~master~I64f4f4edeea58608f475e008594ac8dbdea2a5d7,https://review.opendev.org/757193,Refactor Phase and Document components,"Refactor Phase and Document components  Moves all phase related functionality to the Phase component, and document functionality (currently just doc pull) to the Document component. Also refactors backend code to ensure phase and document messages are handled by separate handlers.  Change-Id: I64f4f4edeea58608f475e008594ac8dbdea2a5d7",refactoring,,,,,,
x%2Fglare~master~I8fadc85766c102b86dad0d912832c642a12a38d1,https://review.opendev.org/425247,refactoring of change validation functions,refactoring of change validation functions  Change-Id: I8fadc85766c102b86dad0d912832c642a12a38d1,quality,,,,,,
openstack%2Fvitrage~master~Ifec535e4eafbc6062fcadbd99e0a012b8eb5f214,https://review.opendev.org/423976,Code refactoring - EntityGraph class functionality moved to a processor utils,Code refactoring - EntityGraph class functionality moved to a processor utils  Change-Id: Ifec535e4eafbc6062fcadbd99e0a012b8eb5f214,objective,,,,,,
openstack%2Fvitrage~master~Ifec535e4eafbc6062fcadbd99e0a012b8eb5f214,https://review.opendev.org/423976,Code refactoring - EntityGraph class functionality moved to a processor utils,Code refactoring - EntityGraph class functionality moved to a processor utils  Change-Id: Ifec535e4eafbc6062fcadbd99e0a012b8eb5f214,refactoring,,,,,,
openstack%2Fvitrage~master~Ifec535e4eafbc6062fcadbd99e0a012b8eb5f214,https://review.opendev.org/423976,Code refactoring - EntityGraph class functionality moved to a processor utils,Code refactoring - EntityGraph class functionality moved to a processor utils  Change-Id: Ifec535e4eafbc6062fcadbd99e0a012b8eb5f214,testing,,,,,,
openstack%2Fswift~master~Iaad88e49aadeb28f614aafa1e9596fe07ce9793a,https://review.opendev.org/406277,Refactor recon to use single md5_hash_for_file function,"Refactor recon to use single md5_hash_for_file function  There were several implementations of hashing the content of a file in cli/recon.py and common/middleware/recon.py. This patch relocates one implementation (_hash_for_ringfile, introduced in the Related Change) to common/utils.py and refactors recon cli and middleware to use that function.  Also improves use of mocking in the unit tests to eliminate passing custom file opener functions to the ReconMiddleware get_ring_md5 and get_swift_conf_md5 methods.  Related-Change: I23b5e0a8082b30ca257aeb1fab03ab74e6f0b2d4  Change-Id: Iaad88e49aadeb28f614aafa1e9596fe07ce9793a",objective,,,,,,
openstack%2Fswift~master~Iaad88e49aadeb28f614aafa1e9596fe07ce9793a,https://review.opendev.org/406277,Refactor recon to use single md5_hash_for_file function,"Refactor recon to use single md5_hash_for_file function  There were several implementations of hashing the content of a file in cli/recon.py and common/middleware/recon.py. This patch relocates one implementation (_hash_for_ringfile, introduced in the Related Change) to common/utils.py and refactors recon cli and middleware to use that function.  Also improves use of mocking in the unit tests to eliminate passing custom file opener functions to the ReconMiddleware get_ring_md5 and get_swift_conf_md5 methods.  Related-Change: I23b5e0a8082b30ca257aeb1fab03ab74e6f0b2d4  Change-Id: Iaad88e49aadeb28f614aafa1e9596fe07ce9793a",testing,,,,,,
openstack%2Fdjango_openstack_auth~master~I3aa026364443220c9b3fa38ec306fed4d9e878cc,https://review.opendev.org/415521,Refactor project and domain scoping,Refactor project and domain scoping  Moves the project and domain logic into their own functions inside the plugin object.  Change-Id: I3aa026364443220c9b3fa38ec306fed4d9e878cc,objective,,,,,,
x%2Falmanach~master~I2826713e438de63a49aae71cf7100288bde6bee1,https://review.opendev.org/415526,Models refactoring,"Models refactoring  - Add unit tests for models - Avoid default method arguments with mutable values - Simplify object serialization/unserialization - Model objects are self-contained and do not use global functions - Do not hardcode specific image metadata in the code - Rename ""os"" key to the standard name ""image_meta"" - Both keys ""os"" and ""image_meta"" are stored in the db for backward compatibility  Change-Id: I2826713e438de63a49aae71cf7100288bde6bee1",testing,,,,,,
x%2Falmanach~master~I2826713e438de63a49aae71cf7100288bde6bee1,https://review.opendev.org/415526,Models refactoring,"Models refactoring  - Add unit tests for models - Avoid default method arguments with mutable values - Simplify object serialization/unserialization - Model objects are self-contained and do not use global functions - Do not hardcode specific image metadata in the code - Rename ""os"" key to the standard name ""image_meta"" - Both keys ""os"" and ""image_meta"" are stored in the db for backward compatibility  Change-Id: I2826713e438de63a49aae71cf7100288bde6bee1",refactoring,,,,,,
x%2Falmanach~master~I2826713e438de63a49aae71cf7100288bde6bee1,https://review.opendev.org/415526,Models refactoring,"Models refactoring  - Add unit tests for models - Avoid default method arguments with mutable values - Simplify object serialization/unserialization - Model objects are self-contained and do not use global functions - Do not hardcode specific image metadata in the code - Rename ""os"" key to the standard name ""image_meta"" - Both keys ""os"" and ""image_meta"" are stored in the db for backward compatibility  Change-Id: I2826713e438de63a49aae71cf7100288bde6bee1",quality,,,,,,
x%2Fgroup-based-policy~stable%2Fliberty~Ifebd7a0c8ef2c4a5de6821e3e0b918dbfcb5820a,https://review.opendev.org/409286,NFP - Refactor to support extensions such as network device cluster,NFP - Refactor to support extensions such as network device cluster  Refactor orchestrator to support network function device cluster framework and more granular events.  Change-Id: Ifebd7a0c8ef2c4a5de6821e3e0b918dbfcb5820a Co-Authored-By: ashutosh mishra <mca.ashu4@gmail.com> Closes-Bug: 1645235,objective,,,,,,
openstack%2Fheat~master~I33580190cc52df53c6bb411b1c8ec9cfe8be6a9f,https://review.opendev.org/372874,Trivial refactor of session var in reset_stack_status,Trivial refactor of session var in reset_stack_status  Non-functional change.  Change-Id: I33580190cc52df53c6bb411b1c8ec9cfe8be6a9f,refactoring,,,,,,
openstack%2Ftacker~master~I944b3d530dcfc07d59a5efabe5cfbf788d40111a,https://review.opendev.org/405276,Refactor the source code of infra_driver/openstack,"Refactor the source code of infra_driver/openstack  In order to support Senlin driver for vnf auto-scaling management, need to add auto-scaling backend switch function. But the openstack infra_driver's source codes are using too many inner methods, that is difficult to read, not feasible to change, and also difficult to test. This patch refactors the source code for the first step.  Change-Id: I944b3d530dcfc07d59a5efabe5cfbf788d40111a",objective,,,,,,
x%2Fgroup-based-policy~stable%2Fmitaka~Ifebd7a0c8ef2c4a5de6821e3e0b918dbfcb5820a,https://review.opendev.org/409279,NFP - Refactor to support extensions such as network device cluster,NFP - Refactor to support extensions such as network device cluster  Refactor orchestrator to support network function device cluster framework and more granular events.  Change-Id: Ifebd7a0c8ef2c4a5de6821e3e0b918dbfcb5820a Co-Authored-By: ashutosh mishra <mca.ashu4@gmail.com> Closes-Bug: 1645235,objective,,,,,,
openstack%2Fheat~master~Id6bcc90cbf430095719315ac7e9d3e8c9e745012,https://review.opendev.org/361899,"Refactor, add encrypt/decrypt data dict functions to crypt","Refactor, add encrypt/decrypt data dict functions to crypt  Just a refactor, no change in functionality.  The functions added to crypt are used to encrypt / decrypt resource properties data dicts. Note that they should not be used for encrypting / decrypting other things such as params or user creds (which are just strings).  An intermediate json conversion of each value in a dict takes place before it is encrypted/decrypted.  Change-Id: Id6bcc90cbf430095719315ac7e9d3e8c9e745012",objective,,,,,,
openstack%2Fhorizon~master~I883f885bd424955d39ddcfde5ba396a88cfc041e,https://review.opendev.org/391506,Refactor tox & update docs,"Refactor tox to reduce duplication  - Updated envlist, so just running `tox` from the CLI will now run all voting gate tests - Reduce duplicated definitions and commands - Remove any reliance on run_tests within tox - Add the LOCALE_PATHS setting to settings.py, so that `tox -e manage makemessages` functions correctly. This is already documented in the Django settings docs, so I haven't duplicated anything in our own docs  Change-Id: I883f885bd424955d39ddcfde5ba396a88cfc041e Implements: blueprint enhance-tox",quality,,,,,,
openstack%2Fhorizon~master~I883f885bd424955d39ddcfde5ba396a88cfc041e,https://review.opendev.org/391506,Refactor tox & update docs,"Refactor tox to reduce duplication  - Updated envlist, so just running `tox` from the CLI will now run all voting gate tests - Reduce duplicated definitions and commands - Remove any reliance on run_tests within tox - Add the LOCALE_PATHS setting to settings.py, so that `tox -e manage makemessages` functions correctly. This is already documented in the Django settings docs, so I haven't duplicated anything in our own docs  Change-Id: I883f885bd424955d39ddcfde5ba396a88cfc041e Implements: blueprint enhance-tox",testing,,,,,,
openstack%2Fopenstack-ansible~master~I577cdbf4aadfcce846412edd7e2a394c257c0243,https://review.opendev.org/399876,Inventory filesystem refactor load funcs moved,"Inventory filesystem refactor load funcs moved  The last uses of the builtin os module are removed from generate as the load_environment and load_user_configuration functions are moved, along with the _extra_config method they rely upon. This also moves the last use of the yaml module.  These functions are not refactored to make use of the other funcs available in the filesystem package, and as a result there is still an undesirable use of the dir_find func in the generate script. These will all be cleaned up in a following patch to keep this easier to review.  An unused left-over function is removed now that there are no merge conflicts introduced by it.  A debug logging message is formatted consistent to other messages; the only impact in this case is applying consistency in log message formatting since the formatting was only occuring when the log level is activated already.  Change-Id: I577cdbf4aadfcce846412edd7e2a394c257c0243",objective,,,,,,
openstack%2Fopenstack-ansible~master~I577cdbf4aadfcce846412edd7e2a394c257c0243,https://review.opendev.org/399876,Inventory filesystem refactor load funcs moved,"Inventory filesystem refactor load funcs moved  The last uses of the builtin os module are removed from generate as the load_environment and load_user_configuration functions are moved, along with the _extra_config method they rely upon. This also moves the last use of the yaml module.  These functions are not refactored to make use of the other funcs available in the filesystem package, and as a result there is still an undesirable use of the dir_find func in the generate script. These will all be cleaned up in a following patch to keep this easier to review.  An unused left-over function is removed now that there are no merge conflicts introduced by it.  A debug logging message is formatted consistent to other messages; the only impact in this case is applying consistency in log message formatting since the formatting was only occuring when the log level is activated already.  Change-Id: I577cdbf4aadfcce846412edd7e2a394c257c0243",quality,,,,,,
openstack%2Fopenstack-ansible~master~I577cdbf4aadfcce846412edd7e2a394c257c0243,https://review.opendev.org/399876,Inventory filesystem refactor load funcs moved,"Inventory filesystem refactor load funcs moved  The last uses of the builtin os module are removed from generate as the load_environment and load_user_configuration functions are moved, along with the _extra_config method they rely upon. This also moves the last use of the yaml module.  These functions are not refactored to make use of the other funcs available in the filesystem package, and as a result there is still an undesirable use of the dir_find func in the generate script. These will all be cleaned up in a following patch to keep this easier to review.  An unused left-over function is removed now that there are no merge conflicts introduced by it.  A debug logging message is formatted consistent to other messages; the only impact in this case is applying consistency in log message formatting since the formatting was only occuring when the log level is activated already.  Change-Id: I577cdbf4aadfcce846412edd7e2a394c257c0243",refactoring,,,,,,
openstack%2Freleases~master~Ie8b3fe7c0ce257bb9920221d45ce6e963de0944e,https://review.opendev.org/401792,start refactoring validation code,"start refactoring validation code  We need to expand the validation code to include branches. Rather than continuing to grow the logic in one very large function, start splitting it up.  Change-Id: Ie8b3fe7c0ce257bb9920221d45ce6e963de0944e Signed-off-by: Doug Hellmann <doug@doughellmann.com>",quality,,,,,,
zuul%2Fzuul~feature%2Fzuulv3~I3a4080426c4dc680ed656e18f26597e3d1b7d759,https://review.opendev.org/399415,Refactor skip-if tests to use irrelevant-files,Refactor skip-if tests to use irrelevant-files  Skip-if has been removed in favor of irrelevant-files and the branch matchers. This refactors the tests that used to be used for skip-if to cover irrelevant-files.  There may still be need to cover the other types of matchers.  The 'test_parse_skip_if' has just been removed as it wasn't really covering anything not also covered by the functional tests.  Change-Id: I3a4080426c4dc680ed656e18f26597e3d1b7d759 Story: 2000773 Task: 3378,testing,,,,,,
openstack%2Fnetworking-calico~master~I44d7d271db9e2b48f3a4fa08572efc6712144492,https://review.opendev.org/396090,Refactoring: Make code decomposition,"Refactoring: Make code decomposition  * Move code responsible for endpoint creation and update   to reusable functions `_create_endpoint`, `_update_endpoint`  Change-Id: I44d7d271db9e2b48f3a4fa08572efc6712144492",quality,,,,,,
openstack%2Fglance_store~master~I0bca2607267aef3bda720cdfbbbe0e5a8093a20d,https://review.opendev.org/384749,Refactor get_manager_for_store in an OO manner,Refactor get_manager_for_store in an OO manner  get_manager_for_store is a weird function that switches based on the class type of the first parameter. This is an odd throw back to pre object orientated days where the object defines what it wants. Refactor it to put the class on the object.  Change-Id: I0bca2607267aef3bda720cdfbbbe0e5a8093a20d,quality,,,,,,
openstack%2Fneutron-fwaas~master~I3a9d2d47c11c38a252c03920db90f34ffd9e8486,https://review.opendev.org/386511,Refactor of _convert_fwaas_to_iptables_rule and dependencies,"Refactor of _convert_fwaas_to_iptables_rule and dependencies  In iptables_fwaas*.py, the function _convert_fwaas_to_iptables_rule prepare and array of all potential '-arg value' adding an extra-space for each unused argument. The refactor code deal with each element between spaces separately , for example, '-arg' 'value', etc... in the array (like done in the security groups part of neutron). The main advantage is much better performance when applied to a router (during difflib.ndiff) as we have exactly same syntax between what expected and iptables-save result.  Change-Id: I3a9d2d47c11c38a252c03920db90f34ffd9e8486",quality,,,,,,
openstack%2Fcharm-barbican~master~I4305eb34f314f8f5f1a7d1807508bf1e4dbfb84c,https://review.opendev.org/367511,Refactor charm to work with declarative-changes,Refactor charm to work with declarative-changes  This is a refactor of the charm (no new functionality) to work with the declarative helpers in charms.openstack.  This means that much of the boiler plate has disappeared from the charm and into charms.openstack including the tests.  Change-Id: I4305eb34f314f8f5f1a7d1807508bf1e4dbfb84c Depends-On: I3c74f60bb4ed7901828902118697f310622c4061 Depends-On: Ic81e65f5a072f67cbd2322e4cfd0eec9a5895823,quality,,,,,,
openstack%2Fcharm-barbican~master~I4305eb34f314f8f5f1a7d1807508bf1e4dbfb84c,https://review.opendev.org/367511,Refactor charm to work with declarative-changes,Refactor charm to work with declarative-changes  This is a refactor of the charm (no new functionality) to work with the declarative helpers in charms.openstack.  This means that much of the boiler plate has disappeared from the charm and into charms.openstack including the tests.  Change-Id: I4305eb34f314f8f5f1a7d1807508bf1e4dbfb84c Depends-On: I3c74f60bb4ed7901828902118697f310622c4061 Depends-On: Ic81e65f5a072f67cbd2322e4cfd0eec9a5895823,testing,,,,,,
openstack%2Fnova~master~I0da4393fe884f626bb306a251472590535aab331,https://review.opendev.org/373505,placement: refactor instance translate function,placement: refactor instance translate function  Makes the _allocations() object method of the SchedulerReportingClient into a simple module-level function called _instance_to_allocations_dict(). This makes the function name match what the returned result is and indicates what the function actually does.  Change-Id: I0da4393fe884f626bb306a251472590535aab331,quality,,,,,,
openstack%2Fnova~master~I0da4393fe884f626bb306a251472590535aab331,https://review.opendev.org/373505,placement: refactor instance translate function,placement: refactor instance translate function  Makes the _allocations() object method of the SchedulerReportingClient into a simple module-level function called _instance_to_allocations_dict(). This makes the function name match what the returned result is and indicates what the function actually does.  Change-Id: I0da4393fe884f626bb306a251472590535aab331,testing,,,,,,
openstack%2Fnova~master~I70e5b649e59598b1fe356fa401769e8a7ce60c72,https://review.opendev.org/372795,placement: refactor translate from node to dict,placement: refactor translate from node to dict  This patch refactors the previous object method on the scheduler report client _compute_node_inventory() to being a module-level function called _compute_node_to_inventory_dict(). The spurious top-level 'inventories' key is removed from the returned dict and the payload for PUT /r-p/{uuid}/inventories is constructed explicitly now.  Refactors the unit tests for the report client that handle inventory to remove unnecessary mocking and correct some improper stub values that were being masked by the mocks.  Change-Id: I70e5b649e59598b1fe356fa401769e8a7ce60c72,quality,,,,,,
openstack%2Fnova~master~I70e5b649e59598b1fe356fa401769e8a7ce60c72,https://review.opendev.org/372795,placement: refactor translate from node to dict,placement: refactor translate from node to dict  This patch refactors the previous object method on the scheduler report client _compute_node_inventory() to being a module-level function called _compute_node_to_inventory_dict(). The spurious top-level 'inventories' key is removed from the returned dict and the payload for PUT /r-p/{uuid}/inventories is constructed explicitly now.  Refactors the unit tests for the report client that handle inventory to remove unnecessary mocking and correct some improper stub values that were being masked by the mocks.  Change-Id: I70e5b649e59598b1fe356fa401769e8a7ce60c72,testing,,,,,,
x%2Fglare~master~I74c038bafee0d2b11ebdeab2cc3aceb4707fd83c,https://review.opendev.org/372086,Refactor functional tests,"Refactor functional tests  1. Move all schema tests to separate file 2. Group all functional tests by their meaning 3. Move testing router to functional/__init__.py file 4. Get rid of lifecycle test, because it duplicate the functionality of other existing tests.  Change-Id: I74c038bafee0d2b11ebdeab2cc3aceb4707fd83c",testing,,,,,,
openstack%2Fproject-config~master~I9c4386e27da2cd1aad000c513f510613c2673b42,https://review.opendev.org/372142,Translations: Refactor cleanup,"Translations: Refactor cleanup  All functions use now the same three cleanup routines, use a separate routine for them.  Change-Id: I9c4386e27da2cd1aad000c513f510613c2673b42",quality,,,,,,
openstack%2Fceilometer~master~I8604d00c9298f56009c579fd23adc2c93ad44f8c,https://review.opendev.org/311081,[Trivial] Refactor libvirt inspector connection & uri,"[Trivial] Refactor libvirt inspector connection & uri  libvirt inpsector has an attribute called `uri`, which only used when connecting to libvirtd. There is no such need to do so, a local variable can do it as well.  Meanwhile, we initialize connection by calling a method `_get_connection`, and there is an attribute ``connection`` holds the returned value. This method can be replaced with a property `connection`, to shorten typing and avoid function calling style.  Change-Id: I8604d00c9298f56009c579fd23adc2c93ad44f8c",quality,,,,,,
openstack%2Fheat~master~I5b864d241a5e16c09fcce30c40d634d9bb72e173,https://review.opendev.org/368352,Refactor resource definition parsing in HOT/cfn,"Refactor resource definition parsing in HOT/cfn  Parse each field in a resource definition individually instead of all in one go. This allows the HOT and cfn formats to apply different parsing to different fields - specifically in the future we want to parse the condition field like a condition, using only the valid condition functions.  Change-Id: I5b864d241a5e16c09fcce30c40d634d9bb72e173",objective,,,,,,
openstack%2Fheat~master~I0c524b058df0266c48ade5f7c477762fa3d7483a,https://review.opendev.org/367687,Refactor boolean condition functions,Refactor boolean condition functions  Change-Id: I0c524b058df0266c48ade5f7c477762fa3d7483a,quality,,,,,,
openstack%2Fheat~master~I0c524b058df0266c48ade5f7c477762fa3d7483a,https://review.opendev.org/367687,Refactor boolean condition functions,Refactor boolean condition functions  Change-Id: I0c524b058df0266c48ade5f7c477762fa3d7483a,refactoring,,,,,,
openstack%2Fsenlin~master~Ie9b7f4dc173661eeb554aef767e2ba64de4ca535,https://review.opendev.org/364328,Refactor affinity policy,Refactor affinity policy  This patch moves the unility functions related to nova calls up to the base class.  Change-Id: Ie9b7f4dc173661eeb554aef767e2ba64de4ca535,quality,,,,,,
openstack%2Fstorlets~master~I3fb9734f2066608e82f9275be7d3acf607e28b99,https://review.opendev.org/358783,Refactor process starting functions,"Refactor process starting functions  This patch refactors functions related to process launching (spawn_subprocess, wait_for_daemon_to_initialize and process_start_daemon), so that they can be just utility functions to manage storlet daemon.  Change-Id: I3fb9734f2066608e82f9275be7d3acf607e28b99",quality,,,,,,
openstack%2Fstorlets~master~Ib87aca9dbb715a7fc27e0b893716d36cec540c42,https://review.opendev.org/357970,Refactor process_kill and process_kill_all,"Refactor process_kill and process_kill_all  This patch refactors two functions in daemon_factory, process_kill and process_kill_all, to make them as just utility functions to manage storlet daemon.  Change-Id: Ib87aca9dbb715a7fc27e0b893716d36cec540c42",quality,,,,,,
openstack%2Fstorlets~master~I8bc414d26ac244c681de7efc8a8a8d6b8ee024c1,https://review.opendev.org/358033,Refactor status functions,WIP: Refactor status functions  Change-Id: I8bc414d26ac244c681de7efc8a8a8d6b8ee024c1,quality,,,,,,
openstack%2Fstorlets~master~I67d8fe03b553e70f99f6e9a9dcf5ead2bc10e471,https://review.opendev.org/357999,Refactor shutdown_process and shutdown_all_process,"Refactor shutdown functions  This patch refactors two functions in daemon_factory, shutdown_process and shutdown_all_processes, to make them as just utility functions to manage storlet daemon.  Change-Id: I67d8fe03b553e70f99f6e9a9dcf5ead2bc10e471",objective,,,,,,
openstack%2Fstorlets~master~I67d8fe03b553e70f99f6e9a9dcf5ead2bc10e471,https://review.opendev.org/357999,Refactor shutdown_process and shutdown_all_process,"Refactor shutdown functions  This patch refactors two functions in daemon_factory, shutdown_process and shutdown_all_processes, to make them as just utility functions to manage storlet daemon.  Change-Id: I67d8fe03b553e70f99f6e9a9dcf5ead2bc10e471",objective,,,,,,
openstack%2Ffuel-ui~stable%2Fmitaka~I819e4d6f5cb0dcf2ab47fa51f3991b71ce09246a,https://review.opendev.org/358556,Refactor processing of node list settings,"Refactor processing of node list settings  Methods related to node list sorting, filtering functionality and role management are moved to a separate component.  Closes-Bug: #1615558  Change-Id: I819e4d6f5cb0dcf2ab47fa51f3991b71ce09246a",testing,,,,,,
openstack%2Fpython-ironic-inspector-client~master~I9bffade054d9470a860d7dc9635df62190b1e805,https://review.opendev.org/357795,Fix functional tests broken by the latest refactoring,Fix functional tests broken by the latest refactoring  Depends-On: I39ca8220940d0aca76131f85bbec1fc94a5411d6 Change-Id: I9bffade054d9470a860d7dc9635df62190b1e805,testing,,,,,,
openstack%2Fmurano~master~If7f00b8ffb42773bd79d97f2f3783b5afff41f50,https://review.opendev.org/354208,Refactor merge_dicts helper function tests,Refactor merge_dicts helper function tests  merge_dicts function wasn't covered with all the needed tests and had some issues in code. So it's refactored.  Additionaly used here function merge_lists was refactored.  Change-Id: If7f00b8ffb42773bd79d97f2f3783b5afff41f50,testing,,,,,,
openstack%2Fnova~master~I026ce2e524a3fe61256c552c89a2efb90cdde9b6,https://review.opendev.org/322943,Refactors nova.cmd utils,Refactors nova.cmd utils  Some of functions used in the nova.cmd modules are duplicated or they can be reused in future modules.  Adds docstrings to the refactored functions.  Adds unit tests to the refactored functions.  Change-Id: I026ce2e524a3fe61256c552c89a2efb90cdde9b6 Partially-Implements: blueprint get-policy-settings-cli,testing,,,,,,
openstack%2Fopenstack-ansible~master~Icd5d600f58e59c541bca41a21642c2d270315aaf,https://review.opendev.org/347610,"Refactor ""get_instance_info"" gathering","Refactor ""get_instance_info"" gathering  This change re-factors the ""get_instance_info"" function so that its logging everything to a file instead of stdout. This will help folks with debugging the gate. The function was logging most of important data to stdout which is only trapped by the main playbook run and caused someone to load the entire run output to get useful information about the environment.  In addition to logging everything to a file the custom fact gathering commands we were running have been removed in-favor of simply running the ansible setup module which will provide a lot more data in a format that is far easier to consume.  Change-Id: Icd5d600f58e59c541bca41a21642c2d270315aaf Signed-off-by: Kevin Carter <kevin.carter@rackspace.com>",objective,,,,,,
openstack%2Ffuel-ui~master~Ic36f5c33788efad6f326e61d8db7763c7eefbfd2,https://review.opendev.org/343476,Refactoring networks.js library,Refactoring networks.js library  Changes: Class structure implementation Css selectors splitting and reworking Functions rework due to new class and selectors structure Code cleanup Mistakes fixing  Change-Id: Ic36f5c33788efad6f326e61d8db7763c7eefbfd2,quality,,,,,,
openstack%2Ffuel-ui~master~Ic36f5c33788efad6f326e61d8db7763c7eefbfd2,https://review.opendev.org/343476,Refactoring networks.js library,Refactoring networks.js library  Changes: Class structure implementation Css selectors splitting and reworking Functions rework due to new class and selectors structure Code cleanup Mistakes fixing  Change-Id: Ic36f5c33788efad6f326e61d8db7763c7eefbfd2,refactoring,,,,,,
openstack%2Fstorlets~master~I85953d245422d88e00f7d03c6d02c05ce957a188,https://review.opendev.org/345929,Refactor some process launching functions in daemon factory,Refactor some process launching functions in daemon factory  Change-Id: I85953d245422d88e00f7d03c6d02c05ce957a188,quality,,,,,,
openstack%2Fcinder~master~I5c453dcb5c38301721c3017ba8e782c0fdf850e6,https://review.opendev.org/286598,Refactor sqlalchemy service methods,"Refactor sqlalchemy service methods  This patch refactors the sqlalchemy DB methods related to the service to consolidate the methods into the minimum number that is actually needed, to reduce the number of DB calls per operation, and to reduce the data retrieved from the DB server.  For method consolidation the patch removes `service_get_by_host_and_topic`, `service_get_by_args`, `service_get_all_by_topic`, and `service_get_all_by_binary`, and includes the functionality provided by those methods in `service_get` and `service_get_all` methods.  To reduce the number of DB calls we won't retrieve the service from the DB when deleting or updating a service.  And to reduce the data retrieved from the DB we filter UP nodes in the DB instead of locally.  This patch is related to the efforts to support HA A/A in c-vol nodes. Job distribution patches are dependent on this one.  Specs: https://review.openstack.org/232595/  Implements: blueprint cinder-volume-active-active-support Change-Id: I5c453dcb5c38301721c3017ba8e782c0fdf850e6",quality,,,,,,
x%2Ffuel-plugin-contrail~master~Ief8ad621dba130701d7df4f8f5afbd92ed05ed4b,https://review.opendev.org/344286,Refactor functions which read astute yaml directly,Refactor functions which read astute yaml directly  * Fuctions should not be reading astute yaml directly   because it will break a lot of things * Functions should use data provided through their arguments  Rally-ID: US717768 Change-Id: Ief8ad621dba130701d7df4f8f5afbd92ed05ed4b,quality,,,,,,
x%2Ffuel-plugin-contrail~fuel9-kilo~Ief8ad621dba130701d7df4f8f5afbd92ed05ed4b,https://review.opendev.org/343864,Refactor functions which read astute yaml directly,Refactor function which read astute yaml directly  * Fuctions should not be reading astute yaml directly   because it will break a lot of things * Functions should use data provided through their arguments  Rally-ID: US717768 Change-Id: Ief8ad621dba130701d7df4f8f5afbd92ed05ed4b,quality,,,,,,
openstack%2Fkolla-kubernetes~master~I7e80cb71ddc7cac7e6b424f2c4755054e7b16c65,https://review.opendev.org/339276,Refactored service_definition.py into service_resources.yaml,"Refactored service_definition.py into service_resources.yaml  - Refactor only, not a blue-print nor bug-fix. - Refactored service_definition.py which was a python code file acting   as a configuration file, into server_resources.yaml.  This allows us   to modify configuration, instead of code.  It also allows to add   configuration properties at any level... service, pod, or container if   necessary in the future. - Added caching to Pathfinder._find_dir so that we hit disk a lot less.  - Added objects for Service, Pod, and Container to service_resources.py.   This paves the way in the future to add actions on each of these.  For   example, we today have a functional _bootstrap_service('mariadb').  In   the future, we can do 's = Service('mariadb'); s.bootstrap();   s.verify(); s.kill()'.  We can also add methods to query status   directly from Kubernetes API.  This code reorg allows us to structure   this nicely for future additions.  Change-Id: I7e80cb71ddc7cac7e6b424f2c4755054e7b16c65",quality,,,,,,
airship%2Fairshipctl~master~I563a7556ce1cca795a74cf2c6a26380467a15a5d,https://review.opendev.org/748045,Refactor airshipctl root command,"Refactor airshipctl root command  As part of config refactoring process, we have to prepare root level command to future changes, optimize function signatures and its logic.  Change-Id: I563a7556ce1cca795a74cf2c6a26380467a15a5d Signed-off-by: Ruslan Aliev <raliev@mirantis.com> Relates-To: #327",quality,,,,,,
airship%2Fairshipctl~master~I563a7556ce1cca795a74cf2c6a26380467a15a5d,https://review.opendev.org/748045,Refactor airshipctl root command,"Refactor airshipctl root command  As part of config refactoring process, we have to prepare root level command to future changes, optimize function signatures and its logic.  Change-Id: I563a7556ce1cca795a74cf2c6a26380467a15a5d Signed-off-by: Ruslan Aliev <raliev@mirantis.com> Relates-To: #327",refactoring,,,,,,
openstack%2Ftripleo-ci~master~I2154e07d0433ffbd5d91884c9b1c00adf3ac534d,https://review.opendev.org/335622,Refactor common code for tripleo-ci,Refactor common code for tripleo-ci  This commit refactors out some reusable pieces of tripleo-ci into common_functions.sh and common_vars.bash. This is in preparation for adding ovb and multinode support.  Change-Id: I2154e07d0433ffbd5d91884c9b1c00adf3ac534d,refactoring,,,,,,
openstack%2Ftripleo-ci~master~I2154e07d0433ffbd5d91884c9b1c00adf3ac534d,https://review.opendev.org/335622,Refactor common code for tripleo-ci,Refactor common code for tripleo-ci  This commit refactors out some reusable pieces of tripleo-ci into common_functions.sh and common_vars.bash. This is in preparation for adding ovb and multinode support.  Change-Id: I2154e07d0433ffbd5d91884c9b1c00adf3ac534d,quality,,,,,,
openstack%2Fcloudkitty~stable%2Fmitaka~I504a4c65c891d283aee93bf821ecd479cbdf1bbb,https://review.opendev.org/333953,Refactor ceilometer transformer,Refactor ceilometer transformer  Transitioned to new transformer class to have cleaner and smaller code. Refactored tests to easily handle multiple transformers tests. Modified BaseTransformer to ensure all data is passed to custom functions.  Change-Id: I504a4c65c891d283aee93bf821ecd479cbdf1bbb (cherry picked from commit 9c9d0b6abe1bb0e7352c9092878088f7eebab67e),quality,,,,,,
openstack%2Fcloudkitty~stable%2Fmitaka~I504a4c65c891d283aee93bf821ecd479cbdf1bbb,https://review.opendev.org/333953,Refactor ceilometer transformer,Refactor ceilometer transformer  Transitioned to new transformer class to have cleaner and smaller code. Refactored tests to easily handle multiple transformers tests. Modified BaseTransformer to ensure all data is passed to custom functions.  Change-Id: I504a4c65c891d283aee93bf821ecd479cbdf1bbb (cherry picked from commit 9c9d0b6abe1bb0e7352c9092878088f7eebab67e),testing,,,,,,
openstack%2Fcloudkitty~stable%2Fmitaka~I504a4c65c891d283aee93bf821ecd479cbdf1bbb,https://review.opendev.org/333953,Refactor ceilometer transformer,Refactor ceilometer transformer  Transitioned to new transformer class to have cleaner and smaller code. Refactored tests to easily handle multiple transformers tests. Modified BaseTransformer to ensure all data is passed to custom functions.  Change-Id: I504a4c65c891d283aee93bf821ecd479cbdf1bbb (cherry picked from commit 9c9d0b6abe1bb0e7352c9092878088f7eebab67e),objective,,,,,,
openstack%2Fneutron~master~If03e6a734a2b2df5259e7c7b5d7069dca144a005,https://review.opendev.org/322486,Refactor update_segment_host_mapping_for_agent for agentless topology,Add support to update segment host binding with no agent topology  Trival refactor to make topology without l2 agent(networking ovn) can use the functions to update segment host binding.  Change-Id: If03e6a734a2b2df5259e7c7b5d7069dca144a005,refactoring,,,,,,
openstack%2Ftripleo-ui~master~I730e3dea4f4b9f84d1974c7382f38ed70e57e315,https://review.opendev.org/322121,Refactors service url retrieval,"Refactors service url retrieval  This patch introduces functionality to set service URLs in the app.conf file, either to:  - add service urls which aren't part of the serviceCatalog yet - override service urls exposed through the serviceCatalog  Closes-Bug: 1586364  Change-Id: I730e3dea4f4b9f84d1974c7382f38ed70e57e315",objective,,,,,,
openstack%2Ftripleo-ui~master~I730e3dea4f4b9f84d1974c7382f38ed70e57e315,https://review.opendev.org/322121,Refactors service url retrieval,"Refactors service url retrieval  This patch introduces functionality to set service URLs in the app.conf file, either to:  - add service urls which aren't part of the serviceCatalog yet - override service urls exposed through the serviceCatalog  Closes-Bug: 1586364  Change-Id: I730e3dea4f4b9f84d1974c7382f38ed70e57e315",objective,,,,,,
openstack%2Fpython-openstackclient~master~I4255f2e7d4d23449c95be957ea7b6b60983f2608,https://review.opendev.org/318201,Refactor check_valid_auth_options function,"Refactor check_valid_auth_options function  The function check_valid_auth_options() function was relying on the name for checking the set of required options, but this could cause errors with external auth plugins. If somebody defines an auth plugin plugin named ""footoken"" the check function would check for a ""token"" option, even if the plugin has not defined that option. This change tries to improve this situation, cheking for some options only if they have been defined in the plugin.  Change-Id: I4255f2e7d4d23449c95be957ea7b6b60983f2608",objective,,,,,,
openstack%2Fpython-openstackclient~master~I4255f2e7d4d23449c95be957ea7b6b60983f2608,https://review.opendev.org/318201,Refactor check_valid_auth_options function,"Refactor check_valid_auth_options function  The function check_valid_auth_options() function was relying on the name for checking the set of required options, but this could cause errors with external auth plugins. If somebody defines an auth plugin plugin named ""footoken"" the check function would check for a ""token"" option, even if the plugin has not defined that option. This change tries to improve this situation, cheking for some options only if they have been defined in the plugin.  Change-Id: I4255f2e7d4d23449c95be957ea7b6b60983f2608",objective,,,,,,
zuul%2Fzuul~master~I147a7519a61537024ec6aef6ae4600bb443475e0,https://review.opendev.org/325601,Refactor local_action SCP task into function,"Refactor local_action SCP task into function  This allows use to reused the logic, for the following patchset.  Change-Id: I147a7519a61537024ec6aef6ae4600bb443475e0 Signed-off-by: Paul Belanger <pabelanger@redhat.com>",refactoring,,,,,,
zuul%2Fzuul~master~I147a7519a61537024ec6aef6ae4600bb443475e0,https://review.opendev.org/325601,Refactor local_action SCP task into function,"Refactor local_action SCP task into function  This allows use to reused the logic, for the following patchset.  Change-Id: I147a7519a61537024ec6aef6ae4600bb443475e0 Signed-off-by: Paul Belanger <pabelanger@redhat.com>",quality,,,,,,
openstack%2Ffuel-library~master~If865f39a3d1c22efa6df8035a4e92004fcf2ffb6,https://review.opendev.org/326541,Puppet4 support: refactor vips,Puppet4 support: refactor vips  The generate_vips function is refactored to work in pair with the create_resources functions. It's much better for testing and debugging. Input data of the vurual ip definition is split into many parameters and the generate vips function is tought to support the changed interfacs as well as to work with Puppet4's undef values.  Change-Id: If865f39a3d1c22efa6df8035a4e92004fcf2ffb6 Related-Bug: 1586480,objective,,,,,,
openstack%2Ffuel-library~master~If865f39a3d1c22efa6df8035a4e92004fcf2ffb6,https://review.opendev.org/326541,Puppet4 support: refactor vips,Puppet4 support: refactor vips  The generate_vips function is refactored to work in pair with the create_resources functions. It's much better for testing and debugging. Input data of the vurual ip definition is split into many parameters and the generate vips function is tought to support the changed interfacs as well as to work with Puppet4's undef values.  Change-Id: If865f39a3d1c22efa6df8035a4e92004fcf2ffb6 Related-Bug: 1586480,testing,,,,,,
openstack%2Ffuel-library~master~If865f39a3d1c22efa6df8035a4e92004fcf2ffb6,https://review.opendev.org/326541,Puppet4 support: refactor vips,Puppet4 support: refactor vips  The generate_vips function is refactored to work in pair with the create_resources functions. It's much better for testing and debugging. Input data of the vurual ip definition is split into many parameters and the generate vips function is tought to support the changed interfacs as well as to work with Puppet4's undef values.  Change-Id: If865f39a3d1c22efa6df8035a4e92004fcf2ffb6 Related-Bug: 1586480,objective,,,,,,
openstack%2Fdiskimage-builder~master~If932a557dca9aea4864154ad6c4f286373d6dd7c,https://review.opendev.org/324792,Refactor: remove unused functions,"Refactor: remove unused functions  There were a couple of functions which were unused: ensure_nbd, map_nbd, unmount_qcow_image, mount_qcow_image, ensure_sudo Because some of them use 'trap ... EXIT' this hinders introducing a separate exit phase - therefore they are removed.  (It would also be impossible to use them in the current setup, because they overwrite the 'trap ... EXIT' of the disk-image-creates 'main'.)  Change-Id: If932a557dca9aea4864154ad6c4f286373d6dd7c Signed-off-by: Andreas Florath <andreas@florath.net>",quality,,,,,,
openstack%2Fdiskimage-builder~master~If932a557dca9aea4864154ad6c4f286373d6dd7c,https://review.opendev.org/324792,Refactor: remove unused functions,"Refactor: remove unused functions  There were a couple of functions which were unused: ensure_nbd, map_nbd, unmount_qcow_image, mount_qcow_image, ensure_sudo Because some of them use 'trap ... EXIT' this hinders introducing a separate exit phase - therefore they are removed.  (It would also be impossible to use them in the current setup, because they overwrite the 'trap ... EXIT' of the disk-image-creates 'main'.)  Change-Id: If932a557dca9aea4864154ad6c4f286373d6dd7c Signed-off-by: Andreas Florath <andreas@florath.net>",objective,,,,,,
openstack%2Fneutron~master~I6c95cce56f36dd0c97f727c337ef6af04bc13a40,https://review.opendev.org/305997,Refactor test_ipam functional testing module,Refactor test_ipam functional testing module  Use existing testing ifrastructure to better integrate with the rest of Neutron tests. This change allows test_ipam module to work with future db engine facade changes.  Change-Id: I6c95cce56f36dd0c97f727c337ef6af04bc13a40 Related-Bug: 1520719,quality,,,,,,
openstack%2Fneutron~master~I6c95cce56f36dd0c97f727c337ef6af04bc13a40,https://review.opendev.org/305997,Refactor test_ipam functional testing module,Refactor test_ipam functional testing module  Use existing testing ifrastructure to better integrate with the rest of Neutron tests. This change allows test_ipam module to work with future db engine facade changes.  Change-Id: I6c95cce56f36dd0c97f727c337ef6af04bc13a40 Related-Bug: 1520719,testing,,,,,,
openstack%2Fneutron~master~I6c95cce56f36dd0c97f727c337ef6af04bc13a40,https://review.opendev.org/305997,Refactor test_ipam functional testing module,Refactor test_ipam functional testing module  Use existing testing ifrastructure to better integrate with the rest of Neutron tests. This change allows test_ipam module to work with future db engine facade changes.  Change-Id: I6c95cce56f36dd0c97f727c337ef6af04bc13a40 Related-Bug: 1520719,objective,,,,,,
x%2Fkingbird~master~I9dc0c1dffcc6d2de32ae35e13b41ab0946449e50,https://review.opendev.org/320319,Tempest Refactoring (Part 1),"Tempest Refactoring (Part 1)  There were UTs for APIs under directory ""tests/functional"", have moved it under ""tests/unit"" directory. Modified the code accordingly.  In future(next commit), the tempest testcases will also be under kingbird/tests.  Change-Id: I9dc0c1dffcc6d2de32ae35e13b41ab0946449e50",refactoring,,,,,,
x%2Fdistil~master~I0235c78c7dc520e4bf08405ebf8e06875868daab,https://review.opendev.org/317396,Refactor collect_usage function,Refactor collect_usage function  Change-Id: I0235c78c7dc520e4bf08405ebf8e06875868daab,refactoring,,,,,,
openstack%2Fopenstack-ansible~master~I8ee11480ca6e46748fe19fcc19b92aded8a39c39,https://review.opendev.org/312665,Test and refactor argument parsing,"Test and refactor argument parsing  This patch does not change functionality of the argument parsing function, but does make it easier to test. While argparse has its own tests within the standard library and the `args` function could theoretically be excluded, including these simple tests provide the coverage we need without introducing the possibility of skipping over code that might be added later.  Change-Id: I8ee11480ca6e46748fe19fcc19b92aded8a39c39",testing,,,,,,
openstack%2Fopenstack-ansible~master~I8ee11480ca6e46748fe19fcc19b92aded8a39c39,https://review.opendev.org/312665,Test and refactor argument parsing,"Test and refactor argument parsing  This patch does not change functionality of the argument parsing function, but does make it easier to test. While argparse has its own tests within the standard library and the `args` function could theoretically be excluded, including these simple tests provide the coverage we need without introducing the possibility of skipping over code that might be added later.  Change-Id: I8ee11480ca6e46748fe19fcc19b92aded8a39c39",objective,,,,,,
openstack%2Fswift~master~Ic96a92e938589a2f6add35a40741fd062f1c29eb,https://review.opendev.org/156923,Refactor server side copy as middleware,"Refactor server side copy as middleware  This is the first draft and far from complete. Failing unit tests need some major changes. Posted to get some early comments. Currently, this change is dependant on Thiago's versioned writes middleware change.  Rewrite server side copy and 'object post as copy' feature as middleware to simplify the PUT method in the object controller code. COPY is no longer a verb implemented as public method in Proxy application.  With this change, there should be no change in funcionality or existing behavior. This is asserted with (almost) no changes required to existing functional tests.  Some notes (for operators): * Middleware required to be auto-inserted after versioned_writes, slo and dlo. * Turning off server side copy is not configurable. * object_post_as_copy is no longer a configurable option of proxy server   but of this middleware.  TODO: * Fix/Write unit tests * Documentation * Figure out why testCopyAccount404s functest fails  Change-Id: Ic96a92e938589a2f6add35a40741fd062f1c29eb Signed-off-by: Prashanth Pai <ppai@redhat.com>",testing,,,,,,
openstack%2Fswift~master~Ic96a92e938589a2f6add35a40741fd062f1c29eb,https://review.opendev.org/156923,Refactor server side copy as middleware,"Refactor server side copy as middleware  This is the first draft and far from complete. Failing unit tests need some major changes. Posted to get some early comments. Currently, this change is dependant on Thiago's versioned writes middleware change.  Rewrite server side copy and 'object post as copy' feature as middleware to simplify the PUT method in the object controller code. COPY is no longer a verb implemented as public method in Proxy application.  With this change, there should be no change in funcionality or existing behavior. This is asserted with (almost) no changes required to existing functional tests.  Some notes (for operators): * Middleware required to be auto-inserted after versioned_writes, slo and dlo. * Turning off server side copy is not configurable. * object_post_as_copy is no longer a configurable option of proxy server   but of this middleware.  TODO: * Fix/Write unit tests * Documentation * Figure out why testCopyAccount404s functest fails  Change-Id: Ic96a92e938589a2f6add35a40741fd062f1c29eb Signed-off-by: Prashanth Pai <ppai@redhat.com>",quality,,,,,,
openstack%2Fswift~master~Ic96a92e938589a2f6add35a40741fd062f1c29eb,https://review.opendev.org/156923,Refactor server side copy as middleware,"Refactor server side copy as middleware  This is the first draft and far from complete. Failing unit tests need some major changes. Posted to get some early comments. Currently, this change is dependant on Thiago's versioned writes middleware change.  Rewrite server side copy and 'object post as copy' feature as middleware to simplify the PUT method in the object controller code. COPY is no longer a verb implemented as public method in Proxy application.  With this change, there should be no change in funcionality or existing behavior. This is asserted with (almost) no changes required to existing functional tests.  Some notes (for operators): * Middleware required to be auto-inserted after versioned_writes, slo and dlo. * Turning off server side copy is not configurable. * object_post_as_copy is no longer a configurable option of proxy server   but of this middleware.  TODO: * Fix/Write unit tests * Documentation * Figure out why testCopyAccount404s functest fails  Change-Id: Ic96a92e938589a2f6add35a40741fd062f1c29eb Signed-off-by: Prashanth Pai <ppai@redhat.com>",objective,,,,,,
openstack%2Fswift~master~Ic96a92e938589a2f6add35a40741fd062f1c29eb,https://review.opendev.org/156923,Refactor server side copy as middleware,"Refactor server side copy as middleware  This is the first draft and far from complete. Failing unit tests need some major changes. Posted to get some early comments. Currently, this change is dependant on Thiago's versioned writes middleware change.  Rewrite server side copy and 'object post as copy' feature as middleware to simplify the PUT method in the object controller code. COPY is no longer a verb implemented as public method in Proxy application.  With this change, there should be no change in funcionality or existing behavior. This is asserted with (almost) no changes required to existing functional tests.  Some notes (for operators): * Middleware required to be auto-inserted after versioned_writes, slo and dlo. * Turning off server side copy is not configurable. * object_post_as_copy is no longer a configurable option of proxy server   but of this middleware.  TODO: * Fix/Write unit tests * Documentation * Figure out why testCopyAccount404s functest fails  Change-Id: Ic96a92e938589a2f6add35a40741fd062f1c29eb Signed-off-by: Prashanth Pai <ppai@redhat.com>",quality,,,,,,
openstack%2Fstorlets~master~Id001ce96eab52d493ea92817d4ad46d43a266c73,https://review.opendev.org/312392,Refactoring tests/setup_functional_tests.sh,Refactoring tests/setup_functional_tests.sh  Moving all storlets installation to install/storlet/install_storlets.sh  Change-Id: Id001ce96eab52d493ea92817d4ad46d43a266c73,refactoring,,,,,,
openstack%2Ftempest~master~I6b1029d2004fe0208519b506c2751390a6c49569,https://review.opendev.org/304314,Refactor extract code to function in auth.py,Refactor extract code to function in auth.py  Code for applying filters to the urls in the KeystoneV*AuthProvider classes was copy-pasted. Extracting the copied code to a function so that fixes can be made in one place.  Change-Id: I6b1029d2004fe0208519b506c2751390a6c49569,refactoring,,,,,,
openstack%2Ftempest~master~I6b1029d2004fe0208519b506c2751390a6c49569,https://review.opendev.org/304314,Refactor extract code to function in auth.py,Refactor extract code to function in auth.py  Code for applying filters to the urls in the KeystoneV*AuthProvider classes was copy-pasted. Extracting the copied code to a function so that fixes can be made in one place.  Change-Id: I6b1029d2004fe0208519b506c2751390a6c49569,objective,,,,,,
openstack%2Fhorizon~master~Ia3942e4f639393ccf2f8659279492d605972b971,https://review.opendev.org/217020,Refactor DataTable filtering functions into mixin,"Refactor DataTable filtering functions into mixin  Move DataTable filtering related functions into a mixin class so that other classes can use filtering in their tables. Namely, in this patch, the TabbedTableView class.  Change-Id: Ia3942e4f639393ccf2f8659279492d605972b971",refactoring,,,,,,
openstack%2Fhorizon~master~Ia3942e4f639393ccf2f8659279492d605972b971,https://review.opendev.org/217020,Refactor DataTable filtering functions into mixin,"Refactor DataTable filtering functions into mixin  Move DataTable filtering related functions into a mixin class so that other classes can use filtering in their tables. Namely, in this patch, the TabbedTableView class.  Change-Id: Ia3942e4f639393ccf2f8659279492d605972b971",objective,,,,,,
openstack%2Fhorizon~master~I34edd7261022f7a0a441e0716be8b84f90e8cde9,https://review.opendev.org/190077,Refactor of BaseTestCase,"Refactor of BaseTestCase  To run integratin tests, there needs to be set environment variable INTEGRATION_TESTS. In past, positive behaviour was enclosed in one big 'if' branch. I've moved negative behaviour to beginning and len rest of method as ordinary function body.  Closes-Bug: 1463729 Change-Id: I34edd7261022f7a0a441e0716be8b84f90e8cde9",objective,,,,,,
openstack%2Fhorizon~master~I34edd7261022f7a0a441e0716be8b84f90e8cde9,https://review.opendev.org/190077,Refactor of BaseTestCase,"Refactor of BaseTestCase  To run integratin tests, there needs to be set environment variable INTEGRATION_TESTS. In past, positive behaviour was enclosed in one big 'if' branch. I've moved negative behaviour to beginning and len rest of method as ordinary function body.  Closes-Bug: 1463729 Change-Id: I34edd7261022f7a0a441e0716be8b84f90e8cde9",testing,,,,,,
openstack%2Fhorizon~master~I34edd7261022f7a0a441e0716be8b84f90e8cde9,https://review.opendev.org/190077,Refactor of BaseTestCase,"Refactor of BaseTestCase  To run integratin tests, there needs to be set environment variable INTEGRATION_TESTS. In past, positive behaviour was enclosed in one big 'if' branch. I've moved negative behaviour to beginning and len rest of method as ordinary function body.  Closes-Bug: 1463729 Change-Id: I34edd7261022f7a0a441e0716be8b84f90e8cde9",objective,,,,,,
openstack%2Frally~master~I85c3cccda39edf8601958bda90e0e98ef9b0d3c6,https://review.opendev.org/294119,[Reports] Refactor processing.plot.plot,[Reports] Refactor processing.plot.plot  Move part of code into separate function because it will be re-used in upcoming function processing.plot.trends (will be introduced in further patches)  Change-Id: I85c3cccda39edf8601958bda90e0e98ef9b0d3c6,refactoring,,,,,,
openstack%2Frally~master~I85c3cccda39edf8601958bda90e0e98ef9b0d3c6,https://review.opendev.org/294119,[Reports] Refactor processing.plot.plot,[Reports] Refactor processing.plot.plot  Move part of code into separate function because it will be re-used in upcoming function processing.plot.trends (will be introduced in further patches)  Change-Id: I85c3cccda39edf8601958bda90e0e98ef9b0d3c6,quality,,,,,,
x%2Ffuel-plugin-detach-keystone~master~Ic09939dbf077e99e22d9f937d8a6f3f5fe77db67,https://review.opendev.org/296417,Refactor plugin to depend on controller galera and rabbitmq,"Refactor plugin to depend on controller galera and rabbitmq  Now with advanced task deployment features, we can deploy detached-keystone during the middle of controller deployment and no longer require separated database plugin.  As a consequence this fixes ceilometer deployment as well, which requires RabbitMQ to be functioning.  Change-Id: Ic09939dbf077e99e22d9f937d8a6f3f5fe77db67 Closes-Bug: #1553239",integration,,,,,,
x%2Ffuel-plugin-detach-keystone~master~Ic09939dbf077e99e22d9f937d8a6f3f5fe77db67,https://review.opendev.org/296417,Refactor plugin to depend on controller galera and rabbitmq,"Refactor plugin to depend on controller galera and rabbitmq  Now with advanced task deployment features, we can deploy detached-keystone during the middle of controller deployment and no longer require separated database plugin.  As a consequence this fixes ceilometer deployment as well, which requires RabbitMQ to be functioning.  Change-Id: Ic09939dbf077e99e22d9f937d8a6f3f5fe77db67 Closes-Bug: #1553239",objective,,,,,,
openstack%2Ffuel-library~master~I95139c36486a42306f61e7b08cc0cafcd6bffca1,https://review.opendev.org/295883,Refactor is_pkg_installed function,Refactor is_pkg_installed function  * Should return false instead of errors * Correct package status processing  Change-Id: I95139c36486a42306f61e7b08cc0cafcd6bffca1 Closes-Bug: 1542501,quality,,,,,,
openstack%2Ffuel-library~master~I95139c36486a42306f61e7b08cc0cafcd6bffca1,https://review.opendev.org/295883,Refactor is_pkg_installed function,Refactor is_pkg_installed function  * Should return false instead of errors * Correct package status processing  Change-Id: I95139c36486a42306f61e7b08cc0cafcd6bffca1 Closes-Bug: 1542501,refactoring,,,,,,
openstack%2Ffuel-qa~master~Ic576b627728df222f9f2518e3bc6f378c8d1bce3,https://review.opendev.org/284409,Refactoring functions in checkers.py(part 3),Refactoring functions in checkers.py(part 3)  Following functions were changed:   * external_ntp_check   * check_available_mode   * check_auto_mode   * is_ntpd_active   * wait_phrase_in_log   * get_package_versions_from_node  Folowing functions were moved to utils.py:   * wait_phrase_in_log   * get_package_versions_from_node  Related tests are also modified. Implements: blueprint sshmanager-integration  Change-Id: Ic576b627728df222f9f2518e3bc6f378c8d1bce3,refactoring,,,,,,
openstack%2Ffuel-qa~master~Ic576b627728df222f9f2518e3bc6f378c8d1bce3,https://review.opendev.org/284409,Refactoring functions in checkers.py(part 3),Refactoring functions in checkers.py(part 3)  Following functions were changed:   * external_ntp_check   * check_available_mode   * check_auto_mode   * is_ntpd_active   * wait_phrase_in_log   * get_package_versions_from_node  Folowing functions were moved to utils.py:   * wait_phrase_in_log   * get_package_versions_from_node  Related tests are also modified. Implements: blueprint sshmanager-integration  Change-Id: Ic576b627728df222f9f2518e3bc6f378c8d1bce3,objective,,,,,,
openstack%2Ffuel-qa~master~I2c2bbe0ad0cabb815ee67c5ad89fe2142d2d7383,https://review.opendev.org/284302,Refactoring functions in checkers.py(part 2),Refactoring functions in chekers.py(part 2)  Following functions was changed:   * get_ceph_partitions   * get_mongo_partitions  Folowing functions was moved to utils.py:   * get_mongo_partitions   * get_ceph_partitions Related tests are also modified. Implements: blueprint sshmanager-integration  Change-Id: I2c2bbe0ad0cabb815ee67c5ad89fe2142d2d7383,refactoring,,,,,,
openstack%2Ffuel-qa~master~I2c2bbe0ad0cabb815ee67c5ad89fe2142d2d7383,https://review.opendev.org/284302,Refactoring functions in checkers.py(part 2),Refactoring functions in chekers.py(part 2)  Following functions was changed:   * get_ceph_partitions   * get_mongo_partitions  Folowing functions was moved to utils.py:   * get_mongo_partitions   * get_ceph_partitions Related tests are also modified. Implements: blueprint sshmanager-integration  Change-Id: I2c2bbe0ad0cabb815ee67c5ad89fe2142d2d7383,objective,,,,,,
openstack%2Fsahara~master~I09c36c4716c4f5ac382a9687a4a45857e912d2ae,https://review.opendev.org/255825,CDH plugin config helper refactoring,CDH plugin config helper refactoring  This commit encapulate CDH plugin config_helper into class for a better extensibility. Changes in config_helper: * Create sahara/plugins/cdh/config_helper.py and move general parts to   ConfigHelper. * Provide an instance of ConfigHelper to minimize changes outside. * Remove function _prepare_value and use lambda instead. * Add method _load_and_init_configs to load files and convert dict to   Config object * Move some long string into file  Changes outside config_helper: * change mudules depending on config helper to import config_helper.config  Change-Id: I09c36c4716c4f5ac382a9687a4a45857e912d2ae,quality,,,,,,
openstack%2Fsahara~master~I09c36c4716c4f5ac382a9687a4a45857e912d2ae,https://review.opendev.org/255825,CDH plugin config helper refactoring,CDH plugin config helper refactoring  This commit encapulate CDH plugin config_helper into class for a better extensibility. Changes in config_helper: * Create sahara/plugins/cdh/config_helper.py and move general parts to   ConfigHelper. * Provide an instance of ConfigHelper to minimize changes outside. * Remove function _prepare_value and use lambda instead. * Add method _load_and_init_configs to load files and convert dict to   Config object * Move some long string into file  Changes outside config_helper: * change mudules depending on config helper to import config_helper.config  Change-Id: I09c36c4716c4f5ac382a9687a4a45857e912d2ae,objective,,,,,,
openstack%2Fsahara~master~I09c36c4716c4f5ac382a9687a4a45857e912d2ae,https://review.opendev.org/255825,CDH plugin config helper refactoring,CDH plugin config helper refactoring  This commit encapulate CDH plugin config_helper into class for a better extensibility. Changes in config_helper: * Create sahara/plugins/cdh/config_helper.py and move general parts to   ConfigHelper. * Provide an instance of ConfigHelper to minimize changes outside. * Remove function _prepare_value and use lambda instead. * Add method _load_and_init_configs to load files and convert dict to   Config object * Move some long string into file  Changes outside config_helper: * change mudules depending on config helper to import config_helper.config  Change-Id: I09c36c4716c4f5ac382a9687a4a45857e912d2ae,objective,,,,,,
openstack%2Fmurano~master~I3c925d1ba1a4ac0864987377a3e90c6f166823a7,https://review.opendev.org/283653,Refactoring of smart-types defined in DSL,"Refactoring of smart-types defined in DSL  * MuranoType and MuranoObjectParameterType smart types   were merged into a single smart type because their functionality   overlap to a large degree. New smart type is called MuranoObjectParameter * Other smart types were renamed to have the same name pattern:    ThisParameterType -> ThisParameter, InterfacesParameterType -> InterfacesParameter * For MuranoObjectInterface instead of saying obj.data().propertyName the syntax now is    obj.properties.propertyName  Change-Id: I3c925d1ba1a4ac0864987377a3e90c6f166823a7",objective,,,,,,
openstack%2Fmurano~master~I3c925d1ba1a4ac0864987377a3e90c6f166823a7,https://review.opendev.org/283653,Refactoring of smart-types defined in DSL,"Refactoring of smart-types defined in DSL  * MuranoType and MuranoObjectParameterType smart types   were merged into a single smart type because their functionality   overlap to a large degree. New smart type is called MuranoObjectParameter * Other smart types were renamed to have the same name pattern:    ThisParameterType -> ThisParameter, InterfacesParameterType -> InterfacesParameter * For MuranoObjectInterface instead of saying obj.data().propertyName the syntax now is    obj.properties.propertyName  Change-Id: I3c925d1ba1a4ac0864987377a3e90c6f166823a7",objective,,,,,,
openstack%2Ffuel-qa~master~Ifdc2a01d100dbf3b809f6619d9877a8c98db3258,https://review.opendev.org/284166,Refactoring functions in checkers.py(part 1),Refactoring functions in chekers.py(part 1)  Folowing functions was chenged:   * check_update_network_data_over_cli   * check_get_network_data_over_cli   * check_offload   * check_client_smoke   * check_hiera_hosts   * check_log_lines_order   * check_file_exists  Related tests are also modified. Some typos are fixed. Implements: blueprint sshmanager-integration  Change-Id: Ifdc2a01d100dbf3b809f6619d9877a8c98db3258,refactoring,,,,,,
openstack%2Ffuel-qa~master~Ifdc2a01d100dbf3b809f6619d9877a8c98db3258,https://review.opendev.org/284166,Refactoring functions in checkers.py(part 1),Refactoring functions in chekers.py(part 1)  Folowing functions was chenged:   * check_update_network_data_over_cli   * check_get_network_data_over_cli   * check_offload   * check_client_smoke   * check_hiera_hosts   * check_log_lines_order   * check_file_exists  Related tests are also modified. Some typos are fixed. Implements: blueprint sshmanager-integration  Change-Id: Ifdc2a01d100dbf3b809f6619d9877a8c98db3258,testing,,,,,,
openstack%2Ffuel-menu~master~Iebe7d765e648c25d49f322ece0975de527248a94,https://review.opendev.org/282682,Timeout module refactoring,"Timeout module refactoring  After a series of changes run_with_timeout became very strange. In case of timeout it doesn't raise TimeoutError, defined in this module, but instead returns default argument. Also it's impossible to distinguish if timeout reached or user pressed ctrl-C, because thread.interrupt_main raises KeyboardInterrupt in the main thread.  So let's rewrite this run_with_timeout function, so it will raise either TimeoutError or KeyboardInterrupt. In this case default argument is not needed. Since it will always raise an exception in case of error.  Also fix usage of this function and add unit tests mostly from I5176b9adee1538c2a7d476a95e551027c8ccb444 change.  Change-Id: Iebe7d765e648c25d49f322ece0975de527248a94",objective,,,,,,
openstack%2Ffuel-menu~master~Iebe7d765e648c25d49f322ece0975de527248a94,https://review.opendev.org/282682,Timeout module refactoring,"Timeout module refactoring  After a series of changes run_with_timeout became very strange. In case of timeout it doesn't raise TimeoutError, defined in this module, but instead returns default argument. Also it's impossible to distinguish if timeout reached or user pressed ctrl-C, because thread.interrupt_main raises KeyboardInterrupt in the main thread.  So let's rewrite this run_with_timeout function, so it will raise either TimeoutError or KeyboardInterrupt. In this case default argument is not needed. Since it will always raise an exception in case of error.  Also fix usage of this function and add unit tests mostly from I5176b9adee1538c2a7d476a95e551027c8ccb444 change.  Change-Id: Iebe7d765e648c25d49f322ece0975de527248a94",testing,,,,,,
openstack%2Ffuel-menu~master~Iebe7d765e648c25d49f322ece0975de527248a94,https://review.opendev.org/282682,Timeout module refactoring,"Timeout module refactoring  After a series of changes run_with_timeout became very strange. In case of timeout it doesn't raise TimeoutError, defined in this module, but instead returns default argument. Also it's impossible to distinguish if timeout reached or user pressed ctrl-C, because thread.interrupt_main raises KeyboardInterrupt in the main thread.  So let's rewrite this run_with_timeout function, so it will raise either TimeoutError or KeyboardInterrupt. In this case default argument is not needed. Since it will always raise an exception in case of error.  Also fix usage of this function and add unit tests mostly from I5176b9adee1538c2a7d476a95e551027c8ccb444 change.  Change-Id: Iebe7d765e648c25d49f322ece0975de527248a94",objective,,,,,,
openstack%2Fsenlin~master~I98deb8a6136698dbb46630b75e7c21dd5440c4d9,https://review.opendev.org/284011,Refactor scaling policy implementation,"Refactor scaling policy implementation  This patch reworks the scaling policy v1.0 to use common utility functions for parameter validation. Another change made is about whether we count ERROR nodes when doing scaling. Previously, we exclude them when calculating current size. However, that might be wrong. We should always do things consistently.  Change-Id: I98deb8a6136698dbb46630b75e7c21dd5440c4d9",objective,,,,,,
openstack%2Fsenlin~master~I98deb8a6136698dbb46630b75e7c21dd5440c4d9,https://review.opendev.org/284011,Refactor scaling policy implementation,"Refactor scaling policy implementation  This patch reworks the scaling policy v1.0 to use common utility functions for parameter validation. Another change made is about whether we count ERROR nodes when doing scaling. Previously, we exclude them when calculating current size. However, that might be wrong. We should always do things consistently.  Change-Id: I98deb8a6136698dbb46630b75e7c21dd5440c4d9",objective,,,,,,
openstack%2Fanchor~master~I99a28f4bcb08f010f397faf49e23276672977bc1,https://review.opendev.org/277764,Refactor the signing backends,"Refactor the signing backends  Prepare for new signing backend implementations which reuse the existing functionality. This abstracts most of the current signing function, so that the signature generation itself can be replaced.  Change-Id: I99a28f4bcb08f010f397faf49e23276672977bc1",quality,,,,,,
openstack%2Fanchor~master~I99a28f4bcb08f010f397faf49e23276672977bc1,https://review.opendev.org/277764,Refactor the signing backends,"Refactor the signing backends  Prepare for new signing backend implementations which reuse the existing functionality. This abstracts most of the current signing function, so that the signature generation itself can be replaced.  Change-Id: I99a28f4bcb08f010f397faf49e23276672977bc1",objective,,,,,,
openstack%2Fanchor~master~I99a28f4bcb08f010f397faf49e23276672977bc1,https://review.opendev.org/277764,Refactor the signing backends,"Refactor the signing backends  Prepare for new signing backend implementations which reuse the existing functionality. This abstracts most of the current signing function, so that the signature generation itself can be replaced.  Change-Id: I99a28f4bcb08f010f397faf49e23276672977bc1",objective,,,,,,
openstack%2Fpython-openstackclient~master~Ief6ab17775c6d7e3bef58d9fa025d9dd520b7370,https://review.opendev.org/276800,Refactor security group functional tests,"Refactor security group functional tests  Moved the functional tests for ""os security group"" and ""os security group rule"" from the compute to the network directory to align with the refactoring to the commands.  Change-Id: Ief6ab17775c6d7e3bef58d9fa025d9dd520b7370 Partial-Bug: #1519511 Partial-Bug: #1519512 Related-to: blueprint neutron-client",refactoring,,,,,,
openstack%2Fpython-openstackclient~master~Ief6ab17775c6d7e3bef58d9fa025d9dd520b7370,https://review.opendev.org/276800,Refactor security group functional tests,"Refactor security group functional tests  Moved the functional tests for ""os security group"" and ""os security group rule"" from the compute to the network directory to align with the refactoring to the commands.  Change-Id: Ief6ab17775c6d7e3bef58d9fa025d9dd520b7370 Partial-Bug: #1519511 Partial-Bug: #1519512 Related-to: blueprint neutron-client",objective,,,,,,
openstack%2Foslo.config~master~Ie6616e76bf0c23a6303cdb1e441754ccba37a9c3,https://review.opendev.org/278603,refactor generator._list_opts for further enhancement,"refactor generator._list_opts for further enhancement  The _list_opts() function combines the behavior for loading the options and the behavior for cleaning and filtering them. This patch breaks it up a bit and updates the relevant tests, to prepare for the next patch which will add some new behavior to _list_opts().  Change-Id: Ie6616e76bf0c23a6303cdb1e441754ccba37a9c3 Signed-off-by: Doug Hellmann <doug@doughellmann.com>",objective,,,,,,
openstack%2Foslo.config~master~Ie6616e76bf0c23a6303cdb1e441754ccba37a9c3,https://review.opendev.org/278603,refactor generator._list_opts for further enhancement,"refactor generator._list_opts for further enhancement  The _list_opts() function combines the behavior for loading the options and the behavior for cleaning and filtering them. This patch breaks it up a bit and updates the relevant tests, to prepare for the next patch which will add some new behavior to _list_opts().  Change-Id: Ie6616e76bf0c23a6303cdb1e441754ccba37a9c3 Signed-off-by: Doug Hellmann <doug@doughellmann.com>",testing,,,,,,
openstack%2Foslo.config~master~Ie6616e76bf0c23a6303cdb1e441754ccba37a9c3,https://review.opendev.org/278603,refactor generator._list_opts for further enhancement,"refactor generator._list_opts for further enhancement  The _list_opts() function combines the behavior for loading the options and the behavior for cleaning and filtering them. This patch breaks it up a bit and updates the relevant tests, to prepare for the next patch which will add some new behavior to _list_opts().  Change-Id: Ie6616e76bf0c23a6303cdb1e441754ccba37a9c3 Signed-off-by: Doug Hellmann <doug@doughellmann.com>",objective,,,,,,
openstack%2Fneutron~master~Id76cd88208dfd273bccadc15a1c6febbcc4fc030,https://review.opendev.org/241035,Pecan: Controller and test refactor,Pecan: controller refactor and extended functional tests  This patch refactors the pecan controllers by streamlining the code and splitting them in separate python modules. It als improves functional testing for most of these controllers.  Please note that functional tests for Pecan hooks are not part of these patch.  Change-Id: Id76cd88208dfd273bccadc15a1c6febbcc4fc030,refactoring,,,,,,
openstack%2Fneutron~master~Id76cd88208dfd273bccadc15a1c6febbcc4fc030,https://review.opendev.org/241035,Pecan: Controller and test refactor,Pecan: controller refactor and extended functional tests  This patch refactors the pecan controllers by streamlining the code and splitting them in separate python modules. It als improves functional testing for most of these controllers.  Please note that functional tests for Pecan hooks are not part of these patch.  Change-Id: Id76cd88208dfd273bccadc15a1c6febbcc4fc030,testing,,,,,,
openstack%2Fos-win~master~Ie037cf1712a28e85e5eca445eea3df883c6b6831,https://review.opendev.org/249291,iSCSI initiator refactoring using iscsidsc.dll,"[WIP] iSCSI initiator refactoring using iscsidsc.dll  This patch adds a new iscsi initiator utils class, leveraging iscsidsc.dll functions.  The advantages are:     - same error output as iscsicli, without the proccess       spawn overhead     - improved overall performance, having finer control over       the iSCSI initiator and avoiding unnecessary operations     - fixed bugs related to LUN discovery and persistent targets  Change-Id: Ie037cf1712a28e85e5eca445eea3df883c6b6831",quality,,,,,,
openstack%2Fos-win~master~Ie037cf1712a28e85e5eca445eea3df883c6b6831,https://review.opendev.org/249291,iSCSI initiator refactoring using iscsidsc.dll,"[WIP] iSCSI initiator refactoring using iscsidsc.dll  This patch adds a new iscsi initiator utils class, leveraging iscsidsc.dll functions.  The advantages are:     - same error output as iscsicli, without the proccess       spawn overhead     - improved overall performance, having finer control over       the iSCSI initiator and avoiding unnecessary operations     - fixed bugs related to LUN discovery and persistent targets  Change-Id: Ie037cf1712a28e85e5eca445eea3df883c6b6831",objective,,,,,,
openstack%2Fos-win~master~Ie037cf1712a28e85e5eca445eea3df883c6b6831,https://review.opendev.org/249291,iSCSI initiator refactoring using iscsidsc.dll,"[WIP] iSCSI initiator refactoring using iscsidsc.dll  This patch adds a new iscsi initiator utils class, leveraging iscsidsc.dll functions.  The advantages are:     - same error output as iscsicli, without the proccess       spawn overhead     - improved overall performance, having finer control over       the iSCSI initiator and avoiding unnecessary operations     - fixed bugs related to LUN discovery and persistent targets  Change-Id: Ie037cf1712a28e85e5eca445eea3df883c6b6831",objective,,,,,,
openstack%2Fheat~master~I15542bef8c9e6ed6b80cd4656d2fd42e8406655b,https://review.opendev.org/259801,Refactor resource specific replace logic,"Refactor resource specific replace logic  Currently we override _needs_update for some resources, where replacement is required either based on tmpl_diff or prop_diff. This patch refactors and adds specific functions (needs_replace, needs_replace_with_prop_diff, needs_replace_with_tmpl_diff). These can now be overidden as required.  Change-Id: I15542bef8c9e6ed6b80cd4656d2fd42e8406655b Blueprint: stack-update-restrict",objective,,,,,,
openstack%2Fheat~master~I15542bef8c9e6ed6b80cd4656d2fd42e8406655b,https://review.opendev.org/259801,Refactor resource specific replace logic,"Refactor resource specific replace logic  Currently we override _needs_update for some resources, where replacement is required either based on tmpl_diff or prop_diff. This patch refactors and adds specific functions (needs_replace, needs_replace_with_prop_diff, needs_replace_with_tmpl_diff). These can now be overidden as required.  Change-Id: I15542bef8c9e6ed6b80cd4656d2fd42e8406655b Blueprint: stack-update-restrict",objective,,,,,,
openstack%2Ffuel-library~stable%2F8.0~I9548ae440111fb0c2356ccb897318d30a8e264ff,https://review.opendev.org/274891,Refactor code of LB backends waiting pieces,Refactor code of LB backends waiting pieces  This commit introduces a couple of classes and a function to allow a user to specify for which load balancing checkers to wait.  Related-bug: #1533279  Conflicts:         deployment/puppet/osnailyfacter/modular/ceph/radosgw.pp         deployment/puppet/osnailyfacter/modular/openstack-controller/openstack-controller.pp         deployment/puppet/osnailyfacter/modular/sahara/sahara.pp         tests/noop/spec/hosts/ceph/radosgw_spec.rb  Change-Id: I9548ae440111fb0c2356ccb897318d30a8e264ff,objective,,,,,,
openstack%2Ffuel-library~master~I9548ae440111fb0c2356ccb897318d30a8e264ff,https://review.opendev.org/270929,Refactor code of LB backends waiting pieces,Refactor code of managing waiting of LB backends  This commit introduces a couple of classes and a function to allow a user to specify for which load balancing checkers to wait.  Change-Id: I9548ae440111fb0c2356ccb897318d30a8e264ff Related-bug: #1533279,objective,,,,,,
openstack%2Fironic-python-agent~master~I304468d57b10d677f2a9d58aec42a1bf414c6cba,https://review.opendev.org/742110,More refactoring of the image module,More refactoring of the image module  Introducing new function _umount_all_partitions to reduce the size of _install_grub2  Change-Id: I304468d57b10d677f2a9d58aec42a1bf414c6cba,refactoring,,,,,,
openstack%2Fironic-python-agent~master~I304468d57b10d677f2a9d58aec42a1bf414c6cba,https://review.opendev.org/742110,More refactoring of the image module,More refactoring of the image module  Introducing new function _umount_all_partitions to reduce the size of _install_grub2  Change-Id: I304468d57b10d677f2a9d58aec42a1bf414c6cba,objective,,,,,,
openstack%2Fcinder~master~If935a38399809cf95848825344fb837bf04a7dd3,https://review.opendev.org/256920,Huawei: Refactor driver for the second time,"Huawei: Refactor driver for the second time  After a few new features being added into drivers, we found it hard to maintain the code. For further working, we need to refactor our code. The work contains the following: 1. Define a new class, named HuaweiConf, to parse xml config file. We used an external xml file to store SAN info. But we do config parsing anywhere in our code, even two different functions do the same parsing. 2. Adjust some function structures. 3. Rename some functions & variables.  DocImpact Implements: blueprint refactor-huawei-driver  Change-Id: If935a38399809cf95848825344fb837bf04a7dd3",quality,,,,,,
openstack%2Fcinder~master~If935a38399809cf95848825344fb837bf04a7dd3,https://review.opendev.org/256920,Huawei: Refactor driver for the second time,"Huawei: Refactor driver for the second time  After a few new features being added into drivers, we found it hard to maintain the code. For further working, we need to refactor our code. The work contains the following: 1. Define a new class, named HuaweiConf, to parse xml config file. We used an external xml file to store SAN info. But we do config parsing anywhere in our code, even two different functions do the same parsing. 2. Adjust some function structures. 3. Rename some functions & variables.  DocImpact Implements: blueprint refactor-huawei-driver  Change-Id: If935a38399809cf95848825344fb837bf04a7dd3",objective,,,,,,
openstack%2Fcinder~master~If935a38399809cf95848825344fb837bf04a7dd3,https://review.opendev.org/256920,Huawei: Refactor driver for the second time,"Huawei: Refactor driver for the second time  After a few new features being added into drivers, we found it hard to maintain the code. For further working, we need to refactor our code. The work contains the following: 1. Define a new class, named HuaweiConf, to parse xml config file. We used an external xml file to store SAN info. But we do config parsing anywhere in our code, even two different functions do the same parsing. 2. Adjust some function structures. 3. Rename some functions & variables.  DocImpact Implements: blueprint refactor-huawei-driver  Change-Id: If935a38399809cf95848825344fb837bf04a7dd3",objective,,,,,,
openstack%2Fmanila~master~I0ad0478393df2cbb6d077363ebd6b91ceed21679,https://review.opendev.org/261783,gluster*: refactor gluster_call,"gluster*: refactor gluster_call  So far, GlusterManager.gluster_call was directly calling into the given execution function, of which the expected error type is ProcessExecutionError; while practically in all use cases we wanted to raise upwards a GlusterfsException, so all use cases were individually coercing the ProcessExecutionError into a GlusterfsException. This produced a huge amount of excess boilerplate code.  Here we include the coercion in the definiton of gluster_call and clean out the excess code.  Partially implements bp gluster-code-cleanup  Change-Id: I0ad0478393df2cbb6d077363ebd6b91ceed21679",quality,,,,,,
openstack%2Fmanila~master~I0ad0478393df2cbb6d077363ebd6b91ceed21679,https://review.opendev.org/261783,gluster*: refactor gluster_call,"gluster*: refactor gluster_call  So far, GlusterManager.gluster_call was directly calling into the given execution function, of which the expected error type is ProcessExecutionError; while practically in all use cases we wanted to raise upwards a GlusterfsException, so all use cases were individually coercing the ProcessExecutionError into a GlusterfsException. This produced a huge amount of excess boilerplate code.  Here we include the coercion in the definiton of gluster_call and clean out the excess code.  Partially implements bp gluster-code-cleanup  Change-Id: I0ad0478393df2cbb6d077363ebd6b91ceed21679",objective,,,,,,
openstack%2Fmanila~master~I0ad0478393df2cbb6d077363ebd6b91ceed21679,https://review.opendev.org/261783,gluster*: refactor gluster_call,"gluster*: refactor gluster_call  So far, GlusterManager.gluster_call was directly calling into the given execution function, of which the expected error type is ProcessExecutionError; while practically in all use cases we wanted to raise upwards a GlusterfsException, so all use cases were individually coercing the ProcessExecutionError into a GlusterfsException. This produced a huge amount of excess boilerplate code.  Here we include the coercion in the definiton of gluster_call and clean out the excess code.  Partially implements bp gluster-code-cleanup  Change-Id: I0ad0478393df2cbb6d077363ebd6b91ceed21679",objective,,,,,,
openstack%2Fkeystonemiddleware~master~I148c96688cace1f73a8fad80ed5104b1b6b871b7,https://review.opendev.org/268557,Group common PKI validation code - Refactor,Group common PKI validation code - Refactor  The PKI token validation for PKI and PKIZ tokens both individually do the cms validation and the revocation checking. There's no reason that this needs to be in both the functions. We can split the decode process and standardize the validation process to make the code flow easier to understand.  As per the previous patch the tests all operate on _validate_offline already so this is a straight refactoring.  Change-Id: I148c96688cace1f73a8fad80ed5104b1b6b871b7,quality,,,,,,
openstack%2Fkeystonemiddleware~master~I148c96688cace1f73a8fad80ed5104b1b6b871b7,https://review.opendev.org/268557,Group common PKI validation code - Refactor,Group common PKI validation code - Refactor  The PKI token validation for PKI and PKIZ tokens both individually do the cms validation and the revocation checking. There's no reason that this needs to be in both the functions. We can split the decode process and standardize the validation process to make the code flow easier to understand.  As per the previous patch the tests all operate on _validate_offline already so this is a straight refactoring.  Change-Id: I148c96688cace1f73a8fad80ed5104b1b6b871b7,refactoring,,,,,,
openstack%2Fkeystonemiddleware~master~I148c96688cace1f73a8fad80ed5104b1b6b871b7,https://review.opendev.org/268557,Group common PKI validation code - Refactor,Group common PKI validation code - Refactor  The PKI token validation for PKI and PKIZ tokens both individually do the cms validation and the revocation checking. There's no reason that this needs to be in both the functions. We can split the decode process and standardize the validation process to make the code flow easier to understand.  As per the previous patch the tests all operate on _validate_offline already so this is a straight refactoring.  Change-Id: I148c96688cace1f73a8fad80ed5104b1b6b871b7,objective,,,,,,
openstack%2Fpython-openstackclient~master~I63e9d41d229b21cd38e5a083493042c096d65e05,https://review.opendev.org/267061,"Refactor ""os availability zone list""","Refactor ""os availability zone list""  Refactor the ""os availability zone list"" command to make it a common command instead of a compute-only command. Since availability zones are common to compute, volume and network (new), this refactoring allows availability zone support to be added for volume and network.  In addition to the refactor, unit and functional tests were added.  Change-Id: I63e9d41d229b21cd38e5a083493042c096d65e05 Partial-Bug: #1532945",quality,,,,,,
openstack%2Fpython-openstackclient~master~I63e9d41d229b21cd38e5a083493042c096d65e05,https://review.opendev.org/267061,"Refactor ""os availability zone list""","Refactor ""os availability zone list""  Refactor the ""os availability zone list"" command to make it a common command instead of a compute-only command. Since availability zones are common to compute, volume and network (new), this refactoring allows availability zone support to be added for volume and network.  In addition to the refactor, unit and functional tests were added.  Change-Id: I63e9d41d229b21cd38e5a083493042c096d65e05 Partial-Bug: #1532945",testing,,,,,,
openstack%2Fpython-openstackclient~master~I63e9d41d229b21cd38e5a083493042c096d65e05,https://review.opendev.org/267061,"Refactor ""os availability zone list""","Refactor ""os availability zone list""  Refactor the ""os availability zone list"" command to make it a common command instead of a compute-only command. Since availability zones are common to compute, volume and network (new), this refactoring allows availability zone support to be added for volume and network.  In addition to the refactor, unit and functional tests were added.  Change-Id: I63e9d41d229b21cd38e5a083493042c096d65e05 Partial-Bug: #1532945",objective,,,,,,
openstack%2Fglance-specs~master~If143638a5ae21068c062048dc6e5e91b31cd524f,https://review.opendev.org/232371,Image Import Refactor,Image Import Refactor  This spec is intended to serve as the basis for the discussion on refactoring the Glance image import functionality at the Mitka summit.  ApiImpact DocImpact SecurityImpact  Change-Id: If143638a5ae21068c062048dc6e5e91b31cd524f Implements: blueprint image-import-refactor,refactoring,,,,,,
openstack%2Ftrove~master~I9605ea30d3b8e5ced532394bbdbccd6ac3747721,https://review.opendev.org/210170,Code refactoring for couchdb,"Code refactoring for couchdb  The code in the change_permissions function for couchdb in service.py was refactored. In addition, translation was added to several RuntimeError messages that were missing the underscore for translation.  Change-Id: I9605ea30d3b8e5ced532394bbdbccd6ac3747721 Closes-Bug: #1481979",objective,,,,,,
openstack%2Ftrove~master~I9605ea30d3b8e5ced532394bbdbccd6ac3747721,https://review.opendev.org/210170,Code refactoring for couchdb,"Code refactoring for couchdb  The code in the change_permissions function for couchdb in service.py was refactored. In addition, translation was added to several RuntimeError messages that were missing the underscore for translation.  Change-Id: I9605ea30d3b8e5ced532394bbdbccd6ac3747721 Closes-Bug: #1481979",integration,,,,,,
openstack%2Ftrove~master~I9605ea30d3b8e5ced532394bbdbccd6ac3747721,https://review.opendev.org/210170,Code refactoring for couchdb,"Code refactoring for couchdb  The code in the change_permissions function for couchdb in service.py was refactored. In addition, translation was added to several RuntimeError messages that were missing the underscore for translation.  Change-Id: I9605ea30d3b8e5ced532394bbdbccd6ac3747721 Closes-Bug: #1481979",objective,,,,,,
openstack%2Ftraining-labs~stable%2Fkilo~Ib0ed26e24d07e093f7a2bf29723b53b558cd769b,https://review.opendev.org/261380,Refactoring osbash networking code,"Refactoring osbash networking code  In preparation for Liberty, which removes some networks and adds a new type of network interface configuration (manual), this patch refactors the osbash networking code.  - fewer hardcoded settings (e.g., removed hardcoded list of networks   from osbash.sh)  - eliminated code duplication for client-side network configuration and   split remaining code into separate libraries (functions.ubuntu.sh,   functions.fedora.sh)  - simplify code, e.g. by removing some magic that deduced network names   for KVM from variable names like MGMT_NET  - universal functions for reading network and network interface   configuration into arrays (get_host_network_config,   get_node_netif_config)  - the number of networks is no longer hardcoded in the template for   Windows hostnet creation  - renamed some variables, functions and files to (hopefully) be easier   to understand  Change-Id: Ib0ed26e24d07e093f7a2bf29723b53b558cd769b",quality,,,,,,
openstack%2Ftraining-labs~stable%2Fkilo~Ib0ed26e24d07e093f7a2bf29723b53b558cd769b,https://review.opendev.org/261380,Refactoring osbash networking code,"Refactoring osbash networking code  In preparation for Liberty, which removes some networks and adds a new type of network interface configuration (manual), this patch refactors the osbash networking code.  - fewer hardcoded settings (e.g., removed hardcoded list of networks   from osbash.sh)  - eliminated code duplication for client-side network configuration and   split remaining code into separate libraries (functions.ubuntu.sh,   functions.fedora.sh)  - simplify code, e.g. by removing some magic that deduced network names   for KVM from variable names like MGMT_NET  - universal functions for reading network and network interface   configuration into arrays (get_host_network_config,   get_node_netif_config)  - the number of networks is no longer hardcoded in the template for   Windows hostnet creation  - renamed some variables, functions and files to (hopefully) be easier   to understand  Change-Id: Ib0ed26e24d07e093f7a2bf29723b53b558cd769b",objective,,,,,,
openstack%2Ftraining-labs~stable%2Fkilo~Ib0ed26e24d07e093f7a2bf29723b53b558cd769b,https://review.opendev.org/261380,Refactoring osbash networking code,"Refactoring osbash networking code  In preparation for Liberty, which removes some networks and adds a new type of network interface configuration (manual), this patch refactors the osbash networking code.  - fewer hardcoded settings (e.g., removed hardcoded list of networks   from osbash.sh)  - eliminated code duplication for client-side network configuration and   split remaining code into separate libraries (functions.ubuntu.sh,   functions.fedora.sh)  - simplify code, e.g. by removing some magic that deduced network names   for KVM from variable names like MGMT_NET  - universal functions for reading network and network interface   configuration into arrays (get_host_network_config,   get_node_netif_config)  - the number of networks is no longer hardcoded in the template for   Windows hostnet creation  - renamed some variables, functions and files to (hopefully) be easier   to understand  Change-Id: Ib0ed26e24d07e093f7a2bf29723b53b558cd769b",objective,,,,,,
openstack%2Ftraining-labs~master~Ib0ed26e24d07e093f7a2bf29723b53b558cd769b,https://review.opendev.org/257063,Refactoring osbash networking code,"Refactoring osbash networking code  In preparation for Liberty, which removes some networks and adds a new type of network interface configuration (manual), this patch refactors the osbash networking code.  - fewer hardcoded settings (e.g., removed hardcoded list of networks   from osbash.sh)  - eliminated code duplication for client-side network configuration and   split remaining code into separate libraries (functions.ubuntu.sh,   functions.fedora.sh)  - simplify code, e.g. by removing some magic that deduced network names   for KVM from variable names like MGMT_NET  - universal functions for reading network and network interface   configuration into arrays (get_host_network_config,   get_node_netif_config)  - the number of networks is no longer hardcoded in the template for   Windows hostnet creation  - renamed some variables, functions and files to (hopefully) be easier   to understand  Change-Id: Ib0ed26e24d07e093f7a2bf29723b53b558cd769b",quality,,,,,,
openstack%2Ftraining-labs~master~Ib0ed26e24d07e093f7a2bf29723b53b558cd769b,https://review.opendev.org/257063,Refactoring osbash networking code,"Refactoring osbash networking code  In preparation for Liberty, which removes some networks and adds a new type of network interface configuration (manual), this patch refactors the osbash networking code.  - fewer hardcoded settings (e.g., removed hardcoded list of networks   from osbash.sh)  - eliminated code duplication for client-side network configuration and   split remaining code into separate libraries (functions.ubuntu.sh,   functions.fedora.sh)  - simplify code, e.g. by removing some magic that deduced network names   for KVM from variable names like MGMT_NET  - universal functions for reading network and network interface   configuration into arrays (get_host_network_config,   get_node_netif_config)  - the number of networks is no longer hardcoded in the template for   Windows hostnet creation  - renamed some variables, functions and files to (hopefully) be easier   to understand  Change-Id: Ib0ed26e24d07e093f7a2bf29723b53b558cd769b",objective,,,,,,
openstack%2Ftraining-labs~master~Ib0ed26e24d07e093f7a2bf29723b53b558cd769b,https://review.opendev.org/257063,Refactoring osbash networking code,"Refactoring osbash networking code  In preparation for Liberty, which removes some networks and adds a new type of network interface configuration (manual), this patch refactors the osbash networking code.  - fewer hardcoded settings (e.g., removed hardcoded list of networks   from osbash.sh)  - eliminated code duplication for client-side network configuration and   split remaining code into separate libraries (functions.ubuntu.sh,   functions.fedora.sh)  - simplify code, e.g. by removing some magic that deduced network names   for KVM from variable names like MGMT_NET  - universal functions for reading network and network interface   configuration into arrays (get_host_network_config,   get_node_netif_config)  - the number of networks is no longer hardcoded in the template for   Windows hostnet creation  - renamed some variables, functions and files to (hopefully) be easier   to understand  Change-Id: Ib0ed26e24d07e093f7a2bf29723b53b558cd769b",objective,,,,,,
openstack%2Fcinder~master~I30082859242cb5bc8d607ea2a6684a41f863b611,https://review.opendev.org/251986,NetApp: Refactor E-Series tests,"NetApp: Refactor E-Series tests  Refactor the unittests for the NetApp E-Series drivers, removing any functional tests and relocating tests underneath the the path where the rest of the tests live.  Improve the coverage against the Fibre Channel E-Series driver by refactoring the iSCSI tests to work generically where possible.  Change-Id: I30082859242cb5bc8d607ea2a6684a41f863b611",testing,,,,,,
openstack%2Fcinder~master~I30082859242cb5bc8d607ea2a6684a41f863b611,https://review.opendev.org/251986,NetApp: Refactor E-Series tests,"NetApp: Refactor E-Series tests  Refactor the unittests for the NetApp E-Series drivers, removing any functional tests and relocating tests underneath the the path where the rest of the tests live.  Improve the coverage against the Fibre Channel E-Series driver by refactoring the iSCSI tests to work generically where possible.  Change-Id: I30082859242cb5bc8d607ea2a6684a41f863b611",refactoring,,,,,,
openstack%2Fnova-powervm~master~Ica5096e4150d76c79c198073a3b96dab5789ab57,https://review.opendev.org/254248,Refactor 'detach vopt' to use detach_storage,Refactor 'detach vopt' to use detach_storage  pypowervm.tasks.scsi_mapper.detach_storage provides the function to detach the storage element from VSCSI mappings.  This logic was previously inlined in nova_powervm.virt.powervm.media.add_dlt_vopt_tasks - this change set replaces the inline code with the pypowervm call.  Change-Id: Ica5096e4150d76c79c198073a3b96dab5789ab57,quality,,,,,,
openstack%2Fnova-powervm~master~Ica5096e4150d76c79c198073a3b96dab5789ab57,https://review.opendev.org/254248,Refactor 'detach vopt' to use detach_storage,Refactor 'detach vopt' to use detach_storage  pypowervm.tasks.scsi_mapper.detach_storage provides the function to detach the storage element from VSCSI mappings.  This logic was previously inlined in nova_powervm.virt.powervm.media.add_dlt_vopt_tasks - this change set replaces the inline code with the pypowervm call.  Change-Id: Ica5096e4150d76c79c198073a3b96dab5789ab57,objective,,,,,,
openstack%2Fneutron~master~I88742e4d454709e35481f2c505c9d64995497cac,https://review.opendev.org/230537,Refactor OVS-agent init-method,[WIP] Improve OVS-agent init-method  Currently there is a method which creates specific configurations dictionary according to cfg.CONF and call the OVS-agent with that structure. Removing this method and pass oslo_config directly to init-method of OVS-agent is avoids a confusion and makes it easy to track. Also refactored unit and functional tests of OVS-agent in accordance with the changes in init-method. Removed CreateAgentConfigMap.  Change-Id: I88742e4d454709e35481f2c505c9d64995497cac Closes-bug: #1464394,quality,,,,,,
openstack%2Fneutron~master~I88742e4d454709e35481f2c505c9d64995497cac,https://review.opendev.org/230537,Refactor OVS-agent init-method,[WIP] Improve OVS-agent init-method  Currently there is a method which creates specific configurations dictionary according to cfg.CONF and call the OVS-agent with that structure. Removing this method and pass oslo_config directly to init-method of OVS-agent is avoids a confusion and makes it easy to track. Also refactored unit and functional tests of OVS-agent in accordance with the changes in init-method. Removed CreateAgentConfigMap.  Change-Id: I88742e4d454709e35481f2c505c9d64995497cac Closes-bug: #1464394,testing,,,,,,
openstack%2Fneutron~master~I88742e4d454709e35481f2c505c9d64995497cac,https://review.opendev.org/230537,Refactor OVS-agent init-method,[WIP] Improve OVS-agent init-method  Currently there is a method which creates specific configurations dictionary according to cfg.CONF and call the OVS-agent with that structure. Removing this method and pass oslo_config directly to init-method of OVS-agent is avoids a confusion and makes it easy to track. Also refactored unit and functional tests of OVS-agent in accordance with the changes in init-method. Removed CreateAgentConfigMap.  Change-Id: I88742e4d454709e35481f2c505c9d64995497cac Closes-bug: #1464394,objective,,,,,,
openstack%2Fopenstacksdk~master~I06f871b822e4b8b0cc8cc8db9e7ccff91f918e5a,https://review.opendev.org/242641,Refactor os-client-config usage in from_config,"Refactor os-client-config usage in from_config  This change allows the from_config factory function to better support two angles from which it will most commonly be used.  1. When SDK is being used from within OSC, OSC will have obtained configuration data from OCC and is better served by passing it directly into SDK rather than SDK additionally accessing that data.  2. Direct users of the SDK, such as customer applications, are less likely to have dealt directly with OCC and are better served by just passing in the name of the configuration they want to run with.  Closes-Bug:1513920  Change-Id: I06f871b822e4b8b0cc8cc8db9e7ccff91f918e5a",quality,,,,,,
openstack%2Fopenstacksdk~master~I06f871b822e4b8b0cc8cc8db9e7ccff91f918e5a,https://review.opendev.org/242641,Refactor os-client-config usage in from_config,"Refactor os-client-config usage in from_config  This change allows the from_config factory function to better support two angles from which it will most commonly be used.  1. When SDK is being used from within OSC, OSC will have obtained configuration data from OCC and is better served by passing it directly into SDK rather than SDK additionally accessing that data.  2. Direct users of the SDK, such as customer applications, are less likely to have dealt directly with OCC and are better served by just passing in the name of the configuration they want to run with.  Closes-Bug:1513920  Change-Id: I06f871b822e4b8b0cc8cc8db9e7ccff91f918e5a",objective,,,,,,
openstack%2Fopenstacksdk~master~I06f871b822e4b8b0cc8cc8db9e7ccff91f918e5a,https://review.opendev.org/242641,Refactor os-client-config usage in from_config,"Refactor os-client-config usage in from_config  This change allows the from_config factory function to better support two angles from which it will most commonly be used.  1. When SDK is being used from within OSC, OSC will have obtained configuration data from OCC and is better served by passing it directly into SDK rather than SDK additionally accessing that data.  2. Direct users of the SDK, such as customer applications, are less likely to have dealt directly with OCC and are better served by just passing in the name of the configuration they want to run with.  Closes-Bug:1513920  Change-Id: I06f871b822e4b8b0cc8cc8db9e7ccff91f918e5a",objective,,,,,,
openstack%2Foslo.utils~master~I8b7d81a5dc38598275491291c672d9d885931b10,https://review.opendev.org/245296,Refactor Port number validation,Refactor Port number validation  Leverage the recently added _is_int_in_range() function to simpify valid range check  Change-Id: I8b7d81a5dc38598275491291c672d9d885931b10,refactoring,,,,,,
openstack%2Fneutron~master~Ib687bf1b321845098e0564ada46e68a7850b01c6,https://review.opendev.org/245115,Refactor test_server functional tests,Refactor test_server functional tests  * Launching services with 0 workers makes no sense and would soon   be prohibited in oslo.service. Passing workers=1 means that a   service will be run in a current process. * Extract the dummy _check_active method to the base class.  Change-Id: Ib687bf1b321845098e0564ada46e68a7850b01c6,testing,,,,,,
openstack%2Fneutron~master~Ib687bf1b321845098e0564ada46e68a7850b01c6,https://review.opendev.org/245115,Refactor test_server functional tests,Refactor test_server functional tests  * Launching services with 0 workers makes no sense and would soon   be prohibited in oslo.service. Passing workers=1 means that a   service will be run in a current process. * Extract the dummy _check_active method to the base class.  Change-Id: Ib687bf1b321845098e0564ada46e68a7850b01c6,quality,,,,,,
openstack%2Fneutron~master~Ib687bf1b321845098e0564ada46e68a7850b01c6,https://review.opendev.org/245115,Refactor test_server functional tests,Refactor test_server functional tests  * Launching services with 0 workers makes no sense and would soon   be prohibited in oslo.service. Passing workers=1 means that a   service will be run in a current process. * Extract the dummy _check_active method to the base class.  Change-Id: Ib687bf1b321845098e0564ada46e68a7850b01c6,objective,,,,,,
openstack%2Fironic-python-agent~master~I9c10bf05186dcebb37f175d61bf4ac9ff86b6510,https://review.opendev.org/739251,Refactor part of image module,Refactor part of image module  Shuffle some functions around and reduce size of _is_bootloader_loaded moving logic out to a new function.  Change-Id: I9c10bf05186dcebb37f175d61bf4ac9ff86b6510,quality,,,,,,
openstack%2Fironic-python-agent~master~I9c10bf05186dcebb37f175d61bf4ac9ff86b6510,https://review.opendev.org/739251,Refactor part of image module,Refactor part of image module  Shuffle some functions around and reduce size of _is_bootloader_loaded moving logic out to a new function.  Change-Id: I9c10bf05186dcebb37f175d61bf4ac9ff86b6510,refactoring,,,,,,
openstack%2Ftrove~master~I603cf2ddebab1d7a5c874cd66431f803aaee2d42,https://review.opendev.org/234461,Refactor the datastore manager classes,"Refactor the datastore manager classes  There is a large amount of boiler-plate code in each datastore manager. As more managers are added, the time involved in maintaining all this code wil continue to grow. To alleviate this, a base manager class has been added where all common code can reside.  The initial refactoring just moved some of the obvious code (such as rpc_ping and update_status) into the base class, along with defining properties that can be used to further abstract functionality going forward.  The issue of having instances move in-and-out of ACTIVE state has also been fixed by adding a flag file that is written by the base class once prepare has finished successfully.  Closes-Bug: #1482795 Closes-Bug: #1487233 Partially Implements: blueprint datastore-manager-refactor Change-Id: I603cf2ddebab1d7a5c874cd66431f803aaee2d42",quality,,,,,,
openstack%2Ftrove~master~I603cf2ddebab1d7a5c874cd66431f803aaee2d42,https://review.opendev.org/234461,Refactor the datastore manager classes,"Refactor the datastore manager classes  There is a large amount of boiler-plate code in each datastore manager. As more managers are added, the time involved in maintaining all this code wil continue to grow. To alleviate this, a base manager class has been added where all common code can reside.  The initial refactoring just moved some of the obvious code (such as rpc_ping and update_status) into the base class, along with defining properties that can be used to further abstract functionality going forward.  The issue of having instances move in-and-out of ACTIVE state has also been fixed by adding a flag file that is written by the base class once prepare has finished successfully.  Closes-Bug: #1482795 Closes-Bug: #1487233 Partially Implements: blueprint datastore-manager-refactor Change-Id: I603cf2ddebab1d7a5c874cd66431f803aaee2d42",objective,,,,,,
openstack%2Ftrove~master~I3eced6a4236e4189e57ea5a1589e8f0d411cc4e3,https://review.opendev.org/235017,Pagination limit code refactor,Pagination limit code refactor  The logic to find the pagination limit is repeated several times and is not in one function. This patch creates a function that is called in various locations replacing repetitive code.  Change-Id: I3eced6a4236e4189e57ea5a1589e8f0d411cc4e3 Closes-Bug:  #1308285,quality,,,,,,
openstack%2Ftrove~master~I3eced6a4236e4189e57ea5a1589e8f0d411cc4e3,https://review.opendev.org/235017,Pagination limit code refactor,Pagination limit code refactor  The logic to find the pagination limit is repeated several times and is not in one function. This patch creates a function that is called in various locations replacing repetitive code.  Change-Id: I3eced6a4236e4189e57ea5a1589e8f0d411cc4e3 Closes-Bug:  #1308285,refactoring,,,,,,
openstack%2Ffuel-octane~stable%2F7.0~I476a4f7fe884500e7d0c4c401cdeeb8c9af46e63,https://review.opendev.org/230938,Refactor upgrade_controlplane parts,Refactor upgrade_controlplane parts  * move network related methods from `upgrade_controlplane` to `env`   module * collect yaml files from nodes if bup info is not present * extract `delete_overlay_networks` action to separate function  Change-Id: I476a4f7fe884500e7d0c4c401cdeeb8c9af46e63,refactoring,,,,,,
openstack%2Ftraining-labs~master~I27c0b2d50717da60df6fd743d49e64d3a066c9cd,https://review.opendev.org/233437,Refactor use of basedisk name/path,Refactor use of basedisk name/path  The basedisk name (and hence get_base_disk_name) have the filename extension .vdi removed to allow for backends that have different file extensions.  The VirtualBox-specific function get_base_disk_path is moved from functions-host.sh to virtualbox-functions.sh.  Change-Id: I27c0b2d50717da60df6fd743d49e64d3a066c9cd,quality,,,,,,
openstack%2Ftraining-labs~master~I27c0b2d50717da60df6fd743d49e64d3a066c9cd,https://review.opendev.org/233437,Refactor use of basedisk name/path,Refactor use of basedisk name/path  The basedisk name (and hence get_base_disk_name) have the filename extension .vdi removed to allow for backends that have different file extensions.  The VirtualBox-specific function get_base_disk_path is moved from functions-host.sh to virtualbox-functions.sh.  Change-Id: I27c0b2d50717da60df6fd743d49e64d3a066c9cd,refactoring,,,,,,
openstack%2Ffuturist~master~I5ac1794d5803850120be4e67b85efe0449aa1891,https://review.opendev.org/231828,Some minor refactoring and comment/note addition,Some minor refactoring and comment/note addition  In the internal '_run' instead of having a loop that has various cases with quite a bit of code per case instead have the loop call into smaller helper functions that handle the different types of processing the loop does.  Also adds a note to the 'reset' method that explains why the metrics keys are overwritten vs being copied/replaced with a new copy.  Change-Id: I5ac1794d5803850120be4e67b85efe0449aa1891,quality,,,,,,
openstack%2Ffuturist~master~I5ac1794d5803850120be4e67b85efe0449aa1891,https://review.opendev.org/231828,Some minor refactoring and comment/note addition,Some minor refactoring and comment/note addition  In the internal '_run' instead of having a loop that has various cases with quite a bit of code per case instead have the loop call into smaller helper functions that handle the different types of processing the loop does.  Also adds a note to the 'reset' method that explains why the metrics keys are overwritten vs being copied/replaced with a new copy.  Change-Id: I5ac1794d5803850120be4e67b85efe0449aa1891,objective,,,,,,
openstack%2Ffuel-octane~master~Ia6d716e1bfd82b8f0f9c3c52a17be619a993b2c4,https://review.opendev.org/227773,Refactor services maintenance functions,Refactor services maintenance functions  Move functions that start services using corosync and upstart from module commands/upgrade_controlplane.py to module util/maintenance.py.  Change-Id: Ia6d716e1bfd82b8f0f9c3c52a17be619a993b2c4,refactoring,,,,,,
openstack%2Ftaskflow~master~Ifdf2f3efb78d189ed5a8104614b1bf6a84c9339a,https://review.opendev.org/217993,Refactor common parts of 'get_maybe_ready_for' methods,"Refactor common parts of 'get_maybe_ready_for' methods  These share quite a bit of common-like code, so refactor both of them to share the same function and differentiate certain provided arguments as needed.  Change-Id: Ifdf2f3efb78d189ed5a8104614b1bf6a84c9339a",quality,,,,,,
openstack%2Ftaskflow~master~Ifdf2f3efb78d189ed5a8104614b1bf6a84c9339a,https://review.opendev.org/217993,Refactor common parts of 'get_maybe_ready_for' methods,"Refactor common parts of 'get_maybe_ready_for' methods  These share quite a bit of common-like code, so refactor both of them to share the same function and differentiate certain provided arguments as needed.  Change-Id: Ifdf2f3efb78d189ed5a8104614b1bf6a84c9339a",objective,,,,,,
x%2Fvmware-nsx~master~I1cf86a7f3127f637735560f1ad60eb36edac7500,https://review.opendev.org/226004,nsx v3 lport refactor,nsx v3 lport refactor  this patch refactors the nsx v3 logical switch port functions into the rest client/resource model and updates all refs to these functions to use an nsx v3 client. the patch also adds support for passing switch profile ids to the lport create. this functionality will be leveraged in subsequent port security change sets.  Change-Id: I1cf86a7f3127f637735560f1ad60eb36edac7500,objective,,,,,,
x%2Fvmware-nsx~master~I1cf86a7f3127f637735560f1ad60eb36edac7500,https://review.opendev.org/226004,nsx v3 lport refactor,nsx v3 lport refactor  this patch refactors the nsx v3 logical switch port functions into the rest client/resource model and updates all refs to these functions to use an nsx v3 client. the patch also adds support for passing switch profile ids to the lport create. this functionality will be leveraged in subsequent port security change sets.  Change-Id: I1cf86a7f3127f637735560f1ad60eb36edac7500,objective,,,,,,
openstack%2Fproject-config~master~I0f2314a8e82c3b7f1c96f28408c36ea1dd786e2f,https://review.opendev.org/222039,Refactor verification for ZanataRestService,"Refactor verification for ZanataRestService  Rather than pass verify to each function that requires it, refactor it down the stack into __init__. Now that we have moved to using translate.o.o which has a trusted certificate, switch the default to True.  Add a command-line argument --no-verify to create-zanata-xml to ease testing against translate-dev.  Change-Id: I0f2314a8e82c3b7f1c96f28408c36ea1dd786e2f",objective,,,,,,
openstack%2Fproject-config~master~I0f2314a8e82c3b7f1c96f28408c36ea1dd786e2f,https://review.opendev.org/222039,Refactor verification for ZanataRestService,"Refactor verification for ZanataRestService  Rather than pass verify to each function that requires it, refactor it down the stack into __init__. Now that we have moved to using translate.o.o which has a trusted certificate, switch the default to True.  Add a command-line argument --no-verify to create-zanata-xml to ease testing against translate-dev.  Change-Id: I0f2314a8e82c3b7f1c96f28408c36ea1dd786e2f",testing,,,,,,
openstack%2Fproject-config~master~I0f2314a8e82c3b7f1c96f28408c36ea1dd786e2f,https://review.opendev.org/222039,Refactor verification for ZanataRestService,"Refactor verification for ZanataRestService  Rather than pass verify to each function that requires it, refactor it down the stack into __init__. Now that we have moved to using translate.o.o which has a trusted certificate, switch the default to True.  Add a command-line argument --no-verify to create-zanata-xml to ease testing against translate-dev.  Change-Id: I0f2314a8e82c3b7f1c96f28408c36ea1dd786e2f",objective,,,,,,
openstack%2Fmistral~master~Ia88ce390298d54afc1ee72ebfb67de9056d9f444,https://review.opendev.org/221816,Refactor get_task_spec using mechanism of polymorphic DSL entities,"Refactor get_task_spec using mechanism of polymorphic DSL entities  * Use instantiate_spec function for task spec initializaion, no matter the   task belongs to direct or reverse workflow.  * Replace the code logic of prohibition of co-existance between action and   workflow in task spec with jsonschema restriction.  Change-Id: Ia88ce390298d54afc1ee72ebfb67de9056d9f444",objective,,,,,,
openstack%2Fmistral~master~Ia88ce390298d54afc1ee72ebfb67de9056d9f444,https://review.opendev.org/221816,Refactor get_task_spec using mechanism of polymorphic DSL entities,"Refactor get_task_spec using mechanism of polymorphic DSL entities  * Use instantiate_spec function for task spec initializaion, no matter the   task belongs to direct or reverse workflow.  * Replace the code logic of prohibition of co-existance between action and   workflow in task spec with jsonschema restriction.  Change-Id: Ia88ce390298d54afc1ee72ebfb67de9056d9f444",objective,,,,,,
openstack%2Fyaql~master~I3b0c7bc71cbf97015a70f447b192d69c5e53f14b,https://review.opendev.org/220748,Refactoring of conventions code,"Refactoring of conventions code  * Simplifies convention classes, moves all special names processing code into specs.  * Now it is possible to have special functions with suffixes  that conventions will apply to. For example  #prefix_name_do_something will remain intact but  #prefix_name#do_something will be converted to  #prefix_name#doSomething. This will be later used to implement properties  Change-Id: I3b0c7bc71cbf97015a70f447b192d69c5e53f14b",refactoring,,,,,,
openstack%2Fyaql~master~I3b0c7bc71cbf97015a70f447b192d69c5e53f14b,https://review.opendev.org/220748,Refactoring of conventions code,"Refactoring of conventions code  * Simplifies convention classes, moves all special names processing code into specs.  * Now it is possible to have special functions with suffixes  that conventions will apply to. For example  #prefix_name_do_something will remain intact but  #prefix_name#do_something will be converted to  #prefix_name#doSomething. This will be later used to implement properties  Change-Id: I3b0c7bc71cbf97015a70f447b192d69c5e53f14b",objective,,,,,,
openstack%2Ffuel-web~stable%2F7.0~I6ff266e69c8c9e069b45ffb946c85e0e26a81e2a,https://review.opendev.org/221389,[Intern] Network tab tests refactoring,[Intern] Network tab tests refactoring  Related to blueprint ui-functional-tests-with-intern Change-Id: I6ff266e69c8c9e069b45ffb946c85e0e26a81e2a (cherry picked from commit acaf89bbe8b73bdd05c53c5a012b13e739959f77),refactoring,,,,,,
openstack%2Ffuel-web~stable%2F7.0~I6ff266e69c8c9e069b45ffb946c85e0e26a81e2a,https://review.opendev.org/221389,[Intern] Network tab tests refactoring,[Intern] Network tab tests refactoring  Related to blueprint ui-functional-tests-with-intern Change-Id: I6ff266e69c8c9e069b45ffb946c85e0e26a81e2a (cherry picked from commit acaf89bbe8b73bdd05c53c5a012b13e739959f77),testing,,,,,,
openstack%2Ffuel-web~master~I6ff266e69c8c9e069b45ffb946c85e0e26a81e2a,https://review.opendev.org/219661,[Intern] Network tab tests refactoring,[Intern] Network tab tests refactoring  Related to blueprint ui-functional-tests-with-intern Change-Id: I6ff266e69c8c9e069b45ffb946c85e0e26a81e2a,refactoring,,,,,,
openstack%2Ffuel-web~master~I6ff266e69c8c9e069b45ffb946c85e0e26a81e2a,https://review.opendev.org/219661,[Intern] Network tab tests refactoring,[Intern] Network tab tests refactoring  Related to blueprint ui-functional-tests-with-intern Change-Id: I6ff266e69c8c9e069b45ffb946c85e0e26a81e2a,testing,,,,,,
openstack%2Ffuel-library~master~I21501feb9e2f9cce83600596889f3f9b89174310,https://review.opendev.org/220251,"Refactor root ssh config, add admin net and domain to list of host nets","Refactor root ssh config, add admin_network to list of host nets  SSH config for root user should use key auth regardless of hostname. This enables deployment to hosts that have IP addresses outside of RFC 1918 ranges.  Host network should include admin network expressed by wildcard.  Added new function ipcalc_network_wildcard  Change-Id: I21501feb9e2f9cce83600596889f3f9b89174310 Closes-Bug: #1491912 Co-Authored-By: Dmitry Ilyin <dilyin@mirantis.com>",quality,,,,,,
openstack%2Ffuel-library~master~I21501feb9e2f9cce83600596889f3f9b89174310,https://review.opendev.org/220251,"Refactor root ssh config, add admin net and domain to list of host nets","Refactor root ssh config, add admin_network to list of host nets  SSH config for root user should use key auth regardless of hostname. This enables deployment to hosts that have IP addresses outside of RFC 1918 ranges.  Host network should include admin network expressed by wildcard.  Added new function ipcalc_network_wildcard  Change-Id: I21501feb9e2f9cce83600596889f3f9b89174310 Closes-Bug: #1491912 Co-Authored-By: Dmitry Ilyin <dilyin@mirantis.com>",objective,,,,,,
openstack%2Fhorizon~master~I0cc137702ff408aeb7af433c56c87aba091b8dc6,https://review.opendev.org/218243,Minor refactoring of integration tests,Minor refactoring of integration tests  Simplify 2 CheckBoxRegion-s by moving their common functionality into mixin.  Change-Id: I0cc137702ff408aeb7af433c56c87aba091b8dc6,testing,,,,,,
openstack%2Fhorizon~master~I0cc137702ff408aeb7af433c56c87aba091b8dc6,https://review.opendev.org/218243,Minor refactoring of integration tests,Minor refactoring of integration tests  Simplify 2 CheckBoxRegion-s by moving their common functionality into mixin.  Change-Id: I0cc137702ff408aeb7af433c56c87aba091b8dc6,refactoring,,,,,,
openstack%2Fironic-python-agent~master~Ib20e68a8916590513c0a825e44407a110cfbb441,https://review.opendev.org/210626,Refactor list_block_devices to its own function,Refactor list_block_devices to its own function  This function is useful in any HardwareManager that interacts with disks. Subclassing GenericHardwareManager is not ideal for any hardware manager that interacts with only specific devices.  Change-Id: Ib20e68a8916590513c0a825e44407a110cfbb441,refactoring,,,,,,
openstack%2Fironic-python-agent~master~Ib20e68a8916590513c0a825e44407a110cfbb441,https://review.opendev.org/210626,Refactor list_block_devices to its own function,Refactor list_block_devices to its own function  This function is useful in any HardwareManager that interacts with disks. Subclassing GenericHardwareManager is not ideal for any hardware manager that interacts with only specific devices.  Change-Id: Ib20e68a8916590513c0a825e44407a110cfbb441,objective,,,,,,
openstack%2Fheat~master~If3ea57321a592b8f5849190920df3ff10166872b,https://review.opendev.org/213548,Refactor InstanceGroup batch sizing logic,"Refactor InstanceGroup batch sizing logic  Calculate the batch sizes in a separate function that is independent of the resource itself, and therefore suitable for moving into a library.  Change-Id: If3ea57321a592b8f5849190920df3ff10166872b",refactoring,,,,,,
openstack%2Fheat~master~If3ea57321a592b8f5849190920df3ff10166872b,https://review.opendev.org/213548,Refactor InstanceGroup batch sizing logic,"Refactor InstanceGroup batch sizing logic  Calculate the batch sizes in a separate function that is independent of the resource itself, and therefore suitable for moving into a library.  Change-Id: If3ea57321a592b8f5849190920df3ff10166872b",objective,,,,,,
openstack%2Fcinder~master~Ie6434016840c20229b3a32b676aa8fc994f9362b,https://review.opendev.org/213827,Refactor to remove duplicate code,Refactor to remove duplicate code  This change reuses the get_volume_type_encryption function for the implementation of the is_encrypted function.  Change-Id: Ie6434016840c20229b3a32b676aa8fc994f9362b,quality,,,,,,
openstack%2Fnova~master~I0f4456731c9d6f64affbf6924f4a7a4c34df4fd1,https://review.opendev.org/215310,libvirt: refactor _create_domain_setup_lxc to use Image.get_model,"libvirt: refactor _create_domain_setup_lxc to use Image.get_model  Instead of trying to figure out what the proper ImageModel is for the instance's image, just use the get_model function. The resulting ImageModel will actually represent the proper ImageModel for the instance, and downstream mounting functions will be able to make intelligent decisions on how to mount the instance's disks.  It is not possible to use get_model for an instance booted from volume, but we can still use LocalBlockImage in it's case because it is simply exposed as a block device.  Change-Id: I0f4456731c9d6f64affbf6924f4a7a4c34df4fd1",quality,,,,,,
openstack%2Fnova~master~I0f4456731c9d6f64affbf6924f4a7a4c34df4fd1,https://review.opendev.org/215310,libvirt: refactor _create_domain_setup_lxc to use Image.get_model,"libvirt: refactor _create_domain_setup_lxc to use Image.get_model  Instead of trying to figure out what the proper ImageModel is for the instance's image, just use the get_model function. The resulting ImageModel will actually represent the proper ImageModel for the instance, and downstream mounting functions will be able to make intelligent decisions on how to mount the instance's disks.  It is not possible to use get_model for an instance booted from volume, but we can still use LocalBlockImage in it's case because it is simply exposed as a block device.  Change-Id: I0f4456731c9d6f64affbf6924f4a7a4c34df4fd1",objective,,,,,,
openstack%2Fcastellan~master~I86d6d7d49a893beaae6f311060ec593e0482d889,https://review.opendev.org/206180,refactoring castellan configuration,"refactoring castellan configuration  This change adds a module for listing configuration options and setting their defaults. It also changes the key manager base class to incorporate a configuration during creation. By default, the key manager will continue to use the global CONF object from the oslo.config package.  For the most part, this change will be backwards compatible. The one exception is the creation of sample configuration files. Previously, importing castellan was sufficient to add these options to the global configuration object. Now, these options will need to be applied by using the castellan.options.list_opts function, or adding them through other means, to create sample configuration files. Similar applies for setting configuration before instantiating a key manager.  changes * adding castellan.options with list_opts and set_defaults functions * changing KeyManager abc to include a configuration option to __init__ * changing babrican and not_implemented key managers to accept   configuration parameters * adding tests for set_defaults function * fixing barbican tests to accomodate new configuration parameter * adding documentation about configuration usage  Change-Id: I86d6d7d49a893beaae6f311060ec593e0482d889 Implements: blueprint improved-configuration-options",objective,,,,,,
openstack%2Fcastellan~master~I86d6d7d49a893beaae6f311060ec593e0482d889,https://review.opendev.org/206180,refactoring castellan configuration,"refactoring castellan configuration  This change adds a module for listing configuration options and setting their defaults. It also changes the key manager base class to incorporate a configuration during creation. By default, the key manager will continue to use the global CONF object from the oslo.config package.  For the most part, this change will be backwards compatible. The one exception is the creation of sample configuration files. Previously, importing castellan was sufficient to add these options to the global configuration object. Now, these options will need to be applied by using the castellan.options.list_opts function, or adding them through other means, to create sample configuration files. Similar applies for setting configuration before instantiating a key manager.  changes * adding castellan.options with list_opts and set_defaults functions * changing KeyManager abc to include a configuration option to __init__ * changing babrican and not_implemented key managers to accept   configuration parameters * adding tests for set_defaults function * fixing barbican tests to accomodate new configuration parameter * adding documentation about configuration usage  Change-Id: I86d6d7d49a893beaae6f311060ec593e0482d889 Implements: blueprint improved-configuration-options",quality,,,,,,
openstack%2Fcastellan~master~I86d6d7d49a893beaae6f311060ec593e0482d889,https://review.opendev.org/206180,refactoring castellan configuration,"refactoring castellan configuration  This change adds a module for listing configuration options and setting their defaults. It also changes the key manager base class to incorporate a configuration during creation. By default, the key manager will continue to use the global CONF object from the oslo.config package.  For the most part, this change will be backwards compatible. The one exception is the creation of sample configuration files. Previously, importing castellan was sufficient to add these options to the global configuration object. Now, these options will need to be applied by using the castellan.options.list_opts function, or adding them through other means, to create sample configuration files. Similar applies for setting configuration before instantiating a key manager.  changes * adding castellan.options with list_opts and set_defaults functions * changing KeyManager abc to include a configuration option to __init__ * changing babrican and not_implemented key managers to accept   configuration parameters * adding tests for set_defaults function * fixing barbican tests to accomodate new configuration parameter * adding documentation about configuration usage  Change-Id: I86d6d7d49a893beaae6f311060ec593e0482d889 Implements: blueprint improved-configuration-options",testing,,,,,,
openstack%2Fcastellan~master~I86d6d7d49a893beaae6f311060ec593e0482d889,https://review.opendev.org/206180,refactoring castellan configuration,"refactoring castellan configuration  This change adds a module for listing configuration options and setting their defaults. It also changes the key manager base class to incorporate a configuration during creation. By default, the key manager will continue to use the global CONF object from the oslo.config package.  For the most part, this change will be backwards compatible. The one exception is the creation of sample configuration files. Previously, importing castellan was sufficient to add these options to the global configuration object. Now, these options will need to be applied by using the castellan.options.list_opts function, or adding them through other means, to create sample configuration files. Similar applies for setting configuration before instantiating a key manager.  changes * adding castellan.options with list_opts and set_defaults functions * changing KeyManager abc to include a configuration option to __init__ * changing babrican and not_implemented key managers to accept   configuration parameters * adding tests for set_defaults function * fixing barbican tests to accomodate new configuration parameter * adding documentation about configuration usage  Change-Id: I86d6d7d49a893beaae6f311060ec593e0482d889 Implements: blueprint improved-configuration-options",objective,,,,,,
x%2Fooi~master~I94e5a6df995b5dd774422113d8ede7d1f808b500,https://review.opendev.org/191868,refactor 'index' method for compute controller,"refactor compute controller index  start with the refactoring of the compute controller methods, as long as adding better unit tests so that we can actually do unit testing rather than functional testing.  Change-Id: I94e5a6df995b5dd774422113d8ede7d1f808b500",testing,,,,,,
x%2Fooi~master~I94e5a6df995b5dd774422113d8ede7d1f808b500,https://review.opendev.org/191868,refactor 'index' method for compute controller,"refactor compute controller index  start with the refactoring of the compute controller methods, as long as adding better unit tests so that we can actually do unit testing rather than functional testing.  Change-Id: I94e5a6df995b5dd774422113d8ede7d1f808b500",objective,,,,,,
openstack%2Fnetworking-powervm~master~I006b43b8c8a7321f875a169c8285eff6a4d0f12e,https://review.opendev.org/208055,Refactor the utility module,"Refactor the utility module  This change set provides a refactoring of the utility module to make it simple functions instead of the heavier weight class.  The agent itself now has the adapter, which is in line with the PowerVM code in other OpenStack projects.  This change set also changes single quotes to double quotes to keep method comments consisten within the project.  Change-Id: I006b43b8c8a7321f875a169c8285eff6a4d0f12e",objective,,,,,,
openstack%2Fnetworking-powervm~master~I006b43b8c8a7321f875a169c8285eff6a4d0f12e,https://review.opendev.org/208055,Refactor the utility module,"Refactor the utility module  This change set provides a refactoring of the utility module to make it simple functions instead of the heavier weight class.  The agent itself now has the adapter, which is in line with the PowerVM code in other OpenStack projects.  This change set also changes single quotes to double quotes to keep method comments consisten within the project.  Change-Id: I006b43b8c8a7321f875a169c8285eff6a4d0f12e",objective,,,,,,
openstack%2Ffuel-library~master~I3527f2d85baac83b209c7af713466b593238555f,https://review.opendev.org/201247,Refactor virtual_ips task,Refactor virtual_ips task  * Use function instead of hardcoded values  Change-Id: I3527f2d85baac83b209c7af713466b593238555f,refactoring,,,,,,
openstack%2Ffuel-library~master~I3527f2d85baac83b209c7af713466b593238555f,https://review.opendev.org/201247,Refactor virtual_ips task,Refactor virtual_ips task  * Use function instead of hardcoded values  Change-Id: I3527f2d85baac83b209c7af713466b593238555f,quality,,,,,,
openstack%2Fcinder~master~I768889e2577a4d975397218eb31e89b42e08e04f,https://review.opendev.org/188240,Refactor Huawei Volume driver,refactor Huawei Volume driver  This blueprint is an attempt to refactor the Huawei volume driver in liberty. We will add a base dirver to implement the basic functions that the Cinder driver required. The sub-class will inherit the base driver according to different storages.  Change-Id: I768889e2577a4d975397218eb31e89b42e08e04f Implements: blueprint refactor-huawei-volume-driver,quality,,,,,,
openstack%2Fcinder~master~I768889e2577a4d975397218eb31e89b42e08e04f,https://review.opendev.org/188240,Refactor Huawei Volume driver,refactor Huawei Volume driver  This blueprint is an attempt to refactor the Huawei volume driver in liberty. We will add a base dirver to implement the basic functions that the Cinder driver required. The sub-class will inherit the base driver according to different storages.  Change-Id: I768889e2577a4d975397218eb31e89b42e08e04f Implements: blueprint refactor-huawei-volume-driver,objective,,,,,,
openstack%2Fmurano~master~I1d86d500da8aab67d90da7314ccb6c376c8f59d4,https://review.opendev.org/198856,Introduce refactored tests,Introduce refactored tests  - Move all functions excluding specific to common/utils.py - Add requests to test-requirements.txt - Modify config.py to give more flexibility to tests  Change-Id: I1d86d500da8aab67d90da7314ccb6c376c8f59d4,refactoring,,,,,,
openstack%2Fmurano~master~I1d86d500da8aab67d90da7314ccb6c376c8f59d4,https://review.opendev.org/198856,Introduce refactored tests,Introduce refactored tests  - Move all functions excluding specific to common/utils.py - Add requests to test-requirements.txt - Modify config.py to give more flexibility to tests  Change-Id: I1d86d500da8aab67d90da7314ccb6c376c8f59d4,testing,,,,,,
x%2Fdevstack-plugin-glusterfs~master~Ibe1231d5f2244ea7e9b7e7a5e1b138192e372206,https://review.opendev.org/201949,devstack-plugin-glusterfs: Refactoring plugin code,"devstack-plugin-glusterfs: Refactoring plugin code  This patch modifies the plugin code into more reusable manner. Also adds a new file ""devstack/gluster-functions.sh"", which contains gluster specific functions.  Change-Id: Ibe1231d5f2244ea7e9b7e7a5e1b138192e372206",quality,,,,,,
x%2Fdevstack-plugin-glusterfs~master~Ibe1231d5f2244ea7e9b7e7a5e1b138192e372206,https://review.opendev.org/201949,devstack-plugin-glusterfs: Refactoring plugin code,"devstack-plugin-glusterfs: Refactoring plugin code  This patch modifies the plugin code into more reusable manner. Also adds a new file ""devstack/gluster-functions.sh"", which contains gluster specific functions.  Change-Id: Ibe1231d5f2244ea7e9b7e7a5e1b138192e372206",objective,,,,,,
x%2Fnetworking-bigswitch~master~If3f86399f5c33ff2395c4617625ddaefbd59d2f1,https://review.opendev.org/203329,Fixes for a couple of upstream refactors,Fixes for a couple of upstream refactors  IPAM got rid of _delete_port function and RBAC required a context for make_subnet_dict function.  Change-Id: If3f86399f5c33ff2395c4617625ddaefbd59d2f1,objective,,,,,,
openstack%2Fproject-config~master~I21051fbdcf7bd210606333ba46e5abb0c64e7540,https://review.opendev.org/199915,Refactor pulling translations into a common func,"Refactor pulling translations into a common func  In preperation for switching projects one at a time to pulling translations from Zanata, refactor the two calls to tx pull into a common function.  Change-Id: I21051fbdcf7bd210606333ba46e5abb0c64e7540",refactoring,,,,,,
openstack%2Fproject-config~master~I21051fbdcf7bd210606333ba46e5abb0c64e7540,https://review.opendev.org/199915,Refactor pulling translations into a common func,"Refactor pulling translations into a common func  In preperation for switching projects one at a time to pulling translations from Zanata, refactor the two calls to tx pull into a common function.  Change-Id: I21051fbdcf7bd210606333ba46e5abb0c64e7540",objective,,,,,,
openstack%2Fkeystonemiddleware~master~Iede0c00039dacb7ff3460d7af38151d0f6f8c433,https://review.opendev.org/179460,Refactor certificate fetch functions,Refactor certificate fetch functions  The certificate fetch function code was complicated because you passed in a string to pick the certificate type. This was a holdover from before keystoneclient was used because it was building the paths to the certificates. Now auth_token is just calling client methods rather then building the path so the strings don't mean anything anymore.  Change-Id: Iede0c00039dacb7ff3460d7af38151d0f6f8c433,quality,,,,,,
openstack%2Fkeystonemiddleware~master~Iede0c00039dacb7ff3460d7af38151d0f6f8c433,https://review.opendev.org/179460,Refactor certificate fetch functions,Refactor certificate fetch functions  The certificate fetch function code was complicated because you passed in a string to pick the certificate type. This was a holdover from before keystoneclient was used because it was building the paths to the certificates. Now auth_token is just calling client methods rather then building the path so the strings don't mean anything anymore.  Change-Id: Iede0c00039dacb7ff3460d7af38151d0f6f8c433,objective,,,,,,
openstack%2Fcharms.openstack~master~Ic6c81a812445010052fa65803a9016652bf353c5,https://review.opendev.org/735045,Refactor Trilio charms base classes,Refactor Trilio charms base classes  Move into separate module to avoid explosion in size of adapters classes module.  Refactor principle and subordinate classes to have the correct super classes.  Provide install and configure source helpers as functions so they can be used in both class types.  Split ghost share action out into a mixin as its not used everywhere.  Add TrilioVault charm classes to main module __all__.  Change-Id: Ic6c81a812445010052fa65803a9016652bf353c5,quality,,,,,,
openstack%2Fcharms.openstack~master~Ic6c81a812445010052fa65803a9016652bf353c5,https://review.opendev.org/735045,Refactor Trilio charms base classes,Refactor Trilio charms base classes  Move into separate module to avoid explosion in size of adapters classes module.  Refactor principle and subordinate classes to have the correct super classes.  Provide install and configure source helpers as functions so they can be used in both class types.  Split ghost share action out into a mixin as its not used everywhere.  Add TrilioVault charm classes to main module __all__.  Change-Id: Ic6c81a812445010052fa65803a9016652bf353c5,objective,,,,,,
openstack%2Fcharms.openstack~master~Ic6c81a812445010052fa65803a9016652bf353c5,https://review.opendev.org/735045,Refactor Trilio charms base classes,Refactor Trilio charms base classes  Move into separate module to avoid explosion in size of adapters classes module.  Refactor principle and subordinate classes to have the correct super classes.  Provide install and configure source helpers as functions so they can be used in both class types.  Split ghost share action out into a mixin as its not used everywhere.  Add TrilioVault charm classes to main module __all__.  Change-Id: Ic6c81a812445010052fa65803a9016652bf353c5,objective,,,,,,
openstack%2Fkeystone~master~Iaae93bf76e48903a316531a837ea01a7b062d4fa,https://review.opendev.org/187004,Refactor extract function load_auth_method,Refactor extract function load_auth_method  A load_auth_method function is extracted from load_auth_methods so that it's easier to modify and unit test.  bp stevedore  Change-Id: Iaae93bf76e48903a316531a837ea01a7b062d4fa,quality,,,,,,
openstack%2Fkeystone~master~Iaae93bf76e48903a316531a837ea01a7b062d4fa,https://review.opendev.org/187004,Refactor extract function load_auth_method,Refactor extract function load_auth_method  A load_auth_method function is extracted from load_auth_methods so that it's easier to modify and unit test.  bp stevedore  Change-Id: Iaae93bf76e48903a316531a837ea01a7b062d4fa,refactoring,,,,,,
openstack%2Fanchor~master~I4e536f022ed4786e9d35311450b464d2b99b0f05,https://review.opendev.org/188279,Refactor the alternative name iteration code,Refactor the alternative name iteration code  Put the altname iteration in a separate function. This will be useful for the future validators. Also provides a better exception messages.  Change-Id: I4e536f022ed4786e9d35311450b464d2b99b0f05,refactoring,,,,,,
openstack%2Fanchor~master~I4e536f022ed4786e9d35311450b464d2b99b0f05,https://review.opendev.org/188279,Refactor the alternative name iteration code,Refactor the alternative name iteration code  Put the altname iteration in a separate function. This will be useful for the future validators. Also provides a better exception messages.  Change-Id: I4e536f022ed4786e9d35311450b464d2b99b0f05,objective,,,,,,
openstack%2Ftaskflow~master~I18b97514e230451ef804a878a0edcea4d0b2ad20,https://review.opendev.org/188217,Refactor machine builder + runner into single unit,"Refactor machine builder + runner into single unit  There is really no need to seperate off the runner into a unit that builds a state-machine and then provides a tiny utility function, both of these can just be in the same class and code so that it is easier to understand/read.  Change-Id: I18b97514e230451ef804a878a0edcea4d0b2ad20",quality,,,,,,
openstack%2Ftaskflow~master~I18b97514e230451ef804a878a0edcea4d0b2ad20,https://review.opendev.org/188217,Refactor machine builder + runner into single unit,"Refactor machine builder + runner into single unit  There is really no need to seperate off the runner into a unit that builds a state-machine and then provides a tiny utility function, both of these can just be in the same class and code so that it is easier to understand/read.  Change-Id: I18b97514e230451ef804a878a0edcea4d0b2ad20",objective,,,,,,
openstack%2Fcinder~master~Iaf3979e5cccc150d09ca00daa3d9c3471f9795a0,https://review.opendev.org/182136,Refactor PureISCSIDriver into base and iSCSI classes.,"Refactor PureISCSIDriver into base and iSCSI classes.  This adds in a new class called PureBaseVolumeDriver that contains all of the generic shared methods that utilize the management REST API.  The PureISCSIDriver now inherits from the base driver and implements the functionality required for iSCSI hosts/initiators.  As part of this we���ve cleaned up some of the logging where it would previously have hard coded the drivers class name in it, and moved some static non-class helper methods into the base class.  These changes will ease future work to add additional drivers or split them into separate files.  Implements: blueprint pure-base-driver Change-Id: Iaf3979e5cccc150d09ca00daa3d9c3471f9795a0",objective,,,,,,
openstack%2Fcinder~master~Iaf3979e5cccc150d09ca00daa3d9c3471f9795a0,https://review.opendev.org/182136,Refactor PureISCSIDriver into base and iSCSI classes.,"Refactor PureISCSIDriver into base and iSCSI classes.  This adds in a new class called PureBaseVolumeDriver that contains all of the generic shared methods that utilize the management REST API.  The PureISCSIDriver now inherits from the base driver and implements the functionality required for iSCSI hosts/initiators.  As part of this we���ve cleaned up some of the logging where it would previously have hard coded the drivers class name in it, and moved some static non-class helper methods into the base class.  These changes will ease future work to add additional drivers or split them into separate files.  Implements: blueprint pure-base-driver Change-Id: Iaf3979e5cccc150d09ca00daa3d9c3471f9795a0",quality,,,,,,
openstack%2Fcinder~master~Iaf3979e5cccc150d09ca00daa3d9c3471f9795a0,https://review.opendev.org/182136,Refactor PureISCSIDriver into base and iSCSI classes.,"Refactor PureISCSIDriver into base and iSCSI classes.  This adds in a new class called PureBaseVolumeDriver that contains all of the generic shared methods that utilize the management REST API.  The PureISCSIDriver now inherits from the base driver and implements the functionality required for iSCSI hosts/initiators.  As part of this we���ve cleaned up some of the logging where it would previously have hard coded the drivers class name in it, and moved some static non-class helper methods into the base class.  These changes will ease future work to add additional drivers or split them into separate files.  Implements: blueprint pure-base-driver Change-Id: Iaf3979e5cccc150d09ca00daa3d9c3471f9795a0",objective,,,,,,
openstack%2Fmanila~master~I4fa6434b397becccab75ceb1f181394a278b249a,https://review.opendev.org/176637,Huawei manila driver code refactoring,"Huawei manila driver code refactoring  The Huawei manila driver code should be restructured. Instead of using a lose interface definition of share drivers use the ABC python library to build abstract classes that enforces the driver to implement the needed functionality.  The huawei_helper.py is to long, the code structure should be adjustmented.  Partially implements: blueprint huawei-manila-driver-refactor  Change-Id: I4fa6434b397becccab75ceb1f181394a278b249a",quality,,,,,,
openstack%2Fmanila~master~I4fa6434b397becccab75ceb1f181394a278b249a,https://review.opendev.org/176637,Huawei manila driver code refactoring,"Huawei manila driver code refactoring  The Huawei manila driver code should be restructured. Instead of using a lose interface definition of share drivers use the ABC python library to build abstract classes that enforces the driver to implement the needed functionality.  The huawei_helper.py is to long, the code structure should be adjustmented.  Partially implements: blueprint huawei-manila-driver-refactor  Change-Id: I4fa6434b397becccab75ceb1f181394a278b249a",objective,,,,,,
openstack%2Ftaskflow~master~I496bd6844072f57624de31fc7ddb0362f163cc53,https://review.opendev.org/179491,Small refactoring of 'merge_uri' utility function,Small refactoring of 'merge_uri' utility function  Change-Id: I496bd6844072f57624de31fc7ddb0362f163cc53,refactoring,,,,,,
openstack%2Fpython-heatclient~master~I6d349e1e2056f6a6ad5b683d8d40072b61dbf35c,https://review.opendev.org/178756,Refactor common event code into event_utils module,"Refactor common event code into event_utils module  The recently added event-mangling code for event-list --nested-depth will also be needed for hook-poll functionality, so refactor to move the code and tests into seperate files.  Change-Id: I6d349e1e2056f6a6ad5b683d8d40072b61dbf35c",refactoring,,,,,,
openstack%2Fpython-heatclient~master~I6d349e1e2056f6a6ad5b683d8d40072b61dbf35c,https://review.opendev.org/178756,Refactor common event code into event_utils module,"Refactor common event code into event_utils module  The recently added event-mangling code for event-list --nested-depth will also be needed for hook-poll functionality, so refactor to move the code and tests into seperate files.  Change-Id: I6d349e1e2056f6a6ad5b683d8d40072b61dbf35c",objective,,,,,,
openstack%2Fkeystone~master~I5e60d1771c05ab53f31fcce2c0e6c4ab36dcde62,https://review.opendev.org/172647,Refactor _create_attribute_statement IdP method,Refactor _create_attribute_statement IdP method  Create an inner function to build the attributes so we avoid to repeat the same commands for each attribute.  Change-Id: I5e60d1771c05ab53f31fcce2c0e6c4ab36dcde62,quality,,,,,,
openstack%2Fkeystone~master~I5e60d1771c05ab53f31fcce2c0e6c4ab36dcde62,https://review.opendev.org/172647,Refactor _create_attribute_statement IdP method,Refactor _create_attribute_statement IdP method  Create an inner function to build the attributes so we avoid to repeat the same commands for each attribute.  Change-Id: I5e60d1771c05ab53f31fcce2c0e6c4ab36dcde62,objective,,,,,,
openstack%2Fkeystone~master~Ie1a58335141481e2f2e7680e75195060b5c888f8,https://review.opendev.org/166628,Refactor common function for loading drivers,Refactor common function for loading drivers  A common function is provided for loading drivers so that the method of loading drivers can be easily changed.  Change-Id: Ie1a58335141481e2f2e7680e75195060b5c888f8,refactoring,,,,,,
openstack%2Fbarbican~master~Ibeeecf75b2974db244fe0878926ec8dda7986b3a,https://review.opendev.org/174722,Refactor RSA Functional Smoke Tests,Refactor RSA Functional Smoke Tests  General clean up and removal of duplicate code by using class variables and adding helper functions.  Change-Id: Ibeeecf75b2974db244fe0878926ec8dda7986b3a,quality,,,,,,
openstack%2Fbarbican~master~Ibeeecf75b2974db244fe0878926ec8dda7986b3a,https://review.opendev.org/174722,Refactor RSA Functional Smoke Tests,Refactor RSA Functional Smoke Tests  General clean up and removal of duplicate code by using class variables and adding helper functions.  Change-Id: Ibeeecf75b2974db244fe0878926ec8dda7986b3a,testing,,,,,,
openstack%2Fkeystone~master~I524b03e673b61dbd436abeb9b335c4a62d163771,https://review.opendev.org/164362,Refactor sql filter code for clarity,"Refactor sql filter code for clarity  The sql filter code was not clear.   - The ""hint"" parameter was passed into functions that don't use it,    so stop passing this parameter.  - The parameter docstrings should specify the type normally  - It should be clear that the cumulative_filter_dict parameter is    mutated, so don't return it.  Change-Id: I524b03e673b61dbd436abeb9b335c4a62d163771",quality,,,,,,
openstack%2Fkeystone~master~I524b03e673b61dbd436abeb9b335c4a62d163771,https://review.opendev.org/164362,Refactor sql filter code for clarity,"Refactor sql filter code for clarity  The sql filter code was not clear.   - The ""hint"" parameter was passed into functions that don't use it,    so stop passing this parameter.  - The parameter docstrings should specify the type normally  - It should be clear that the cumulative_filter_dict parameter is    mutated, so don't return it.  Change-Id: I524b03e673b61dbd436abeb9b335c4a62d163771",objective,,,,,,
openstack%2Ffuel-library~master~I0c48d974f915e1a3c848beddd9c8421ce00180b6,https://review.opendev.org/174284,refactor how provider starts child process,refactor how provider starts child process  in very rare cases processes created by puppet return before waiting for the child process to finish. this leads to the issue when pacemaker provider starts working with shadow xml copies before they are even created.  this fix refactors how provider starts child process using system function instead of fork&exec pair  testing showed that the issue goes away after this leaving all the other functions untouched  Change-Id: I0c48d974f915e1a3c848beddd9c8421ce00180b6 Closes-bug: #1444915,quality,,,,,,
openstack%2Ffuel-library~master~I0c48d974f915e1a3c848beddd9c8421ce00180b6,https://review.opendev.org/174284,refactor how provider starts child process,refactor how provider starts child process  in very rare cases processes created by puppet return before waiting for the child process to finish. this leads to the issue when pacemaker provider starts working with shadow xml copies before they are even created.  this fix refactors how provider starts child process using system function instead of fork&exec pair  testing showed that the issue goes away after this leaving all the other functions untouched  Change-Id: I0c48d974f915e1a3c848beddd9c8421ce00180b6 Closes-bug: #1444915,objective,,,,,,
openstack%2Fcue~master~Ic3792919bc8c844b196ac16341c1c2c94ee252cb,https://review.opendev.org/173509,Refactor tests,Refactor tests.  - Adding 'functional' directory to store all functional tests - Adding 'unit' directory to store unit tests - Moving fixtures to the functional directory  Change-Id: Ic3792919bc8c844b196ac16341c1c2c94ee252cb,objective,,,,,,
openstack%2Fcue~master~Ic3792919bc8c844b196ac16341c1c2c94ee252cb,https://review.opendev.org/173509,Refactor tests,Refactor tests.  - Adding 'functional' directory to store all functional tests - Adding 'unit' directory to store unit tests - Moving fixtures to the functional directory  Change-Id: Ic3792919bc8c844b196ac16341c1c2c94ee252cb,testing,,,,,,
openstack%2Fshade~master~I0f10d8f7f1c6847d6122b7631306db292eaa8b8f,https://review.opendev.org/171456,Refactor caching to allow per-method invalidate,"Refactor caching to allow per-method invalidate  Previously dogpile caching was hidden in private functions, but this is not how dogpile intends for the methods to be called.  Change-Id: I0f10d8f7f1c6847d6122b7631306db292eaa8b8f",quality,,,,,,
openstack%2Fgrenade~master~I1a2d1a1fed7858c4f3b51a19be2d12cc2d260a24,https://review.opendev.org/170885,refactor to remove functions-common,"refactor to remove functions-common  This refactor's the grenade code to remove the copy/pasted functions-common from devstack and instead use the functions from TARGET_DEVSTACK. In order to accomplish this we need to refactor when the devstack trees are pulled, so that we always pull both the base and target devstack trees *extremely* early.  We also need to include a small number of functions (mostly related to git) in grenade to be able to bootstrap these trees. This is done in the inc/bootstrap tree.  There are some slightly unrelated function moves into inc/upgrade to consolidate all the upgrade functions which were scattered through the codebase for clarity. inc/* will be the contract library interfaces out of grenade (mirroring devstack).  To do this grenaderc has to be split between variables which can be set without devstack functions, and variables we compute later. These later variables will be moved into project specific directories based on the plugin plan.  Change-Id: I1a2d1a1fed7858c4f3b51a19be2d12cc2d260a24",quality,,,,,,
openstack%2Fgrenade~master~I1a2d1a1fed7858c4f3b51a19be2d12cc2d260a24,https://review.opendev.org/170885,refactor to remove functions-common,"refactor to remove functions-common  This refactor's the grenade code to remove the copy/pasted functions-common from devstack and instead use the functions from TARGET_DEVSTACK. In order to accomplish this we need to refactor when the devstack trees are pulled, so that we always pull both the base and target devstack trees *extremely* early.  We also need to include a small number of functions (mostly related to git) in grenade to be able to bootstrap these trees. This is done in the inc/bootstrap tree.  There are some slightly unrelated function moves into inc/upgrade to consolidate all the upgrade functions which were scattered through the codebase for clarity. inc/* will be the contract library interfaces out of grenade (mirroring devstack).  To do this grenaderc has to be split between variables which can be set without devstack functions, and variables we compute later. These later variables will be moved into project specific directories based on the plugin plan.  Change-Id: I1a2d1a1fed7858c4f3b51a19be2d12cc2d260a24",objective,,,,,,
openstack%2Ffuel-web~master~I89509d5fcd224276c3cd6c95353cea0ebca2162e,https://review.opendev.org/169800,Refactor nailgun.statistics package,Refactor nailgun.statistics package  Two subpackages (for statistic collecting of fuel infrastructure using and collecting of oswl info) created in order to separate code dedicated to logically different functions. Utility (universal utility functions and custom errors description) infrastructure left on statistics package level with possibility of reusing in subpackages' code. Tests refactored considering current separation.  Change-Id: I89509d5fcd224276c3cd6c95353cea0ebca2162e Closes-Bug: #1439268,quality,,,,,,
openstack%2Ffuel-web~master~I89509d5fcd224276c3cd6c95353cea0ebca2162e,https://review.opendev.org/169800,Refactor nailgun.statistics package,Refactor nailgun.statistics package  Two subpackages (for statistic collecting of fuel infrastructure using and collecting of oswl info) created in order to separate code dedicated to logically different functions. Utility (universal utility functions and custom errors description) infrastructure left on statistics package level with possibility of reusing in subpackages' code. Tests refactored considering current separation.  Change-Id: I89509d5fcd224276c3cd6c95353cea0ebca2162e Closes-Bug: #1439268,testing,,,,,,
openstack%2Ffuel-web~master~I89509d5fcd224276c3cd6c95353cea0ebca2162e,https://review.opendev.org/169800,Refactor nailgun.statistics package,Refactor nailgun.statistics package  Two subpackages (for statistic collecting of fuel infrastructure using and collecting of oswl info) created in order to separate code dedicated to logically different functions. Utility (universal utility functions and custom errors description) infrastructure left on statistics package level with possibility of reusing in subpackages' code. Tests refactored considering current separation.  Change-Id: I89509d5fcd224276c3cd6c95353cea0ebca2162e Closes-Bug: #1439268,objective,,,,,,
openstack%2Ffuel-library~master~Ic940ee20f49ed8c741f5bda452f1007a914a0707,https://review.opendev.org/170443,Refactor direct_networks to not call Hiera directly,Refactor direct_networks to not call Hiera directly  This function simply forms a list of networks according to our network_scheme. We can pass $network_scheme['endpoints'] hash as a parameter to this function instead of calling Hiera directly from it.  Change-Id: Ic940ee20f49ed8c741f5bda452f1007a914a0707 Closes-bug: #1440028,quality,,,,,,
openstack%2Ffuel-library~master~Ic940ee20f49ed8c741f5bda452f1007a914a0707,https://review.opendev.org/170443,Refactor direct_networks to not call Hiera directly,Refactor direct_networks to not call Hiera directly  This function simply forms a list of networks according to our network_scheme. We can pass $network_scheme['endpoints'] hash as a parameter to this function instead of calling Hiera directly from it.  Change-Id: Ic940ee20f49ed8c741f5bda452f1007a914a0707 Closes-bug: #1440028,objective,,,,,,
x%2Fsahara-ci-config~master~Id6b6c9dd5f3f1bf500e0b2172f8cfc82a4fc9a62,https://review.opendev.org/162102,Global refactoring of CI scripts,"Global refactoring of CI scripts  Global refactoring is include: * drop Icehouse support; * improvements nodepool's slave installing script; * remove deprecated jobs; * create config template for old integration tests; * create config files for PYPI; * improve and refactor function.sh, execution tests scripts;  Change-Id: Id6b6c9dd5f3f1bf500e0b2172f8cfc82a4fc9a62",quality,,,,,,
x%2Fsahara-ci-config~master~Id6b6c9dd5f3f1bf500e0b2172f8cfc82a4fc9a62,https://review.opendev.org/162102,Global refactoring of CI scripts,"Global refactoring of CI scripts  Global refactoring is include: * drop Icehouse support; * improvements nodepool's slave installing script; * remove deprecated jobs; * create config template for old integration tests; * create config files for PYPI; * improve and refactor function.sh, execution tests scripts;  Change-Id: Id6b6c9dd5f3f1bf500e0b2172f8cfc82a4fc9a62",testing,,,,,,
openstack%2Fneutron~master~I4107f1a702d059337e7b2d701a5d0372ee2cfe11,https://review.opendev.org/152512,Refactor _remove_unused_security_group_info,"Refactor _remove_unused_security_group_info  _remove_unused_security_group_info is refactored into smaller functions, to make this block easier to understand.  Partially implements blueprint refactor-iptables-firewall-driver  Change-Id: I4107f1a702d059337e7b2d701a5d0372ee2cfe11",quality,,,,,,
openstack%2Fneutron~master~I4107f1a702d059337e7b2d701a5d0372ee2cfe11,https://review.opendev.org/152512,Refactor _remove_unused_security_group_info,"Refactor _remove_unused_security_group_info  _remove_unused_security_group_info is refactored into smaller functions, to make this block easier to understand.  Partially implements blueprint refactor-iptables-firewall-driver  Change-Id: I4107f1a702d059337e7b2d701a5d0372ee2cfe11",objective,,,,,,
openstack%2Fcinder~master~Ifbd1462ceb9b98bd8a6d72e5725399474eedf60e,https://review.opendev.org/149725,Refactor Swift backup driver and introduce chunking driver,"Refactor Swift backup driver and introduce chunking driver.  Abstract out a ""chunked"" backup driver class between the top abstract backup driver class and the Swift backup driver class which implements common functionality for backup drivers that store volume data in multiple ""chunks"" in a backup repository when the size of the backed up cinder volume exceeds the size of a backup repository ""chunk.""  The Swift driver itself is reworked to extend the chunked backup driver and implement abstract methods defined in the chunked backup driver.  It is expected that posix filesystem and NFS backup drivers will also extend the chunked backup driver.  Change-Id: Ifbd1462ceb9b98bd8a6d72e5725399474eedf60e",quality,,,,,,
openstack%2Fcinder~master~Ifbd1462ceb9b98bd8a6d72e5725399474eedf60e,https://review.opendev.org/149725,Refactor Swift backup driver and introduce chunking driver,"Refactor Swift backup driver and introduce chunking driver.  Abstract out a ""chunked"" backup driver class between the top abstract backup driver class and the Swift backup driver class which implements common functionality for backup drivers that store volume data in multiple ""chunks"" in a backup repository when the size of the backed up cinder volume exceeds the size of a backup repository ""chunk.""  The Swift driver itself is reworked to extend the chunked backup driver and implement abstract methods defined in the chunked backup driver.  It is expected that posix filesystem and NFS backup drivers will also extend the chunked backup driver.  Change-Id: Ifbd1462ceb9b98bd8a6d72e5725399474eedf60e",objective,,,,,,
openstack%2Fcinder~master~Ifbd1462ceb9b98bd8a6d72e5725399474eedf60e,https://review.opendev.org/149725,Refactor Swift backup driver and introduce chunking driver,"Refactor Swift backup driver and introduce chunking driver.  Abstract out a ""chunked"" backup driver class between the top abstract backup driver class and the Swift backup driver class which implements common functionality for backup drivers that store volume data in multiple ""chunks"" in a backup repository when the size of the backed up cinder volume exceeds the size of a backup repository ""chunk.""  The Swift driver itself is reworked to extend the chunked backup driver and implement abstract methods defined in the chunked backup driver.  It is expected that posix filesystem and NFS backup drivers will also extend the chunked backup driver.  Change-Id: Ifbd1462ceb9b98bd8a6d72e5725399474eedf60e",objective,,,,,,
openstack%2Ffreezer~master~Iec1acfe62575ba062f9b56171784d1d74dc86556,https://review.opendev.org/162439,Main loop refactor,"Main loop refactor  The code relative to the various actions is moved into their respective job objects. A factory function creates the correct type of job object according to the action requested. This replaces the long ""if"" chain in the main loop  The main loop calls the Job object's execute() method.  Change-Id: Iec1acfe62575ba062f9b56171784d1d74dc86556 Implements: blueprint freezer-main-refactor",quality,,,,,,
openstack%2Ffreezer~master~Iec1acfe62575ba062f9b56171784d1d74dc86556,https://review.opendev.org/162439,Main loop refactor,"Main loop refactor  The code relative to the various actions is moved into their respective job objects. A factory function creates the correct type of job object according to the action requested. This replaces the long ""if"" chain in the main loop  The main loop calls the Job object's execute() method.  Change-Id: Iec1acfe62575ba062f9b56171784d1d74dc86556 Implements: blueprint freezer-main-refactor",objective,,,,,,
openstack%2Fbarbican~master~I667ff5ede667cfe5bd62f924aac6bd98936fef6f,https://review.opendev.org/159457,Refactor Secrets resource to use repository factories,"Refactor Secrets resource to use repository factories  Instead of passing around the repositories in the constructor of the controller classes, now a factory function is called.  The Repository class was left as is, as the objects that use it will be refactored in subsequent commits.  Change-Id: I667ff5ede667cfe5bd62f924aac6bd98936fef6f",quality,,,,,,
openstack%2Fbarbican~master~I667ff5ede667cfe5bd62f924aac6bd98936fef6f,https://review.opendev.org/159457,Refactor Secrets resource to use repository factories,"Refactor Secrets resource to use repository factories  Instead of passing around the repositories in the constructor of the controller classes, now a factory function is called.  The Repository class was left as is, as the objects that use it will be refactored in subsequent commits.  Change-Id: I667ff5ede667cfe5bd62f924aac6bd98936fef6f",objective,,,,,,
openstack%2Fbarbican~master~Ibf468f09e6837cb8658cfcd164f4f766997c132a,https://review.opendev.org/158802,Refactor Orders resource to use repository factories,"Refactor Orders resource to use repository factories  Instead of passing around the repositories in the constructor of the controller classes, now a factory function is called.  Change-Id: Ibf468f09e6837cb8658cfcd164f4f766997c132a",quality,,,,,,
openstack%2Fbarbican~master~Ibf468f09e6837cb8658cfcd164f4f766997c132a,https://review.opendev.org/158802,Refactor Orders resource to use repository factories,"Refactor Orders resource to use repository factories  Instead of passing around the repositories in the constructor of the controller classes, now a factory function is called.  Change-Id: Ibf468f09e6837cb8658cfcd164f4f766997c132a",objective,,,,,,
openstack%2Fnetworking-powervm~master~Icc188bfdc88b6ac524a18688a30aefa336fff86a,https://review.opendev.org/158402,Refactoring for consistency,Refactoring for consistency  This change set provides some refactorings that make the code easier to read and maintain.  The key changes are:  - Support fixtures in a similar way that nova_powervm does.  This    reduces the amount of mock up code required for testing.  - Rename the powervm_sea_agent to sea_agent.  The PowerVM is already    part of the namespace (due to the folder it is in).  This was    creating too long of a name for use.  - Change the connection utility to be PVMUtils.  Simpler name more in    line with how the function has evolved.  Change-Id: Icc188bfdc88b6ac524a18688a30aefa336fff86a,quality,,,,,,
openstack%2Fnetworking-powervm~master~Icc188bfdc88b6ac524a18688a30aefa336fff86a,https://review.opendev.org/158402,Refactoring for consistency,Refactoring for consistency  This change set provides some refactorings that make the code easier to read and maintain.  The key changes are:  - Support fixtures in a similar way that nova_powervm does.  This    reduces the amount of mock up code required for testing.  - Rename the powervm_sea_agent to sea_agent.  The PowerVM is already    part of the namespace (due to the folder it is in).  This was    creating too long of a name for use.  - Change the connection utility to be PVMUtils.  Simpler name more in    line with how the function has evolved.  Change-Id: Icc188bfdc88b6ac524a18688a30aefa336fff86a,objective,,,,,,
openstack%2Fanchor~master~Ic74528ee0ff6ad595379a24044eb740b41d6a079,https://review.opendev.org/157966,Cleanup and refactor csr_validate function from certificate_ops,Cleanup and refactor csr_validate function from certificate_ops  Change-Id: Ic74528ee0ff6ad595379a24044eb740b41d6a079,refactoring,,,,,,
openstack%2Fbarbican~master~I4e223b106f7072ce95fd075d91dc088d90ec1b71,https://review.opendev.org/156325,Refactor _lookup for secrets,"Refactor _lookup for secrets  The way the _lookup function in the controllers is documented (in the pecan documentation), the actual lookup of the entity is actually done in that function. So this CR changes that for the ""secrets"" entity. Which actually reduces code repetition throughout that controller.  Change-Id: I4e223b106f7072ce95fd075d91dc088d90ec1b71",quality,,,,,,
openstack%2Fbarbican~master~I4e223b106f7072ce95fd075d91dc088d90ec1b71,https://review.opendev.org/156325,Refactor _lookup for secrets,"Refactor _lookup for secrets  The way the _lookup function in the controllers is documented (in the pecan documentation), the actual lookup of the entity is actually done in that function. So this CR changes that for the ""secrets"" entity. Which actually reduces code repetition throughout that controller.  Change-Id: I4e223b106f7072ce95fd075d91dc088d90ec1b71",objective,,,,,,
openstack%2Fswift~master~Id56c497d58083f5fd55f5283cdd346840df039d3,https://review.opendev.org/154723,refactor probe tests,refactor probe tests  * refactor probe tests to use probe.common.ProbeTest * move reset_environment functionality to ProbeTest.setUp() * choose rings and policies that meet the criteria - raise SkipTest if nothing matches  Change-Id: Id56c497d58083f5fd55f5283cdd346840df039d3,testing,,,,,,
openstack%2Fswift~master~Id56c497d58083f5fd55f5283cdd346840df039d3,https://review.opendev.org/154723,refactor probe tests,refactor probe tests  * refactor probe tests to use probe.common.ProbeTest * move reset_environment functionality to ProbeTest.setUp() * choose rings and policies that meet the criteria - raise SkipTest if nothing matches  Change-Id: Id56c497d58083f5fd55f5283cdd346840df039d3,quality,,,,,,
openstack%2Fswift~master~Id56c497d58083f5fd55f5283cdd346840df039d3,https://review.opendev.org/154723,refactor probe tests,refactor probe tests  * refactor probe tests to use probe.common.ProbeTest * move reset_environment functionality to ProbeTest.setUp() * choose rings and policies that meet the criteria - raise SkipTest if nothing matches  Change-Id: Id56c497d58083f5fd55f5283cdd346840df039d3,objective,,,,,,
openstack%2Fnetworking-powervm~master~I68a910a9f3b58cc731a2062fa7ded640c4326bfb,https://review.opendev.org/155022,Update baseline to resolve refactoring items,"Update baseline to resolve refactoring items  Over the past couple of weeks, changes from neutron and pypowervm have affected neutron_powervm such that it was no longer sending messages to the agent (and when fixed, crashed the agent).  This change set fixes the following:  - Sends the messages properly to the agent  - Changes the cadence of checks (slightly slower)  - Works off of MTMS for the host name  - Updates the MTMS format for new pypowervm functions  Change-Id: I68a910a9f3b58cc731a2062fa7ded640c4326bfb",objective,,,,,,
openstack%2Fnetworking-powervm~master~I68a910a9f3b58cc731a2062fa7ded640c4326bfb,https://review.opendev.org/155022,Update baseline to resolve refactoring items,"Update baseline to resolve refactoring items  Over the past couple of weeks, changes from neutron and pypowervm have affected neutron_powervm such that it was no longer sending messages to the agent (and when fixed, crashed the agent).  This change set fixes the following:  - Sends the messages properly to the agent  - Changes the cadence of checks (slightly slower)  - Works off of MTMS for the host name  - Updates the MTMS format for new pypowervm functions  Change-Id: I68a910a9f3b58cc731a2062fa7ded640c4326bfb",objective,,,,,,
openstack%2Fnetworking-powervm~master~I68a910a9f3b58cc731a2062fa7ded640c4326bfb,https://review.opendev.org/155022,Update baseline to resolve refactoring items,"Update baseline to resolve refactoring items  Over the past couple of weeks, changes from neutron and pypowervm have affected neutron_powervm such that it was no longer sending messages to the agent (and when fixed, crashed the agent).  This change set fixes the following:  - Sends the messages properly to the agent  - Changes the cadence of checks (slightly slower)  - Works off of MTMS for the host name  - Updates the MTMS format for new pypowervm functions  Change-Id: I68a910a9f3b58cc731a2062fa7ded640c4326bfb",objective,,,,,,
x%2Fcloudbase-init~master~I8f73e7aaafee74e8023bf7c5e13579982b5f9498,https://review.opendev.org/144878,"Refactor cloudconfig plugin, in order to simplify enhancements","Refactor cloudconfig plugin, in order to simplify enhancements  The patch includes the following changes:     * move the code related to cloudconfig functionalities in a      visitor class. The meaning of this class is plain and simple      and it doesn't clutter the base plugin.    * add a from_yaml classmethod to the newly added visitor plugin.     In this way, we could add support for other formats as well,     the only thing required being adding a new factory method for     these formats.    * make some public methods private and simplify the check for     the correctness of the content.    * the tests aren't relying too much on mock, they are written     with feature-testing in mind.  Change-Id: I8f73e7aaafee74e8023bf7c5e13579982b5f9498",testing,,,,,,
x%2Fcloudbase-init~master~I8f73e7aaafee74e8023bf7c5e13579982b5f9498,https://review.opendev.org/144878,"Refactor cloudconfig plugin, in order to simplify enhancements","Refactor cloudconfig plugin, in order to simplify enhancements  The patch includes the following changes:     * move the code related to cloudconfig functionalities in a      visitor class. The meaning of this class is plain and simple      and it doesn't clutter the base plugin.    * add a from_yaml classmethod to the newly added visitor plugin.     In this way, we could add support for other formats as well,     the only thing required being adding a new factory method for     these formats.    * make some public methods private and simplify the check for     the correctness of the content.    * the tests aren't relying too much on mock, they are written     with feature-testing in mind.  Change-Id: I8f73e7aaafee74e8023bf7c5e13579982b5f9498",quality,,,,,,
x%2Fcloudbase-init~master~I8f73e7aaafee74e8023bf7c5e13579982b5f9498,https://review.opendev.org/144878,"Refactor cloudconfig plugin, in order to simplify enhancements","Refactor cloudconfig plugin, in order to simplify enhancements  The patch includes the following changes:     * move the code related to cloudconfig functionalities in a      visitor class. The meaning of this class is plain and simple      and it doesn't clutter the base plugin.    * add a from_yaml classmethod to the newly added visitor plugin.     In this way, we could add support for other formats as well,     the only thing required being adding a new factory method for     these formats.    * make some public methods private and simplify the check for     the correctness of the content.    * the tests aren't relying too much on mock, they are written     with feature-testing in mind.  Change-Id: I8f73e7aaafee74e8023bf7c5e13579982b5f9498",objective,,,,,,
openstack%2Fdevstack-gate~master~Id88ee465328fbcd6f1ed22ef6d1e59db9d2baec4,https://review.opendev.org/153677,Refactor processing of testr artifacts for reuse,"Refactor processing of testr artifacts for reuse  Previously, only testr artifacts for tempest were being processed on cleanup.  Functional jobs for neutron and neutron-vnpaas have adding their own artifact processing into hook scripts to work around this limitation, but this duplication of effort is costly.  This change refactors the existing artifact processing so it can be configurably targeted at any project's testr artifacts.  The DEVSTACK_GATE_TESTR_ARTIFACT_TARGET environment variable can be set to the repo path name (e.g. 'neutron') to ensure that artifacts are correctly processed for that project.  Change-Id: Id88ee465328fbcd6f1ed22ef6d1e59db9d2baec4",quality,,,,,,
openstack%2Fdevstack-gate~master~Id88ee465328fbcd6f1ed22ef6d1e59db9d2baec4,https://review.opendev.org/153677,Refactor processing of testr artifacts for reuse,"Refactor processing of testr artifacts for reuse  Previously, only testr artifacts for tempest were being processed on cleanup.  Functional jobs for neutron and neutron-vnpaas have adding their own artifact processing into hook scripts to work around this limitation, but this duplication of effort is costly.  This change refactors the existing artifact processing so it can be configurably targeted at any project's testr artifacts.  The DEVSTACK_GATE_TESTR_ARTIFACT_TARGET environment variable can be set to the repo path name (e.g. 'neutron') to ensure that artifacts are correctly processed for that project.  Change-Id: Id88ee465328fbcd6f1ed22ef6d1e59db9d2baec4",objective,,,,,,
openstack%2Fironic~master~I0539e5fa3c8810f9cd8f2b8560e17b3eb2eb64aa,https://review.opendev.org/152506,Refactor ilo.deploy._get_single_nic_with_vif_port_id(),Refactor ilo.deploy.get_single_nic_with_vif_port_id()  Move ilo.deploy._get_single_nic_with_vif_port_id() to deploy_utils.get_single_nic_with_vif_port_id() in order to share between iLO driver and iRMC driver as a common function.  Change-Id: I0539e5fa3c8810f9cd8f2b8560e17b3eb2eb64aa blueprint: irmc-virtualmedia-deploy-driver,refactoring,,,,,,
openstack%2Fkeystone~master~I1c4e59e253b1816ccfb4d5bf1d2aa40b49221b4f,https://review.opendev.org/62275,Refactor keystone-all and http/keystone,Refactor keystone-all  There was a lot of code in keystone-all. Functions in keystone-all can't be called from the tests.  This change moves most of the code from keystone-all into a new keystone.eventlet_server module.  Change-Id: I1c4e59e253b1816ccfb4d5bf1d2aa40b49221b4f,quality,,,,,,
openstack%2Fkeystone~master~I1c4e59e253b1816ccfb4d5bf1d2aa40b49221b4f,https://review.opendev.org/62275,Refactor keystone-all and http/keystone,Refactor keystone-all  There was a lot of code in keystone-all. Functions in keystone-all can't be called from the tests.  This change moves most of the code from keystone-all into a new keystone.eventlet_server module.  Change-Id: I1c4e59e253b1816ccfb4d5bf1d2aa40b49221b4f,testing,,,,,,
openstack%2Fkeystone~master~I1c4e59e253b1816ccfb4d5bf1d2aa40b49221b4f,https://review.opendev.org/62275,Refactor keystone-all and http/keystone,Refactor keystone-all  There was a lot of code in keystone-all. Functions in keystone-all can't be called from the tests.  This change moves most of the code from keystone-all into a new keystone.eventlet_server module.  Change-Id: I1c4e59e253b1816ccfb4d5bf1d2aa40b49221b4f,objective,,,,,,
x%2Ftuskar-ui~master~I980fc976524cbf0325326104e396cca6eaffc253,https://review.opendev.org/149671,Refactor metering utility and view functions,"Refactor metering utility and view functions  Some of these function were copied from Horizon and then modified. After pushing those modifications back to Horizon, we should be able to call the Horizon functions and delete the copied code from Tuskar-UI.  Change-Id: I980fc976524cbf0325326104e396cca6eaffc253",quality,,,,,,
x%2Ftuskar-ui~master~I980fc976524cbf0325326104e396cca6eaffc253,https://review.opendev.org/149671,Refactor metering utility and view functions,"Refactor metering utility and view functions  Some of these function were copied from Horizon and then modified. After pushing those modifications back to Horizon, we should be able to call the Horizon functions and delete the copied code from Tuskar-UI.  Change-Id: I980fc976524cbf0325326104e396cca6eaffc253",objective,,,,,,
openstack%2Fneutron~master~Id9d10a6114285bfb11d412de64e85bdf5bf6ef88,https://review.opendev.org/150833,Refactor _convert_sgr_to_iptables_rules in iptables_firewall,Refactor _convert_sgr_to_iptables_rules in iptables_firewall  The function is refactored to build ipset and non ipset iptables rules on separate functions.  Partially implements blueprint refactor-iptables-firewall-driver  Change-Id: Id9d10a6114285bfb11d412de64e85bdf5bf6ef88,quality,,,,,,
openstack%2Fneutron~master~Id9d10a6114285bfb11d412de64e85bdf5bf6ef88,https://review.opendev.org/150833,Refactor _convert_sgr_to_iptables_rules in iptables_firewall,Refactor _convert_sgr_to_iptables_rules in iptables_firewall  The function is refactored to build ipset and non ipset iptables rules on separate functions.  Partially implements blueprint refactor-iptables-firewall-driver  Change-Id: Id9d10a6114285bfb11d412de64e85bdf5bf6ef88,objective,,,,,,
openstack%2Fneutron~master~I4225d233e59da797e9fa1737757d039eb946cba1,https://review.opendev.org/148233,Refactor iptables rule expansion for the non ipset case,"Refactor iptables rule expansion for the non ipset case  IptablesFirewallDriver / _select_sg_rules_for_port was handling the rule expansion for the non ipset case all inside the same function.  This patch refactors the expansion out, so it will be more clear, and easier to cut out non-ipset code later in time.  Partially implements blueprint refactor-iptables-firewall-driver  Change-Id: I4225d233e59da797e9fa1737757d039eb946cba1",quality,,,,,,
openstack%2Fneutron~master~I4225d233e59da797e9fa1737757d039eb946cba1,https://review.opendev.org/148233,Refactor iptables rule expansion for the non ipset case,"Refactor iptables rule expansion for the non ipset case  IptablesFirewallDriver / _select_sg_rules_for_port was handling the rule expansion for the non ipset case all inside the same function.  This patch refactors the expansion out, so it will be more clear, and easier to cut out non-ipset code later in time.  Partially implements blueprint refactor-iptables-firewall-driver  Change-Id: I4225d233e59da797e9fa1737757d039eb946cba1",objective,,,,,,
openstack%2Fdevstack-gate~master~I84d2fd66265c8e2e77faf16ce03e92790f2f51b8,https://review.opendev.org/123578,Refactor the hook logic into a reusable function,Refactor the hook logic into a reusable function  Hook logic exists twice. Let's refactor it into a function so that it can be reused for more hooks.  Change-Id: I84d2fd66265c8e2e77faf16ce03e92790f2f51b8,quality,,,,,,
openstack%2Fhorizon~master~Ie73b350303a3e42229d87dbbfccf7ecff859cbd7,https://review.opendev.org/149665,Refactor metering utility and view functions,Refactor metering utility and view functions  Many of these functions have been copied to Tuskar-UI and then have diverged in both places. This is an attempt to consolidate these functions and eliminate any code duplication. These modifications to horizon utility and view metering functions should make it possible to delete the duplicated code from Tuskar-UI.  Change-Id: Ie73b350303a3e42229d87dbbfccf7ecff859cbd7,quality,,,,,,
openstack%2Fhorizon~master~Ie73b350303a3e42229d87dbbfccf7ecff859cbd7,https://review.opendev.org/149665,Refactor metering utility and view functions,Refactor metering utility and view functions  Many of these functions have been copied to Tuskar-UI and then have diverged in both places. This is an attempt to consolidate these functions and eliminate any code duplication. These modifications to horizon utility and view metering functions should make it possible to delete the duplicated code from Tuskar-UI.  Change-Id: Ie73b350303a3e42229d87dbbfccf7ecff859cbd7,objective,,,,,,
openstack%2Fkeystone~master~Ib0ae2c04ab8b428a8f680520d53fbeb799fae6f0,https://review.opendev.org/141352,Assignment sql backend create_grant refactoring,Assignment sql backend create_grant refactoring  Moved calculate_type function to be a class method of AssignmentType.  Change-Id: Ib0ae2c04ab8b428a8f680520d53fbeb799fae6f0,refactoring,,,,,,
opendev%2Fyaml2ical~master~Ib60597cec617ce296c4937c9bb3a086d4f61d48a,https://review.opendev.org/148524,Refactor meetings.py,Refactor meetings.py  Make better use of Meetings objects by refactoring functions applying to them as object methods.  Clean up superfluous argument value copy in cli.py as well.  Change-Id: Ib60597cec617ce296c4937c9bb3a086d4f61d48a,refactoring,,,,,,
openstack%2Fneutron~master~If71b2b9f22f036138e0fddd496ae86ed08ea2ae1,https://review.opendev.org/148093,"Added comments, and refactored _add_rule_by_security_group","Added comments, and refactored _add_rule_by_security_group  Added some comments, and extracted fixed egress rules addition to a separate function.  Partially implements blueprint refactor-iptables-firewall-driver  Change-Id: If71b2b9f22f036138e0fddd496ae86ed08ea2ae1",objective,,,,,,
openstack%2Fkeystone~master~Ida92571620c1cb3f2cdf896125865c92301b1c3b,https://review.opendev.org/144650,Refactor assignment manager/driver methods,"Refactor assignment manager/driver methods  This is the part of the more comprehensive split of assignments, which rationalizes both the backend and controllers. In order to make this change easier for reviewers, it is divided into a number of smaller patches.  Previous patches have:  - Moved role management into its own manager and drivers - Fixed incorrect doc strings for grant driver methods - Updated controllers to call the new role manager - Updated unit tests to call the new role manager  This patch refactors the assignment manager and driver methods to logically separate the project/domain functionality from that of the actual assignments in preparation for the move of projects/domains to their own backend. This patch should not cause any functional change.  Future patches will:  - Split projects and domains into their own manager/backend - Update the assignment controller to call the new manager - Update the tests to call the new manager - Split the assignment controller, giving projects/domains   their own controller  Partially implements: bp pluggable-assignments  Change-Id: Ida92571620c1cb3f2cdf896125865c92301b1c3b",quality,,,,,,
openstack%2Fkeystone~master~Ida92571620c1cb3f2cdf896125865c92301b1c3b,https://review.opendev.org/144650,Refactor assignment manager/driver methods,"Refactor assignment manager/driver methods  This is the part of the more comprehensive split of assignments, which rationalizes both the backend and controllers. In order to make this change easier for reviewers, it is divided into a number of smaller patches.  Previous patches have:  - Moved role management into its own manager and drivers - Fixed incorrect doc strings for grant driver methods - Updated controllers to call the new role manager - Updated unit tests to call the new role manager  This patch refactors the assignment manager and driver methods to logically separate the project/domain functionality from that of the actual assignments in preparation for the move of projects/domains to their own backend. This patch should not cause any functional change.  Future patches will:  - Split projects and domains into their own manager/backend - Update the assignment controller to call the new manager - Update the tests to call the new manager - Split the assignment controller, giving projects/domains   their own controller  Partially implements: bp pluggable-assignments  Change-Id: Ida92571620c1cb3f2cdf896125865c92301b1c3b",testing,,,,,,
openstack%2Fkeystone~master~Ida92571620c1cb3f2cdf896125865c92301b1c3b,https://review.opendev.org/144650,Refactor assignment manager/driver methods,"Refactor assignment manager/driver methods  This is the part of the more comprehensive split of assignments, which rationalizes both the backend and controllers. In order to make this change easier for reviewers, it is divided into a number of smaller patches.  Previous patches have:  - Moved role management into its own manager and drivers - Fixed incorrect doc strings for grant driver methods - Updated controllers to call the new role manager - Updated unit tests to call the new role manager  This patch refactors the assignment manager and driver methods to logically separate the project/domain functionality from that of the actual assignments in preparation for the move of projects/domains to their own backend. This patch should not cause any functional change.  Future patches will:  - Split projects and domains into their own manager/backend - Update the assignment controller to call the new manager - Update the tests to call the new manager - Split the assignment controller, giving projects/domains   their own controller  Partially implements: bp pluggable-assignments  Change-Id: Ida92571620c1cb3f2cdf896125865c92301b1c3b",objective,,,,,,
x%2Fcompass-core~dev%2Fexperimental~Idc4171b98dd2c975571734c4567602572ba4dcbc,https://review.opendev.org/147753,Refactor db api:,Refactor db api:  1. Increasing flexibility of function parameters. 2. Passing session as a parameter.  Change-Id: Idc4171b98dd2c975571734c4567602572ba4dcbc,integration,,,,,,
x%2Fcompass-core~dev%2Fexperimental~Idc4171b98dd2c975571734c4567602572ba4dcbc,https://review.opendev.org/147753,Refactor db api:,Refactor db api:  1. Increasing flexibility of function parameters. 2. Passing session as a parameter.  Change-Id: Idc4171b98dd2c975571734c4567602572ba4dcbc,objective,,,,,,
openstack%2Fnova~master~I1cbd0ddb1ee4830222126d1f144101541ddc3d5c,https://review.opendev.org/130521,VMware: refactor utility functions related to VMDK,VMware: refactor utility functions related to VMDK  Replace get_vmdk_path and get_vmdk_path_and_adapter_type with a new function called get_vmdk_info which returns a named tuple with all properties needed for VMDK operations.  Change-Id: I1cbd0ddb1ee4830222126d1f144101541ddc3d5c,quality,,,,,,
openstack%2Fnova~master~I1cbd0ddb1ee4830222126d1f144101541ddc3d5c,https://review.opendev.org/130521,VMware: refactor utility functions related to VMDK,VMware: refactor utility functions related to VMDK  Replace get_vmdk_path and get_vmdk_path_and_adapter_type with a new function called get_vmdk_info which returns a named tuple with all properties needed for VMDK operations.  Change-Id: I1cbd0ddb1ee4830222126d1f144101541ddc3d5c,objective,,,,,,
opendev%2Fsubunit2sql~master~Ic1d8cc38d19e1f7531e10cc750c7b3dc8fa731ca,https://review.opendev.org/141548,Refactor sql2subunit to use get_tests_run_dicts_from_run_id,"Refactor sql2subunit to use get_tests_run_dicts_from_run_id  This commit takes the sql2subunit method in write_subunit and rewrites it to use the get_tests_run_dicts_from_run_id() function. This significantly improves the performance of sql2subunit by using a single joined query to collect information, rather than running multiple queries serially in a loop.  Change-Id: Ic1d8cc38d19e1f7531e10cc750c7b3dc8fa731ca",quality,,,,,,
opendev%2Fsubunit2sql~master~Ic1d8cc38d19e1f7531e10cc750c7b3dc8fa731ca,https://review.opendev.org/141548,Refactor sql2subunit to use get_tests_run_dicts_from_run_id,"Refactor sql2subunit to use get_tests_run_dicts_from_run_id  This commit takes the sql2subunit method in write_subunit and rewrites it to use the get_tests_run_dicts_from_run_id() function. This significantly improves the performance of sql2subunit by using a single joined query to collect information, rather than running multiple queries serially in a loop.  Change-Id: Ic1d8cc38d19e1f7531e10cc750c7b3dc8fa731ca",objective,,,,,,
openstack%2Frally~master~Ib4121f442196989ce77d6e3081f4288d35c52098,https://review.opendev.org/141776,Small refactor in run function,mall refactor in run function  This patch properly print in the debug the exception that might ocurr when rally calls the cmd.cliutils.run command  Change-Id: Ib4121f442196989ce77d6e3081f4288d35c52098,quality,,,,,,
openstack%2Foslo.config~master~I2c0fd50d50081c633fb50e89eb8c6a84d948f7cc,https://review.opendev.org/136893,Refactored help string generation,Refactored help string generation  Refactored code to generate configuration help strings into its own private function. The motivation is to use the same function to generate help strings for both configuration parameters (existing functionality) and parameter groups (to be added).  Partial-Bug 1395819  Change-Id: I2c0fd50d50081c633fb50e89eb8c6a84d948f7cc,quality,,,,,,
openstack%2Foslo.config~master~I2c0fd50d50081c633fb50e89eb8c6a84d948f7cc,https://review.opendev.org/136893,Refactored help string generation,Refactored help string generation  Refactored code to generate configuration help strings into its own private function. The motivation is to use the same function to generate help strings for both configuration parameters (existing functionality) and parameter groups (to be added).  Partial-Bug 1395819  Change-Id: I2c0fd50d50081c633fb50e89eb8c6a84d948f7cc,objective,,,,,,
openstack%2Fbandit~master~I3b01fcc53de1bbfc2b76bd86b47e81b143161593,https://review.opendev.org/137049,"Refactoring ""checks_functions"" to check function definitions","Refactoring ""checks_functions"" to check function definitions  - old checks_functions functionality preserved as ""checks_calls""  Change-Id: I3b01fcc53de1bbfc2b76bd86b47e81b143161593",refactoring,,,,,,
openstack%2Fdesignate-specs~master~Icef8148b43210a4a0a89c31e2dc00eb8153b501c,https://review.opendev.org/130852,Refactor Zone import functionality,Refactor Zone import functionality  Change-Id: Icef8148b43210a4a0a89c31e2dc00eb8153b501c,refactoring,,,,,,
openstack%2Fnova~master~Iab4d63200653a4320c91dc1356091ff9d961cafd,https://review.opendev.org/128056,Minor refactor of _setup_instance_group(),Minor refactor of _setup_instance_group()  This patch is a minor refactoring of the _setup_instance_group() method in the filter scheduler.  The majority of the method was inside of a conditional.  This primarily reverses that and reduces the nesting depth used.  There should be no functional changes at all in this patch.  Change-Id: Iab4d63200653a4320c91dc1356091ff9d961cafd Related-bug: #1379451,refactoring,,,,,,
openstack%2Fnova~master~Iab4d63200653a4320c91dc1356091ff9d961cafd,https://review.opendev.org/128056,Minor refactor of _setup_instance_group(),Minor refactor of _setup_instance_group()  This patch is a minor refactoring of the _setup_instance_group() method in the filter scheduler.  The majority of the method was inside of a conditional.  This primarily reverses that and reduces the nesting depth used.  There should be no functional changes at all in this patch.  Change-Id: Iab4d63200653a4320c91dc1356091ff9d961cafd Related-bug: #1379451,quality,,,,,,
openstack%2Fsahara~master~I7d03b553212b9bc4fef74f9c8a99958827dc8a54,https://review.opendev.org/128898,Small refactoring of get_by_id methods,Small refactoring of get_by_id methods  * Only single invocation of this function left in utils.general * Removed unused _find_by_id in direct.py  Change-Id: I7d03b553212b9bc4fef74f9c8a99958827dc8a54,refactoring,,,,,,
openstack%2Ffuel-web~master~Ia58d828ecd02ee22acd4e21cf83009108ec86e1e,https://review.opendev.org/123443,Fuel-agent functional tests refactoring,Fuel-agent functional tests refactoring  Removed fuel-agent dependecy from functional tests.  Change-Id: Ia58d828ecd02ee22acd4e21cf83009108ec86e1e,testing,,,,,,
openstack%2Ffuel-web~master~Ia58d828ecd02ee22acd4e21cf83009108ec86e1e,https://review.opendev.org/123443,Fuel-agent functional tests refactoring,Fuel-agent functional tests refactoring  Removed fuel-agent dependecy from functional tests.  Change-Id: Ia58d828ecd02ee22acd4e21cf83009108ec86e1e,quality,,,,,,
openstack%2Fbarbican~master~I497b4f7bf10a9f47ca399b569d964762505466c9,https://review.opendev.org/121272,Refactor secret functional tests using models and behaviors,Refactor secret functional tests using models and behaviors  Updated the functional tests to use models and behavoirs for secrets.  Change-Id: I497b4f7bf10a9f47ca399b569d964762505466c9,testing,,,,,,
openstack%2Fbarbican~master~I497b4f7bf10a9f47ca399b569d964762505466c9,https://review.opendev.org/121272,Refactor secret functional tests using models and behaviors,Refactor secret functional tests using models and behaviors  Updated the functional tests to use models and behavoirs for secrets.  Change-Id: I497b4f7bf10a9f47ca399b569d964762505466c9,quality,,,,,,
openstack%2Fdiskimage-builder~master~Iad2907c8be491c88727d87ed5e5a720e5beb66c3,https://review.opendev.org/124235,Refactor ramdisk element to allow alternate implementations,"Refactor ramdisk element to allow alternate implementations  In preparation for enabling Dracut-based ramdisks, this change factors out functionality that is common to both busybox and Dracut ramdisks.  Said functionality is moved to a ramdisk-base element which is added as a dependency of the ramdisk element.  ramdisk now only contains the functionality specific to building busybox-based ramdisks.  bp tripleo-juno-dracut-ramdisks Change-Id: Iad2907c8be491c88727d87ed5e5a720e5beb66c3",objective,,,,,,
openstack%2Fdiskimage-builder~master~Iad2907c8be491c88727d87ed5e5a720e5beb66c3,https://review.opendev.org/124235,Refactor ramdisk element to allow alternate implementations,"Refactor ramdisk element to allow alternate implementations  In preparation for enabling Dracut-based ramdisks, this change factors out functionality that is common to both busybox and Dracut ramdisks.  Said functionality is moved to a ramdisk-base element which is added as a dependency of the ramdisk element.  ramdisk now only contains the functionality specific to building busybox-based ramdisks.  bp tripleo-juno-dracut-ramdisks Change-Id: Iad2907c8be491c88727d87ed5e5a720e5beb66c3",quality,,,,,,
openstack%2Fneutron~master~I2b5ec4f0fba04576886f08a346c504212849121a,https://review.opendev.org/120175,Refactor l3_agent.process_router_floating_ip_addresses,Refactor l3_agent.process_router_floating_ip_addresses  Split it out to several functions.  Change-Id: I2b5ec4f0fba04576886f08a346c504212849121a,refactoring,,,,,,
openstack%2Fheat~master~I44d49fd1cc126b5cc318b9ccbe317623f6170ccf,https://review.opendev.org/117970,Refactor functions in eip.py,Refactor functions in eip.py  Refactor functions in eip.py for some similar codes.  Implements blueprint implement-ec2eip-updatable  Change-Id: I44d49fd1cc126b5cc318b9ccbe317623f6170ccf,refactoring,,,,,,
openstack%2Fneutron~master~I3ca993d0a33b7c925526099e97999c9d9f76efc2,https://review.opendev.org/111813,Simple refactor to stop passing around an unused parameter,"Simple refactor to stop passing around an unused parameter  There is no functional change in this patch.  However, this refactor allows another patch [1] to make a simpler change to the code base.  [1] https://review.openstack.org/#/c/109776  Change-Id: I3ca993d0a33b7c925526099e97999c9d9f76efc2",quality,,,,,,
openstack%2Fneutron~master~I3ca993d0a33b7c925526099e97999c9d9f76efc2,https://review.opendev.org/111813,Simple refactor to stop passing around an unused parameter,"Simple refactor to stop passing around an unused parameter  There is no functional change in this patch.  However, this refactor allows another patch [1] to make a simpler change to the code base.  [1] https://review.openstack.org/#/c/109776  Change-Id: I3ca993d0a33b7c925526099e97999c9d9f76efc2",objective,,,,,,
openstack%2Fheat-templates~master~Ia9145ebf744e45ee3c7341a04f05d257515a976d,https://review.opendev.org/93259,Adds Support for Recent Puppet Module Refactor,Adds Support for Recent Puppet Module Refactor  The puppet-openshift_origin module recently went through a refactor in preperation for the v4 OSO release.  This patch changes the necessary puppet parameters for the template to continue functioning.  Change-Id: Ia9145ebf744e45ee3c7341a04f05d257515a976d,objective,,,,,,
openstack%2Fheat-templates~master~Ia9145ebf744e45ee3c7341a04f05d257515a976d,https://review.opendev.org/93259,Adds Support for Recent Puppet Module Refactor,Adds Support for Recent Puppet Module Refactor  The puppet-openshift_origin module recently went through a refactor in preperation for the v4 OSO release.  This patch changes the necessary puppet parameters for the template to continue functioning.  Change-Id: Ia9145ebf744e45ee3c7341a04f05d257515a976d,objective,,,,,,
openstack%2Fheat~master~Ie84fb3c5c9f6381e4eea3a5e99d62266a8abd023,https://review.opendev.org/102638,Refactor AWS::EC2::Instance delete handling,Refactor AWS::EC2::Instance delete handling  Refactor instance to use the nova_utils delete function.  Closes-Bug: #1329453 Change-Id: Ie84fb3c5c9f6381e4eea3a5e99d62266a8abd023,refactoring,,,,,,
openstack%2Fmurano-dashboard~master~Ied6390b5aed6421182a2f2e3a825e079cfef4591,https://review.opendev.org/106767,Refactor functional tests,Refactor functional tests  * Reduce amout of time waiting for element that should not be exist * Impove some xpaths * Fix screenshot taking only on fail * Add config file to git ignore  In plans remove all constants with xpaths into a separate python file  Change-Id: Ied6390b5aed6421182a2f2e3a825e079cfef4591,objective,,,,,,
openstack%2Fmurano-dashboard~master~Ied6390b5aed6421182a2f2e3a825e079cfef4591,https://review.opendev.org/106767,Refactor functional tests,Refactor functional tests  * Reduce amout of time waiting for element that should not be exist * Impove some xpaths * Fix screenshot taking only on fail * Add config file to git ignore  In plans remove all constants with xpaths into a separate python file  Change-Id: Ied6390b5aed6421182a2f2e3a825e079cfef4591,testing,,,,,,
openstack%2Fmurano-dashboard~master~Ied6390b5aed6421182a2f2e3a825e079cfef4591,https://review.opendev.org/106767,Refactor functional tests,Refactor functional tests  * Reduce amout of time waiting for element that should not be exist * Impove some xpaths * Fix screenshot taking only on fail * Add config file to git ignore  In plans remove all constants with xpaths into a separate python file  Change-Id: Ied6390b5aed6421182a2f2e3a825e079cfef4591,objective,,,,,,
openstack%2Fheat~master~I16135159027cc52e8da74a4b5863fc8a8595d582,https://review.opendev.org/106538,Refactor selecting values from an attribute,Refactor selecting values from an attribute  Move the code to select particular keys/indices from an attribute value out of the get_attr intrinsic functions and into the attributes module as a separate function.  Change-Id: I16135159027cc52e8da74a4b5863fc8a8595d582,quality,,,,,,
openstack%2Fheat~master~I16135159027cc52e8da74a4b5863fc8a8595d582,https://review.opendev.org/106538,Refactor selecting values from an attribute,Refactor selecting values from an attribute  Move the code to select particular keys/indices from an attribute value out of the get_attr intrinsic functions and into the attributes module as a separate function.  Change-Id: I16135159027cc52e8da74a4b5863fc8a8595d582,objective,,,,,,
openstack%2Ftrove~master~Ia7cf3bacf32b50ebf857d5b43ed756e4b09596e9,https://review.opendev.org/107542,Refactored datastores to use common chown function,Refactored datastores to use common chown function  Refactored mongdb and couchbase managers to use the common change_owner function defined in trove/guestagent/common/operating_system.py instead of rolling their own.  Change-Id: Ia7cf3bacf32b50ebf857d5b43ed756e4b09596e9 Closes-bug: 1314803,refactoring,,,,,,
openstack%2Ffuel-astute~master~Ic6022cc4ecb405a17dbeefb095590532cbbbe33b,https://review.opendev.org/103352,Refactor ssh actions used for node erasing,"Refactor ssh actions used for node erasing  Patch fixes few issues with erasing drives while stopping deployment during provisioning, e.g.:  * executing dd with non-existing under    debootstrap shell option 'flag';  * broken check of block device major code;  * incorrect order of arguments, which are passed    to erase_data function; Also it implements more robust mechanizm to detect provisining or provisined node.  Change-Id: Ic6022cc4ecb405a17dbeefb095590532cbbbe33b Related-bug: #1316583",quality,,,,,,
openstack%2Ffuel-astute~master~Ic6022cc4ecb405a17dbeefb095590532cbbbe33b,https://review.opendev.org/103352,Refactor ssh actions used for node erasing,"Refactor ssh actions used for node erasing  Patch fixes few issues with erasing drives while stopping deployment during provisioning, e.g.:  * executing dd with non-existing under    debootstrap shell option 'flag';  * broken check of block device major code;  * incorrect order of arguments, which are passed    to erase_data function; Also it implements more robust mechanizm to detect provisining or provisined node.  Change-Id: Ic6022cc4ecb405a17dbeefb095590532cbbbe33b Related-bug: #1316583",objective,,,,,,
openstack%2Ffuel-astute~master~Ic6022cc4ecb405a17dbeefb095590532cbbbe33b,https://review.opendev.org/103352,Refactor ssh actions used for node erasing,"Refactor ssh actions used for node erasing  Patch fixes few issues with erasing drives while stopping deployment during provisioning, e.g.:  * executing dd with non-existing under    debootstrap shell option 'flag';  * broken check of block device major code;  * incorrect order of arguments, which are passed    to erase_data function; Also it implements more robust mechanizm to detect provisining or provisined node.  Change-Id: Ic6022cc4ecb405a17dbeefb095590532cbbbe33b Related-bug: #1316583",objective,,,,,,
openstack%2Fnova~master~I6bb2af45d3e72bdc11470877fd2a993e9d0a4623,https://review.opendev.org/106249,Refactors VIF configuration logic,Refactors VIF configuration logic  There are too many if/else checks when we choose the right function to conduct vif operations. We can do better by setting an alias of each vif type and getattr on the nessesary function obj.  Please enter the commit message for your changes. Lines starting  Change-Id: I6bb2af45d3e72bdc11470877fd2a993e9d0a4623,quality,,,,,,
openstack%2Fnova~master~I6bb2af45d3e72bdc11470877fd2a993e9d0a4623,https://review.opendev.org/106249,Refactors VIF configuration logic,Refactors VIF configuration logic  There are too many if/else checks when we choose the right function to conduct vif operations. We can do better by setting an alias of each vif type and getattr on the nessesary function obj.  Please enter the commit message for your changes. Lines starting  Change-Id: I6bb2af45d3e72bdc11470877fd2a993e9d0a4623,objective,,,,,,
openstack%2Foslo.vmware~master~Icf54e3d0305b30c73d0ff7d9c85da1893392c3aa,https://review.opendev.org/102480,Refactor the PBM support,Refactor the PBM support  Having a Pbm class that inherits from Vim is a design mistake that we need to fix before start using Pbm features in other projects like Nova.  This patch introduces a new base class 'Service' which provides common functionality for invoking vSphere APIs and both Vim and Pbm inherit from it. That will allow to further evolve our APIs and add features which are specific to only Vim or Pbm.  Existing clients which use the Vim object through VMwareAPISession are not impacted by this change. The interface of VMwareAPISession is unchanged.  Change-Id: Icf54e3d0305b30c73d0ff7d9c85da1893392c3aa,quality,,,,,,
openstack%2Foslo.vmware~master~Icf54e3d0305b30c73d0ff7d9c85da1893392c3aa,https://review.opendev.org/102480,Refactor the PBM support,Refactor the PBM support  Having a Pbm class that inherits from Vim is a design mistake that we need to fix before start using Pbm features in other projects like Nova.  This patch introduces a new base class 'Service' which provides common functionality for invoking vSphere APIs and both Vim and Pbm inherit from it. That will allow to further evolve our APIs and add features which are specific to only Vim or Pbm.  Existing clients which use the Vim object through VMwareAPISession are not impacted by this change. The interface of VMwareAPISession is unchanged.  Change-Id: Icf54e3d0305b30c73d0ff7d9c85da1893392c3aa,objective,,,,,,
openstack%2Foslo.vmware~master~Icf54e3d0305b30c73d0ff7d9c85da1893392c3aa,https://review.opendev.org/102480,Refactor the PBM support,Refactor the PBM support  Having a Pbm class that inherits from Vim is a design mistake that we need to fix before start using Pbm features in other projects like Nova.  This patch introduces a new base class 'Service' which provides common functionality for invoking vSphere APIs and both Vim and Pbm inherit from it. That will allow to further evolve our APIs and add features which are specific to only Vim or Pbm.  Existing clients which use the Vim object through VMwareAPISession are not impacted by this change. The interface of VMwareAPISession is unchanged.  Change-Id: Icf54e3d0305b30c73d0ff7d9c85da1893392c3aa,objective,,,,,,
openstack%2Fnova-specs~master~I50ec5334b2cd1f6bb1f16f223ac065b411a847f5,https://review.opendev.org/104804,Libvirt driver class refactoring,Libvirt driver class refactoring  The libvirt driver.py class is growing ever larger and more complicated. There are circular dependencies between this class and other libvirt classes. This work aims to split some of the functionality out into new classes  Change-Id: I50ec5334b2cd1f6bb1f16f223ac065b411a847f5,quality,,,,,,
openstack%2Fnova-specs~master~I50ec5334b2cd1f6bb1f16f223ac065b411a847f5,https://review.opendev.org/104804,Libvirt driver class refactoring,Libvirt driver class refactoring  The libvirt driver.py class is growing ever larger and more complicated. There are circular dependencies between this class and other libvirt classes. This work aims to split some of the functionality out into new classes  Change-Id: I50ec5334b2cd1f6bb1f16f223ac065b411a847f5,objective,,,,,,
openstack%2Fbarbican~master~I31d8f254674a601cb241a7ad1bd1696d6baab3aa,https://review.opendev.org/105490,Refactor json validator,Refactor json validator  * Changed the rest of the exception raising to use the _assert_validity   function. * Introduced minimum set of required  names secret refs in containers.   (for both rsa and certificates). * Added tests regarding these required names.  Change-Id: I31d8f254674a601cb241a7ad1bd1696d6baab3aa,objective,,,,,,
openstack%2Fbarbican~master~I31d8f254674a601cb241a7ad1bd1696d6baab3aa,https://review.opendev.org/105490,Refactor json validator,Refactor json validator  * Changed the rest of the exception raising to use the _assert_validity   function. * Introduced minimum set of required  names secret refs in containers.   (for both rsa and certificates). * Added tests regarding these required names.  Change-Id: I31d8f254674a601cb241a7ad1bd1696d6baab3aa,testing,,,,,,
openstack%2Fbarbican~master~I31d8f254674a601cb241a7ad1bd1696d6baab3aa,https://review.opendev.org/105490,Refactor json validator,Refactor json validator  * Changed the rest of the exception raising to use the _assert_validity   function. * Introduced minimum set of required  names secret refs in containers.   (for both rsa and certificates). * Added tests regarding these required names.  Change-Id: I31d8f254674a601cb241a7ad1bd1696d6baab3aa,objective,,,,,,
openstack%2Fnova~master~I17f4b71c0314e555d9f7dc1a935865865dd06c51,https://review.opendev.org/97170,vmware: Refactor: fold volume_util.py into volumeops.py,"vmware: Refactor: fold volume_util.py into volumeops.py  volume_util.py seems to have originally been intended to be a general repository of operations on volumes. In fact, it was an arbitrary collection of iscsi functions which were exclusively called by VMwareVolumeOps with VMwareVolumeOps private data as arguments.  This change moves all functions from volume_util.py into VMwareVolumeOps in volumeops.py. This makes it simpler to read and understand the code, as there is now only a single place to look for iscsi functions. It also moves StorageError into volumeops.py, as that is the only place it is used. Arguments have been updated to use private data directly rather than having them passed in. In addition, function names have been updated to accurately reflect their actual purpose.  There are no functional changes. All code change is purely mechanical.  Change-Id: I17f4b71c0314e555d9f7dc1a935865865dd06c51",quality,,,,,,
openstack%2Fnova~master~I17f4b71c0314e555d9f7dc1a935865865dd06c51,https://review.opendev.org/97170,vmware: Refactor: fold volume_util.py into volumeops.py,"vmware: Refactor: fold volume_util.py into volumeops.py  volume_util.py seems to have originally been intended to be a general repository of operations on volumes. In fact, it was an arbitrary collection of iscsi functions which were exclusively called by VMwareVolumeOps with VMwareVolumeOps private data as arguments.  This change moves all functions from volume_util.py into VMwareVolumeOps in volumeops.py. This makes it simpler to read and understand the code, as there is now only a single place to look for iscsi functions. It also moves StorageError into volumeops.py, as that is the only place it is used. Arguments have been updated to use private data directly rather than having them passed in. In addition, function names have been updated to accurately reflect their actual purpose.  There are no functional changes. All code change is purely mechanical.  Change-Id: I17f4b71c0314e555d9f7dc1a935865865dd06c51",objective,,,,,,
openstack%2Ffuel-web~master~Iff2f2a4d277590db25c6f801f20ae75433937411,https://review.opendev.org/96532,Task helpers partial refactoring added,"Task helpers partial refactoring added  What is done: - most methods from TaskHelper class moved to objects.Task; - rpc receiver code changed, explicit controll of sqlalchemy session for   Task object methods added.  What is missed: - TaskHelper class is still in use as far as it holds several common use   helper function (in future will be moved to utils module); - tests are not updated; - partial refactoring - system in not in a working state.  Change-Id: Iff2f2a4d277590db25c6f801f20ae75433937411 Implements: blueprint nailgun-task-helpers-refactoring",objective,,,,,,
openstack%2Ffuel-web~master~Iff2f2a4d277590db25c6f801f20ae75433937411,https://review.opendev.org/96532,Task helpers partial refactoring added,"Task helpers partial refactoring added  What is done: - most methods from TaskHelper class moved to objects.Task; - rpc receiver code changed, explicit controll of sqlalchemy session for   Task object methods added.  What is missed: - TaskHelper class is still in use as far as it holds several common use   helper function (in future will be moved to utils module); - tests are not updated; - partial refactoring - system in not in a working state.  Change-Id: Iff2f2a4d277590db25c6f801f20ae75433937411 Implements: blueprint nailgun-task-helpers-refactoring",objective,,,,,,
openstack%2Fmurano-deployment~master~I27259500efb18ea7e9a63ce60920af5824ffbd48,https://review.opendev.org/102513,Refactored RabbitMQ.py and scripts,Refactored RabbitMQ.py  * suppressed html output from rabbitmq management * add functions  Change-Id: I27259500efb18ea7e9a63ce60920af5824ffbd48,refactoring,,,,,,
openstack%2Frally~master~I8307ec33dd93ef055450f58d7cd55bf6b200f249,https://review.opendev.org/101557,Refactor tempest config generator,"Refactor tempest config generator  Use `requests` library instead of `urllib2` & `httplib` Main profit from `requests` library: - `requests` is HTTP for Humans; - `requests` is well documented[1]; - `requests` can save downloaded files by parts, so usage of memory is less(useful when downloading big data, for example - some images) - `requests` has same name as in Python 2x and Python 3x  Use `inspect.getmembers`[2][3] for discovery of each function for section generator. Profit : decrease lines of code  Add checks for existence of subnet in 'network' section.  Move function `_write_config`[4] from class `Tempest`[5] to `TempestConf`. Reason: this function not related to verifier for Tempest.  Fix message for exception when user doesn't have admin role.  Move name of section into kwargs to each section function. Profit: less string objects with section names  [1] - http://docs.python-requests.org/en/latest/ [2] - https://docs.python.org/2/library/inspect.html#types-and-members [3] - https://docs.python.org/3.3/library/inspect.html#types-and-members [4] - http://git.io/E1zPOQ [5] - http://git.io/8Ru-Yw  Change-Id: I8307ec33dd93ef055450f58d7cd55bf6b200f249",quality,,,,,,
openstack%2Frally~master~I8307ec33dd93ef055450f58d7cd55bf6b200f249,https://review.opendev.org/101557,Refactor tempest config generator,"Refactor tempest config generator  Use `requests` library instead of `urllib2` & `httplib` Main profit from `requests` library: - `requests` is HTTP for Humans; - `requests` is well documented[1]; - `requests` can save downloaded files by parts, so usage of memory is less(useful when downloading big data, for example - some images) - `requests` has same name as in Python 2x and Python 3x  Use `inspect.getmembers`[2][3] for discovery of each function for section generator. Profit : decrease lines of code  Add checks for existence of subnet in 'network' section.  Move function `_write_config`[4] from class `Tempest`[5] to `TempestConf`. Reason: this function not related to verifier for Tempest.  Fix message for exception when user doesn't have admin role.  Move name of section into kwargs to each section function. Profit: less string objects with section names  [1] - http://docs.python-requests.org/en/latest/ [2] - https://docs.python.org/2/library/inspect.html#types-and-members [3] - https://docs.python.org/3.3/library/inspect.html#types-and-members [4] - http://git.io/E1zPOQ [5] - http://git.io/8Ru-Yw  Change-Id: I8307ec33dd93ef055450f58d7cd55bf6b200f249",objective,,,,,,
openstack%2Frally~master~I8307ec33dd93ef055450f58d7cd55bf6b200f249,https://review.opendev.org/101557,Refactor tempest config generator,"Refactor tempest config generator  Use `requests` library instead of `urllib2` & `httplib` Main profit from `requests` library: - `requests` is HTTP for Humans; - `requests` is well documented[1]; - `requests` can save downloaded files by parts, so usage of memory is less(useful when downloading big data, for example - some images) - `requests` has same name as in Python 2x and Python 3x  Use `inspect.getmembers`[2][3] for discovery of each function for section generator. Profit : decrease lines of code  Add checks for existence of subnet in 'network' section.  Move function `_write_config`[4] from class `Tempest`[5] to `TempestConf`. Reason: this function not related to verifier for Tempest.  Fix message for exception when user doesn't have admin role.  Move name of section into kwargs to each section function. Profit: less string objects with section names  [1] - http://docs.python-requests.org/en/latest/ [2] - https://docs.python.org/2/library/inspect.html#types-and-members [3] - https://docs.python.org/3.3/library/inspect.html#types-and-members [4] - http://git.io/E1zPOQ [5] - http://git.io/8Ru-Yw  Change-Id: I8307ec33dd93ef055450f58d7cd55bf6b200f249",objective,,,,,,
opendev%2Fsystem-config~master~I73976a60e080d15b6f513db79fee46bcf468e302,https://review.opendev.org/99481,Groups portal infra code refactor,"Groups portal infra code refactor  This patch removes the drush make site building function from groups-dev instance, and now directly fetch release tarballs from http://tarballs.openstack.org/groups repository. With an advanced multi-slot deployment architecture it prevents the typical Drupal WSOD issues that randomly caused site malfunction when a request arrived during installation. It also simplifies the deployment steps using the standard drush aliases and drush-dsd extension and supports local configuration variables in local_settings.php file.  Change-Id: I73976a60e080d15b6f513db79fee46bcf468e302",quality,,,,,,
opendev%2Fsystem-config~master~I73976a60e080d15b6f513db79fee46bcf468e302,https://review.opendev.org/99481,Groups portal infra code refactor,"Groups portal infra code refactor  This patch removes the drush make site building function from groups-dev instance, and now directly fetch release tarballs from http://tarballs.openstack.org/groups repository. With an advanced multi-slot deployment architecture it prevents the typical Drupal WSOD issues that randomly caused site malfunction when a request arrived during installation. It also simplifies the deployment steps using the standard drush aliases and drush-dsd extension and supports local configuration variables in local_settings.php file.  Change-Id: I73976a60e080d15b6f513db79fee46bcf468e302",objective,,,,,,
zuul%2Fzuul-operator~master~I1e7ac6d91f92c0e8db99ec42c76d0a41ede87d84,https://review.opendev.org/720007,Refactor deployment and statefulset functions,Refactor deployment and statefulset functions  This change refactors the mkDeployment and mkStatefulset function to enable spliting the component to their own file. The main difference is that the method needs an extra input for the application name.  Change-Id: I1e7ac6d91f92c0e8db99ec42c76d0a41ede87d84,quality,,,,,,
zuul%2Fzuul-operator~master~I1e7ac6d91f92c0e8db99ec42c76d0a41ede87d84,https://review.opendev.org/720007,Refactor deployment and statefulset functions,Refactor deployment and statefulset functions  This change refactors the mkDeployment and mkStatefulset function to enable spliting the component to their own file. The main difference is that the method needs an extra input for the application name.  Change-Id: I1e7ac6d91f92c0e8db99ec42c76d0a41ede87d84,objective,,,,,,
zuul%2Fzuul-operator~master~I33ee419a66a928e953ad2ceea286301082f457aa,https://review.opendev.org/719991,Refactor kubernetes resources constructor to the function file,Refactor kubernetes resources constructor to the function file  This change refactors the mkService function for easier maintainance and usage outside of the resource function.  Change-Id: I33ee419a66a928e953ad2ceea286301082f457aa,quality,,,,,,
zuul%2Fzuul-operator~master~I7cbb3432b9ed88af8294d4bb2af7853d623cccf1,https://review.opendev.org/719965,Refactor file creation to function files,Refactor file creation to function files  This change splits the mkConf into dedicated functions file for easier maintainance.  Change-Id: I7cbb3432b9ed88af8294d4bb2af7853d623cccf1,quality,,,,,,
openstack%2Fzaqar~master~Ie6a3bfc0d20d8d30bd484a9fec2063e1c191c7c4,https://review.opendev.org/98916,Refactor auxiliary methods for MongoDB unit tests,Refactor auxiliary methods for MongoDB unit tests  This patchset DRYes the implementation of auxiliary functions in MongoDB unit tests.  Change-Id: Ie6a3bfc0d20d8d30bd484a9fec2063e1c191c7c4 Closes-Bug: #1257391,quality,,,,,,
openstack%2Fzaqar~master~Ie6a3bfc0d20d8d30bd484a9fec2063e1c191c7c4,https://review.opendev.org/98916,Refactor auxiliary methods for MongoDB unit tests,Refactor auxiliary methods for MongoDB unit tests  This patchset DRYes the implementation of auxiliary functions in MongoDB unit tests.  Change-Id: Ie6a3bfc0d20d8d30bd484a9fec2063e1c191c7c4 Closes-Bug: #1257391,testing,,,,,,
openstack%2Fdiskimage-builder~master~I8fbccc13a2c61a5191ef9ea5d2a8302a3e43b000,https://review.opendev.org/79873,Refactor code to select boot kernel,Refactor code to select boot kernel  The script to find best kernel from image (used by vm and baremetal element) is duplicated and is not in sync with each other. Moving the code to img-functions as a function will reduce duplicated code and make it reusable in future.  Change-Id: I8fbccc13a2c61a5191ef9ea5d2a8302a3e43b000,quality,,,,,,
openstack%2Fdiskimage-builder~master~I8fbccc13a2c61a5191ef9ea5d2a8302a3e43b000,https://review.opendev.org/79873,Refactor code to select boot kernel,Refactor code to select boot kernel  The script to find best kernel from image (used by vm and baremetal element) is duplicated and is not in sync with each other. Moving the code to img-functions as a function will reduce duplicated code and make it reusable in future.  Change-Id: I8fbccc13a2c61a5191ef9ea5d2a8302a3e43b000,objective,,,,,,
openstack%2Fneutron~master~Ide1bc193666ce03a3ae26b1869bde8093ed453ef,https://review.opendev.org/97028,Refactor some router-related methods,Refactor some router-related methods  This is done in preparation for the distributed router functionality.  Partially-implements: blueprint neutron-ovs-dvr  Change-Id: Ide1bc193666ce03a3ae26b1869bde8093ed453ef,refactoring,,,,,,
stackforge%2Fopenstack-sdk-php~master~Ibc1b50cec125c11d32ee6e4f0dbb395fcaea864e,https://review.opendev.org/93089,Refactors ClientInterface and Guzzle adapter.,"Refactors ClientInterface and Guzzle adapter.  This patch achieves three interrelated changes  1. an update to the ClientInterface, making it more efficient and consistent with other HTTP libraries. PSR-FIG messages have also been added as separate classes, rather than lumped as one. Guzzle functionality has also been moved to its own namespace;  2. the refactoring of `GuzzleClient` to `GuzzleAdapter`, including relevant changes needed for the interface change (1). We now have ADAPTERS that bridge our interfaces with Guzzle's - making that difference much clearer, extensible, less tightly coupled and less brittle;  3. moving ""bad request"" error handling into its own dedicated space, based on how the new Adapter functionality (2). Previously the client tried to do all the exception logic - but this is not strictly its responsibility. This logic has been shipped out to a base RequestException which instantiates one of its children exception based on the HTTP status code.  Although I have attempted to keep the scope of this patch to a minimum, as granular as possible, because the interface is a core internal API, various other files need to be modified to reflect the change. In terms of the other two changes, these are inextricably linked to the interface change, so cannot be teased out into their own patches.  Change-Id: Ibc1b50cec125c11d32ee6e4f0dbb395fcaea864e",quality,,,,,,
stackforge%2Fopenstack-sdk-php~master~Ibc1b50cec125c11d32ee6e4f0dbb395fcaea864e,https://review.opendev.org/93089,Refactors ClientInterface and Guzzle adapter.,"Refactors ClientInterface and Guzzle adapter.  This patch achieves three interrelated changes  1. an update to the ClientInterface, making it more efficient and consistent with other HTTP libraries. PSR-FIG messages have also been added as separate classes, rather than lumped as one. Guzzle functionality has also been moved to its own namespace;  2. the refactoring of `GuzzleClient` to `GuzzleAdapter`, including relevant changes needed for the interface change (1). We now have ADAPTERS that bridge our interfaces with Guzzle's - making that difference much clearer, extensible, less tightly coupled and less brittle;  3. moving ""bad request"" error handling into its own dedicated space, based on how the new Adapter functionality (2). Previously the client tried to do all the exception logic - but this is not strictly its responsibility. This logic has been shipped out to a base RequestException which instantiates one of its children exception based on the HTTP status code.  Although I have attempted to keep the scope of this patch to a minimum, as granular as possible, because the interface is a core internal API, various other files need to be modified to reflect the change. In terms of the other two changes, these are inextricably linked to the interface change, so cannot be teased out into their own patches.  Change-Id: Ibc1b50cec125c11d32ee6e4f0dbb395fcaea864e",integration,,,,,,
stackforge%2Fopenstack-sdk-php~master~Ibc1b50cec125c11d32ee6e4f0dbb395fcaea864e,https://review.opendev.org/93089,Refactors ClientInterface and Guzzle adapter.,"Refactors ClientInterface and Guzzle adapter.  This patch achieves three interrelated changes  1. an update to the ClientInterface, making it more efficient and consistent with other HTTP libraries. PSR-FIG messages have also been added as separate classes, rather than lumped as one. Guzzle functionality has also been moved to its own namespace;  2. the refactoring of `GuzzleClient` to `GuzzleAdapter`, including relevant changes needed for the interface change (1). We now have ADAPTERS that bridge our interfaces with Guzzle's - making that difference much clearer, extensible, less tightly coupled and less brittle;  3. moving ""bad request"" error handling into its own dedicated space, based on how the new Adapter functionality (2). Previously the client tried to do all the exception logic - but this is not strictly its responsibility. This logic has been shipped out to a base RequestException which instantiates one of its children exception based on the HTTP status code.  Although I have attempted to keep the scope of this patch to a minimum, as granular as possible, because the interface is a core internal API, various other files need to be modified to reflect the change. In terms of the other two changes, these are inextricably linked to the interface change, so cannot be teased out into their own patches.  Change-Id: Ibc1b50cec125c11d32ee6e4f0dbb395fcaea864e",objective,,,,,,
opendev%2Fyaml2ical~master~I3af654b480c1585ae19841a0baa39079c0ad0d83,https://review.opendev.org/96994,Refactor next_weekday into Meeting class,"Refactor next_weekday into Meeting class  Previously, the next_weekday method was the only module level function in the meeting module, and that was the only place it was used. This change incorporates it into the Meeting class since it makes sense to have it there since that's the only thing that uses it.  This also touches up the doc strings of next_weekday.  Change-Id: I3af654b480c1585ae19841a0baa39079c0ad0d83",quality,,,,,,
opendev%2Fyaml2ical~master~I3af654b480c1585ae19841a0baa39079c0ad0d83,https://review.opendev.org/96994,Refactor next_weekday into Meeting class,"Refactor next_weekday into Meeting class  Previously, the next_weekday method was the only module level function in the meeting module, and that was the only place it was used. This change incorporates it into the Meeting class since it makes sense to have it there since that's the only thing that uses it.  This also touches up the doc strings of next_weekday.  Change-Id: I3af654b480c1585ae19841a0baa39079c0ad0d83",objective,,,,,,
openstack%2Fkeystone~master~Id9aedcb05063cf0d618399847f6afe73c800aa93,https://review.opendev.org/92535,Refactor tests regarding required attributes,"Refactor tests regarding required attributes  Some tests regarding the _required_attribute(s) functions in the wsgi module seemed to be somewhat confusing, so I refactored them trying to increase redability  Change-Id: Id9aedcb05063cf0d618399847f6afe73c800aa93",quality,,,,,,
openstack%2Fkeystone~master~Id9aedcb05063cf0d618399847f6afe73c800aa93,https://review.opendev.org/92535,Refactor tests regarding required attributes,"Refactor tests regarding required attributes  Some tests regarding the _required_attribute(s) functions in the wsgi module seemed to be somewhat confusing, so I refactored them trying to increase redability  Change-Id: Id9aedcb05063cf0d618399847f6afe73c800aa93",testing,,,,,,
openstack%2Fkeystone~master~Id9aedcb05063cf0d618399847f6afe73c800aa93,https://review.opendev.org/92535,Refactor tests regarding required attributes,"Refactor tests regarding required attributes  Some tests regarding the _required_attribute(s) functions in the wsgi module seemed to be somewhat confusing, so I refactored them trying to increase redability  Change-Id: Id9aedcb05063cf0d618399847f6afe73c800aa93",objective,,,,,,
openstack%2Fmurano-deployment~master~I373f95172a121ea3564e787529f1159936fe505a,https://review.opendev.org/95525,Refactored code,Refactored code  * Main steps split into functions * Add error handling  Change-Id: I373f95172a121ea3564e787529f1159936fe505a,refactoring,,,,,,
openstack%2Fmurano-deployment~master~I373f95172a121ea3564e787529f1159936fe505a,https://review.opendev.org/95525,Refactored code,Refactored code  * Main steps split into functions * Add error handling  Change-Id: I373f95172a121ea3564e787529f1159936fe505a,objective,,,,,,
opendev%2Fstoryboard-webclient~master~I2e2d0ec3fc335c0108ea00ad5597ba410191cd76,https://review.opendev.org/94330,Refactor preference provider,Refactor preference provider  Preference provider should not use $_prefixed functions not collide with inbuilt angular functions  $get -> get $set -> set  Change-Id: I2e2d0ec3fc335c0108ea00ad5597ba410191cd76,quality,,,,,,
openstack%2Fmurano-deployment~master~Id5ff09d4ef7c213db710a03db0e30132f248b4b5,https://review.opendev.org/94822,Refactor murano-ci scripts,Refactored scripts code  * Add common functions library * Refactored configure_api.sh  Change-Id: Id5ff09d4ef7c213db710a03db0e30132f248b4b5,objective,,,,,,
jjb%2Fjenkins-job-builder~master~Id22aef35554c2a3428874f956c54baae3ea662fe,https://review.opendev.org/88678,Refactor the `matches` function,Refactor the `matches` function  - Clearer parameter names and doc string - Use fnmatch.fnmatch instead of re.match and fnmatch.translate - Use `any` to make code more succint.  Change-Id: Id22aef35554c2a3428874f956c54baae3ea662fe,quality,,,,,,
jjb%2Fjenkins-job-builder~master~Id22aef35554c2a3428874f956c54baae3ea662fe,https://review.opendev.org/88678,Refactor the `matches` function,Refactor the `matches` function  - Clearer parameter names and doc string - Use fnmatch.fnmatch instead of re.match and fnmatch.translate - Use `any` to make code more succint.  Change-Id: Id22aef35554c2a3428874f956c54baae3ea662fe,objective,,,,,,
openstack%2Fmurano-dashboard~master~Iffa37d551583011715d3b436e10ce8748e79d92c,https://review.opendev.org/93341,Refactor dynamic UI field parsing a bit,Refactor dynamic UI field parsing a bit  Now it is possible to use deeply-nested dictionary keys 'name' and 'type' - because top-level 'name' and 'type' keys' processing is moved out from the recursive `parse_spec` function.  Change-Id: Iffa37d551583011715d3b436e10ce8748e79d92c,objective,,,,,,
openstack%2Fmurano-dashboard~master~Iffa37d551583011715d3b436e10ce8748e79d92c,https://review.opendev.org/93341,Refactor dynamic UI field parsing a bit,Refactor dynamic UI field parsing a bit  Now it is possible to use deeply-nested dictionary keys 'name' and 'type' - because top-level 'name' and 'type' keys' processing is moved out from the recursive `parse_spec` function.  Change-Id: Iffa37d551583011715d3b436e10ce8748e79d92c,objective,,,,,,
openstack%2Fnova~master~I67c3c8c14b6c01b160611cc001d51f1da29ffb24,https://review.opendev.org/81905,VMware: spawn refactor - phase 1 - execute_create_vm,"VMware: spawn refactor - execute_create_vm  Moves the inner function ""execute_create_vm"" from the spawn method to a private method of VMwareVMOps. There is currently no rational reason for the function to be nested within the spawn method.  partial blueprint vmware-spawn-refactor  Change-Id: I67c3c8c14b6c01b160611cc001d51f1da29ffb24",quality,,,,,,
openstack%2Fnova~master~I67c3c8c14b6c01b160611cc001d51f1da29ffb24,https://review.opendev.org/81905,VMware: spawn refactor - phase 1 - execute_create_vm,"VMware: spawn refactor - execute_create_vm  Moves the inner function ""execute_create_vm"" from the spawn method to a private method of VMwareVMOps. There is currently no rational reason for the function to be nested within the spawn method.  partial blueprint vmware-spawn-refactor  Change-Id: I67c3c8c14b6c01b160611cc001d51f1da29ffb24",objective,,,,,,
stackforge-attic%2Fmurano-tests~master~I98a196cf289fa0a045f24949871fc39f2f6448ee,https://review.opendev.org/86297,Refactor WebUI tests,Refactor WebUI tests  - Adapted tests for IceHouse horizon - Deleted tests for deprecated functionalities - Prepared basis for new tests  Change-Id: I98a196cf289fa0a045f24949871fc39f2f6448ee,testing,,,,,,
stackforge-attic%2Fmurano-tests~master~I98a196cf289fa0a045f24949871fc39f2f6448ee,https://review.opendev.org/86297,Refactor WebUI tests,Refactor WebUI tests  - Adapted tests for IceHouse horizon - Deleted tests for deprecated functionalities - Prepared basis for new tests  Change-Id: I98a196cf289fa0a045f24949871fc39f2f6448ee,objective,,,,,,
openstack%2Fswift~feature%2Fec~Ia3bed58f4b8d52f44b8ab3e8fad8014231c19c50,https://review.opendev.org/87001,Minor refactor of storage policy helper functions,Minor refactor of storage policy helper functions  Pulled from a larger pending review where it became clear that we didn't need to keep adding get_data_dir(index) type routines so this patch makes a generic function in the policy module that constructs strings given a base and a policy index then others can use it directly or as a partial (as is done with get_data_dir() for example)  Change-Id: Ia3bed58f4b8d52f44b8ab3e8fad8014231c19c50 Implements: blueprint storage-policies,refactoring,,,,,,
openstack%2Fswift~feature%2Fec~Ia3bed58f4b8d52f44b8ab3e8fad8014231c19c50,https://review.opendev.org/87001,Minor refactor of storage policy helper functions,Minor refactor of storage policy helper functions  Pulled from a larger pending review where it became clear that we didn't need to keep adding get_data_dir(index) type routines so this patch makes a generic function in the policy module that constructs strings given a base and a policy index then others can use it directly or as a partial (as is done with get_data_dir() for example)  Change-Id: Ia3bed58f4b8d52f44b8ab3e8fad8014231c19c50 Implements: blueprint storage-policies,objective,,,,,,
openstack%2Fkeystone~master~Ifb7adcda44a0eff2650198353393aff33b3eda7a,https://review.opendev.org/85572,Refactor: move federation functions to federation utils,Refactor: move federation functions to federation utils  Some of the functions created in keystone.auth.plugins.saml2 can be re-used for other federation protocols that are supported in the future. Propose moving them to keystone.contrib.federation.utils.  Change-Id: Ifb7adcda44a0eff2650198353393aff33b3eda7a,refactoring,,,,,,
openstack%2Fkeystone~master~Ifb7adcda44a0eff2650198353393aff33b3eda7a,https://review.opendev.org/85572,Refactor: move federation functions to federation utils,Refactor: move federation functions to federation utils  Some of the functions created in keystone.auth.plugins.saml2 can be re-used for other federation protocols that are supported in the future. Propose moving them to keystone.contrib.federation.utils.  Change-Id: Ifb7adcda44a0eff2650198353393aff33b3eda7a,quality,,,,,,
openstack%2Fkeystone~master~Ifb7adcda44a0eff2650198353393aff33b3eda7a,https://review.opendev.org/85572,Refactor: move federation functions to federation utils,Refactor: move federation functions to federation utils  Some of the functions created in keystone.auth.plugins.saml2 can be re-used for other federation protocols that are supported in the future. Propose moving them to keystone.contrib.federation.utils.  Change-Id: Ifb7adcda44a0eff2650198353393aff33b3eda7a,objective,,,,,,
openstack%2Fkeystone~master~Ic1f6fa70634ade41e392ee7c5cd8adac913fd0b8,https://review.opendev.org/85721,Refactor: moved flatten function to utils,"Refactor: moved flatten function to utils  Previously, the keystone.common.authorization module contained the function ""flatten"", which would transform a dictionary (possibly nested) into a single level dictionary. Given that the ""flattening"" of a dictionary is a more general concept, not related to authorization, I thought it would be more intuitive to have it in the keystone.common.utils module.  Change-Id: Ic1f6fa70634ade41e392ee7c5cd8adac913fd0b8",refactoring,,,,,,
openstack%2Fkeystone~master~Ic1f6fa70634ade41e392ee7c5cd8adac913fd0b8,https://review.opendev.org/85721,Refactor: moved flatten function to utils,"Refactor: moved flatten function to utils  Previously, the keystone.common.authorization module contained the function ""flatten"", which would transform a dictionary (possibly nested) into a single level dictionary. Given that the ""flattening"" of a dictionary is a more general concept, not related to authorization, I thought it would be more intuitive to have it in the keystone.common.utils module.  Change-Id: Ic1f6fa70634ade41e392ee7c5cd8adac913fd0b8",objective,,,,,,
openstack%2Ffuel-web~master~Ice7f96273afb5d96e7970acfc45c61bab620aaed,https://review.opendev.org/83693,Fuelclient major refactoring,Unfinished fuelclient refactoring   * package structure  * some implementation ideas  * a lot of working functions  Change-Id: Ice7f96273afb5d96e7970acfc45c61bab620aaed,refactoring,,,,,,
openstack%2Fironic~master~I1b49accfef546d87044f65dcb42b9bef8ab05c6d,https://review.opendev.org/83853,Refactor nova.virt.ironic.driver get_host_stats,Refactor nova.virt.ironic.driver get_host_stats  Refactor the get_host_stats() method to be cleaner and easier to maintain.  This patch does not change any APIs or functionality.  Change-Id: I1b49accfef546d87044f65dcb42b9bef8ab05c6d,quality,,,,,,
openstack%2Fironic~master~I1b49accfef546d87044f65dcb42b9bef8ab05c6d,https://review.opendev.org/83853,Refactor nova.virt.ironic.driver get_host_stats,Refactor nova.virt.ironic.driver get_host_stats  Refactor the get_host_stats() method to be cleaner and easier to maintain.  This patch does not change any APIs or functionality.  Change-Id: I1b49accfef546d87044f65dcb42b9bef8ab05c6d,objective,,,,,,
openstack%2Fmurano~master~I5f60d47bea135e25a5cee022187f499bf177439c,https://review.opendev.org/84435,Refactor murano functional tests,Refactor murano functional tests  Change-Id: I5f60d47bea135e25a5cee022187f499bf177439c,refactoring,,,,,,
openstack%2Fmurano~master~I5f60d47bea135e25a5cee022187f499bf177439c,https://review.opendev.org/84435,Refactor murano functional tests,Refactor murano functional tests  Change-Id: I5f60d47bea135e25a5cee022187f499bf177439c,testing,,,,,,
openstack%2Fheat~master~I1d4b847967357dbe5c9960223a063377aec50e5d,https://review.opendev.org/79768,Refactor Template.parse(),"Refactor Template.parse()  Split out Template.parse() as a separate function. This saves an expensive method call to self.functions() for every potential intrinsic function in the template, plus makes a template parsing routine available to other parts of the code that may want to use it, without being tied to a Template's ideas of what the intrinsic functions available are.  Change-Id: I1d4b847967357dbe5c9960223a063377aec50e5d",quality,,,,,,
openstack%2Fheat~master~I1d4b847967357dbe5c9960223a063377aec50e5d,https://review.opendev.org/79768,Refactor Template.parse(),"Refactor Template.parse()  Split out Template.parse() as a separate function. This saves an expensive method call to self.functions() for every potential intrinsic function in the template, plus makes a template parsing routine available to other parts of the code that may want to use it, without being tied to a Template's ideas of what the intrinsic functions available are.  Change-Id: I1d4b847967357dbe5c9960223a063377aec50e5d",objective,,,,,,
airship%2Fairshipctl~master~I205fd7d00bf1745cada88d8fd972dac1dbe0fddf,https://review.opendev.org/724286,Refactor CurrentContextEntryPoint function,"Refactor CurrentContextEntryPoint function  Currently it takes ClusterType as first parameter, however this parameter can be retrieved via appropriate function CurrentContextClusterType in the same module.  Change-Id: I205fd7d00bf1745cada88d8fd972dac1dbe0fddf",quality,,,,,,
airship%2Fairshipctl~master~I205fd7d00bf1745cada88d8fd972dac1dbe0fddf,https://review.opendev.org/724286,Refactor CurrentContextEntryPoint function,"Refactor CurrentContextEntryPoint function  Currently it takes ClusterType as first parameter, however this parameter can be retrieved via appropriate function CurrentContextClusterType in the same module.  Change-Id: I205fd7d00bf1745cada88d8fd972dac1dbe0fddf",objective,,,,,,
x%2Fcloudroast~master~I9600b7d3213064c4d4236dbb058b008254c6cdd3,https://review.opendev.org/79754,Updates the Compute-Volumes integration tests for Volume refactors,Updates the Compute-Volumes integration tests for Volume refactors  * Changed instances of storage_client/storage_behavior to   blockstorage_client/blockstorage_behavior * Removed parameters from function calls that are now set   as defaults  Change-Id: I9600b7d3213064c4d4236dbb058b008254c6cdd3,testing,,,,,,
x%2Fcloudroast~master~I9600b7d3213064c4d4236dbb058b008254c6cdd3,https://review.opendev.org/79754,Updates the Compute-Volumes integration tests for Volume refactors,Updates the Compute-Volumes integration tests for Volume refactors  * Changed instances of storage_client/storage_behavior to   blockstorage_client/blockstorage_behavior * Removed parameters from function calls that are now set   as defaults  Change-Id: I9600b7d3213064c4d4236dbb058b008254c6cdd3,quality,,,,,,
x%2Fcloudroast~master~I9600b7d3213064c4d4236dbb058b008254c6cdd3,https://review.opendev.org/79754,Updates the Compute-Volumes integration tests for Volume refactors,Updates the Compute-Volumes integration tests for Volume refactors  * Changed instances of storage_client/storage_behavior to   blockstorage_client/blockstorage_behavior * Removed parameters from function calls that are now set   as defaults  Change-Id: I9600b7d3213064c4d4236dbb058b008254c6cdd3,objective,,,,,,
openstack%2Ffuel-ostf~master~I15a980432f9da5cac5f04b1f4f4af64d1a002b60,https://review.opendev.org/76272,Complete session hadling refactoring,Complete session hadling refactoring  All parts of system have been refactored. Session creation has been simplified. Now session is created only when it is desperately needed and its using is maximized instead of uncontrollable producing for each and every block of code which is supposed to communicate with db.  This refactoring simplifies db data transfer management and makes it more explicit for further developing.  Unit and functional tests have been updated.  Change-Id: I15a980432f9da5cac5f04b1f4f4af64d1a002b60,quality,,,,,,
openstack%2Ffuel-ostf~master~I15a980432f9da5cac5f04b1f4f4af64d1a002b60,https://review.opendev.org/76272,Complete session hadling refactoring,Complete session hadling refactoring  All parts of system have been refactored. Session creation has been simplified. Now session is created only when it is desperately needed and its using is maximized instead of uncontrollable producing for each and every block of code which is supposed to communicate with db.  This refactoring simplifies db data transfer management and makes it more explicit for further developing.  Unit and functional tests have been updated.  Change-Id: I15a980432f9da5cac5f04b1f4f4af64d1a002b60,objective,,,,,,
openstack%2Ffuel-ostf~master~I15a980432f9da5cac5f04b1f4f4af64d1a002b60,https://review.opendev.org/76272,Complete session hadling refactoring,Complete session hadling refactoring  All parts of system have been refactored. Session creation has been simplified. Now session is created only when it is desperately needed and its using is maximized instead of uncontrollable producing for each and every block of code which is supposed to communicate with db.  This refactoring simplifies db data transfer management and makes it more explicit for further developing.  Unit and functional tests have been updated.  Change-Id: I15a980432f9da5cac5f04b1f4f4af64d1a002b60,integration,,,,,,
openstack%2Ffuel-ostf~master~I15a980432f9da5cac5f04b1f4f4af64d1a002b60,https://review.opendev.org/76272,Complete session hadling refactoring,Complete session hadling refactoring  All parts of system have been refactored. Session creation has been simplified. Now session is created only when it is desperately needed and its using is maximized instead of uncontrollable producing for each and every block of code which is supposed to communicate with db.  This refactoring simplifies db data transfer management and makes it more explicit for further developing.  Unit and functional tests have been updated.  Change-Id: I15a980432f9da5cac5f04b1f4f4af64d1a002b60,testing,,,,,,
openstack%2Fheat~master~I4f4fae0182779d955ac0e15109fc641b271ddc01,https://review.opendev.org/78887,Refactor stack watching into a separate class,"Refactor stack watching into a separate class  In later oslo.messaging patches, the Stack watch functionality must be called from two separate places (the endpoint class and the service class).  In order to do that and not result in needless code duplication, break it into a separate class and so the object can be passed around.  Change-Id: I4f4fae0182779d955ac0e15109fc641b271ddc01 blueprint: oslo-messaging",quality,,,,,,
openstack%2Fheat~master~I4f4fae0182779d955ac0e15109fc641b271ddc01,https://review.opendev.org/78887,Refactor stack watching into a separate class,"Refactor stack watching into a separate class  In later oslo.messaging patches, the Stack watch functionality must be called from two separate places (the endpoint class and the service class).  In order to do that and not result in needless code duplication, break it into a separate class and so the object can be passed around.  Change-Id: I4f4fae0182779d955ac0e15109fc641b271ddc01 blueprint: oslo-messaging",objective,,,,,,
x%2Ftuskar-ui~master~I45cd89b72857202a205609c65b3a9a545982beee,https://review.opendev.org/76161,Refactor the overcloud views tests,Refactor the overcloud views tests  Move the repeated parts of tests to a separate function.  Change-Id: I45cd89b72857202a205609c65b3a9a545982beee,quality,,,,,,
x%2Ftuskar-ui~master~I45cd89b72857202a205609c65b3a9a545982beee,https://review.opendev.org/76161,Refactor the overcloud views tests,Refactor the overcloud views tests  Move the repeated parts of tests to a separate function.  Change-Id: I45cd89b72857202a205609c65b3a9a545982beee,testing,,,,,,
openstack%2Frally~master~I7734d34f99b468001bd431f98d97e4dade2236cd,https://review.opendev.org/75935,Refactor use deployment command,"Refactor use deployment command  * Renamed 'deployment' filename in 'use_command' in order to use this file with other use subcommands such as 'task' * Refactored by moving code into new generic functions that   * check if the 'use_command' file exists:   _check_rally_configuration_dir_exists(self)   * update env var in the 'use_comand' file:   _update_attribute_in_use_file(self, attribute, value)  Change-Id: I7734d34f99b468001bd431f98d97e4dade2236cd",objective,,,,,,
openstack%2Frally~master~I7734d34f99b468001bd431f98d97e4dade2236cd,https://review.opendev.org/75935,Refactor use deployment command,"Refactor use deployment command  * Renamed 'deployment' filename in 'use_command' in order to use this file with other use subcommands such as 'task' * Refactored by moving code into new generic functions that   * check if the 'use_command' file exists:   _check_rally_configuration_dir_exists(self)   * update env var in the 'use_comand' file:   _update_attribute_in_use_file(self, attribute, value)  Change-Id: I7734d34f99b468001bd431f98d97e4dade2236cd",objective,,,,,,
openstack%2Fswift~master~I152ccd8f22f424cd7547fa4d67df020f263096a9,https://review.opendev.org/75548,Refactor a quorum-size calculation,"Refactor a quorum-size calculation  No behavior change, just use the utility function instead of rolling our own.  Change-Id: I152ccd8f22f424cd7547fa4d67df020f263096a9",refactoring,,,,,,
openstack%2Fheat~master~I63f8a53d8a573a2e30bd9a8d901811367a570240,https://review.opendev.org/73821,unit tests: Refactor to accomodate lazy evaluation,"unit tests: Refactor to accomodate lazy evaluation  Do a complete resolution of all functions on each snippet, rather than specifying individual function resolution methods to call.  Change-Id: I63f8a53d8a573a2e30bd9a8d901811367a570240",testing,,,,,,
openstack%2Fhorizon~master~I9a71bf62eb871ac9c082208e991402f0c700c668,https://review.opendev.org/72510,Refactor large method into 4 methods,"Refactor large method into 4 methods  In trying to reuse some of the code in views, I realized that the get method for SampleView is quite long. This change breaks this method into 3 functions. The get method now is responsible for parsing HTTP arguments and formatting AJAX response. The other functionality has been pulled out. One of these functions (query_data) can be used by other views in the future.  Change-Id: I9a71bf62eb871ac9c082208e991402f0c700c668 Closes-Bug: #1278654",quality,,,,,,
openstack%2Fhorizon~master~I9a71bf62eb871ac9c082208e991402f0c700c668,https://review.opendev.org/72510,Refactor large method into 4 methods,"Refactor large method into 4 methods  In trying to reuse some of the code in views, I realized that the get method for SampleView is quite long. This change breaks this method into 3 functions. The get method now is responsible for parsing HTTP arguments and formatting AJAX response. The other functionality has been pulled out. One of these functions (query_data) can be used by other views in the future.  Change-Id: I9a71bf62eb871ac9c082208e991402f0c700c668 Closes-Bug: #1278654",objective,,,,,,
openstack%2Frally~master~I5c6c082ed30390bc000a2371f0dfca31994910cb,https://review.opendev.org/69886,Start refactoring scenario runner,Start refactoring scneario runner  We should remove spaghetti from code and make it safer.  Current code have a few issues: 1) If something went wrong (and it can) we won't cleanup fully cloud 2) There is a lot of spaghetti around catching exception and preparing cloud 3) There will be even more spaghetti when we try to extend current functionallity with (stress exectution/non admin users/another loads and cloud pre configuration) 4) We have a lot of IFs that switch what kind of exectuion we will use. This should be done via classes and inheritance IMO.  This patch fix a part of issues: 1) Add Context class that allows us to create/delete tmp users and tenants 2) Add Context class that makes all cleanups. For users if they are present and for admins if they are present. 3) Changed algorithm of deleting resources (try-catch) e.g. if 1 user wasn't deleted => we should try to continue and delete others. 4) Add some todos 5) Replace ScenarioRunner.run() method to use these context classes  Change-Id: I5c6c082ed30390bc000a2371f0dfca31994910cb,objective,,,,,,
openstack%2Frally~master~I5c6c082ed30390bc000a2371f0dfca31994910cb,https://review.opendev.org/69886,Start refactoring scenario runner,Start refactoring scneario runner  We should remove spaghetti from code and make it safer.  Current code have a few issues: 1) If something went wrong (and it can) we won't cleanup fully cloud 2) There is a lot of spaghetti around catching exception and preparing cloud 3) There will be even more spaghetti when we try to extend current functionallity with (stress exectution/non admin users/another loads and cloud pre configuration) 4) We have a lot of IFs that switch what kind of exectuion we will use. This should be done via classes and inheritance IMO.  This patch fix a part of issues: 1) Add Context class that allows us to create/delete tmp users and tenants 2) Add Context class that makes all cleanups. For users if they are present and for admins if they are present. 3) Changed algorithm of deleting resources (try-catch) e.g. if 1 user wasn't deleted => we should try to continue and delete others. 4) Add some todos 5) Replace ScenarioRunner.run() method to use these context classes  Change-Id: I5c6c082ed30390bc000a2371f0dfca31994910cb,objective,,,,,,
openstack%2Ftaskflow~master~I2f2087097f5934e02d9d775eea709673b63f01b1,https://review.opendev.org/67715,Refactor task/flow flattening,"Refactor task/flow flattening  - Instead of having to pass context data between the   recursive function calls, create an object to hold   this context data, which also contains the flattening   functionality itself. - Allow the flattening functions to be more easily   extended by having a selection function that matches   item type to flattening function. - Add pre/post flattening functions (which can be   extended/inherited to do different activites as   needed).  Change-Id: I2f2087097f5934e02d9d775eea709673b63f01b1",objective,,,,,,
openstack%2Ftaskflow~master~I2f2087097f5934e02d9d775eea709673b63f01b1,https://review.opendev.org/67715,Refactor task/flow flattening,"Refactor task/flow flattening  - Instead of having to pass context data between the   recursive function calls, create an object to hold   this context data, which also contains the flattening   functionality itself. - Allow the flattening functions to be more easily   extended by having a selection function that matches   item type to flattening function. - Add pre/post flattening functions (which can be   extended/inherited to do different activites as   needed).  Change-Id: I2f2087097f5934e02d9d775eea709673b63f01b1",objective,,,,,,
openstack%2Fheat~master~I4a1dc2e65e7b118347933bdf18aba49c058aa28b,https://review.opendev.org/67183,Refactor Parameters Schema based on common Schema,Refactor Parameters Schema based on common Schema  This patch is last in a series of patches to unify the code for property and parameter validation based on a common Schema class.  The current patch refactors the implementation of the Parameters Schema to be a sub-class of the common Schema class in constraints.py so that most of the schema validation code can be shared for property and parameter validation and no two different code paths for mostly indentical functionality exist.  Change-Id: I4a1dc2e65e7b118347933bdf18aba49c058aa28b Closes-Bug: #1230229 Implements: blueprint schema-code-consolidation,objective,,,,,,
openstack%2Fheat~master~I4a1dc2e65e7b118347933bdf18aba49c058aa28b,https://review.opendev.org/67183,Refactor Parameters Schema based on common Schema,Refactor Parameters Schema based on common Schema  This patch is last in a series of patches to unify the code for property and parameter validation based on a common Schema class.  The current patch refactors the implementation of the Parameters Schema to be a sub-class of the common Schema class in constraints.py so that most of the schema validation code can be shared for property and parameter validation and no two different code paths for mostly indentical functionality exist.  Change-Id: I4a1dc2e65e7b118347933bdf18aba49c058aa28b Closes-Bug: #1230229 Implements: blueprint schema-code-consolidation,objective,,,,,,
openstack%2Fpython-heatclient~master~I8576d09c556fc0835004da6b78070686482361e0,https://review.opendev.org/66229,Refactor environment functions in preparation for get_file,Refactor environment functions in preparation for get_file  These functions have been reorganised to break out functions that deal with only file or URL handling to allow for better unit testing and to prepare for get_file which will also use some of these functions.  Change-Id: I8576d09c556fc0835004da6b78070686482361e0,testing,,,,,,
openstack%2Fpython-heatclient~master~I8576d09c556fc0835004da6b78070686482361e0,https://review.opendev.org/66229,Refactor environment functions in preparation for get_file,Refactor environment functions in preparation for get_file  These functions have been reorganised to break out functions that deal with only file or URL handling to allow for better unit testing and to prepare for get_file which will also use some of these functions.  Change-Id: I8576d09c556fc0835004da6b78070686482361e0,objective,,,,,,
openstack%2Fpython-novaclient~master~I133d7706458c71974ba464ab686cf3679a562592,https://review.opendev.org/64686,shell: refactor boot to use _print_server,"shell: refactor boot to use _print_server  In the shell command when we use the command boot, at the end we use code to print some server information. We should use the already defined function _print_server.  Change-Id: I133d7706458c71974ba464ab686cf3679a562592 Closes-Bug: #1265534",quality,,,,,,
openstack%2Fpython-novaclient~master~I133d7706458c71974ba464ab686cf3679a562592,https://review.opendev.org/64686,shell: refactor boot to use _print_server,"shell: refactor boot to use _print_server  In the shell command when we use the command boot, at the end we use code to print some server information. We should use the already defined function _print_server.  Change-Id: I133d7706458c71974ba464ab686cf3679a562592 Closes-Bug: #1265534",objective,,,,,,
openstack%2Fmurano-dashboard~master~Ib578a24159dda4de5fecf5df35ff71bc7d704215,https://review.opendev.org/65710,Minor refactoring of dynamic_ui.,Minor refactoring of dynamic_ui.  Move more functions to dynamic_ui.helpers.  Change-Id: Ib578a24159dda4de5fecf5df35ff71bc7d704215,refactoring,,,,,,
openstack%2Ftaskflow~master~Ied31dd893502ec91a48f7d2e1ef2cd4553a07f89,https://review.opendev.org/64614,Refactor task handler binding,"Refactor task handler binding  Instead of using a dictionary of handler mappings use a dict[event] -> list of handler mappings, this allows the same function/handler to be bound more than once (which can be useful to do, depending on handler specifications) and to allow for removal of these handlers find the first match and remove it using the reflection callback comparison routine.  Change-Id: Ied31dd893502ec91a48f7d2e1ef2cd4553a07f89",objective,,,,,,
openstack%2Ftaskflow~master~Ied31dd893502ec91a48f7d2e1ef2cd4553a07f89,https://review.opendev.org/64614,Refactor task handler binding,"Refactor task handler binding  Instead of using a dictionary of handler mappings use a dict[event] -> list of handler mappings, this allows the same function/handler to be bound more than once (which can be useful to do, depending on handler specifications) and to allow for removal of these handlers find the first match and remove it using the reflection callback comparison routine.  Change-Id: Ied31dd893502ec91a48f7d2e1ef2cd4553a07f89",objective,,,,,,
openstack%2Fhorizon~master~I595b978fb7e9da867bd7a4d66dd07e9eaec9e7b4,https://review.opendev.org/64728,Refactoring the loadbalancing view classes,"Refactoring the loadbalancing view classes  In several view classes, there's overloaded functions that do nothing but calling the overloaded function and returning the results. Removed theses functions.  Change-Id: I595b978fb7e9da867bd7a4d66dd07e9eaec9e7b4 Closes-Bug: #1265619",objective,,,,,,
openstack%2Fhorizon~master~I595b978fb7e9da867bd7a4d66dd07e9eaec9e7b4,https://review.opendev.org/64728,Refactoring the loadbalancing view classes,"Refactoring the loadbalancing view classes  In several view classes, there's overloaded functions that do nothing but calling the overloaded function and returning the results. Removed theses functions.  Change-Id: I595b978fb7e9da867bd7a4d66dd07e9eaec9e7b4 Closes-Bug: #1265619",objective,,,,,,
openstack%2Fmurano-dashboard~master~If14022435a5ef269a448d5f568fe0f33421c9f23,https://review.opendev.org/63639,Minor refactoring of dynamic_ui package.,Minor refactoring of dynamic_ui package.  Remove one inner import in dynamic_ui.services and rewrite a bit iterate_over_services() function.  Change-Id: If14022435a5ef269a448d5f568fe0f33421c9f23,refactoring,,,,,,
x%2Fcloudcafe~master~I87897d65fc0f8883d9383134ce492d9e52850bd1,https://review.opendev.org/62289,First stage of Auth Provider refactor,First stage of Auth Provider refactor  * Surfaced rax and keystone authentication functions   so that they can be used without config files   when necessary  Change-Id: I87897d65fc0f8883d9383134ce492d9e52850bd1,refactoring,,,,,,
x%2Fcloudcafe~master~I87897d65fc0f8883d9383134ce492d9e52850bd1,https://review.opendev.org/62289,First stage of Auth Provider refactor,First stage of Auth Provider refactor  * Surfaced rax and keystone authentication functions   so that they can be used without config files   when necessary  Change-Id: I87897d65fc0f8883d9383134ce492d9e52850bd1,objective,,,,,,
openstack%2Fkeystone~master~I1a46c8974cbd68a5bf708d253adfadc1fdb76dcd,https://review.opendev.org/62062,Refactor setup_logging,"Refactor setup_logging  This change just cleans up the setup_logging function. It was defined in keystone.common.config and then also exported from keystone.config. Also, it had extra parameters that were unused.  This takes care of a NOTE (which probably should have been a TODO) in the code.  Change-Id: I1a46c8974cbd68a5bf708d253adfadc1fdb76dcd",objective,,,,,,
openstack%2Fkeystone~master~I1a46c8974cbd68a5bf708d253adfadc1fdb76dcd,https://review.opendev.org/62062,Refactor setup_logging,"Refactor setup_logging  This change just cleans up the setup_logging function. It was defined in keystone.common.config and then also exported from keystone.config. Also, it had extra parameters that were unused.  This takes care of a NOTE (which probably should have been a TODO) in the code.  Change-Id: I1a46c8974cbd68a5bf708d253adfadc1fdb76dcd",objective,,,,,,
openstack%2Ffuel-ostf~master~Icc6972d1aa413321a89c924cda3b9cc9ae9cb4ee,https://review.opendev.org/61472,Tests refactoring for ci,Tests refactoring for ci  Function setUpPackage() from tests/__init__.py was modified: ostf-server setup was added as child process via subprocess.Process() construction so that now both unit and functional tests can be run without any pre setup of fake ostf-server nor nailgunmimic because these actions are managed now by nose.  Change-Id: Icc6972d1aa413321a89c924cda3b9cc9ae9cb4ee,testing,,,,,,
openstack%2Ffuel-ostf~master~Icc6972d1aa413321a89c924cda3b9cc9ae9cb4ee,https://review.opendev.org/61472,Tests refactoring for ci,Tests refactoring for ci  Function setUpPackage() from tests/__init__.py was modified: ostf-server setup was added as child process via subprocess.Process() construction so that now both unit and functional tests can be run without any pre setup of fake ostf-server nor nailgunmimic because these actions are managed now by nose.  Change-Id: Icc6972d1aa413321a89c924cda3b9cc9ae9cb4ee,objective,,,,,,
openstack%2Ffuel-ostf~master~Icc6972d1aa413321a89c924cda3b9cc9ae9cb4ee,https://review.opendev.org/61472,Tests refactoring for ci,Tests refactoring for ci  Function setUpPackage() from tests/__init__.py was modified: ostf-server setup was added as child process via subprocess.Process() construction so that now both unit and functional tests can be run without any pre setup of fake ostf-server nor nailgunmimic because these actions are managed now by nose.  Change-Id: Icc6972d1aa413321a89c924cda3b9cc9ae9cb4ee,objective,,,,,,
x%2Fcloudcafe~master~I6f47bb7183dfbd540e94f9d5b211f0cc8d14e7b2,https://review.opendev.org/58836,Refactor Glance Images v2.0 Behaviors,"Refactor Glance Images v2.0 Behaviors  Behaviors refactoring:  - used Glange default functionality for image creation  - values of tag, protected and visibility are by default set by Glance.  Change-Id: I6f47bb7183dfbd540e94f9d5b211f0cc8d14e7b2",refactoring,,,,,,
x%2Fcloudcafe~master~I6f47bb7183dfbd540e94f9d5b211f0cc8d14e7b2,https://review.opendev.org/58836,Refactor Glance Images v2.0 Behaviors,"Refactor Glance Images v2.0 Behaviors  Behaviors refactoring:  - used Glange default functionality for image creation  - values of tag, protected and visibility are by default set by Glance.  Change-Id: I6f47bb7183dfbd540e94f9d5b211f0cc8d14e7b2",objective,,,,,,
openstack%2Ffuel-ostf~master~Ia0752eaf145ca38b17a4d3f30b9c0e72566a1288,https://review.opendev.org/61081,Non major core refactoring,Non major core refactoring  Some utilities were grouped in new file mixins.py. This was done with purpose of code spreading minimazing. Because of that two files are not neede any more so they were deleted (utils/utils.py and wsgi_utils.py). Unit and functional tests were updated.  Change-Id: Ia0752eaf145ca38b17a4d3f30b9c0e72566a1288,refactoring,,,,,,
openstack%2Ffuel-ostf~master~Ia0752eaf145ca38b17a4d3f30b9c0e72566a1288,https://review.opendev.org/61081,Non major core refactoring,Non major core refactoring  Some utilities were grouped in new file mixins.py. This was done with purpose of code spreading minimazing. Because of that two files are not neede any more so they were deleted (utils/utils.py and wsgi_utils.py). Unit and functional tests were updated.  Change-Id: Ia0752eaf145ca38b17a4d3f30b9c0e72566a1288,testing,,,,,,
openstack%2Frally~master~I7e25dd006e46bf66fd9419090ea310629ba7d19f,https://review.opendev.org/60327,Refactoring for generic benchmark cleanup,Refactoring for generic benchmark cleanup  Initial refactoring which will be used in the generic benchmark cleanup implementation. Specifically the utility functions which existed in the NovaScenarios class are now exposed in benchmark.test_utils. Moreover a few of these functions have been enahanced to be more generic/flexible in nature.  Subsequent patch will provide the actual generic cleanup.  Implements partial: blueprint benchmark-cloud-cleanup  Change-Id: I7e25dd006e46bf66fd9419090ea310629ba7d19f,objective,,,,,,
openstack%2Frally~master~I7e25dd006e46bf66fd9419090ea310629ba7d19f,https://review.opendev.org/60327,Refactoring for generic benchmark cleanup,Refactoring for generic benchmark cleanup  Initial refactoring which will be used in the generic benchmark cleanup implementation. Specifically the utility functions which existed in the NovaScenarios class are now exposed in benchmark.test_utils. Moreover a few of these functions have been enahanced to be more generic/flexible in nature.  Subsequent patch will provide the actual generic cleanup.  Implements partial: blueprint benchmark-cloud-cleanup  Change-Id: I7e25dd006e46bf66fd9419090ea310629ba7d19f,objective,,,,,,
openstack%2Ffuel-ostf~master~I4a033757c8d902c90b0a6c7eb54c1511ab721f99,https://review.opendev.org/57214,Unittests refactoring for ci,Unittests refactoring for ci  Logic that supports automated execution of unit tests for ci purpose were added via setUp/tearDownPackage functions in testing/tests/__init__.py file. Now when tests started via nose in package setUp function nailgunmimic server is setting up in separate process and terminating in tearDown. This functionality provides unified way to execute unit tests.  Change-Id: I4a033757c8d902c90b0a6c7eb54c1511ab721f99,objective,,,,,,
openstack%2Ffuel-ostf~master~I4a033757c8d902c90b0a6c7eb54c1511ab721f99,https://review.opendev.org/57214,Unittests refactoring for ci,Unittests refactoring for ci  Logic that supports automated execution of unit tests for ci purpose were added via setUp/tearDownPackage functions in testing/tests/__init__.py file. Now when tests started via nose in package setUp function nailgunmimic server is setting up in separate process and terminating in tearDown. This functionality provides unified way to execute unit tests.  Change-Id: I4a033757c8d902c90b0a6c7eb54c1511ab721f99,testing,,,,,,
openstack%2Ffuel-ostf~master~I4a033757c8d902c90b0a6c7eb54c1511ab721f99,https://review.opendev.org/57214,Unittests refactoring for ci,Unittests refactoring for ci  Logic that supports automated execution of unit tests for ci purpose were added via setUp/tearDownPackage functions in testing/tests/__init__.py file. Now when tests started via nose in package setUp function nailgunmimic server is setting up in separate process and terminating in tearDown. This functionality provides unified way to execute unit tests.  Change-Id: I4a033757c8d902c90b0a6c7eb54c1511ab721f99,objective,,,,,,
stackforge-attic%2Fmurano-repository~master~Id208c825857d0a12862923448dd31147806bdb2b,https://review.opendev.org/56986,Refactor convert() function to serialize().,Refactor convert() function to serialize().  Take advantage of PyYAML in python3.  Change-Id: Id208c825857d0a12862923448dd31147806bdb2b,refactoring,,,,,,
openstack%2Fdiskimage-builder~master~I5519cc52398e442b24e33802bae42070d64b0c1d,https://review.opendev.org/56046,Python code refactorings.,"Python code refactorings.  This commit refactors the python code in diskimage_builder slightly.  This is in preparation for a larger review that adds more functionality to the python code, namely the ability to apply elements to the current system as opposed to a chroot.  Further, the refactorings can stand on their own for better clarity. They include:  - renaming elements.py to element_dependencies.py.  Adds clarity about the    purpose of this module.  - updating other code for this rename.  - move tests into a tests submodule.  Change-Id: I5519cc52398e442b24e33802bae42070d64b0c1d",objective,,,,,,
openstack%2Fdiskimage-builder~master~I5519cc52398e442b24e33802bae42070d64b0c1d,https://review.opendev.org/56046,Python code refactorings.,"Python code refactorings.  This commit refactors the python code in diskimage_builder slightly.  This is in preparation for a larger review that adds more functionality to the python code, namely the ability to apply elements to the current system as opposed to a chroot.  Further, the refactorings can stand on their own for better clarity. They include:  - renaming elements.py to element_dependencies.py.  Adds clarity about the    purpose of this module.  - updating other code for this rename.  - move tests into a tests submodule.  Change-Id: I5519cc52398e442b24e33802bae42070d64b0c1d",quality,,,,,,
x%2Fcloudroast~master~Idfb3379b712b42e2a33385955bf09f675bee82bc,https://review.opendev.org/53855,DELETE v2.0/images/{image_id}/tags/{tag} - Refactoring,DELETE v2.0/images/{image_id}/tags/{tag} - Refactoring  Refactors all tests to use images_behavior functionality.  Change-Id: Idfb3379b712b42e2a33385955bf09f675bee82bc,refactoring,,,,,,
x%2Fcloudroast~master~Idfb3379b712b42e2a33385955bf09f675bee82bc,https://review.opendev.org/53855,DELETE v2.0/images/{image_id}/tags/{tag} - Refactoring,DELETE v2.0/images/{image_id}/tags/{tag} - Refactoring  Refactors all tests to use images_behavior functionality.  Change-Id: Idfb3379b712b42e2a33385955bf09f675bee82bc,testing,,,,,,
x%2Fcloudroast~master~I737e9e2e9a8cd5940e46b3ca8702689041f19454,https://review.opendev.org/53863,PATCH v2.0/images/{image_id} - Refactoring,PATCH v2.0/images/{image_id} - Refactoring  Refactors all tests to use images_behavior functionality.  Change-Id: I737e9e2e9a8cd5940e46b3ca8702689041f19454,refactoring,,,,,,
x%2Fcloudroast~master~I737e9e2e9a8cd5940e46b3ca8702689041f19454,https://review.opendev.org/53863,PATCH v2.0/images/{image_id} - Refactoring,PATCH v2.0/images/{image_id} - Refactoring  Refactors all tests to use images_behavior functionality.  Change-Id: I737e9e2e9a8cd5940e46b3ca8702689041f19454,testing,,,,,,
x%2Fcloudroast~master~I04a6f6cd8ab3a097896795001b69e190ca8f4792,https://review.opendev.org/53849,DELETE v2.0/images/{image_id} - Refactoring,DELETE v2.0/images/{image_id} - Refactoring  Refactors all tests to use images_behavior functionality.  Change-Id: I04a6f6cd8ab3a097896795001b69e190ca8f4792,refactoring,,,,,,
x%2Fcloudroast~master~I04a6f6cd8ab3a097896795001b69e190ca8f4792,https://review.opendev.org/53849,DELETE v2.0/images/{image_id} - Refactoring,DELETE v2.0/images/{image_id} - Refactoring  Refactors all tests to use images_behavior functionality.  Change-Id: I04a6f6cd8ab3a097896795001b69e190ca8f4792,testing,,,,,,
x%2Fcloudroast~master~Ifff0d95de33b6f1d7947c74d55cd374d43991240,https://review.opendev.org/53872,POST v2.0/images/{image_id}/tags/{tag} - Refactoring,POST v2.0/images/{image_id}/tags/{tag} - Refactoring  Refactors all tests to use images_behavior functionality.  Change-Id: Ifff0d95de33b6f1d7947c74d55cd374d43991240,refactoring,,,,,,
x%2Fcloudroast~master~Ifff0d95de33b6f1d7947c74d55cd374d43991240,https://review.opendev.org/53872,POST v2.0/images/{image_id}/tags/{tag} - Refactoring,POST v2.0/images/{image_id}/tags/{tag} - Refactoring  Refactors all tests to use images_behavior functionality.  Change-Id: Ifff0d95de33b6f1d7947c74d55cd374d43991240,testing,,,,,,
x%2Fcloudroast~master~I78efd2e969509c94cdaad01f56163e298edb6991,https://review.opendev.org/53856,GET v2.0/images/{image_id} - Refactoring,GET v2.0/images/{image_id} - Refactoring  Refactors all tests to use images_behavior functionality.  Change-Id: I78efd2e969509c94cdaad01f56163e298edb6991,refactoring,,,,,,
x%2Fcloudroast~master~I78efd2e969509c94cdaad01f56163e298edb6991,https://review.opendev.org/53856,GET v2.0/images/{image_id} - Refactoring,GET v2.0/images/{image_id} - Refactoring  Refactors all tests to use images_behavior functionality.  Change-Id: I78efd2e969509c94cdaad01f56163e298edb6991,testing,,,,,,
x%2Fcloudroast~master~Ife90049463ba949a85abaf578aa2b5a7ca73f769,https://review.opendev.org/53861,GET v2.0/images/{image_id}/file - Refactoring,GET v2.0/images/{image_id}/file - Refactoring  Refactors all tests to use images_behavior functionality.  Change-Id: Ife90049463ba949a85abaf578aa2b5a7ca73f769,refactoring,,,,,,
x%2Fcloudroast~master~Ife90049463ba949a85abaf578aa2b5a7ca73f769,https://review.opendev.org/53861,GET v2.0/images/{image_id}/file - Refactoring,GET v2.0/images/{image_id}/file - Refactoring  Refactors all tests to use images_behavior functionality.  Change-Id: Ife90049463ba949a85abaf578aa2b5a7ca73f769,testing,,,,,,
x%2Fcloudroast~master~I6532ad54c23d74c8501c5adfae79a549590d417c,https://review.opendev.org/53865,POST v2.0/images/{image_id}/members - Refactoring,POST v2.0/images/{image_id}/members - Refactoring  Refactors all tests to use images_behavior functionality.  Change-Id: I6532ad54c23d74c8501c5adfae79a549590d417c,refactoring,,,,,,
x%2Fcloudroast~master~I6532ad54c23d74c8501c5adfae79a549590d417c,https://review.opendev.org/53865,POST v2.0/images/{image_id}/members - Refactoring,POST v2.0/images/{image_id}/members - Refactoring  Refactors all tests to use images_behavior functionality.  Change-Id: I6532ad54c23d74c8501c5adfae79a549590d417c,testing,,,,,,
x%2Fcloudroast~master~I6cde7cba34959db251d965a92be94b6a2b3611d4,https://review.opendev.org/53873,PUT v2.0/images/{image_id}/members/{member_id} - Refactoring,PUT v2.0/images/{image_id}/members/{member_id} - Refactoring  Refactors all tests to use images_behavior functionality.  Change-Id: I6cde7cba34959db251d965a92be94b6a2b3611d4,refactoring,,,,,,
x%2Fcloudroast~master~I6cde7cba34959db251d965a92be94b6a2b3611d4,https://review.opendev.org/53873,PUT v2.0/images/{image_id}/members/{member_id} - Refactoring,PUT v2.0/images/{image_id}/members/{member_id} - Refactoring  Refactors all tests to use images_behavior functionality.  Change-Id: I6cde7cba34959db251d965a92be94b6a2b3611d4,testing,,,,,,
x%2Fcloudroast~master~Ieccf07586e9a6a9a7f7859162d1c22d96fb2ea58,https://review.opendev.org/53853,DELETE v2.0/images/{image_id}/members/{member_id} - Refactoring,DELETE v2.0/images/{image_id}/members/{member_id} - Refactoring  Refactors all tests to use images_behavior functionality.  Change-Id: Ieccf07586e9a6a9a7f7859162d1c22d96fb2ea58,refactoring,,,,,,
x%2Fcloudroast~master~Ieccf07586e9a6a9a7f7859162d1c22d96fb2ea58,https://review.opendev.org/53853,DELETE v2.0/images/{image_id}/members/{member_id} - Refactoring,DELETE v2.0/images/{image_id}/members/{member_id} - Refactoring  Refactors all tests to use images_behavior functionality.  Change-Id: Ieccf07586e9a6a9a7f7859162d1c22d96fb2ea58,testing,,,,,,
x%2Fcloudroast~master~Ia9f62e6ba202bb2d1b9383a48f61f4f9728eb974,https://review.opendev.org/53862,GET v2.0/images/{image_id}/members - Refactoring,GET v2.0/images/{image_id}/members - Refactoring  Refactors all tests to use images_behavior functionality.  Change-Id: Ia9f62e6ba202bb2d1b9383a48f61f4f9728eb974,refactoring,,,,,,
x%2Fcloudroast~master~Ia9f62e6ba202bb2d1b9383a48f61f4f9728eb974,https://review.opendev.org/53862,GET v2.0/images/{image_id}/members - Refactoring,GET v2.0/images/{image_id}/members - Refactoring  Refactors all tests to use images_behavior functionality.  Change-Id: Ia9f62e6ba202bb2d1b9383a48f61f4f9728eb974,testing,,,,,,
x%2Fanvil~master~Ieee913659924dbcfc830350fc7c190b5e53ff565,https://review.opendev.org/52609,Refactor yum packages collection mechanism,Refactor yum packages collection mechanism  * Get desired rpms from dependencies and from instances   functions joined and unified. * Requirement objects are used instead of package names.  Change-Id: Ieee913659924dbcfc830350fc7c190b5e53ff565 Implements: blueprint yum-refactor-collecting-packages,objective,,,,,,
x%2Fanvil~master~Ieee913659924dbcfc830350fc7c190b5e53ff565,https://review.opendev.org/52609,Refactor yum packages collection mechanism,Refactor yum packages collection mechanism  * Get desired rpms from dependencies and from instances   functions joined and unified. * Requirement objects are used instead of package names.  Change-Id: Ieee913659924dbcfc830350fc7c190b5e53ff565 Implements: blueprint yum-refactor-collecting-packages,quality,,,,,,
x%2Fopencafe~master~Ieb0374264608ead5ae9e4dab4c8c912404d54333,https://review.opendev.org/48871,Refactor of SSH client,Refactor of SSH client  * Override Paramiko's SSH client to return status code * Created strongly typed response for exec_command * Created new base SSH client which handles the bare essentials * Created base SSH behaviors to encapsulate functionality from the client  Change-Id: Ieb0374264608ead5ae9e4dab4c8c912404d54333,objective,,,,,,
x%2Fopencafe~master~Ieb0374264608ead5ae9e4dab4c8c912404d54333,https://review.opendev.org/48871,Refactor of SSH client,Refactor of SSH client  * Override Paramiko's SSH client to return status code * Created strongly typed response for exec_command * Created new base SSH client which handles the bare essentials * Created base SSH behaviors to encapsulate functionality from the client  Change-Id: Ieb0374264608ead5ae9e4dab4c8c912404d54333,quality,,,,,,
x%2Fcloudcafe~master~I2ed044436d3c4751afa79e5ba140e160ee67edc1,https://review.opendev.org/50222,Refactor of Remote Instance client,Refactor of Remote Instance client  * Moved instance client into Compute namespace * Moved ping client into Compute namespace * Added instance client base class * Simplified functionality provided by instance client  Change-Id: I2ed044436d3c4751afa79e5ba140e160ee67edc1,objective,,,,,,
x%2Fcloudcafe~master~I2ed044436d3c4751afa79e5ba140e160ee67edc1,https://review.opendev.org/50222,Refactor of Remote Instance client,Refactor of Remote Instance client  * Moved instance client into Compute namespace * Moved ping client into Compute namespace * Added instance client base class * Simplified functionality provided by instance client  Change-Id: I2ed044436d3c4751afa79e5ba140e160ee67edc1,refactoring,,,,,,
starlingx%2Futilities~master~I5c7639fb77e7a2a3edd3c99a8b29b0761cd444c4,https://review.opendev.org/720615,Verify-license refactoring,"Verify-license refactoring  Added variable number of arguments capability and cleaned up unused code. Allowing variable number of arguments would help different vendors implement their own version of licensing that might need additional information to be passed to the verify_license function, e.g. software version.  Story: 2007403 Task: 39407  Change-Id: I5c7639fb77e7a2a3edd3c99a8b29b0761cd444c4 Signed-off-by: Carmen Rata <carmen.rata@windriver.com>",objective,,,,,,
starlingx%2Futilities~master~I5c7639fb77e7a2a3edd3c99a8b29b0761cd444c4,https://review.opendev.org/720615,Verify-license refactoring,"Verify-license refactoring  Added variable number of arguments capability and cleaned up unused code. Allowing variable number of arguments would help different vendors implement their own version of licensing that might need additional information to be passed to the verify_license function, e.g. software version.  Story: 2007403 Task: 39407  Change-Id: I5c7639fb77e7a2a3edd3c99a8b29b0761cd444c4 Signed-off-by: Carmen Rata <carmen.rata@windriver.com>",quality,,,,,,
starlingx%2Futilities~master~I5c7639fb77e7a2a3edd3c99a8b29b0761cd444c4,https://review.opendev.org/720615,Verify-license refactoring,"Verify-license refactoring  Added variable number of arguments capability and cleaned up unused code. Allowing variable number of arguments would help different vendors implement their own version of licensing that might need additional information to be passed to the verify_license function, e.g. software version.  Story: 2007403 Task: 39407  Change-Id: I5c7639fb77e7a2a3edd3c99a8b29b0761cd444c4 Signed-off-by: Carmen Rata <carmen.rata@windriver.com>",objective,,,,,,
x%2Fstackalytics~master~I7a7fbdfaeec7fc8fc0a22021d0640848a5f08e87,https://review.opendev.org/46675,Refactor read_uri function,Refactor read_uri function  Change-Id: I7a7fbdfaeec7fc8fc0a22021d0640848a5f08e87,refactoring,,,,,,
openstack%2Fswift~master~I9a20d37fc9e1a68b10149a7aa78cb9691fc04ea9,https://review.opendev.org/42447,Refactor path splitting and validation.,"Refactor path splitting and validation.  The account, container, and object servers all do the same thing at the top of GET/PUT/etc.: they split the path, validate that the first two components are a good (device, partition) pair, and return a 400 if they're not. The object server already had a module-local helper function for this, but the account and container servers just had duplicate boilerplate code. Now it's all in one common helper.  Change-Id: I9a20d37fc9e1a68b10149a7aa78cb9691fc04ea9",refactoring,,,,,,
openstack%2Fswift~master~I9a20d37fc9e1a68b10149a7aa78cb9691fc04ea9,https://review.opendev.org/42447,Refactor path splitting and validation.,"Refactor path splitting and validation.  The account, container, and object servers all do the same thing at the top of GET/PUT/etc.: they split the path, validate that the first two components are a good (device, partition) pair, and return a 400 if they're not. The object server already had a module-local helper function for this, but the account and container servers just had duplicate boilerplate code. Now it's all in one common helper.  Change-Id: I9a20d37fc9e1a68b10149a7aa78cb9691fc04ea9",quality,,,,,,
openstack%2Fswift~master~I9a20d37fc9e1a68b10149a7aa78cb9691fc04ea9,https://review.opendev.org/42447,Refactor path splitting and validation.,"Refactor path splitting and validation.  The account, container, and object servers all do the same thing at the top of GET/PUT/etc.: they split the path, validate that the first two components are a good (device, partition) pair, and return a 400 if they're not. The object server already had a module-local helper function for this, but the account and container servers just had duplicate boilerplate code. Now it's all in one common helper.  Change-Id: I9a20d37fc9e1a68b10149a7aa78cb9691fc04ea9",objective,,,,,,
openstack%2Fswift~master~I316873df289160d526487ad116f6fbb9a575e3de,https://review.opendev.org/42002,Refactor how we pick listings' content type.,"Refactor how we pick listings' content type.  There were a few different places where we had some repeated code to figure out what format an account or container listing response should be in (text, JSON, or XML). Now that's been pulled into a single function.  As part of this, you can now raise HTTPException subclasses in proxy controllers instead of laboriously plumbing error responses all the way back up to swift.proxy.server.Application.handle_request(). This lets us avoid certain ugly patterns, like the one where a method returns a tuple of (x, y, z, error) and the caller has to see if it got (value, value, value, None) or (None, None, None, errorvalue). Now we can just raise the error.  Change-Id: I316873df289160d526487ad116f6fbb9a575e3de",objective,,,,,,
openstack%2Fswift~master~I316873df289160d526487ad116f6fbb9a575e3de,https://review.opendev.org/42002,Refactor how we pick listings' content type.,"Refactor how we pick listings' content type.  There were a few different places where we had some repeated code to figure out what format an account or container listing response should be in (text, JSON, or XML). Now that's been pulled into a single function.  As part of this, you can now raise HTTPException subclasses in proxy controllers instead of laboriously plumbing error responses all the way back up to swift.proxy.server.Application.handle_request(). This lets us avoid certain ugly patterns, like the one where a method returns a tuple of (x, y, z, error) and the caller has to see if it got (value, value, value, None) or (None, None, None, errorvalue). Now we can just raise the error.  Change-Id: I316873df289160d526487ad116f6fbb9a575e3de",quality,,,,,,
openstack%2Fswift~master~I316873df289160d526487ad116f6fbb9a575e3de,https://review.opendev.org/42002,Refactor how we pick listings' content type.,"Refactor how we pick listings' content type.  There were a few different places where we had some repeated code to figure out what format an account or container listing response should be in (text, JSON, or XML). Now that's been pulled into a single function.  As part of this, you can now raise HTTPException subclasses in proxy controllers instead of laboriously plumbing error responses all the way back up to swift.proxy.server.Application.handle_request(). This lets us avoid certain ugly patterns, like the one where a method returns a tuple of (x, y, z, error) and the caller has to see if it got (value, value, value, None) or (None, None, None, errorvalue). Now we can just raise the error.  Change-Id: I316873df289160d526487ad116f6fbb9a575e3de",objective,,,,,,
openstack%2Ftaskflow~master~I43f4ae2db2b7a20f294e2f2d91d53e151a60b139,https://review.opendev.org/43169,Refactor decorators,"Refactor decorators  There must be difference between task class and task instance: at the very least, they have different uuids. Task decorator should produce task classes, not instances.  This commit attempts to simplify things by adding attribute to function instead of wrapping it.  Change-Id: I43f4ae2db2b7a20f294e2f2d91d53e151a60b139",objective,,,,,,
openstack%2Ftaskflow~master~I43f4ae2db2b7a20f294e2f2d91d53e151a60b139,https://review.opendev.org/43169,Refactor decorators,"Refactor decorators  There must be difference between task class and task instance: at the very least, they have different uuids. Task decorator should produce task classes, not instances.  This commit attempts to simplify things by adding attribute to function instead of wrapping it.  Change-Id: I43f4ae2db2b7a20f294e2f2d91d53e151a60b139",quality,,,,,,
openstack%2Ftaskflow~master~I43f4ae2db2b7a20f294e2f2d91d53e151a60b139,https://review.opendev.org/43169,Refactor decorators,"Refactor decorators  There must be difference between task class and task instance: at the very least, they have different uuids. Task decorator should produce task classes, not instances.  This commit attempts to simplify things by adding attribute to function instead of wrapping it.  Change-Id: I43f4ae2db2b7a20f294e2f2d91d53e151a60b139",objective,,,,,,
openstack%2Fnova~master~If34bb8849ad2dacf471f1bec5e72a37ddda79464,https://review.opendev.org/40907,xenapi: refactor - extract get_virtual_size,"xenapi: refactor - extract get_virtual_size  This change extracts a function get_virtual_size. This is needed, because we would like to support tar.gz files, in which case the image's virtual size will be determined by looking at the tar.gz stream. The first tarinfo will tell us the size.  related to blueprint xenapi-supported-image-import-export  Change-Id: If34bb8849ad2dacf471f1bec5e72a37ddda79464",objective,,,,,,
openstack%2Fnova~master~If34bb8849ad2dacf471f1bec5e72a37ddda79464,https://review.opendev.org/40907,xenapi: refactor - extract get_virtual_size,"xenapi: refactor - extract get_virtual_size  This change extracts a function get_virtual_size. This is needed, because we would like to support tar.gz files, in which case the image's virtual size will be determined by looking at the tar.gz stream. The first tarinfo will tell us the size.  related to blueprint xenapi-supported-image-import-export  Change-Id: If34bb8849ad2dacf471f1bec5e72a37ddda79464",integration,,,,,,
openstack%2Fnova~master~If34bb8849ad2dacf471f1bec5e72a37ddda79464,https://review.opendev.org/40907,xenapi: refactor - extract get_virtual_size,"xenapi: refactor - extract get_virtual_size  This change extracts a function get_virtual_size. This is needed, because we would like to support tar.gz files, in which case the image's virtual size will be determined by looking at the tar.gz stream. The first tarinfo will tell us the size.  related to blueprint xenapi-supported-image-import-export  Change-Id: If34bb8849ad2dacf471f1bec5e72a37ddda79464",objective,,,,,,
openstack%2Fnova~master~I27681da069ba2cd23670ef41f54ed9ac5af31ae6,https://review.opendev.org/40906,xenapi: refactor - extract get_stream_funct_for,"xenapi: refactor - extract get_stream_funct_for  This change extracts the get_stream_funct_for function. As we would like to support tar.gz compressed raw images, the stream function for them should be different from the plain ones.  related to blueprint xenapi-supported-image-import-export  Change-Id: I27681da069ba2cd23670ef41f54ed9ac5af31ae6",objective,,,,,,
openstack%2Fnova~master~I27681da069ba2cd23670ef41f54ed9ac5af31ae6,https://review.opendev.org/40906,xenapi: refactor - extract get_stream_funct_for,"xenapi: refactor - extract get_stream_funct_for  This change extracts the get_stream_funct_for function. As we would like to support tar.gz compressed raw images, the stream function for them should be different from the plain ones.  related to blueprint xenapi-supported-image-import-export  Change-Id: I27681da069ba2cd23670ef41f54ed9ac5af31ae6",integration,,,,,,
openstack%2Fnova~master~I27681da069ba2cd23670ef41f54ed9ac5af31ae6,https://review.opendev.org/40906,xenapi: refactor - extract get_stream_funct_for,"xenapi: refactor - extract get_stream_funct_for  This change extracts the get_stream_funct_for function. As we would like to support tar.gz compressed raw images, the stream function for them should be different from the plain ones.  related to blueprint xenapi-supported-image-import-export  Change-Id: I27681da069ba2cd23670ef41f54ed9ac5af31ae6",objective,,,,,,
x%2Fcloudcafe~master~If4e56b2b90b3395eafd0b71f14d23bf0d3d97db6,https://review.opendev.org/42567,Refactor of Servers requests,"Refactor of Servers requests  * Replaced usage of banned _auto_to_* function calls    with proper serialization * Renamed un-pythonic properties to proper names * Refactored rebuild to no longer inherit from create   server. There could be some code sharing between the   two, but the previous implementation was hackish  Change-Id: If4e56b2b90b3395eafd0b71f14d23bf0d3d97db6",quality,,,,,,
x%2Fcloudcafe~master~If4e56b2b90b3395eafd0b71f14d23bf0d3d97db6,https://review.opendev.org/42567,Refactor of Servers requests,"Refactor of Servers requests  * Replaced usage of banned _auto_to_* function calls    with proper serialization * Renamed un-pythonic properties to proper names * Refactored rebuild to no longer inherit from create   server. There could be some code sharing between the   two, but the previous implementation was hackish  Change-Id: If4e56b2b90b3395eafd0b71f14d23bf0d3d97db6",objective,,,,,,
openstack%2Freviewstats~master~I6c59474da3e72e6cf21366f259173630a9a22863,https://review.opendev.org/41244,Refactor into a main() function,Refactor into a main() function  Add a main() function.  Also only process one project's changes at a time to help reduce how much has to be held in memory at once.  Change-Id: I6c59474da3e72e6cf21366f259173630a9a22863,objective,,,,,,
openstack%2Freviewstats~master~I6c59474da3e72e6cf21366f259173630a9a22863,https://review.opendev.org/41244,Refactor into a main() function,Refactor into a main() function  Add a main() function.  Also only process one project's changes at a time to help reduce how much has to be held in memory at once.  Change-Id: I6c59474da3e72e6cf21366f259173630a9a22863,refactoring,,,,,,
openstack%2Freviewstats~master~I6c59474da3e72e6cf21366f259173630a9a22863,https://review.opendev.org/41244,Refactor into a main() function,Refactor into a main() function  Add a main() function.  Also only process one project's changes at a time to help reduce how much has to be held in memory at once.  Change-Id: I6c59474da3e72e6cf21366f259173630a9a22863,objective,,,,,,
openstack%2Fheat~master~I529e2d1324981de7336264b5c697f1944668d013,https://review.opendev.org/40510,Refactor useful nova functions for re-use.,Refactor useful nova functions for re-use.  Refactor handy nova functions out of Instance and into a helper module. This allows alternate compute implementations to use this functionality without having to subclass.  Change-Id: I529e2d1324981de7336264b5c697f1944668d013,quality,,,,,,
openstack%2Fheat~master~I529e2d1324981de7336264b5c697f1944668d013,https://review.opendev.org/40510,Refactor useful nova functions for re-use.,Refactor useful nova functions for re-use.  Refactor handy nova functions out of Instance and into a helper module. This allows alternate compute implementations to use this functionality without having to subclass.  Change-Id: I529e2d1324981de7336264b5c697f1944668d013,objective,,,,,,
openstack%2Fvalidations-libs~master~I41f15c28dfddd911294ecc8e3e0331a4956dc5d8,https://review.opendev.org/787165,CLI colors refactored,CLI colors refactored  Colors are now stored in their own module. Output coloring was factored out into a separate utility function.  State => color mapping is now implemented as a dictionary instead of multiple conditionals.  Signed-off-by: Jiri Podivin <jpodivin@redhat.com> Change-Id: I41f15c28dfddd911294ecc8e3e0331a4956dc5d8,objective,,,,,,
openstack%2Fvalidations-libs~master~I41f15c28dfddd911294ecc8e3e0331a4956dc5d8,https://review.opendev.org/787165,CLI colors refactored,CLI colors refactored  Colors are now stored in their own module. Output coloring was factored out into a separate utility function.  State => color mapping is now implemented as a dictionary instead of multiple conditionals.  Signed-off-by: Jiri Podivin <jpodivin@redhat.com> Change-Id: I41f15c28dfddd911294ecc8e3e0331a4956dc5d8,refactoring,,,,,,
x%2Fcloudroast~master~Idf9d30a7ce52a00fc8bb5f135ea7c6ad9e1b308f,https://review.opendev.org/39316,Refactoring and adding to functional orders tests,Refactoring and adding to functional orders tests  Change-Id: Idf9d30a7ce52a00fc8bb5f135ea7c6ad9e1b308f,objective,,,,,,
x%2Fcloudroast~master~Idf9d30a7ce52a00fc8bb5f135ea7c6ad9e1b308f,https://review.opendev.org/39316,Refactoring and adding to functional orders tests,Refactoring and adding to functional orders tests  Change-Id: Idf9d30a7ce52a00fc8bb5f135ea7c6ad9e1b308f,testing,,,,,,
stackforge%2Flibra~release-v3~I2941b12de47b8b693e284c65f96cd671fd1d6290,https://review.opendev.org/36219,[MGM] Refactor pool manager ready for new functions such as delete,[MGM] Refactor pool manager ready for new functions such as delete  Change-Id: I2941b12de47b8b693e284c65f96cd671fd1d6290,refactoring,,,,,,
stackforge%2Flibra~master~I2941b12de47b8b693e284c65f96cd671fd1d6290,https://review.opendev.org/36077,[MGM] Refactor pool manager ready for new functions such as delete,[MGM] Refactor pool manager ready for new functions such as delete  Change-Id: I2941b12de47b8b693e284c65f96cd671fd1d6290,refactoring,,,,,,
openstack%2Fswift~master~I259df5602bed60d6cb48e07d6d9e58e8320ee12a,https://review.opendev.org/32811,Refactor DiskFile instantiation in object server.,"Refactor DiskFile instantiation in object server.  DiskFile() takes a lot of arguments whose value is the same on every instantiation, so I pulled that stuff out into a utility method. No functionality change is intended.  Change-Id: I259df5602bed60d6cb48e07d6d9e58e8320ee12a",objective,,,,,,
openstack%2Fswift~master~I259df5602bed60d6cb48e07d6d9e58e8320ee12a,https://review.opendev.org/32811,Refactor DiskFile instantiation in object server.,"Refactor DiskFile instantiation in object server.  DiskFile() takes a lot of arguments whose value is the same on every instantiation, so I pulled that stuff out into a utility method. No functionality change is intended.  Change-Id: I259df5602bed60d6cb48e07d6d9e58e8320ee12a",refactoring,,,,,,
openstack%2Fcinder~master~I4f335bfcd03cd1da52a9e5c5c689d97581614af6,https://review.opendev.org/33808,Refactor the backup method of SwiftBackupService,Refactor the backup method of SwiftBackupService  Export functionalities of backup to 3 new methods: prepare_backup backup_chunk and finalize_backup. The original backup function calls those functions. This allows other drivers to combine them in a different logic. e.g for the RBDDriver  Change-Id: I4f335bfcd03cd1da52a9e5c5c689d97581614af6,objective,,,,,,
openstack%2Fcinder~master~I4f335bfcd03cd1da52a9e5c5c689d97581614af6,https://review.opendev.org/33808,Refactor the backup method of SwiftBackupService,Refactor the backup method of SwiftBackupService  Export functionalities of backup to 3 new methods: prepare_backup backup_chunk and finalize_backup. The original backup function calls those functions. This allows other drivers to combine them in a different logic. e.g for the RBDDriver  Change-Id: I4f335bfcd03cd1da52a9e5c5c689d97581614af6,quality,,,,,,
openstack%2Fcinder~master~I4f335bfcd03cd1da52a9e5c5c689d97581614af6,https://review.opendev.org/33808,Refactor the backup method of SwiftBackupService,Refactor the backup method of SwiftBackupService  Export functionalities of backup to 3 new methods: prepare_backup backup_chunk and finalize_backup. The original backup function calls those functions. This allows other drivers to combine them in a different logic. e.g for the RBDDriver  Change-Id: I4f335bfcd03cd1da52a9e5c5c689d97581614af6,objective,,,,,,
x%2Finception~master~I12c2418546f366b484acc1258d10cc5b6554af8a,https://review.opendev.org/30310,Refactor code,"Refactor code  _add_recipe and _add_run_list are combined, _run_chef_client are modified, and multi-thread code are put in a single function.  Change-Id: I12c2418546f366b484acc1258d10cc5b6554af8a",objective,,,,,,
x%2Finception~master~I12c2418546f366b484acc1258d10cc5b6554af8a,https://review.opendev.org/30310,Refactor code,"Refactor code  _add_recipe and _add_run_list are combined, _run_chef_client are modified, and multi-thread code are put in a single function.  Change-Id: I12c2418546f366b484acc1258d10cc5b6554af8a",objective,,,,,,
openstack%2Fdiskimage-builder~master~I24c5d1b1185de5693f145347fe912245f1ba7dfe,https://review.opendev.org/29378,Refactor the first boot routine.,Refactor the first boot routine.  Setting up a routine to run at first time the system boot may vary from distribution to distribution. This patch will remove the logic from the diskimage-builder code and put it into the elements.  The base element will now deploy a dib-first-boot script and each OS element will ensure that this script runs at rc.local time. By doing that we will put the OS specific stuff in the OS elements and remove the embedded code out of the img-function file.  Change-Id: I24c5d1b1185de5693f145347fe912245f1ba7dfe,objective,,,,,,
openstack%2Fdiskimage-builder~master~I24c5d1b1185de5693f145347fe912245f1ba7dfe,https://review.opendev.org/29378,Refactor the first boot routine.,Refactor the first boot routine.  Setting up a routine to run at first time the system boot may vary from distribution to distribution. This patch will remove the logic from the diskimage-builder code and put it into the elements.  The base element will now deploy a dib-first-boot script and each OS element will ensure that this script runs at rc.local time. By doing that we will put the OS specific stuff in the OS elements and remove the embedded code out of the img-function file.  Change-Id: I24c5d1b1185de5693f145347fe912245f1ba7dfe,objective,,,,,,
openstack%2Fnova~master~I92358bcda157c95290b31e3b7997e3432a65b404,https://review.opendev.org/29062,Refactored tests for db.key_pair_*() functions.,Refactored tests for key_pair_*() functions.  Change-Id: I92358bcda157c95290b31e3b7997e3432a65b404,testing,,,,,,
openstack%2Fnova~master~I92358bcda157c95290b31e3b7997e3432a65b404,https://review.opendev.org/29062,Refactored tests for db.key_pair_*() functions.,Refactored tests for key_pair_*() functions.  Change-Id: I92358bcda157c95290b31e3b7997e3432a65b404,refactoring,,,,,,
x%2Fcloudcafe~master~I20f53550f5738f61d3ffea852e79b824111426a5,https://review.opendev.org/27644,Refactored image behaviors,Refactored image behaviors  * Modified polling methods to match standard CC style * Added create_active_image function  Change-Id: I20f53550f5738f61d3ffea852e79b824111426a5,objective,,,,,,
x%2Fcloudcafe~master~I20f53550f5738f61d3ffea852e79b824111426a5,https://review.opendev.org/27644,Refactored image behaviors,Refactored image behaviors  * Modified polling methods to match standard CC style * Added create_active_image function  Change-Id: I20f53550f5738f61d3ffea852e79b824111426a5,objective,,,,,,
openstack%2Fswift~master~I8565d42fcdb62eeb398c4432bb6f499c27c05cf6,https://review.opendev.org/26754,Refactoring format_device function,Refactoring format_device function  * Algorithm format_device was changed for simplicity extension new   ip addresses parameters. * Some prints outputs was replacement by function format_device.  Change-Id: I8565d42fcdb62eeb398c4432bb6f499c27c05cf6,objective,,,,,,
openstack%2Fswift~master~I8565d42fcdb62eeb398c4432bb6f499c27c05cf6,https://review.opendev.org/26754,Refactoring format_device function,Refactoring format_device function  * Algorithm format_device was changed for simplicity extension new   ip addresses parameters. * Some prints outputs was replacement by function format_device.  Change-Id: I8565d42fcdb62eeb398c4432bb6f499c27c05cf6,objective,,,,,,
openstack%2Fdevstack~master~I68e3e3973d15dc0b4f534662a4f57a9f38f69784,https://review.opendev.org/25832,refactor the install/configure split,"refactor the install/configure split  configure remains just to generate configs, install now gets the setup_develop in addition to the git clone. This lets use remove configure_glanceclient as a function  Change-Id: I68e3e3973d15dc0b4f534662a4f57a9f38f69784",objective,,,,,,
openstack%2Fdevstack~master~I68e3e3973d15dc0b4f534662a4f57a9f38f69784,https://review.opendev.org/25832,refactor the install/configure split,"refactor the install/configure split  configure remains just to generate configs, install now gets the setup_develop in addition to the git clone. This lets use remove configure_glanceclient as a function  Change-Id: I68e3e3973d15dc0b4f534662a4f57a9f38f69784",objective,,,,,,
openstack%2Fdevstack~master~I70a8cfe67ed408284f5c88c762c6bb8acb8ecdb2,https://review.opendev.org/23023,Refactor error logging,"Refactor error logging  It is hard to grep errors in current log. so in this patch, I'm adding log_error function which also writes log for screen_log_dir/error.log. In future, we may categolize negative fault by using this error.log.  Change-Id: I70a8cfe67ed408284f5c88c762c6bb8acb8ecdb2",objective,,,,,,
openstack%2Fdevstack~master~I70a8cfe67ed408284f5c88c762c6bb8acb8ecdb2,https://review.opendev.org/23023,Refactor error logging,"Refactor error logging  It is hard to grep errors in current log. so in this patch, I'm adding log_error function which also writes log for screen_log_dir/error.log. In future, we may categolize negative fault by using this error.log.  Change-Id: I70a8cfe67ed408284f5c88c762c6bb8acb8ecdb2",objective,,,,,,
openstack%2Fnova~master~I1475b184d8e88b700d606aaf77cc7cd21e83efbb,https://review.opendev.org/19944,Refactor compute_utils to avoid db lookup,Refactor compute_utils to avoid db lookup  This simple change passes bdms into the following compute_utils function to avoid it doing a database lookup:    get_device_name_for_instance()  Related to bp/no-db-compute  Change-Id: I1475b184d8e88b700d606aaf77cc7cd21e83efbb,integration,,,,,,
openstack%2Fnova~master~I1475b184d8e88b700d606aaf77cc7cd21e83efbb,https://review.opendev.org/19944,Refactor compute_utils to avoid db lookup,Refactor compute_utils to avoid db lookup  This simple change passes bdms into the following compute_utils function to avoid it doing a database lookup:    get_device_name_for_instance()  Related to bp/no-db-compute  Change-Id: I1475b184d8e88b700d606aaf77cc7cd21e83efbb,objective,,,,,,
openstack%2Fdevstack~master~I4a6e7fcebfb11556968f53ab6a0e862ce16bb139,https://review.opendev.org/18530,Refactor quantum installation,Refactor quantum installation  * Move quantum installation to lib/quantum * Refactor quantum configuration * Move Quantum service account creation from keystone_data.sh to lib/quantum * Define generic functions to install third party programs  * Minor cleanups related to Quantum   * Kill dnsmasq which watches an interface 'ns-XXXXXX' in unstack.sh   * Set default_floating_pool in nova.conf to make default flaoting pool     work when PUBLIC_NETWORK_NAME is other than 'nova'   * Make tempest work even when PRIVATE_NETWORK_NAME is other than 'private'  Change-Id: I4a6e7fcebfb11556968f53ab6a0e862ce16bb139,quality,,,,,,
openstack%2Fdevstack~master~I4a6e7fcebfb11556968f53ab6a0e862ce16bb139,https://review.opendev.org/18530,Refactor quantum installation,Refactor quantum installation  * Move quantum installation to lib/quantum * Refactor quantum configuration * Move Quantum service account creation from keystone_data.sh to lib/quantum * Define generic functions to install third party programs  * Minor cleanups related to Quantum   * Kill dnsmasq which watches an interface 'ns-XXXXXX' in unstack.sh   * Set default_floating_pool in nova.conf to make default flaoting pool     work when PUBLIC_NETWORK_NAME is other than 'nova'   * Make tempest work even when PRIVATE_NETWORK_NAME is other than 'private'  Change-Id: I4a6e7fcebfb11556968f53ab6a0e862ce16bb139,objective,,,,,,
openstack%2Fkeystone~master~I87404b80ea9800d6792f97a7a3a64fe839065c1c,https://review.opendev.org/17782,module refactoring,module refactoring  Distributes the functionality of service.py into the modules. Moves ComposableRouters into their own package keystone/routers. Moved the token controller from service.py into trusts/controllers split out extensions move version controller into catalog/controllers removed apis from common controller and pushed  down to module controllers  Change-Id: I87404b80ea9800d6792f97a7a3a64fe839065c1c,quality,,,,,,
openstack%2Fkeystone~master~I87404b80ea9800d6792f97a7a3a64fe839065c1c,https://review.opendev.org/17782,module refactoring,module refactoring  Distributes the functionality of service.py into the modules. Moves ComposableRouters into their own package keystone/routers. Moved the token controller from service.py into trusts/controllers split out extensions move version controller into catalog/controllers removed apis from common controller and pushed  down to module controllers  Change-Id: I87404b80ea9800d6792f97a7a3a64fe839065c1c,objective,,,,,,
openstack%2Fswift~master~Id06ef6584941f8a572e286f69dfa3d96fe451355,https://review.opendev.org/16041,Refactor db_replicator's roundrobin_datadirs,"Refactor db_replicator's roundrobin_datadirs  roundrobin_datadirs was returning any .db file at any depth in the accounts/containers structure. Since xfs corruption can cause such files to appear in odd places at times (only happened on one drive of ours so far, but still...), I've refactored this function to only return .db files at the proper depth.  Change-Id: Id06ef6584941f8a572e286f69dfa3d96fe451355",integration,,,,,,
openstack%2Fswift~master~Id06ef6584941f8a572e286f69dfa3d96fe451355,https://review.opendev.org/16041,Refactor db_replicator's roundrobin_datadirs,"Refactor db_replicator's roundrobin_datadirs  roundrobin_datadirs was returning any .db file at any depth in the accounts/containers structure. Since xfs corruption can cause such files to appear in odd places at times (only happened on one drive of ours so far, but still...), I've refactored this function to only return .db files at the proper depth.  Change-Id: Id06ef6584941f8a572e286f69dfa3d96fe451355",quality,,,,,,
openstack%2Fswift~master~Id06ef6584941f8a572e286f69dfa3d96fe451355,https://review.opendev.org/16041,Refactor db_replicator's roundrobin_datadirs,"Refactor db_replicator's roundrobin_datadirs  roundrobin_datadirs was returning any .db file at any depth in the accounts/containers structure. Since xfs corruption can cause such files to appear in odd places at times (only happened on one drive of ours so far, but still...), I've refactored this function to only return .db files at the proper depth.  Change-Id: Id06ef6584941f8a572e286f69dfa3d96fe451355",objective,,,,,,
openstack%2Fnova~master~Ib97ab907ac820e616017f770c2f3a8366af57a0f,https://review.opendev.org/14777,Refactor: config drive related functions,"Refactor: config drive related functions  Related to blueprint xenapi-config-drive  Move the configdrive related functions to the nova.virt.configdrive module, so that it could be used by other drivers as well. Also move the configdrive related configuration options to the same module.  Change-Id: Ib97ab907ac820e616017f770c2f3a8366af57a0f",quality,,,,,,
openstack%2Fnova~master~Ib97ab907ac820e616017f770c2f3a8366af57a0f,https://review.opendev.org/14777,Refactor: config drive related functions,"Refactor: config drive related functions  Related to blueprint xenapi-config-drive  Move the configdrive related functions to the nova.virt.configdrive module, so that it could be used by other drivers as well. Also move the configdrive related configuration options to the same module.  Change-Id: Ib97ab907ac820e616017f770c2f3a8366af57a0f",integration,,,,,,
openstack%2Fnova~master~Ib97ab907ac820e616017f770c2f3a8366af57a0f,https://review.opendev.org/14777,Refactor: config drive related functions,"Refactor: config drive related functions  Related to blueprint xenapi-config-drive  Move the configdrive related functions to the nova.virt.configdrive module, so that it could be used by other drivers as well. Also move the configdrive related configuration options to the same module.  Change-Id: Ib97ab907ac820e616017f770c2f3a8366af57a0f",objective,,,,,,
openstack%2Fnova~master~I739dd246410c215f401ebd3a92b8207f46e8fb9a,https://review.opendev.org/10186,refactor all uses of the `qemu-img info` command,"refactor all uses of the `qemu-img info` command  * nova/virt/images.py: Define a single function that calls `qemu-img info` in a robust manner, by avoiding locale issues etc. * nova/virt/libvirt/utils.py: Define secondary functions to parse items returned from images.qemu_img_info(). * nova/virt/libvirt/driver.py: Use the libvirt.utils functions. * nova/virt/disk/api.py: Likewise. * nova/tests/test_libvirt.py: Remove no longer needed stub for utils.execute('qemu-img info'). Adjust to a more restrictive `qemu-img info` format, and more robust calling signature.  Change-Id: I739dd246410c215f401ebd3a92b8207f46e8fb9a",objective,,,,,,
openstack%2Fnova~master~I739dd246410c215f401ebd3a92b8207f46e8fb9a,https://review.opendev.org/10186,refactor all uses of the `qemu-img info` command,"refactor all uses of the `qemu-img info` command  * nova/virt/images.py: Define a single function that calls `qemu-img info` in a robust manner, by avoiding locale issues etc. * nova/virt/libvirt/utils.py: Define secondary functions to parse items returned from images.qemu_img_info(). * nova/virt/libvirt/driver.py: Use the libvirt.utils functions. * nova/virt/disk/api.py: Likewise. * nova/tests/test_libvirt.py: Remove no longer needed stub for utils.execute('qemu-img info'). Adjust to a more restrictive `qemu-img info` format, and more robust calling signature.  Change-Id: I739dd246410c215f401ebd3a92b8207f46e8fb9a",objective,,,,,,
openstack%2Fhorizon~master~I4f3112af797aff8c4c5e9930c6ca33a70e45589d,https://review.opendev.org/9502,Auth refactor.,"Auth refactor.  Switch to using the self-contained django_openstack_auth package which is a proper django.contrib.auth pluggable backend.  Notable functional improvements include:    * Better overall security via use of standard Django     auth code (well-vetted by security experts).   * Token expiration checking.   * User ""enabled"" attribute checking.   * Support for full range of Django auth attributes     such as is_anonymous, is_active, is_superuser, etc.   * Improved hooks for RBAC/permission-based acess control.  Regarding the RBAC/permission-based access control, this patch moves all ""role"" and ""service""-oriented checks to permission checks. This will make transitioning to policy-driven checking much easier once that fully lands in OpenStack.  Implements blueprint move-keystone-support-to-django-auth-backend  Change-Id: I4f3112af797aff8c4c5e9930c6ca33a70e45589d",objective,,,,,,
openstack%2Fhorizon~master~I4f3112af797aff8c4c5e9930c6ca33a70e45589d,https://review.opendev.org/9502,Auth refactor.,"Auth refactor.  Switch to using the self-contained django_openstack_auth package which is a proper django.contrib.auth pluggable backend.  Notable functional improvements include:    * Better overall security via use of standard Django     auth code (well-vetted by security experts).   * Token expiration checking.   * User ""enabled"" attribute checking.   * Support for full range of Django auth attributes     such as is_anonymous, is_active, is_superuser, etc.   * Improved hooks for RBAC/permission-based acess control.  Regarding the RBAC/permission-based access control, this patch moves all ""role"" and ""service""-oriented checks to permission checks. This will make transitioning to policy-driven checking much easier once that fully lands in OpenStack.  Implements blueprint move-keystone-support-to-django-auth-backend  Change-Id: I4f3112af797aff8c4c5e9930c6ca33a70e45589d",objective,,,,,,
openstack%2Fnova~master~Ia58c8f0aaf61628bb55b1b8485118a2a9852ed17,https://review.opendev.org/3401,Refactor away the flags.DEFINE_* helpers,"Refactor away the flags.DEFINE_* helpers  The next obvious step in porting to cfg is to define all options using cfg schemas directly rather than using the flags.DEFINE_* helpers.  This is a large change, but it is almost entirely pure refactoring and does not result in any functional changes.  The only change to note is that the default values for glance_host, glance_api_servers and default_publisher_id options are now using opt value interpolation i.e.   -glance_host=_get_my_ip()  +glance_host='$my_ip'   -glance_api_servers=['%s:%d' % (FLAGS.glance_host, FLAGS.glance_port)]  +glance_api_servers=['$glance_host:$glance_port']   -default_publisher_id=FLAGS.host  +default_publisher_id='$host'  Also note that the lower_bound check on the {report,periodic}_interval options are no more, but this has been true since cfg was first added.  Change-Id: Ia58c8f0aaf61628bb55b1b8485118a2a9852ed17",quality,,,,,,
openstack%2Fnova~master~Ia58c8f0aaf61628bb55b1b8485118a2a9852ed17,https://review.opendev.org/3401,Refactor away the flags.DEFINE_* helpers,"Refactor away the flags.DEFINE_* helpers  The next obvious step in porting to cfg is to define all options using cfg schemas directly rather than using the flags.DEFINE_* helpers.  This is a large change, but it is almost entirely pure refactoring and does not result in any functional changes.  The only change to note is that the default values for glance_host, glance_api_servers and default_publisher_id options are now using opt value interpolation i.e.   -glance_host=_get_my_ip()  +glance_host='$my_ip'   -glance_api_servers=['%s:%d' % (FLAGS.glance_host, FLAGS.glance_port)]  +glance_api_servers=['$glance_host:$glance_port']   -default_publisher_id=FLAGS.host  +default_publisher_id='$host'  Also note that the lower_bound check on the {report,periodic}_interval options are no more, but this has been true since cfg was first added.  Change-Id: Ia58c8f0aaf61628bb55b1b8485118a2a9852ed17",objective,,,,,,
openstack%2Ftenks~master~I52cb08cd0d300630cb6341f50eb0484c1d16daa4,https://review.opendev.org/713043,Refactor virtualbmc-domain tasks into a module,"Refactor virtualbmc-domain tasks into a module  Virtualbmc domain creation can be unreliable, in particular when domains already exist. This is in part due to the vbmc stop command not functioning properly [1]. By moving the domain management into a Python module we can better control the process of creation, and improve performance.  [1] https://storyboard.openstack.org/#!/story/2003534  Change-Id: I52cb08cd0d300630cb6341f50eb0484c1d16daa4",quality,,,,,,
openstack%2Ftenks~master~I52cb08cd0d300630cb6341f50eb0484c1d16daa4,https://review.opendev.org/713043,Refactor virtualbmc-domain tasks into a module,"Refactor virtualbmc-domain tasks into a module  Virtualbmc domain creation can be unreliable, in particular when domains already exist. This is in part due to the vbmc stop command not functioning properly [1]. By moving the domain management into a Python module we can better control the process of creation, and improve performance.  [1] https://storyboard.openstack.org/#!/story/2003534  Change-Id: I52cb08cd0d300630cb6341f50eb0484c1d16daa4",objective,,,,,,
openstack%2Ftenks~master~I52cb08cd0d300630cb6341f50eb0484c1d16daa4,https://review.opendev.org/713043,Refactor virtualbmc-domain tasks into a module,"Refactor virtualbmc-domain tasks into a module  Virtualbmc domain creation can be unreliable, in particular when domains already exist. This is in part due to the vbmc stop command not functioning properly [1]. By moving the domain management into a Python module we can better control the process of creation, and improve performance.  [1] https://storyboard.openstack.org/#!/story/2003534  Change-Id: I52cb08cd0d300630cb6341f50eb0484c1d16daa4",objective,,,,,,
openstack%2Fnova~master~I1d1f6dc142cd822030a671f7f2f477a44acafe46,https://review.opendev.org/3004,Refactoring logging _log function.,Refactoring logging _log function.  We should not be overriding private functions of core python modules. Fixes bug: 915597  Change-Id: I1d1f6dc142cd822030a671f7f2f477a44acafe46,quality,,,,,,
openstack%2Fnova~master~I1d1f6dc142cd822030a671f7f2f477a44acafe46,https://review.opendev.org/3004,Refactoring logging _log function.,Refactoring logging _log function.  We should not be overriding private functions of core python modules. Fixes bug: 915597  Change-Id: I1d1f6dc142cd822030a671f7f2f477a44acafe46,objective,,,,,,
openstack%2Fnova~master~I1d1f6dc142cd822030a671f7f2f477a44acafe46,https://review.opendev.org/3004,Refactoring logging _log function.,Refactoring logging _log function.  We should not be overriding private functions of core python modules. Fixes bug: 915597  Change-Id: I1d1f6dc142cd822030a671f7f2f477a44acafe46,objective,,,,,,
openstack%2Fkeystone~master~I2af73d6978c44944554d63283c41e43cc8aca214,https://review.opendev.org/276,Refactored manage.py to be both testable and useful for testing,"Refactored manage.py to be both testable and useful for testing  - Added keystone.test.functional.test_core_api, with example - Also revised imports in functional tests  Change-Id: I2af73d6978c44944554d63283c41e43cc8aca214",testing,,,,,,
openstack%2Fkeystone~master~I2af73d6978c44944554d63283c41e43cc8aca214,https://review.opendev.org/276,Refactored manage.py to be both testable and useful for testing,"Refactored manage.py to be both testable and useful for testing  - Added keystone.test.functional.test_core_api, with example - Also revised imports in functional tests  Change-Id: I2af73d6978c44944554d63283c41e43cc8aca214",objective,,,,,,
x%2Ftobiko~master~I4416addc147e496a1c0023329b606da43e7f1311,https://review.opendev.org/780609,Generalize and refactor Octavia waiters module,"Generalize and refactor Octavia waiters module  So far tobiko/tobiko/tests/scenario/octavia/waiters.py could only wait for provisioning_status and for operating_status, and only for ""ACTIVE"" status.  This patch generalizes the waiters module so it could wait for any Octavia object, for any status key (field) and for any specific status. It also refactors the waiters module to have one function which is well documented and uses constants.  Change-Id: I4416addc147e496a1c0023329b606da43e7f1311",objective,,,,,,
x%2Ftobiko~master~I4416addc147e496a1c0023329b606da43e7f1311,https://review.opendev.org/780609,Generalize and refactor Octavia waiters module,"Generalize and refactor Octavia waiters module  So far tobiko/tobiko/tests/scenario/octavia/waiters.py could only wait for provisioning_status and for operating_status, and only for ""ACTIVE"" status.  This patch generalizes the waiters module so it could wait for any Octavia object, for any status key (field) and for any specific status. It also refactors the waiters module to have one function which is well documented and uses constants.  Change-Id: I4416addc147e496a1c0023329b606da43e7f1311",objective,,,,,,
openstack%2Ftripleo-common~stable%2Fstein~I2fc2072f0ab8b761a2b8079f746c3b91cacc8733,https://review.opendev.org/714014,Refactor registry request actions,"Refactor registry request actions  In order to handle re-authentication at request time rather than letting tenancity trigger it, this change creates a session helper class that wraps the various get/patch/push/put actions that we use in the image uploader to perform a single re-autentication action when we get a 401 from a registry.  Previously we would let the reauthentication occur when tenancity would retry various functions.  There are several functions which perform muiltple requests that could exceed the TTL for authentication tokens. This leads to failures that could have been prevented if we re-auth at the time of the request rather than retrying the entire action.  Change-Id: I2fc2072f0ab8b761a2b8079f746c3b91cacc8733 Related-Bug: #1867981 (cherry picked from commit 19dba3f385139ff1e37a9561d62b5f4d9eccedac) (cherry picked from commit 4ee02060ee9e742abc912c6508d0d9714aa13a72)",objective,,,,,,
openstack%2Ftripleo-common~stable%2Fstein~I2fc2072f0ab8b761a2b8079f746c3b91cacc8733,https://review.opendev.org/714014,Refactor registry request actions,"Refactor registry request actions  In order to handle re-authentication at request time rather than letting tenancity trigger it, this change creates a session helper class that wraps the various get/patch/push/put actions that we use in the image uploader to perform a single re-autentication action when we get a 401 from a registry.  Previously we would let the reauthentication occur when tenancity would retry various functions.  There are several functions which perform muiltple requests that could exceed the TTL for authentication tokens. This leads to failures that could have been prevented if we re-auth at the time of the request rather than retrying the entire action.  Change-Id: I2fc2072f0ab8b761a2b8079f746c3b91cacc8733 Related-Bug: #1867981 (cherry picked from commit 19dba3f385139ff1e37a9561d62b5f4d9eccedac) (cherry picked from commit 4ee02060ee9e742abc912c6508d0d9714aa13a72)",objective,,,,,,
openstack%2Ftripleo-common~stable%2Ftrain~I2fc2072f0ab8b761a2b8079f746c3b91cacc8733,https://review.opendev.org/714012,Refactor registry request actions,"Refactor registry request actions  In order to handle re-authentication at request time rather than letting tenancity trigger it, this change creates a session helper class that wraps the various get/patch/push/put actions that we use in the image uploader to perform a single re-autentication action when we get a 401 from a registry.  Previously we would let the reauthentication occur when tenancity would retry various functions.  There are several functions which perform muiltple requests that could exceed the TTL for authentication tokens. This leads to failures that could have been prevented if we re-auth at the time of the request rather than retrying the entire action.  Change-Id: I2fc2072f0ab8b761a2b8079f746c3b91cacc8733 Related-Bug: #1867981 (cherry picked from commit 19dba3f385139ff1e37a9561d62b5f4d9eccedac)",objective,,,,,,
openstack%2Ftripleo-common~stable%2Ftrain~I2fc2072f0ab8b761a2b8079f746c3b91cacc8733,https://review.opendev.org/714012,Refactor registry request actions,"Refactor registry request actions  In order to handle re-authentication at request time rather than letting tenancity trigger it, this change creates a session helper class that wraps the various get/patch/push/put actions that we use in the image uploader to perform a single re-autentication action when we get a 401 from a registry.  Previously we would let the reauthentication occur when tenancity would retry various functions.  There are several functions which perform muiltple requests that could exceed the TTL for authentication tokens. This leads to failures that could have been prevented if we re-auth at the time of the request rather than retrying the entire action.  Change-Id: I2fc2072f0ab8b761a2b8079f746c3b91cacc8733 Related-Bug: #1867981 (cherry picked from commit 19dba3f385139ff1e37a9561d62b5f4d9eccedac)",objective,,,,,,
openstack%2Ftripleo-common~master~I2fc2072f0ab8b761a2b8079f746c3b91cacc8733,https://review.opendev.org/713918,Refactor registry request actions,"Refactor registry request actions  In order to handle re-authentication at request time rather than letting tenancity trigger it, this change creates a session helper class that wraps the various get/patch/push/put actions that we use in the image uploader to perform a single re-autentication action when we get a 401 from a registry.  Previously we would let the reauthentication occur when tenancity would retry various functions.  There are several functions which perform muiltple requests that could exceed the TTL for authentication tokens. This leads to failures that could have been prevented if we re-auth at the time of the request rather than retrying the entire action.  Change-Id: I2fc2072f0ab8b761a2b8079f746c3b91cacc8733 Related-Bug: #1867981",objective,,,,,,
openstack%2Ftripleo-common~master~I2fc2072f0ab8b761a2b8079f746c3b91cacc8733,https://review.opendev.org/713918,Refactor registry request actions,"Refactor registry request actions  In order to handle re-authentication at request time rather than letting tenancity trigger it, this change creates a session helper class that wraps the various get/patch/push/put actions that we use in the image uploader to perform a single re-autentication action when we get a 401 from a registry.  Previously we would let the reauthentication occur when tenancity would retry various functions.  There are several functions which perform muiltple requests that could exceed the TTL for authentication tokens. This leads to failures that could have been prevented if we re-auth at the time of the request rather than retrying the entire action.  Change-Id: I2fc2072f0ab8b761a2b8079f746c3b91cacc8733 Related-Bug: #1867981",objective,,,,,,
openstack%2Fironic~master~I0594c2cf7ed8f57323dfdf0dfdbbb20516d627bd,https://review.opendev.org/708697,Refactoring: move iSCSI deploy code to iscsi_deploy.py,"Refactoring: move iSCSI deploy code to iscsi_deploy.py  The deploy_utils module is for code that is shared between all deploy methods, but these functions are specific to iSCSI deploy.  Change-Id: I0594c2cf7ed8f57323dfdf0dfdbbb20516d627bd",quality,,,,,,
openstack%2Fironic~master~I0594c2cf7ed8f57323dfdf0dfdbbb20516d627bd,https://review.opendev.org/708697,Refactoring: move iSCSI deploy code to iscsi_deploy.py,"Refactoring: move iSCSI deploy code to iscsi_deploy.py  The deploy_utils module is for code that is shared between all deploy methods, but these functions are specific to iSCSI deploy.  Change-Id: I0594c2cf7ed8f57323dfdf0dfdbbb20516d627bd",objective,,,,,,
openstack%2Fironic~master~I45756a43bf33037281c919e2bc418afdf0e655d0,https://review.opendev.org/708681,Refactoring: move generic agent clean step functions to agent_base,Refactoring: move generic agent clean step functions to agent_base  * Clean steps methods from deploy_utils * Identical implementations from agent.py and iscsi_deploy.py  Change-Id: I45756a43bf33037281c919e2bc418afdf0e655d0,quality,,,,,,
openstack%2Fironic~master~I45756a43bf33037281c919e2bc418afdf0e655d0,https://review.opendev.org/708681,Refactoring: move generic agent clean step functions to agent_base,Refactoring: move generic agent clean step functions to agent_base  * Clean steps methods from deploy_utils * Identical implementations from agent.py and iscsi_deploy.py  Change-Id: I45756a43bf33037281c919e2bc418afdf0e655d0,objective,,,,,,
openstack%2Fironic-tempest-plugin~master~I5b619321be876e04f4b29dce083ca0cc80c4ed5b,https://review.opendev.org/711054,Refactor validate_ports function,Refactor validate_ports function  Since 1.28 is ancient and all the stable branches have support for `get_node_vifs` let's remove the unnecessary check.  Change-Id: I5b619321be876e04f4b29dce083ca0cc80c4ed5b,objective,,,,,,
openstack%2Fironic-tempest-plugin~master~I5b619321be876e04f4b29dce083ca0cc80c4ed5b,https://review.opendev.org/711054,Refactor validate_ports function,Refactor validate_ports function  Since 1.28 is ancient and all the stable branches have support for `get_node_vifs` let's remove the unnecessary check.  Change-Id: I5b619321be876e04f4b29dce083ca0cc80c4ed5b,objective,,,,,,
openstack%2Fmistral~master~I94f57a6534b9c10e202205dfae4d039296c26407,https://review.opendev.org/709057,Refactor expressions,"WIP: Refactor expressions  * This patch moves code related to YAQL and Jinja into their   specific modules so that there isn't any module that works with   both. It makes it easier to understand how code related to one   of these technologies works. * Custome built-in functions for YAQL and Jinja are now in a   separate module. It's easier now to see what's related with   the expression framework now and what's with integration part,   i.e. functions themselves. * Renamed the base module of expressions similar to other packages. * Other style changes.  Change-Id: I94f57a6534b9c10e202205dfae4d039296c26407",quality,,,,,,
openstack%2Fmistral~master~I94f57a6534b9c10e202205dfae4d039296c26407,https://review.opendev.org/709057,Refactor expressions,"WIP: Refactor expressions  * This patch moves code related to YAQL and Jinja into their   specific modules so that there isn't any module that works with   both. It makes it easier to understand how code related to one   of these technologies works. * Custome built-in functions for YAQL and Jinja are now in a   separate module. It's easier now to see what's related with   the expression framework now and what's with integration part,   i.e. functions themselves. * Renamed the base module of expressions similar to other packages. * Other style changes.  Change-Id: I94f57a6534b9c10e202205dfae4d039296c26407",objective,,,,,,
openstack%2Fironic~master~I635a30264f25d758850fd57c0f07e7a68b332fe3,https://review.opendev.org/707394,Refactoring: finish splitting do_node_deploy,"Refactoring: finish splitting do_node_deploy  This change splits ConductorManager.do_node_deploy into two new functions: validate_node and start_deploy. The only small behavior change is validating that an FSM action is possible before making any changes (previously we did it in the very end, potentiall after modifying a node).  Change-Id: I635a30264f25d758850fd57c0f07e7a68b332fe3",objective,,,,,,
openstack%2Fironic~master~I635a30264f25d758850fd57c0f07e7a68b332fe3,https://review.opendev.org/707394,Refactoring: finish splitting do_node_deploy,"Refactoring: finish splitting do_node_deploy  This change splits ConductorManager.do_node_deploy into two new functions: validate_node and start_deploy. The only small behavior change is validating that an FSM action is possible before making any changes (previously we did it in the very end, potentiall after modifying a node).  Change-Id: I635a30264f25d758850fd57c0f07e7a68b332fe3",objective,,,,,,
openstack%2Fmanila~stable%2Ftrain~Ib79ae3f08843414a552c89cd9a254b5e562123b8,https://review.opendev.org/706749,generic: Refactor network functions to l3_init,generic: Refactor network functions to l3_init  There's a few functions which are used inside service_instance which do networking that can live inside the linux interface driver code.  This patch refactors them into there as this helps allow for the noop driver.  Change-Id: Ib79ae3f08843414a552c89cd9a254b5e562123b8 (cherry picked from commit e8adbf3cd4aa7a3a010a20a8fc728107e52acd4b),objective,,,,,,
openstack%2Fmanila~stable%2Ftrain~Ib79ae3f08843414a552c89cd9a254b5e562123b8,https://review.opendev.org/706749,generic: Refactor network functions to l3_init,generic: Refactor network functions to l3_init  There's a few functions which are used inside service_instance which do networking that can live inside the linux interface driver code.  This patch refactors them into there as this helps allow for the noop driver.  Change-Id: Ib79ae3f08843414a552c89cd9a254b5e562123b8 (cherry picked from commit e8adbf3cd4aa7a3a010a20a8fc728107e52acd4b),objective,,,,,,
openstack%2Fmanila~master~Ib79ae3f08843414a552c89cd9a254b5e562123b8,https://review.opendev.org/705043,generic: Refactor network functions to l3_init,generic: Refactor network functions to l3_init  There's a few functions which are used inside service_instance which do networking that can live inside the linux interface driver code.  This patch refactors them into there as this helps allow for the noop driver.  Change-Id: Ib79ae3f08843414a552c89cd9a254b5e562123b8,objective,,,,,,
openstack%2Fmanila~master~Ib79ae3f08843414a552c89cd9a254b5e562123b8,https://review.opendev.org/705043,generic: Refactor network functions to l3_init,generic: Refactor network functions to l3_init  There's a few functions which are used inside service_instance which do networking that can live inside the linux interface driver code.  This patch refactors them into there as this helps allow for the noop driver.  Change-Id: Ib79ae3f08843414a552c89cd9a254b5e562123b8,objective,,,,,,
airship%2Fpegleg~master~Ia9739931273eb6458f82dbb7e702a505ae397ae3,https://review.opendev.org/685131,Refactors pegleg CLI to use single commands,"[WIP] Refactors pegleg CLI to use single commands  Debugging pegleg can currently be difficult and the Click CLI does not easily allow debuggers like pdb or PyCharm to use breakpoints. By moving all CLI command calls into singular functions, we can easily create an ""if __name__ == '__main__'"" entry point to call these functions and investigate any bugs that may arise.  Change-Id: Ia9739931273eb6458f82dbb7e702a505ae397ae3",quality,,,,,,
airship%2Fpegleg~master~Ia9739931273eb6458f82dbb7e702a505ae397ae3,https://review.opendev.org/685131,Refactors pegleg CLI to use single commands,"[WIP] Refactors pegleg CLI to use single commands  Debugging pegleg can currently be difficult and the Click CLI does not easily allow debuggers like pdb or PyCharm to use breakpoints. By moving all CLI command calls into singular functions, we can easily create an ""if __name__ == '__main__'"" entry point to call these functions and investigate any bugs that may arise.  Change-Id: Ia9739931273eb6458f82dbb7e702a505ae397ae3",objective,,,,,,
openstack%2Fwatcher~master~I3c74d56539ac6c6eb16b0d254a76260bc791567c,https://review.opendev.org/693782,Refactoring the codes about getting used and free resources,Refactoring the codes about getting used and free resources  We have provided functions to get used and free resources in class ModelRoot. So strategies can invoke the functions to get used and free resources.  Change-Id: I3c74d56539ac6c6eb16b0d254a76260bc791567c,objective,,,,,,
openstack%2Fwatcher~master~I3c74d56539ac6c6eb16b0d254a76260bc791567c,https://review.opendev.org/693782,Refactoring the codes about getting used and free resources,Refactoring the codes about getting used and free resources  We have provided functions to get used and free resources in class ModelRoot. So strategies can invoke the functions to get used and free resources.  Change-Id: I3c74d56539ac6c6eb16b0d254a76260bc791567c,objective,,,,,,
openstack%2Fpython-openstackclient~master~I0d7432f13642fbccd5ca79da9c76adfcbabb5fa9,https://review.opendev.org/693073,Refactor AggregateTests,"Refactor AggregateTests  While investigating the referenced story/bug I noticed that wait_for_status in openstackclient.tests.functional.compute.v2.test_aggregate.AggregateTests was doing a lot more than it should ever need to (it probably got copied in from somewhere). The two places calling it only need to a) check the output of `openstack aggregate show`, and b) try once -- since they just got done creating the aggregate synchronously, there should never be a need to delay/retry. So this commit removes the helper method and just inlines the check.  At the same time, the addCleanup(aggregate delete) directives are moved above their respective creates. This is a defensive best practice which makes sure cleanup happens even if something fails very soon after the actual back-end create (as was in fact the case with the referenced bug/story).  It is unknown whether this will impact the referenced bug.  Change-Id: I0d7432f13642fbccd5ca79da9c76adfcbabb5fa9 Story: 2006811 Related-Bug: #1851391",testing,,,,,,
openstack%2Fpython-openstackclient~master~I0d7432f13642fbccd5ca79da9c76adfcbabb5fa9,https://review.opendev.org/693073,Refactor AggregateTests,"Refactor AggregateTests  While investigating the referenced story/bug I noticed that wait_for_status in openstackclient.tests.functional.compute.v2.test_aggregate.AggregateTests was doing a lot more than it should ever need to (it probably got copied in from somewhere). The two places calling it only need to a) check the output of `openstack aggregate show`, and b) try once -- since they just got done creating the aggregate synchronously, there should never be a need to delay/retry. So this commit removes the helper method and just inlines the check.  At the same time, the addCleanup(aggregate delete) directives are moved above their respective creates. This is a defensive best practice which makes sure cleanup happens even if something fails very soon after the actual back-end create (as was in fact the case with the referenced bug/story).  It is unknown whether this will impact the referenced bug.  Change-Id: I0d7432f13642fbccd5ca79da9c76adfcbabb5fa9 Story: 2006811 Related-Bug: #1851391",quality,,,,,,
openstack%2Fpython-openstackclient~master~I0d7432f13642fbccd5ca79da9c76adfcbabb5fa9,https://review.opendev.org/693073,Refactor AggregateTests,"Refactor AggregateTests  While investigating the referenced story/bug I noticed that wait_for_status in openstackclient.tests.functional.compute.v2.test_aggregate.AggregateTests was doing a lot more than it should ever need to (it probably got copied in from somewhere). The two places calling it only need to a) check the output of `openstack aggregate show`, and b) try once -- since they just got done creating the aggregate synchronously, there should never be a need to delay/retry. So this commit removes the helper method and just inlines the check.  At the same time, the addCleanup(aggregate delete) directives are moved above their respective creates. This is a defensive best practice which makes sure cleanup happens even if something fails very soon after the actual back-end create (as was in fact the case with the referenced bug/story).  It is unknown whether this will impact the referenced bug.  Change-Id: I0d7432f13642fbccd5ca79da9c76adfcbabb5fa9 Story: 2006811 Related-Bug: #1851391",objective,,,,,,
openstack%2Fironic-python-agent~stable%2Ftrain~I304468d57b10d677f2a9d58aec42a1bf414c6cba,https://review.opendev.org/782884,More refactoring of the image module,More refactoring of the image module  Introducing new function _umount_all_partitions to reduce the size of _install_grub2  Change-Id: I304468d57b10d677f2a9d58aec42a1bf414c6cba (cherry picked from commit 80e11811f5edf86c7fca28d3f3bca8cf42f87621),objective,,,,,,
openstack%2Fironic-python-agent~stable%2Ftrain~I304468d57b10d677f2a9d58aec42a1bf414c6cba,https://review.opendev.org/782884,More refactoring of the image module,More refactoring of the image module  Introducing new function _umount_all_partitions to reduce the size of _install_grub2  Change-Id: I304468d57b10d677f2a9d58aec42a1bf414c6cba (cherry picked from commit 80e11811f5edf86c7fca28d3f3bca8cf42f87621),quality,,,,,,
openstack%2Fironic-python-agent~stable%2Ftrain~I304468d57b10d677f2a9d58aec42a1bf414c6cba,https://review.opendev.org/782884,More refactoring of the image module,More refactoring of the image module  Introducing new function _umount_all_partitions to reduce the size of _install_grub2  Change-Id: I304468d57b10d677f2a9d58aec42a1bf414c6cba (cherry picked from commit 80e11811f5edf86c7fca28d3f3bca8cf42f87621),objective,,,,,,
x%2Fpyghmi~master~I635e3a1cb2f333930a5b8f2e0dc90c08e4ec72d0,https://review.opendev.org/683229,Refactor TSM code to common with redfish,"Refactor TSM code to common with redfish  This gives common access to TSM OEM function to redfish and IPMI (which really is using https here).  Should any function come up which absolutely suggests IPMI use in the TSM module, it will be conoditionally enabled by ipmi side and ignored redfish side.  Change-Id: I635e3a1cb2f333930a5b8f2e0dc90c08e4ec72d0",objective,,,,,,
x%2Fpyghmi~master~I635e3a1cb2f333930a5b8f2e0dc90c08e4ec72d0,https://review.opendev.org/683229,Refactor TSM code to common with redfish,"Refactor TSM code to common with redfish  This gives common access to TSM OEM function to redfish and IPMI (which really is using https here).  Should any function come up which absolutely suggests IPMI use in the TSM module, it will be conoditionally enabled by ipmi side and ignored redfish side.  Change-Id: I635e3a1cb2f333930a5b8f2e0dc90c08e4ec72d0",quality,,,,,,
x%2Fpyghmi~master~I635e3a1cb2f333930a5b8f2e0dc90c08e4ec72d0,https://review.opendev.org/683229,Refactor TSM code to common with redfish,"Refactor TSM code to common with redfish  This gives common access to TSM OEM function to redfish and IPMI (which really is using https here).  Should any function come up which absolutely suggests IPMI use in the TSM module, it will be conoditionally enabled by ipmi side and ignored redfish side.  Change-Id: I635e3a1cb2f333930a5b8f2e0dc90c08e4ec72d0",objective,,,,,,
x%2Fgroup-based-policy~stable%2Fqueens~I921d1b64b7c33aa05ce541bad6f571599d1e7c82,https://review.opendev.org/680160,Some refactoring regarding merge aim statuses,Some refactoring regarding merge aim statuses  Put those common codes into a function.  Change-Id: I921d1b64b7c33aa05ce541bad6f571599d1e7c82,refactoring,,,,,,
x%2Fgroup-based-policy~stable%2Focata~I921d1b64b7c33aa05ce541bad6f571599d1e7c82,https://review.opendev.org/680162,Some refactoring regarding merge aim statuses,Some refactoring regarding merge aim statuses  Put those common codes into a function.  Change-Id: I921d1b64b7c33aa05ce541bad6f571599d1e7c82 (cherry picked from commit d9ca10d5a5c3e92337eef1c7e6e058e9ddca07b2) (cherry picked from commit 2477e719f224b3635d4401e3294799ddb0b85f48) (cherry picked from commit da2d018d67b963edf8976f54f7ce438a07baa9da),refactoring,,,,,,
x%2Fgroup-based-policy~stable%2Fnewton~I921d1b64b7c33aa05ce541bad6f571599d1e7c82,https://review.opendev.org/680163,Some refactoring regarding merge aim statuses,Some refactoring regarding merge aim statuses  Put those common codes into a function.  Change-Id: I921d1b64b7c33aa05ce541bad6f571599d1e7c82 (cherry picked from commit d9ca10d5a5c3e92337eef1c7e6e058e9ddca07b2) (cherry picked from commit 2477e719f224b3635d4401e3294799ddb0b85f48) (cherry picked from commit da2d018d67b963edf8976f54f7ce438a07baa9da) (cherry picked from commit 9e69bfeb7390f82e53f139910093fcf270c1c9d2),refactoring,,,,,,
x%2Fgroup-based-policy~stable%2Fpike~I921d1b64b7c33aa05ce541bad6f571599d1e7c82,https://review.opendev.org/680161,Some refactoring regarding merge aim statuses,Some refactoring regarding merge aim statuses  Put those common codes into a function.  Change-Id: I921d1b64b7c33aa05ce541bad6f571599d1e7c82,refactoring,,,,,,
x%2Fgroup-based-policy~master~I921d1b64b7c33aa05ce541bad6f571599d1e7c82,https://review.opendev.org/680121,Some refactoring regarding merge aim statuses,Some refactoring regarding merge aim statuses  Put those common codes into a function.  Change-Id: I921d1b64b7c33aa05ce541bad6f571599d1e7c82,refactoring,,,,,,
openstack%2Fnova~master~I03b1eb1bd1a996081d1546134baa872c6166c5bb,https://review.opendev.org/679651,Refactor MigrationTask._execute,Refactor MigrationTask._execute  This patch pulls out two functions from MigrationTask._execute. One for the initial schedule case and the other for the re-schedule case. This way unit testing some of the intricate parts of re-schedule becomes easier.  Change-Id: I03b1eb1bd1a996081d1546134baa872c6166c5bb,quality,,,,,,
openstack%2Fnova~master~I03b1eb1bd1a996081d1546134baa872c6166c5bb,https://review.opendev.org/679651,Refactor MigrationTask._execute,Refactor MigrationTask._execute  This patch pulls out two functions from MigrationTask._execute. One for the initial schedule case and the other for the re-schedule case. This way unit testing some of the intricate parts of re-schedule becomes easier.  Change-Id: I03b1eb1bd1a996081d1546134baa872c6166c5bb,testing,,,,,,
openstack%2Fnova~master~I03b1eb1bd1a996081d1546134baa872c6166c5bb,https://review.opendev.org/679651,Refactor MigrationTask._execute,Refactor MigrationTask._execute  This patch pulls out two functions from MigrationTask._execute. One for the initial schedule case and the other for the re-schedule case. This way unit testing some of the intricate parts of re-schedule becomes easier.  Change-Id: I03b1eb1bd1a996081d1546134baa872c6166c5bb,objective,,,,,,
openstack%2Fironic-python-agent~stable%2Ftrain~I9c10bf05186dcebb37f175d61bf4ac9ff86b6510,https://review.opendev.org/782882,Refactor part of image module,Refactor part of image module  Shuffle some functions around and reduce size of _is_bootloader_loaded moving logic out to a new function.  Change-Id: I9c10bf05186dcebb37f175d61bf4ac9ff86b6510 (cherry picked from commit 9d9a6bce5c246d18d50dc405265e865fb77142eb) (cherry picked from commit d0f69e9948bf81d338bbc7c84711263fbd937598),quality,,,,,,
openstack%2Fironic-python-agent~stable%2Fussuri~I304468d57b10d677f2a9d58aec42a1bf414c6cba,https://review.opendev.org/782350,More refactoring of the image module,More refactoring of the image module  Introducing new function _umount_all_partitions to reduce the size of _install_grub2  Change-Id: I304468d57b10d677f2a9d58aec42a1bf414c6cba (cherry picked from commit 80e11811f5edf86c7fca28d3f3bca8cf42f87621),quality,,,,,,
openstack%2Fironic-python-agent~stable%2Fussuri~I9c10bf05186dcebb37f175d61bf4ac9ff86b6510,https://review.opendev.org/782348,Refactor part of image module,Refactor part of image module  Shuffle some functions around and reduce size of _is_bootloader_loaded moving logic out to a new function.  Change-Id: I9c10bf05186dcebb37f175d61bf4ac9ff86b6510 (cherry picked from commit 9d9a6bce5c246d18d50dc405265e865fb77142eb),quality,,,,,,
openstack%2Fmagnum~master~I6f880cb03ed43ec3bc9d3d9e5a7b87eaceda40e9,https://review.opendev.org/666669,k8s: refactor functions into KubernetesDriver,k8s: refactor functions into KubernetesDriver  We currently have a lot of duplicate functions across our drivers which use Kubernetes.  This takes them and brings them into a common class called KubernetesDriver and cleans up the subclasses.  Change-Id: I6f880cb03ed43ec3bc9d3d9e5a7b87eaceda40e9,quality,,,,,,
openstack%2Fmagnum~master~I6f880cb03ed43ec3bc9d3d9e5a7b87eaceda40e9,https://review.opendev.org/666669,k8s: refactor functions into KubernetesDriver,k8s: refactor functions into KubernetesDriver  We currently have a lot of duplicate functions across our drivers which use Kubernetes.  This takes them and brings them into a common class called KubernetesDriver and cleans up the subclasses.  Change-Id: I6f880cb03ed43ec3bc9d3d9e5a7b87eaceda40e9,integration,,,,,,
openstack%2Fmagnum~master~I6f880cb03ed43ec3bc9d3d9e5a7b87eaceda40e9,https://review.opendev.org/666669,k8s: refactor functions into KubernetesDriver,k8s: refactor functions into KubernetesDriver  We currently have a lot of duplicate functions across our drivers which use Kubernetes.  This takes them and brings them into a common class called KubernetesDriver and cleans up the subclasses.  Change-Id: I6f880cb03ed43ec3bc9d3d9e5a7b87eaceda40e9,objective,,,,,,
openstack%2Fneutron-tempest-plugin~master~I5ce1a34f7d5d635002baa1e5b14c288e6d2bc43e,https://review.opendev.org/673023,Refactor the test_qos.QoSTestMixin._check_bw function,"Refactor the test_qos.QoSTestMixin._check_bw function  Improved the robustness of this function: - The remote process (""nc""), will be stopped both at the beginning and   the end of this function, just to ensure the process is not left   running at the beginning of the next check. - The socket connection is closed when the file is received (or in case   of exception). This will close the client socket and will end the ""nc""   process in the remote VM. - Set a socket timeout. This timeout, specifically defined for each   iteration, depending on the expected bandwidth, will force a quick   timeout while receiving from the remote VM. The check will fail and it   will be tested again, if the ""FILE_DOWNLOAD_TIMEOUT"" didn't happen yet.  Change-Id: I5ce1a34f7d5d635002baa1e5b14c288e6d2bc43e Closes-Bug: #1838068",objective,,,,,,
openstack%2Fneutron-tempest-plugin~master~I5ce1a34f7d5d635002baa1e5b14c288e6d2bc43e,https://review.opendev.org/673023,Refactor the test_qos.QoSTestMixin._check_bw function,"Refactor the test_qos.QoSTestMixin._check_bw function  Improved the robustness of this function: - The remote process (""nc""), will be stopped both at the beginning and   the end of this function, just to ensure the process is not left   running at the beginning of the next check. - The socket connection is closed when the file is received (or in case   of exception). This will close the client socket and will end the ""nc""   process in the remote VM. - Set a socket timeout. This timeout, specifically defined for each   iteration, depending on the expected bandwidth, will force a quick   timeout while receiving from the remote VM. The check will fail and it   will be tested again, if the ""FILE_DOWNLOAD_TIMEOUT"" didn't happen yet.  Change-Id: I5ce1a34f7d5d635002baa1e5b14c288e6d2bc43e Closes-Bug: #1838068",testing,,,,,,
openstack%2Fneutron-tempest-plugin~master~I5ce1a34f7d5d635002baa1e5b14c288e6d2bc43e,https://review.opendev.org/673023,Refactor the test_qos.QoSTestMixin._check_bw function,"Refactor the test_qos.QoSTestMixin._check_bw function  Improved the robustness of this function: - The remote process (""nc""), will be stopped both at the beginning and   the end of this function, just to ensure the process is not left   running at the beginning of the next check. - The socket connection is closed when the file is received (or in case   of exception). This will close the client socket and will end the ""nc""   process in the remote VM. - Set a socket timeout. This timeout, specifically defined for each   iteration, depending on the expected bandwidth, will force a quick   timeout while receiving from the remote VM. The check will fail and it   will be tested again, if the ""FILE_DOWNLOAD_TIMEOUT"" didn't happen yet.  Change-Id: I5ce1a34f7d5d635002baa1e5b14c288e6d2bc43e Closes-Bug: #1838068",objective,,,,,,
,,,,,,,,,,
,,,,,,,,,,